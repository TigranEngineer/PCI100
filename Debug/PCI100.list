
PCI100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006700  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  080068e0  080068e0  000078e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b60  08006b60  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006b60  08006b60  00007b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b68  08006b68  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b68  08006b68  00007b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b6c  08006b6c  00007b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006b70  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  2000006c  08006bdc  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  08006bdc  000083d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014427  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b2  00000000  00000000  0001c4c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  0001f878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b16  00000000  00000000  00020700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253b5  00000000  00000000  00021216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001723b  00000000  00000000  000465cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbe40  00000000  00000000  0005d806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139646  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043b8  00000000  00000000  0013968c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0013da44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080068c8 	.word	0x080068c8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	080068c8 	.word	0x080068c8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <bsp_run>:
#include <errno.h>
#include "../cmd/cmd.h"
#include "../led/led.h"
#include "../dac/dac.h"

void bsp_run(bsp_t * const bsp) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	cli_process(bsp->engine);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f91b 	bl	8000828 <cli_process>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <make_bsp>:

uint8_t make_bsp(bsp_t * const bsp, struct cli_engine_s * const engine) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
	  bsp_cmd_add(bsp, "led", &exec_led);
 8000606:	4a0b      	ldr	r2, [pc, #44]	@ (8000634 <make_bsp+0x38>)
 8000608:	490b      	ldr	r1, [pc, #44]	@ (8000638 <make_bsp+0x3c>)
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 f81a 	bl	8000644 <bsp_cmd_add>
	  bsp_cmd_add(bsp, "dac", &exec_dac);
 8000610:	4a0a      	ldr	r2, [pc, #40]	@ (800063c <make_bsp+0x40>)
 8000612:	490b      	ldr	r1, [pc, #44]	@ (8000640 <make_bsp+0x44>)
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 f815 	bl	8000644 <bsp_cmd_add>

	  bsp->engine = engine;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	683a      	ldr	r2, [r7, #0]
 800061e:	601a      	str	r2, [r3, #0]
	  bsp->engine->bsp = bsp;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

	  return 0;
 800062a:	2300      	movs	r3, #0
}
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	08000b75 	.word	0x08000b75
 8000638:	080068e0 	.word	0x080068e0
 800063c:	08000b5d 	.word	0x08000b5d
 8000640:	080068e4 	.word	0x080068e4

08000644 <bsp_cmd_add>:

uint8_t bsp_cmd_add(bsp_t * const bsp, const char *name, exec_t exec) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
	if (!bsp || !name || !exec) {
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d005      	beq.n	8000662 <bsp_cmd_add+0x1e>
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d002      	beq.n	8000662 <bsp_cmd_add+0x1e>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d101      	bne.n	8000666 <bsp_cmd_add+0x22>
		return EINVAL;
 8000662:	2316      	movs	r3, #22
 8000664:	e03b      	b.n	80006de <bsp_cmd_add+0x9a>
	}

	if (bsp->cmds_length == BSP_MAX_CMDS || strlen(name) > TOKEN_MAX_LENGTH) {
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800066c:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 8000670:	2b80      	cmp	r3, #128	@ 0x80
 8000672:	d005      	beq.n	8000680 <bsp_cmd_add+0x3c>
 8000674:	68b8      	ldr	r0, [r7, #8]
 8000676:	f7ff fddd 	bl	8000234 <strlen>
 800067a:	4603      	mov	r3, r0
 800067c:	2b20      	cmp	r3, #32
 800067e:	d901      	bls.n	8000684 <bsp_cmd_add+0x40>
		return EINVAL;
 8000680:	2316      	movs	r3, #22
 8000682:	e02c      	b.n	80006de <bsp_cmd_add+0x9a>
	}

	strcpy(bsp->cmds[bsp->cmds_length].name, name);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800068a:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 800068e:	461a      	mov	r2, r3
 8000690:	4613      	mov	r3, r2
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	4413      	add	r3, r2
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	68fa      	ldr	r2, [r7, #12]
 800069a:	4413      	add	r3, r2
 800069c:	3304      	adds	r3, #4
 800069e:	68b9      	ldr	r1, [r7, #8]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f005 faea 	bl	8005c7a <strcpy>

	bsp->cmds[bsp->cmds_length].exec = exec;
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80006ac:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 80006b0:	4619      	mov	r1, r3
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	460b      	mov	r3, r1
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	440b      	add	r3, r1
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	4413      	add	r3, r2
 80006be:	3324      	adds	r3, #36	@ 0x24
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	601a      	str	r2, [r3, #0]

	bsp->cmds_length += 1;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80006ca:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 80006ce:	3301      	adds	r3, #1
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80006d8:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204

	return 0;
 80006dc:	2300      	movs	r3, #0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <bsp_cmd_get>:


exec_t bsp_cmd_get(bsp_t * const bsp, const char *name) {
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b084      	sub	sp, #16
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
 80006ee:	6039      	str	r1, [r7, #0]
	if (!bsp || !name) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d002      	beq.n	80006fc <bsp_cmd_get+0x16>
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d101      	bne.n	8000700 <bsp_cmd_get+0x1a>
		return NULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	e027      	b.n	8000750 <bsp_cmd_get+0x6a>
	}

	for (uint8_t i = 0; i < bsp->cmds_length; ++i) {
 8000700:	2300      	movs	r3, #0
 8000702:	73fb      	strb	r3, [r7, #15]
 8000704:	e01b      	b.n	800073e <bsp_cmd_get+0x58>
		if (!strcmp(bsp->cmds[i].name, name)) {
 8000706:	7bfa      	ldrb	r2, [r7, #15]
 8000708:	4613      	mov	r3, r2
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	4413      	add	r3, r2
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	4413      	add	r3, r2
 8000714:	3304      	adds	r3, #4
 8000716:	6839      	ldr	r1, [r7, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff fd81 	bl	8000220 <strcmp>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d109      	bne.n	8000738 <bsp_cmd_get+0x52>
			return bsp->cmds[i].exec;
 8000724:	7bfa      	ldrb	r2, [r7, #15]
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	4613      	mov	r3, r2
 800072a:	00db      	lsls	r3, r3, #3
 800072c:	4413      	add	r3, r2
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	440b      	add	r3, r1
 8000732:	3324      	adds	r3, #36	@ 0x24
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	e00b      	b.n	8000750 <bsp_cmd_get+0x6a>
	for (uint8_t i = 0; i < bsp->cmds_length; ++i) {
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	3301      	adds	r3, #1
 800073c:	73fb      	strb	r3, [r7, #15]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000744:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 8000748:	7bfa      	ldrb	r2, [r7, #15]
 800074a:	429a      	cmp	r2, r3
 800074c:	d3db      	bcc.n	8000706 <bsp_cmd_get+0x20>
		}
	}

	return NULL;
 800074e:	2300      	movs	r3, #0
}
 8000750:	4618      	mov	r0, r3
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <make_cli_engine>:
//
#include "cli.h"
#include <string.h>
#include <ctype.h>

void make_cli_engine(cli_engine_t *engine, UART_HandleTypeDef *huartx) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
	engine ->huartx = huartx;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	683a      	ldr	r2, [r7, #0]
 8000766:	605a      	str	r2, [r3, #4]
	engine->prompt_trigger = 1;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2201      	movs	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]
	engine->pos = 0;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
	engine->bsp = NULL;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2200      	movs	r2, #0
 8000778:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
	memset(engine->buf, 0, ENGINE_BUFFER_SIZE);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	330c      	adds	r3, #12
 8000780:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f005 f993 	bl	8005ab2 <memset>

	for (uint16_t i = 0; i < UINT8_MAX; ++i) {
 800078c:	2300      	movs	r3, #0
 800078e:	81fb      	strh	r3, [r7, #14]
 8000790:	e037      	b.n	8000802 <make_cli_engine+0xaa>
		if (isalnum(i) || i == ' ') {
 8000792:	89fb      	ldrh	r3, [r7, #14]
 8000794:	3301      	adds	r3, #1
 8000796:	4a1f      	ldr	r2, [pc, #124]	@ (8000814 <make_cli_engine+0xbc>)
 8000798:	4413      	add	r3, r2
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	f003 0307 	and.w	r3, r3, #7
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d102      	bne.n	80007aa <make_cli_engine+0x52>
 80007a4:	89fb      	ldrh	r3, [r7, #14]
 80007a6:	2b20      	cmp	r3, #32
 80007a8:	d108      	bne.n	80007bc <make_cli_engine+0x64>
			engine->handlers[i] = &handle_alnum;
 80007aa:	89fb      	ldrh	r3, [r7, #14]
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	4413      	add	r3, r2
 80007b6:	4a18      	ldr	r2, [pc, #96]	@ (8000818 <make_cli_engine+0xc0>)
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	e01f      	b.n	80007fc <make_cli_engine+0xa4>
		} else if (i == '\r') {
 80007bc:	89fb      	ldrh	r3, [r7, #14]
 80007be:	2b0d      	cmp	r3, #13
 80007c0:	d108      	bne.n	80007d4 <make_cli_engine+0x7c>
			engine->handlers[i] = &handle_nl;
 80007c2:	89fb      	ldrh	r3, [r7, #14]
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	4413      	add	r3, r2
 80007ce:	4a13      	ldr	r2, [pc, #76]	@ (800081c <make_cli_engine+0xc4>)
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	e013      	b.n	80007fc <make_cli_engine+0xa4>
		} else if (i == '\b') {
 80007d4:	89fb      	ldrh	r3, [r7, #14]
 80007d6:	2b08      	cmp	r3, #8
 80007d8:	d108      	bne.n	80007ec <make_cli_engine+0x94>
			engine->handlers[i] = &handle_bs;
 80007da:	89fb      	ldrh	r3, [r7, #14]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4413      	add	r3, r2
 80007e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000820 <make_cli_engine+0xc8>)
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	e007      	b.n	80007fc <make_cli_engine+0xa4>
		} else {
			engine->handlers[i] = &handle_no_op;
 80007ec:	89fb      	ldrh	r3, [r7, #14]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	4413      	add	r3, r2
 80007f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000824 <make_cli_engine+0xcc>)
 80007fa:	605a      	str	r2, [r3, #4]
	for (uint16_t i = 0; i < UINT8_MAX; ++i) {
 80007fc:	89fb      	ldrh	r3, [r7, #14]
 80007fe:	3301      	adds	r3, #1
 8000800:	81fb      	strh	r3, [r7, #14]
 8000802:	89fb      	ldrh	r3, [r7, #14]
 8000804:	2bfe      	cmp	r3, #254	@ 0xfe
 8000806:	d9c4      	bls.n	8000792 <make_cli_engine+0x3a>
		}
	}
}
 8000808:	bf00      	nop
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	0800697c 	.word	0x0800697c
 8000818:	08000a77 	.word	0x08000a77
 800081c:	080008fd 	.word	0x080008fd
 8000820:	08000a01 	.word	0x08000a01
 8000824:	08000a61 	.word	0x08000a61

08000828 <cli_process>:

void cli_process(cli_engine_t *engine) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]

  if (engine->prompt_trigger) {
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d008      	beq.n	800084a <cli_process+0x22>
	  engine->prompt_trigger = 0;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
	  cli_puts(engine->huartx, PROMPT);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	4913      	ldr	r1, [pc, #76]	@ (8000890 <cli_process+0x68>)
 8000844:	4618      	mov	r0, r3
 8000846:	f000 f835 	bl	80008b4 <cli_puts>
  }

  if (HAL_OK == HAL_UART_Receive(engine->huartx, engine->buf + engine->pos, 1, UART_RECEIVE_TIMEOUT)) {
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6858      	ldr	r0, [r3, #4]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f103 020c 	add.w	r2, r3, #12
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	18d1      	adds	r1, r2, r3
 800085a:	2364      	movs	r3, #100	@ 0x64
 800085c:	2201      	movs	r2, #1
 800085e:	f004 fb2c 	bl	8004eba <HAL_UART_Receive>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d10e      	bne.n	8000886 <cli_process+0x5e>
	  const uint8_t key = engine->buf[engine->pos];
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	4413      	add	r3, r2
 8000870:	7b1b      	ldrb	r3, [r3, #12]
 8000872:	73fb      	strb	r3, [r7, #15]

	  // handling each key
	  engine->handlers[key](engine);
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	4413      	add	r3, r2
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	4798      	blx	r3
  }
}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	080068e8 	.word	0x080068e8

08000894 <cli_writeline>:

void cli_writeline(UART_HandleTypeDef *huartx, const char *s) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  cli_puts(huartx, s);
 800089e:	6839      	ldr	r1, [r7, #0]
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f000 f807 	bl	80008b4 <cli_puts>
  cli_putnl(huartx);
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f000 f818 	bl	80008dc <cli_putnl>
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <cli_puts>:

void cli_puts(UART_HandleTypeDef *huartx, const char *s) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(huartx, (const uint8_t *)s, strlen(s), UART_TRANSMIT_TIMEOUT);
 80008be:	6838      	ldr	r0, [r7, #0]
 80008c0:	f7ff fcb8 	bl	8000234 <strlen>
 80008c4:	4603      	mov	r3, r0
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	2364      	movs	r3, #100	@ 0x64
 80008ca:	6839      	ldr	r1, [r7, #0]
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f004 fa6b 	bl	8004da8 <HAL_UART_Transmit>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <cli_putnl>:

void cli_putnl(UART_HandleTypeDef *huartx) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(huartx, (const uint8_t *)"\r\n", 2, UART_TRANSMIT_TIMEOUT);
 80008e4:	2364      	movs	r3, #100	@ 0x64
 80008e6:	2202      	movs	r2, #2
 80008e8:	4903      	ldr	r1, [pc, #12]	@ (80008f8 <cli_putnl+0x1c>)
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f004 fa5c 	bl	8004da8 <HAL_UART_Transmit>
}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	080068f4 	.word	0x080068f4

080008fc <handle_nl>:
#include <string.h>
#include "../cmd/cmd.h"
#include "../lexer/lexer.h"
#include "../utils/utils.h"

uint8_t handle_nl(cli_engine_t * const engine) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8000902:	af00      	add	r7, sp, #0
 8000904:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000908:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800090c:	6018      	str	r0, [r3, #0]
	 engine->buf[engine->pos] = '\0';
 800090e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000912:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800091e:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 8000922:	6812      	ldr	r2, [r2, #0]
 8000924:	4413      	add	r3, r2
 8000926:	2200      	movs	r2, #0
 8000928:	731a      	strb	r2, [r3, #12]
	 cli_putnl(engine->huartx);
 800092a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800092e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff ffd0 	bl	80008dc <cli_putnl>

	 char * const input = (char *)engine->buf;
 800093c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000940:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	330c      	adds	r3, #12
 8000948:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	 strtrim(input, WHITESPACE);
 800094c:	492a      	ldr	r1, [pc, #168]	@ (80009f8 <handle_nl+0xfc>)
 800094e:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8000952:	f001 f825 	bl	80019a0 <strtrim>

	 if (strlen(input) != 0) {
 8000956:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d02a      	beq.n	80009b6 <handle_nl+0xba>
		 cmd_t cmd;
		 if (ESRCH == make_cmd(&cmd, engine->bsp, (char *)engine->buf)) {
 8000960:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000964:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f8d3 1808 	ldr.w	r1, [r3, #2056]	@ 0x808
 800096e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000972:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f103 020c 	add.w	r2, r3, #12
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	4618      	mov	r0, r3
 8000982:	f000 f8bf 	bl	8000b04 <make_cmd>
 8000986:	4603      	mov	r3, r0
 8000988:	2b03      	cmp	r3, #3
 800098a:	d10a      	bne.n	80009a2 <handle_nl+0xa6>
			 cli_writeline(engine->huartx, "error: command not found");
 800098c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000990:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	4918      	ldr	r1, [pc, #96]	@ (80009fc <handle_nl+0x100>)
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff7a 	bl	8000894 <cli_writeline>
 80009a0:	e009      	b.n	80009b6 <handle_nl+0xba>
		 } else {
			 cmd.exec(&cmd);
 80009a2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80009a6:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80009aa:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80009ae:	f107 020c 	add.w	r2, r7, #12
 80009b2:	4610      	mov	r0, r2
 80009b4:	4798      	blx	r3
		 }
	 }

	 memset(engine->buf, 0, ENGINE_BUFFER_SIZE);
 80009b6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80009ba:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	330c      	adds	r3, #12
 80009c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f005 f872 	bl	8005ab2 <memset>
	 engine->pos = 0;
 80009ce:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80009d2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
	 engine->prompt_trigger = 1;
 80009dc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80009e0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2201      	movs	r2, #1
 80009e8:	701a      	strb	r2, [r3, #0]

	 return 0;
 80009ea:	2300      	movs	r3, #0
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	080068f8 	.word	0x080068f8
 80009fc:	08006900 	.word	0x08006900

08000a00 <handle_bs>:

uint8_t handle_bs(cli_engine_t * const engine) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	if (0 == engine->pos) {
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d101      	bne.n	8000a14 <handle_bs+0x14>
		return EAGAIN;
 8000a10:	230b      	movs	r3, #11
 8000a12:	e01d      	b.n	8000a50 <handle_bs+0x50>
	}
	engine->buf[engine->pos] = '\0';
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	731a      	strb	r2, [r3, #12]
	engine->pos -= 1;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	1e5a      	subs	r2, r3, #1
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	609a      	str	r2, [r3, #8]
	cli_writeline(engine->huartx, "\b");
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	490a      	ldr	r1, [pc, #40]	@ (8000a58 <handle_bs+0x58>)
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff2f 	bl	8000894 <cli_writeline>
	cli_writeline(engine->huartx, " ");
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	4908      	ldr	r1, [pc, #32]	@ (8000a5c <handle_bs+0x5c>)
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff29 	bl	8000894 <cli_writeline>
	cli_writeline(engine->huartx, "\b");
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	4904      	ldr	r1, [pc, #16]	@ (8000a58 <handle_bs+0x58>)
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff23 	bl	8000894 <cli_writeline>

	return 0;
 8000a4e:	2300      	movs	r3, #0
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	0800691c 	.word	0x0800691c
 8000a5c:	08006920 	.word	0x08006920

08000a60 <handle_no_op>:

uint8_t handle_no_op(cli_engine_t * const engine) {
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	return 0;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <handle_alnum>:

uint8_t handle_alnum(cli_engine_t * const engine) {
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
	if (engine->pos == ENGINE_BUFFER_SIZE - 1) {
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d10c      	bne.n	8000aa4 <handle_alnum+0x2e>
		 memset(engine->buf, 0, ENGINE_BUFFER_SIZE);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	330c      	adds	r3, #12
 8000a8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f005 f80c 	bl	8005ab2 <memset>
		 engine->pos = 0;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
		 return EAGAIN;
 8000aa0:	230b      	movs	r3, #11
 8000aa2:	e011      	b.n	8000ac8 <handle_alnum+0x52>
	}

	HAL_UART_Transmit(engine->huartx, engine->buf + engine->pos, 1, UART_TRANSMIT_TIMEOUT);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6858      	ldr	r0, [r3, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f103 020c 	add.w	r2, r3, #12
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	18d1      	adds	r1, r2, r3
 8000ab4:	2364      	movs	r3, #100	@ 0x64
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	f004 f976 	bl	8004da8 <HAL_UART_Transmit>
	engine->pos += 1;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	1c5a      	adds	r2, r3, #1
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	609a      	str	r2, [r3, #8]

	return 0;
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <bind_exec>:
#include "../led/led.h"
#include "../lexer/lexer.h"
#include <string.h>
#include <errno.h>

static uint8_t bind_exec(cmd_t * const cmd) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]

	exec_t e = bsp_cmd_get(cmd->bsp, cmd->name);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6a1b      	ldr	r3, [r3, #32]
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fe00 	bl	80006e6 <bsp_cmd_get>
 8000ae6:	60f8      	str	r0, [r7, #12]

	if (NULL == e) {
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d101      	bne.n	8000af2 <bind_exec+0x22>
		return ESRCH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	e004      	b.n	8000afc <bind_exec+0x2c>
	}

	cmd->exec = e;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

	return 0;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <make_cmd>:

/*
 * cmd - pointer to already allocated command structure
 * input - user input string
 * */
uint8_t make_cmd(cmd_t * const cmd, bsp_t * const bsp, char *input) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
	if (!cmd || !input) {
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d002      	beq.n	8000b1c <make_cmd+0x18>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d101      	bne.n	8000b20 <make_cmd+0x1c>
		return EINVAL;
 8000b1c:	2316      	movs	r3, #22
 8000b1e:	e019      	b.n	8000b54 <make_cmd+0x50>
	}

	memset(cmd, 0, sizeof(cmd_t));
 8000b20:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8000b24:	2100      	movs	r1, #0
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f004 ffc3 	bl	8005ab2 <memset>

	cmd->bsp = bsp;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	621a      	str	r2, [r3, #32]

	const uint8_t parse_status = parse(cmd, input);
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	f000 f8f1 	bl	8000d1c <parse>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	75fb      	strb	r3, [r7, #23]

	if (parse_status) {
 8000b3e:	7dfb      	ldrb	r3, [r7, #23]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <make_cmd+0x44>
		return parse_status;
 8000b44:	7dfb      	ldrb	r3, [r7, #23]
 8000b46:	e005      	b.n	8000b54 <make_cmd+0x50>
	}

	const uint8_t bind_exec_status = bind_exec(cmd);
 8000b48:	68f8      	ldr	r0, [r7, #12]
 8000b4a:	f7ff ffc1 	bl	8000ad0 <bind_exec>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	75bb      	strb	r3, [r7, #22]

	return bind_exec_status;
 8000b52:	7dbb      	ldrb	r3, [r7, #22]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <exec_dac>:
#include <string.h>

extern UART_HandleTypeDef huart1;
extern DAC_HandleTypeDef hdac;

uint8_t exec_dac(cmd_t * const cmd) {
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	return 0;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
	...

08000b74 <exec_led>:

static uint32_t start = 0;



uint8_t exec_led(cmd_t * const cmd) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	cli_writeline(&huart1, "called led logic");
 8000b7c:	4904      	ldr	r1, [pc, #16]	@ (8000b90 <exec_led+0x1c>)
 8000b7e:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <exec_led+0x20>)
 8000b80:	f7ff fe88 	bl	8000894 <cli_writeline>
	return 0;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	08006924 	.word	0x08006924
 8000b94:	200001fc 	.word	0x200001fc

08000b98 <set_led_config>:
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
    start = HAL_GetTick();
  }
}

void set_led_config(void) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
  uint8_t input = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	71fb      	strb	r3, [r7, #7]

  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	4858      	ldr	r0, [pc, #352]	@ (8000d08 <set_led_config+0x170>)
 8000ba6:	f002 f97b 	bl	8002ea0 <HAL_GPIO_ReadPin>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	bf0c      	ite	eq
 8000bb0:	2301      	moveq	r3, #1
 8000bb2:	2300      	movne	r3, #0
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	b25a      	sxtb	r2, r3
 8000bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	b25b      	sxtb	r3, r3
 8000bc0:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) << 1;
 8000bc2:	2102      	movs	r1, #2
 8000bc4:	4850      	ldr	r0, [pc, #320]	@ (8000d08 <set_led_config+0x170>)
 8000bc6:	f002 f96b 	bl	8002ea0 <HAL_GPIO_ReadPin>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d101      	bne.n	8000bd4 <set_led_config+0x3c>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	e000      	b.n	8000bd6 <set_led_config+0x3e>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	b25a      	sxtb	r2, r3
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	b25b      	sxtb	r3, r3
 8000be0:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) << 2;
 8000be2:	2104      	movs	r1, #4
 8000be4:	4848      	ldr	r0, [pc, #288]	@ (8000d08 <set_led_config+0x170>)
 8000be6:	f002 f95b 	bl	8002ea0 <HAL_GPIO_ReadPin>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d101      	bne.n	8000bf4 <set_led_config+0x5c>
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	e000      	b.n	8000bf6 <set_led_config+0x5e>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	b25a      	sxtb	r2, r3
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	b25b      	sxtb	r3, r3
 8000c00:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) << 3;
 8000c02:	2108      	movs	r1, #8
 8000c04:	4840      	ldr	r0, [pc, #256]	@ (8000d08 <set_led_config+0x170>)
 8000c06:	f002 f94b 	bl	8002ea0 <HAL_GPIO_ReadPin>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d101      	bne.n	8000c14 <set_led_config+0x7c>
 8000c10:	2308      	movs	r3, #8
 8000c12:	e000      	b.n	8000c16 <set_led_config+0x7e>
 8000c14:	2300      	movs	r3, #0
 8000c16:	b25a      	sxtb	r2, r3
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	b25b      	sxtb	r3, r3
 8000c20:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) << 4;
 8000c22:	2110      	movs	r1, #16
 8000c24:	4838      	ldr	r0, [pc, #224]	@ (8000d08 <set_led_config+0x170>)
 8000c26:	f002 f93b 	bl	8002ea0 <HAL_GPIO_ReadPin>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d101      	bne.n	8000c34 <set_led_config+0x9c>
 8000c30:	2310      	movs	r3, #16
 8000c32:	e000      	b.n	8000c36 <set_led_config+0x9e>
 8000c34:	2300      	movs	r3, #0
 8000c36:	b25a      	sxtb	r2, r3
 8000c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	b25b      	sxtb	r3, r3
 8000c40:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) << 5;
 8000c42:	2120      	movs	r1, #32
 8000c44:	4830      	ldr	r0, [pc, #192]	@ (8000d08 <set_led_config+0x170>)
 8000c46:	f002 f92b 	bl	8002ea0 <HAL_GPIO_ReadPin>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d101      	bne.n	8000c54 <set_led_config+0xbc>
 8000c50:	2320      	movs	r3, #32
 8000c52:	e000      	b.n	8000c56 <set_led_config+0xbe>
 8000c54:	2300      	movs	r3, #0
 8000c56:	b25a      	sxtb	r2, r3
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	b25b      	sxtb	r3, r3
 8000c60:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) << 6;
 8000c62:	2140      	movs	r1, #64	@ 0x40
 8000c64:	4828      	ldr	r0, [pc, #160]	@ (8000d08 <set_led_config+0x170>)
 8000c66:	f002 f91b 	bl	8002ea0 <HAL_GPIO_ReadPin>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d101      	bne.n	8000c74 <set_led_config+0xdc>
 8000c70:	2340      	movs	r3, #64	@ 0x40
 8000c72:	e000      	b.n	8000c76 <set_led_config+0xde>
 8000c74:	2300      	movs	r3, #0
 8000c76:	b25a      	sxtb	r2, r3
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	b25b      	sxtb	r3, r3
 8000c80:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) << 7;
 8000c82:	2180      	movs	r1, #128	@ 0x80
 8000c84:	4820      	ldr	r0, [pc, #128]	@ (8000d08 <set_led_config+0x170>)
 8000c86:	f002 f90b 	bl	8002ea0 <HAL_GPIO_ReadPin>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d101      	bne.n	8000c94 <set_led_config+0xfc>
 8000c90:	2380      	movs	r3, #128	@ 0x80
 8000c92:	e000      	b.n	8000c96 <set_led_config+0xfe>
 8000c94:	2300      	movs	r3, #0
 8000c96:	b25a      	sxtb	r2, r3
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	71fb      	strb	r3, [r7, #7]
    BLINK_50,
    BLINK_100,
    BLINK_1000,
  };

  switch (input) {
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b08      	cmp	r3, #8
 8000ca6:	dc2b      	bgt.n	8000d00 <set_led_config+0x168>
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	da1e      	bge.n	8000cea <set_led_config+0x152>
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d002      	beq.n	8000cb6 <set_led_config+0x11e>
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d00d      	beq.n	8000cd0 <set_led_config+0x138>
    break;
  case 2 ... 8:
    BLINK_MODE = BLINK_ON;
    BLINK_FREQ = fmap[input];
  }
}
 8000cb4:	e024      	b.n	8000d00 <set_led_config+0x168>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cbc:	4813      	ldr	r0, [pc, #76]	@ (8000d0c <set_led_config+0x174>)
 8000cbe:	f002 f907 	bl	8002ed0 <HAL_GPIO_WritePin>
    BLINK_FREQ = 0;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	@ (8000d10 <set_led_config+0x178>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
    BLINK_MODE = BLINK_OFF;
 8000cc8:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <set_led_config+0x17c>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
    break;
 8000cce:	e017      	b.n	8000d00 <set_led_config+0x168>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cd6:	480d      	ldr	r0, [pc, #52]	@ (8000d0c <set_led_config+0x174>)
 8000cd8:	f002 f8fa 	bl	8002ed0 <HAL_GPIO_WritePin>
    BLINK_FREQ = 1;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <set_led_config+0x178>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	601a      	str	r2, [r3, #0]
    BLINK_MODE = BLINK_ON;
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <set_led_config+0x17c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
    break;
 8000ce8:	e00a      	b.n	8000d00 <set_led_config+0x168>
    BLINK_MODE = BLINK_ON;
 8000cea:	4b0a      	ldr	r3, [pc, #40]	@ (8000d14 <set_led_config+0x17c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
    BLINK_FREQ = fmap[input];
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	4a09      	ldr	r2, [pc, #36]	@ (8000d18 <set_led_config+0x180>)
 8000cf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <set_led_config+0x178>)
 8000cfc:	601a      	str	r2, [r3, #0]
}
 8000cfe:	e7ff      	b.n	8000d00 <set_led_config+0x168>
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40020000 	.word	0x40020000
 8000d0c:	40020400 	.word	0x40020400
 8000d10:	20000088 	.word	0x20000088
 8000d14:	20000000 	.word	0x20000000
 8000d18:	08006948 	.word	0x08006948

08000d1c <parse>:
#include <errno.h>
#include <string.h>
#include "../cmd/cmd.h"


uint8_t parse(cmd_t * const cmd, char *input) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000d28:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000d2c:	6018      	str	r0, [r3, #0]
 8000d2e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000d32:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8000d36:	6019      	str	r1, [r3, #0]
	if (!cmd || !input) {
 8000d38:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000d3c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d006      	beq.n	8000d54 <parse+0x38>
 8000d46:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000d4a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d101      	bne.n	8000d58 <parse+0x3c>
		return EINVAL;
 8000d54:	2316      	movs	r3, #22
 8000d56:	e050      	b.n	8000dfa <parse+0xde>
	}

	char tokens[TOKEN_MAX_COUNT][TOKEN_MAX_LENGTH];
	memset(tokens, 0, TOKEN_MAX_COUNT * TOKEN_MAX_LENGTH);
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f004 fea5 	bl	8005ab2 <memset>

	const uint8_t s = tokenize(tokens, input);
 8000d68:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000d6c:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8000d70:	f107 020c 	add.w	r2, r7, #12
 8000d74:	6819      	ldr	r1, [r3, #0]
 8000d76:	4610      	mov	r0, r2
 8000d78:	f000 f844 	bl	8000e04 <tokenize>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e

	if (s) {
 8000d82:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d002      	beq.n	8000d90 <parse+0x74>
		return s;
 8000d8a:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8000d8e:	e034      	b.n	8000dfa <parse+0xde>
	}

	strcpy(cmd->name, tokens[0]);
 8000d90:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000d94:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f107 020c 	add.w	r2, r7, #12
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4618      	mov	r0, r3
 8000da2:	f004 ff6a 	bl	8005c7a <strcpy>

	for (uint8_t i = 1; tokens[i][0] != '\0'; ++i) {
 8000da6:	2301      	movs	r3, #1
 8000da8:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8000dac:	e019      	b.n	8000de2 <parse+0xc6>
		strcpy(cmd->args[i - 1], tokens[i]);
 8000dae:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8000db2:	3b01      	subs	r3, #1
 8000db4:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8000db8:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	015b      	lsls	r3, r3, #5
 8000dc0:	6812      	ldr	r2, [r2, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	1d18      	adds	r0, r3, #4
 8000dc6:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8000dca:	f107 020c 	add.w	r2, r7, #12
 8000dce:	015b      	lsls	r3, r3, #5
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f004 ff51 	bl	8005c7a <strcpy>
	for (uint8_t i = 1; tokens[i][0] != '\0'; ++i) {
 8000dd8:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8000ddc:	3301      	adds	r3, #1
 8000dde:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8000de2:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8000de6:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8000dea:	f5a2 7201 	sub.w	r2, r2, #516	@ 0x204
 8000dee:	015b      	lsls	r3, r3, #5
 8000df0:	4413      	add	r3, r2
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1da      	bne.n	8000dae <parse+0x92>
	}

	return 0;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <tokenize>:


uint8_t tokenize(char tokens[TOKEN_MAX_COUNT][TOKEN_MAX_LENGTH], char *input) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
	if (!tokens || !input) {
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d002      	beq.n	8000e1a <tokenize+0x16>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <tokenize+0x1a>
		return EINVAL;
 8000e1a:	2316      	movs	r3, #22
 8000e1c:	e031      	b.n	8000e82 <tokenize+0x7e>
	}

	char *t = NULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
	uint8_t i = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	73fb      	strb	r3, [r7, #15]
	t = strtok(input, WHITESPACE);
 8000e26:	4919      	ldr	r1, [pc, #100]	@ (8000e8c <tokenize+0x88>)
 8000e28:	6838      	ldr	r0, [r7, #0]
 8000e2a:	f004 fe57 	bl	8005adc <strtok>
 8000e2e:	60b8      	str	r0, [r7, #8]
	if (t) {
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d014      	beq.n	8000e60 <tokenize+0x5c>
		strcpy(tokens[i++], t);
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	1c5a      	adds	r2, r3, #1
 8000e3a:	73fa      	strb	r2, [r7, #15]
 8000e3c:	015b      	lsls	r3, r3, #5
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	68b9      	ldr	r1, [r7, #8]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f004 ff18 	bl	8005c7a <strcpy>
	}
	// tokenizing the user input
	while((t = strtok(NULL, WHITESPACE)) != NULL && i < TOKEN_MAX_COUNT) {
 8000e4a:	e009      	b.n	8000e60 <tokenize+0x5c>
		strcpy(tokens[i++], t);
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	1c5a      	adds	r2, r3, #1
 8000e50:	73fa      	strb	r2, [r7, #15]
 8000e52:	015b      	lsls	r3, r3, #5
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	4413      	add	r3, r2
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f004 ff0d 	bl	8005c7a <strcpy>
	while((t = strtok(NULL, WHITESPACE)) != NULL && i < TOKEN_MAX_COUNT) {
 8000e60:	490a      	ldr	r1, [pc, #40]	@ (8000e8c <tokenize+0x88>)
 8000e62:	2000      	movs	r0, #0
 8000e64:	f004 fe3a 	bl	8005adc <strtok>
 8000e68:	60b8      	str	r0, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d002      	beq.n	8000e76 <tokenize+0x72>
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	2b0f      	cmp	r3, #15
 8000e74:	d9ea      	bls.n	8000e4c <tokenize+0x48>
	}

	if (i >= TOKEN_MAX_COUNT - 1) {
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	2b0e      	cmp	r3, #14
 8000e7a:	d901      	bls.n	8000e80 <tokenize+0x7c>
		return E2BIG;
 8000e7c:	2307      	movs	r3, #7
 8000e7e:	e000      	b.n	8000e82 <tokenize+0x7e>
	}

	return 0;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	08006940 	.word	0x08006940

08000e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	f5ad 5dd0 	sub.w	sp, sp, #6656	@ 0x1a00
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000e9a:	f000 fa49 	bl	8001330 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f000 fdfc 	bl	8001a9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 f837 	bl	8000f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f000 f9a3 	bl	80011f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eaa:	f000 f97b 	bl	80011a4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000eae:	f000 f909 	bl	80010c4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000eb2:	f000 f947 	bl	8001144 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000eb6:	f000 f889 	bl	8000fcc <MX_ADC1_Init>
  MX_DAC_Init();
 8000eba:	f000 f8d9 	bl	8001070 <MX_DAC_Init>
  /* USER CODE BEGIN WHILE */

  // uint8_t TX_Buffer = 5;
  // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4811      	ldr	r0, [pc, #68]	@ (8000f08 <main+0x78>)
 8000ec2:	f001 fa87 	bl	80023d4 <HAL_DAC_Start>
  set_led_config();
 8000ec6:	f7ff fe67 	bl	8000b98 <set_led_config>

  cli_engine_t engine;
  make_cli_engine(&engine, &huart1);
 8000eca:	f241 230c 	movw	r3, #4620	@ 0x120c
 8000ece:	443b      	add	r3, r7
 8000ed0:	490e      	ldr	r1, [pc, #56]	@ (8000f0c <main+0x7c>)
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fc40 	bl	8000758 <make_cli_engine>

  bsp_t bsp;

  make_bsp(&bsp, &engine);
 8000ed8:	f241 220c 	movw	r2, #4620	@ 0x120c
 8000edc:	443a      	add	r2, r7
 8000ede:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <main+0x80>)
 8000ee0:	f503 53d0 	add.w	r3, r3, #6656	@ 0x1a00
 8000ee4:	f103 0318 	add.w	r3, r3, #24
 8000ee8:	443b      	add	r3, r7
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fb85 	bl	80005fc <make_bsp>

  while (1)
  {

	  bsp_run(&bsp);
 8000ef2:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <main+0x80>)
 8000ef4:	f503 53d0 	add.w	r3, r3, #6656	@ 0x1a00
 8000ef8:	f103 0318 	add.w	r3, r3, #24
 8000efc:	443b      	add	r3, r7
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fb6e 	bl	80005e0 <bsp_run>
 8000f04:	e7f5      	b.n	8000ef2 <main+0x62>
 8000f06:	bf00      	nop
 8000f08:	200000d4 	.word	0x200000d4
 8000f0c:	200001fc 	.word	0x200001fc
 8000f10:	ffffe5ec 	.word	0xffffe5ec

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b094      	sub	sp, #80	@ 0x50
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	2230      	movs	r2, #48	@ 0x30
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f004 fdc5 	bl	8005ab2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f38:	4b22      	ldr	r3, [pc, #136]	@ (8000fc4 <SystemClock_Config+0xb0>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3c:	4a21      	ldr	r2, [pc, #132]	@ (8000fc4 <SystemClock_Config+0xb0>)
 8000f3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f44:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc4 <SystemClock_Config+0xb0>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f50:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc8 <SystemClock_Config+0xb4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f58:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc8 <SystemClock_Config+0xb4>)
 8000f5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4b19      	ldr	r3, [pc, #100]	@ (8000fc8 <SystemClock_Config+0xb4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f70:	2301      	movs	r3, #1
 8000f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f74:	2310      	movs	r3, #16
 8000f76:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7c:	f107 0320 	add.w	r3, r7, #32
 8000f80:	4618      	mov	r0, r3
 8000f82:	f002 feef 	bl	8003d64 <HAL_RCC_OscConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000f8c:	f000 f9fc 	bl	8001388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f90:	230f      	movs	r3, #15
 8000f92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f94:	2300      	movs	r3, #0
 8000f96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f003 f97e 	bl	80042ac <HAL_RCC_ClockConfig>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000fb6:	f000 f9e7 	bl	8001388 <Error_Handler>
  }
}
 8000fba:	bf00      	nop
 8000fbc:	3750      	adds	r7, #80	@ 0x50
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40007000 	.word	0x40007000

08000fcc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fde:	4b21      	ldr	r3, [pc, #132]	@ (8001064 <MX_ADC1_Init+0x98>)
 8000fe0:	4a21      	ldr	r2, [pc, #132]	@ (8001068 <MX_ADC1_Init+0x9c>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8001064 <MX_ADC1_Init+0x98>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fea:	4b1e      	ldr	r3, [pc, #120]	@ (8001064 <MX_ADC1_Init+0x98>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8001064 <MX_ADC1_Init+0x98>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8001064 <MX_ADC1_Init+0x98>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffc:	4b19      	ldr	r3, [pc, #100]	@ (8001064 <MX_ADC1_Init+0x98>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001004:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <MX_ADC1_Init+0x98>)
 8001006:	2200      	movs	r2, #0
 8001008:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800100a:	4b16      	ldr	r3, [pc, #88]	@ (8001064 <MX_ADC1_Init+0x98>)
 800100c:	4a17      	ldr	r2, [pc, #92]	@ (800106c <MX_ADC1_Init+0xa0>)
 800100e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001010:	4b14      	ldr	r3, [pc, #80]	@ (8001064 <MX_ADC1_Init+0x98>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001016:	4b13      	ldr	r3, [pc, #76]	@ (8001064 <MX_ADC1_Init+0x98>)
 8001018:	2201      	movs	r2, #1
 800101a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800101c:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <MX_ADC1_Init+0x98>)
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001024:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <MX_ADC1_Init+0x98>)
 8001026:	2201      	movs	r2, #1
 8001028:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800102a:	480e      	ldr	r0, [pc, #56]	@ (8001064 <MX_ADC1_Init+0x98>)
 800102c:	f000 fd92 	bl	8001b54 <HAL_ADC_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001036:	f000 f9a7 	bl	8001388 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800103a:	230a      	movs	r3, #10
 800103c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800103e:	2301      	movs	r3, #1
 8001040:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001046:	463b      	mov	r3, r7
 8001048:	4619      	mov	r1, r3
 800104a:	4806      	ldr	r0, [pc, #24]	@ (8001064 <MX_ADC1_Init+0x98>)
 800104c:	f000 fdc6 	bl	8001bdc <HAL_ADC_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001056:	f000 f997 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000008c 	.word	0x2000008c
 8001068:	40012000 	.word	0x40012000
 800106c:	0f000001 	.word	0x0f000001

08001070 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001076:	463b      	mov	r3, r7
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800107e:	4b0f      	ldr	r3, [pc, #60]	@ (80010bc <MX_DAC_Init+0x4c>)
 8001080:	4a0f      	ldr	r2, [pc, #60]	@ (80010c0 <MX_DAC_Init+0x50>)
 8001082:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001084:	480d      	ldr	r0, [pc, #52]	@ (80010bc <MX_DAC_Init+0x4c>)
 8001086:	f001 f983 	bl	8002390 <HAL_DAC_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001090:	f000 f97a 	bl	8001388 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001094:	2300      	movs	r3, #0
 8001096:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800109c:	463b      	mov	r3, r7
 800109e:	2200      	movs	r2, #0
 80010a0:	4619      	mov	r1, r3
 80010a2:	4806      	ldr	r0, [pc, #24]	@ (80010bc <MX_DAC_Init+0x4c>)
 80010a4:	f001 f9ed 	bl	8002482 <HAL_DAC_ConfigChannel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80010ae:	f000 f96b 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200000d4 	.word	0x200000d4
 80010c0:	40007400 	.word	0x40007400

080010c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001138 <MX_I2C1_Init+0x74>)
 80010ca:	4a1c      	ldr	r2, [pc, #112]	@ (800113c <MX_I2C1_Init+0x78>)
 80010cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80010ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001138 <MX_I2C1_Init+0x74>)
 80010d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001140 <MX_I2C1_Init+0x7c>)
 80010d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010d4:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <MX_I2C1_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010da:	4b17      	ldr	r3, [pc, #92]	@ (8001138 <MX_I2C1_Init+0x74>)
 80010dc:	2201      	movs	r2, #1
 80010de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e0:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <MX_I2C1_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010e6:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <MX_I2C1_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <MX_I2C1_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f2:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <MX_I2C1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001138 <MX_I2C1_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010fe:	480e      	ldr	r0, [pc, #56]	@ (8001138 <MX_I2C1_Init+0x74>)
 8001100:	f001 ff00 	bl	8002f04 <HAL_I2C_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800110a:	f000 f93d 	bl	8001388 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800110e:	2100      	movs	r1, #0
 8001110:	4809      	ldr	r0, [pc, #36]	@ (8001138 <MX_I2C1_Init+0x74>)
 8001112:	f002 fd90 	bl	8003c36 <HAL_I2CEx_ConfigAnalogFilter>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800111c:	f000 f934 	bl	8001388 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001120:	2100      	movs	r1, #0
 8001122:	4805      	ldr	r0, [pc, #20]	@ (8001138 <MX_I2C1_Init+0x74>)
 8001124:	f002 fdd2 	bl	8003ccc <HAL_I2CEx_ConfigDigitalFilter>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800112e:	f000 f92b 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200000e8 	.word	0x200000e8
 800113c:	40005400 	.word	0x40005400
 8001140:	00303d5b 	.word	0x00303d5b

08001144 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001148:	4b14      	ldr	r3, [pc, #80]	@ (800119c <MX_USART1_UART_Init+0x58>)
 800114a:	4a15      	ldr	r2, [pc, #84]	@ (80011a0 <MX_USART1_UART_Init+0x5c>)
 800114c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800114e:	4b13      	ldr	r3, [pc, #76]	@ (800119c <MX_USART1_UART_Init+0x58>)
 8001150:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001154:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <MX_USART1_UART_Init+0x58>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800115c:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <MX_USART1_UART_Init+0x58>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001162:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <MX_USART1_UART_Init+0x58>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001168:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <MX_USART1_UART_Init+0x58>)
 800116a:	220c      	movs	r2, #12
 800116c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116e:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <MX_USART1_UART_Init+0x58>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001174:	4b09      	ldr	r3, [pc, #36]	@ (800119c <MX_USART1_UART_Init+0x58>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800117a:	4b08      	ldr	r3, [pc, #32]	@ (800119c <MX_USART1_UART_Init+0x58>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001180:	4b06      	ldr	r3, [pc, #24]	@ (800119c <MX_USART1_UART_Init+0x58>)
 8001182:	2200      	movs	r2, #0
 8001184:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001186:	4805      	ldr	r0, [pc, #20]	@ (800119c <MX_USART1_UART_Init+0x58>)
 8001188:	f003 fdc0 	bl	8004d0c <HAL_UART_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001192:	f000 f8f9 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200001fc 	.word	0x200001fc
 80011a0:	40011000 	.word	0x40011000

080011a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011aa:	4b10      	ldr	r3, [pc, #64]	@ (80011ec <MX_DMA_Init+0x48>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	4a0f      	ldr	r2, [pc, #60]	@ (80011ec <MX_DMA_Init+0x48>)
 80011b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b6:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <MX_DMA_Init+0x48>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	200b      	movs	r0, #11
 80011c8:	f001 f833 	bl	8002232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011cc:	200b      	movs	r0, #11
 80011ce:	f001 f84c 	bl	800226a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	2011      	movs	r0, #17
 80011d8:	f001 f82b 	bl	8002232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80011dc:	2011      	movs	r0, #17
 80011de:	f001 f844 	bl	800226a <HAL_NVIC_EnableIRQ>

}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	@ 0x28
 80011f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001206:	4b46      	ldr	r3, [pc, #280]	@ (8001320 <MX_GPIO_Init+0x130>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a45      	ldr	r2, [pc, #276]	@ (8001320 <MX_GPIO_Init+0x130>)
 800120c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b43      	ldr	r3, [pc, #268]	@ (8001320 <MX_GPIO_Init+0x130>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	4b40      	ldr	r3, [pc, #256]	@ (8001320 <MX_GPIO_Init+0x130>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a3f      	ldr	r2, [pc, #252]	@ (8001320 <MX_GPIO_Init+0x130>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b3d      	ldr	r3, [pc, #244]	@ (8001320 <MX_GPIO_Init+0x130>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	4b3a      	ldr	r3, [pc, #232]	@ (8001320 <MX_GPIO_Init+0x130>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a39      	ldr	r2, [pc, #228]	@ (8001320 <MX_GPIO_Init+0x130>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b37      	ldr	r3, [pc, #220]	@ (8001320 <MX_GPIO_Init+0x130>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	4b34      	ldr	r3, [pc, #208]	@ (8001320 <MX_GPIO_Init+0x130>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a33      	ldr	r2, [pc, #204]	@ (8001320 <MX_GPIO_Init+0x130>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b31      	ldr	r3, [pc, #196]	@ (8001320 <MX_GPIO_Init+0x130>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	2104      	movs	r1, #4
 800126a:	482e      	ldr	r0, [pc, #184]	@ (8001324 <MX_GPIO_Init+0x134>)
 800126c:	f001 fe30 	bl	8002ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_ACT_LED_GPIO_Port, MCU_ACT_LED_Pin, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001276:	482c      	ldr	r0, [pc, #176]	@ (8001328 <MX_GPIO_Init+0x138>)
 8001278:	f001 fe2a 	bl	8002ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800127c:	2304      	movs	r3, #4
 800127e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001280:	2301      	movs	r3, #1
 8001282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001284:	2301      	movs	r3, #1
 8001286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	4824      	ldr	r0, [pc, #144]	@ (8001324 <MX_GPIO_Init+0x134>)
 8001294:	f001 fc68 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001298:	2308      	movs	r3, #8
 800129a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	481e      	ldr	r0, [pc, #120]	@ (8001324 <MX_GPIO_Init+0x134>)
 80012ac:	f001 fc5c 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 80012b0:	23ee      	movs	r3, #238	@ 0xee
 80012b2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	481a      	ldr	r0, [pc, #104]	@ (800132c <MX_GPIO_Init+0x13c>)
 80012c4:	f001 fc50 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACT_LED_Pin */
  GPIO_InitStruct.Pin = MCU_ACT_LED_Pin;
 80012c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ce:	2301      	movs	r3, #1
 80012d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d2:	2301      	movs	r3, #1
 80012d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_ACT_LED_GPIO_Port, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	4811      	ldr	r0, [pc, #68]	@ (8001328 <MX_GPIO_Init+0x138>)
 80012e2:	f001 fc41 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	480a      	ldr	r0, [pc, #40]	@ (8001324 <MX_GPIO_Init+0x134>)
 80012fc:	f001 fc34 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001300:	2310      	movs	r3, #16
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001308:	2301      	movs	r3, #1
 800130a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	4805      	ldr	r0, [pc, #20]	@ (8001328 <MX_GPIO_Init+0x138>)
 8001314:	f001 fc28 	bl	8002b68 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001318:	bf00      	nop
 800131a:	3728      	adds	r7, #40	@ 0x28
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	40020800 	.word	0x40020800
 8001328:	40020400 	.word	0x40020400
 800132c:	40020000 	.word	0x40020000

08001330 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001336:	463b      	mov	r3, r7
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001342:	f000 ffad 	bl	80022a0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001346:	2301      	movs	r3, #1
 8001348:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800134a:	2300      	movs	r3, #0
 800134c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001352:	231f      	movs	r3, #31
 8001354:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001356:	2387      	movs	r3, #135	@ 0x87
 8001358:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800135a:	2300      	movs	r3, #0
 800135c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800135e:	2300      	movs	r3, #0
 8001360:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001362:	2301      	movs	r3, #1
 8001364:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001366:	2301      	movs	r3, #1
 8001368:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001372:	463b      	mov	r3, r7
 8001374:	4618      	mov	r0, r3
 8001376:	f000 ffcb 	bl	8002310 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800137a:	2004      	movs	r0, #4
 800137c:	f000 ffa8 	bl	80022d0 <HAL_MPU_Enable>

}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138c:	b672      	cpsid	i
}
 800138e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <Error_Handler+0x8>

08001394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <HAL_MspInit+0x44>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	4a0e      	ldr	r2, [pc, #56]	@ (80013d8 <HAL_MspInit+0x44>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a6:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <HAL_MspInit+0x44>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b2:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <HAL_MspInit+0x44>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b6:	4a08      	ldr	r2, [pc, #32]	@ (80013d8 <HAL_MspInit+0x44>)
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013be:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <HAL_MspInit+0x44>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800

080013dc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	@ 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a15      	ldr	r2, [pc, #84]	@ (8001450 <HAL_ADC_MspInit+0x74>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d123      	bne.n	8001446 <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013fe:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <HAL_ADC_MspInit+0x78>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001402:	4a14      	ldr	r2, [pc, #80]	@ (8001454 <HAL_ADC_MspInit+0x78>)
 8001404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001408:	6453      	str	r3, [r2, #68]	@ 0x44
 800140a:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <HAL_ADC_MspInit+0x78>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001416:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <HAL_ADC_MspInit+0x78>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a0e      	ldr	r2, [pc, #56]	@ (8001454 <HAL_ADC_MspInit+0x78>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <HAL_ADC_MspInit+0x78>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800142e:	2301      	movs	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001432:	2303      	movs	r3, #3
 8001434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	@ (8001458 <HAL_ADC_MspInit+0x7c>)
 8001442:	f001 fb91 	bl	8002b68 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001446:	bf00      	nop
 8001448:	3728      	adds	r7, #40	@ 0x28
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40012000 	.word	0x40012000
 8001454:	40023800 	.word	0x40023800
 8001458:	40020800 	.word	0x40020800

0800145c <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	@ 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a15      	ldr	r2, [pc, #84]	@ (80014d0 <HAL_DAC_MspInit+0x74>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d123      	bne.n	80014c6 <HAL_DAC_MspInit+0x6a>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <HAL_DAC_MspInit+0x78>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001482:	4a14      	ldr	r2, [pc, #80]	@ (80014d4 <HAL_DAC_MspInit+0x78>)
 8001484:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001488:	6413      	str	r3, [r2, #64]	@ 0x40
 800148a:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <HAL_DAC_MspInit+0x78>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	4b0f      	ldr	r3, [pc, #60]	@ (80014d4 <HAL_DAC_MspInit+0x78>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a0e      	ldr	r2, [pc, #56]	@ (80014d4 <HAL_DAC_MspInit+0x78>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <HAL_DAC_MspInit+0x78>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014ae:	2310      	movs	r3, #16
 80014b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014b2:	2303      	movs	r3, #3
 80014b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <HAL_DAC_MspInit+0x7c>)
 80014c2:	f001 fb51 	bl	8002b68 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 80014c6:	bf00      	nop
 80014c8:	3728      	adds	r7, #40	@ 0x28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40007400 	.word	0x40007400
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020000 	.word	0x40020000

080014dc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b0aa      	sub	sp, #168	@ 0xa8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2280      	movs	r2, #128	@ 0x80
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f004 fad8 	bl	8005ab2 <memset>
  if(hi2c->Instance==I2C1)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a58      	ldr	r2, [pc, #352]	@ (8001668 <HAL_I2C_MspInit+0x18c>)
 8001508:	4293      	cmp	r3, r2
 800150a:	f040 80a8 	bne.w	800165e <HAL_I2C_MspInit+0x182>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800150e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001512:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001514:	2300      	movs	r3, #0
 8001516:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4618      	mov	r0, r3
 800151e:	f003 f8ab 	bl	8004678 <HAL_RCCEx_PeriphCLKConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001528:	f7ff ff2e 	bl	8001388 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152c:	4b4f      	ldr	r3, [pc, #316]	@ (800166c <HAL_I2C_MspInit+0x190>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001530:	4a4e      	ldr	r2, [pc, #312]	@ (800166c <HAL_I2C_MspInit+0x190>)
 8001532:	f043 0302 	orr.w	r3, r3, #2
 8001536:	6313      	str	r3, [r2, #48]	@ 0x30
 8001538:	4b4c      	ldr	r3, [pc, #304]	@ (800166c <HAL_I2C_MspInit+0x190>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001544:	23c0      	movs	r3, #192	@ 0xc0
 8001546:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800154a:	2312      	movs	r3, #18
 800154c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001550:	2301      	movs	r3, #1
 8001552:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800155c:	2304      	movs	r3, #4
 800155e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001562:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001566:	4619      	mov	r1, r3
 8001568:	4841      	ldr	r0, [pc, #260]	@ (8001670 <HAL_I2C_MspInit+0x194>)
 800156a:	f001 fafd 	bl	8002b68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800156e:	4b3f      	ldr	r3, [pc, #252]	@ (800166c <HAL_I2C_MspInit+0x190>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	4a3e      	ldr	r2, [pc, #248]	@ (800166c <HAL_I2C_MspInit+0x190>)
 8001574:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001578:	6413      	str	r3, [r2, #64]	@ 0x40
 800157a:	4b3c      	ldr	r3, [pc, #240]	@ (800166c <HAL_I2C_MspInit+0x190>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001586:	4b3b      	ldr	r3, [pc, #236]	@ (8001674 <HAL_I2C_MspInit+0x198>)
 8001588:	4a3b      	ldr	r2, [pc, #236]	@ (8001678 <HAL_I2C_MspInit+0x19c>)
 800158a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800158c:	4b39      	ldr	r3, [pc, #228]	@ (8001674 <HAL_I2C_MspInit+0x198>)
 800158e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001592:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001594:	4b37      	ldr	r3, [pc, #220]	@ (8001674 <HAL_I2C_MspInit+0x198>)
 8001596:	2240      	movs	r2, #64	@ 0x40
 8001598:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800159a:	4b36      	ldr	r3, [pc, #216]	@ (8001674 <HAL_I2C_MspInit+0x198>)
 800159c:	2200      	movs	r2, #0
 800159e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015a0:	4b34      	ldr	r3, [pc, #208]	@ (8001674 <HAL_I2C_MspInit+0x198>)
 80015a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015a6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015a8:	4b32      	ldr	r3, [pc, #200]	@ (8001674 <HAL_I2C_MspInit+0x198>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015ae:	4b31      	ldr	r3, [pc, #196]	@ (8001674 <HAL_I2C_MspInit+0x198>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80015b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001674 <HAL_I2C_MspInit+0x198>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001674 <HAL_I2C_MspInit+0x198>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001674 <HAL_I2C_MspInit+0x198>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80015c6:	482b      	ldr	r0, [pc, #172]	@ (8001674 <HAL_I2C_MspInit+0x198>)
 80015c8:	f000 ffb4 	bl	8002534 <HAL_DMA_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 80015d2:	f7ff fed9 	bl	8001388 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a26      	ldr	r2, [pc, #152]	@ (8001674 <HAL_I2C_MspInit+0x198>)
 80015da:	639a      	str	r2, [r3, #56]	@ 0x38
 80015dc:	4a25      	ldr	r2, [pc, #148]	@ (8001674 <HAL_I2C_MspInit+0x198>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80015e2:	4b26      	ldr	r3, [pc, #152]	@ (800167c <HAL_I2C_MspInit+0x1a0>)
 80015e4:	4a26      	ldr	r2, [pc, #152]	@ (8001680 <HAL_I2C_MspInit+0x1a4>)
 80015e6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80015e8:	4b24      	ldr	r3, [pc, #144]	@ (800167c <HAL_I2C_MspInit+0x1a0>)
 80015ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015ee:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f0:	4b22      	ldr	r3, [pc, #136]	@ (800167c <HAL_I2C_MspInit+0x1a0>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f6:	4b21      	ldr	r3, [pc, #132]	@ (800167c <HAL_I2C_MspInit+0x1a0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015fc:	4b1f      	ldr	r3, [pc, #124]	@ (800167c <HAL_I2C_MspInit+0x1a0>)
 80015fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001602:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001604:	4b1d      	ldr	r3, [pc, #116]	@ (800167c <HAL_I2C_MspInit+0x1a0>)
 8001606:	2200      	movs	r2, #0
 8001608:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800160a:	4b1c      	ldr	r3, [pc, #112]	@ (800167c <HAL_I2C_MspInit+0x1a0>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001610:	4b1a      	ldr	r3, [pc, #104]	@ (800167c <HAL_I2C_MspInit+0x1a0>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001616:	4b19      	ldr	r3, [pc, #100]	@ (800167c <HAL_I2C_MspInit+0x1a0>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800161c:	4b17      	ldr	r3, [pc, #92]	@ (800167c <HAL_I2C_MspInit+0x1a0>)
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001622:	4816      	ldr	r0, [pc, #88]	@ (800167c <HAL_I2C_MspInit+0x1a0>)
 8001624:	f000 ff86 	bl	8002534 <HAL_DMA_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_I2C_MspInit+0x156>
    {
      Error_Handler();
 800162e:	f7ff feab 	bl	8001388 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a11      	ldr	r2, [pc, #68]	@ (800167c <HAL_I2C_MspInit+0x1a0>)
 8001636:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001638:	4a10      	ldr	r2, [pc, #64]	@ (800167c <HAL_I2C_MspInit+0x1a0>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	201f      	movs	r0, #31
 8001644:	f000 fdf5 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001648:	201f      	movs	r0, #31
 800164a:	f000 fe0e 	bl	800226a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	2020      	movs	r0, #32
 8001654:	f000 fded 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001658:	2020      	movs	r0, #32
 800165a:	f000 fe06 	bl	800226a <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800165e:	bf00      	nop
 8001660:	37a8      	adds	r7, #168	@ 0xa8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40005400 	.word	0x40005400
 800166c:	40023800 	.word	0x40023800
 8001670:	40020400 	.word	0x40020400
 8001674:	2000013c 	.word	0x2000013c
 8001678:	400260a0 	.word	0x400260a0
 800167c:	2000019c 	.word	0x2000019c
 8001680:	40026010 	.word	0x40026010

08001684 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b0aa      	sub	sp, #168	@ 0xa8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2280      	movs	r2, #128	@ 0x80
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f004 fa04 	bl	8005ab2 <memset>
  if(huart->Instance==USART1)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a21      	ldr	r2, [pc, #132]	@ (8001734 <HAL_UART_MspInit+0xb0>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d13b      	bne.n	800172c <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016b4:	2340      	movs	r3, #64	@ 0x40
 80016b6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016b8:	2300      	movs	r3, #0
 80016ba:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4618      	mov	r0, r3
 80016c2:	f002 ffd9 	bl	8004678 <HAL_RCCEx_PeriphCLKConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016cc:	f7ff fe5c 	bl	8001388 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016d0:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <HAL_UART_MspInit+0xb4>)
 80016d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d4:	4a18      	ldr	r2, [pc, #96]	@ (8001738 <HAL_UART_MspInit+0xb4>)
 80016d6:	f043 0310 	orr.w	r3, r3, #16
 80016da:	6453      	str	r3, [r2, #68]	@ 0x44
 80016dc:	4b16      	ldr	r3, [pc, #88]	@ (8001738 <HAL_UART_MspInit+0xb4>)
 80016de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e0:	f003 0310 	and.w	r3, r3, #16
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e8:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <HAL_UART_MspInit+0xb4>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ec:	4a12      	ldr	r2, [pc, #72]	@ (8001738 <HAL_UART_MspInit+0xb4>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f4:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <HAL_UART_MspInit+0xb4>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001700:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001704:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800171a:	2307      	movs	r3, #7
 800171c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001724:	4619      	mov	r1, r3
 8001726:	4805      	ldr	r0, [pc, #20]	@ (800173c <HAL_UART_MspInit+0xb8>)
 8001728:	f001 fa1e 	bl	8002b68 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800172c:	bf00      	nop
 800172e:	37a8      	adds	r7, #168	@ 0xa8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40011000 	.word	0x40011000
 8001738:	40023800 	.word	0x40023800
 800173c:	40020000 	.word	0x40020000

08001740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <NMI_Handler+0x4>

08001748 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <HardFault_Handler+0x4>

08001750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <MemManage_Handler+0x4>

08001758 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <BusFault_Handler+0x4>

08001760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <UsageFault_Handler+0x4>

08001768 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001796:	f000 f9bd 	bl	8001b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80017a4:	4802      	ldr	r0, [pc, #8]	@ (80017b0 <DMA1_Stream0_IRQHandler+0x10>)
 80017a6:	f000 ff95 	bl	80026d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2000019c 	.word	0x2000019c

080017b4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80017b8:	4802      	ldr	r0, [pc, #8]	@ (80017c4 <DMA1_Stream6_IRQHandler+0x10>)
 80017ba:	f000 ff8b 	bl	80026d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	2000013c 	.word	0x2000013c

080017c8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017cc:	4802      	ldr	r0, [pc, #8]	@ (80017d8 <I2C1_EV_IRQHandler+0x10>)
 80017ce:	f001 fc35 	bl	800303c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200000e8 	.word	0x200000e8

080017dc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <I2C1_ER_IRQHandler+0x10>)
 80017e2:	f001 fc45 	bl	8003070 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200000e8 	.word	0x200000e8

080017f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return 1;
 80017f4:	2301      	movs	r3, #1
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_kill>:

int _kill(int pid, int sig)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800180a:	f004 fa09 	bl	8005c20 <__errno>
 800180e:	4603      	mov	r3, r0
 8001810:	2216      	movs	r2, #22
 8001812:	601a      	str	r2, [r3, #0]
  return -1;
 8001814:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_exit>:

void _exit (int status)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ffe7 	bl	8001800 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001832:	bf00      	nop
 8001834:	e7fd      	b.n	8001832 <_exit+0x12>

08001836 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	e00a      	b.n	800185e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001848:	f3af 8000 	nop.w
 800184c:	4601      	mov	r1, r0
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	60ba      	str	r2, [r7, #8]
 8001854:	b2ca      	uxtb	r2, r1
 8001856:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	3301      	adds	r3, #1
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	429a      	cmp	r2, r3
 8001864:	dbf0      	blt.n	8001848 <_read+0x12>
  }

  return len;
 8001866:	687b      	ldr	r3, [r7, #4]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	e009      	b.n	8001896 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	60ba      	str	r2, [r7, #8]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	3301      	adds	r3, #1
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	429a      	cmp	r2, r3
 800189c:	dbf1      	blt.n	8001882 <_write+0x12>
  }
  return len;
 800189e:	687b      	ldr	r3, [r7, #4]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <_close>:

int _close(int file)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018d0:	605a      	str	r2, [r3, #4]
  return 0;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <_isatty>:

int _isatty(int file)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018e8:	2301      	movs	r3, #1
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b085      	sub	sp, #20
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001918:	4a14      	ldr	r2, [pc, #80]	@ (800196c <_sbrk+0x5c>)
 800191a:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <_sbrk+0x60>)
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001924:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800192c:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <_sbrk+0x64>)
 800192e:	4a12      	ldr	r2, [pc, #72]	@ (8001978 <_sbrk+0x68>)
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001932:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	429a      	cmp	r2, r3
 800193e:	d207      	bcs.n	8001950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001940:	f004 f96e 	bl	8005c20 <__errno>
 8001944:	4603      	mov	r3, r0
 8001946:	220c      	movs	r2, #12
 8001948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e009      	b.n	8001964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001950:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001956:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	4a05      	ldr	r2, [pc, #20]	@ (8001974 <_sbrk+0x64>)
 8001960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20040000 	.word	0x20040000
 8001970:	00000400 	.word	0x00000400
 8001974:	20000284 	.word	0x20000284
 8001978:	200003d8 	.word	0x200003d8

0800197c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001980:	4b06      	ldr	r3, [pc, #24]	@ (800199c <SystemInit+0x20>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001986:	4a05      	ldr	r2, [pc, #20]	@ (800199c <SystemInit+0x20>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <strtrim>:
#include "utils.h"
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

void strtrim(char *str, const char *set) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
	if (!str || !set) {
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d047      	beq.n	8001a40 <strtrim+0xa0>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d044      	beq.n	8001a40 <strtrim+0xa0>
		return;
	}

	uint32_t j = strlen(str) - 1;
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7fe fc3c 	bl	8000234 <strlen>
 80019bc:	4603      	mov	r3, r0
 80019be:	3b01      	subs	r3, #1
 80019c0:	60fb      	str	r3, [r7, #12]

	// "   foo bar   " -> "   foo bar"
	while(j > -1 && strchr(set, str[j])) {
 80019c2:	bf00      	nop
		str[j] = '\0';
		--j;
	}

	j = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]
	while (str[j] && strchr(set, str[j])) {
 80019c8:	e002      	b.n	80019d0 <strtrim+0x30>
		++j;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	3301      	adds	r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
	while (str[j] && strchr(set, str[j])) {
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4413      	add	r3, r2
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00a      	beq.n	80019f2 <strtrim+0x52>
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4413      	add	r3, r2
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	6838      	ldr	r0, [r7, #0]
 80019e8:	f004 f86b 	bl	8005ac2 <strchr>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1eb      	bne.n	80019ca <strtrim+0x2a>
	}

	uint32_t i = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]

	// "  foo bar" -> "foo bar"
	while (str[j]) {
 80019f6:	e00d      	b.n	8001a14 <strtrim+0x74>
		str[i] = str[j];
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	441a      	add	r2, r3
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	440b      	add	r3, r1
 8001a04:	7812      	ldrb	r2, [r2, #0]
 8001a06:	701a      	strb	r2, [r3, #0]
		++i;
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	60bb      	str	r3, [r7, #8]
		++j;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	3301      	adds	r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
	while (str[j]) {
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4413      	add	r3, r2
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1eb      	bne.n	80019f8 <strtrim+0x58>
	}

	while (str[i]) {
 8001a20:	e007      	b.n	8001a32 <strtrim+0x92>
		str[i] = '\0';
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	4413      	add	r3, r2
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
		++i;
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	60bb      	str	r3, [r7, #8]
	while (str[i]) {
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	4413      	add	r3, r2
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f1      	bne.n	8001a22 <strtrim+0x82>
 8001a3e:	e000      	b.n	8001a42 <strtrim+0xa2>
		return;
 8001a40:	bf00      	nop
	}
}
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8001a4c:	f7ff ff96 	bl	800197c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a50:	480c      	ldr	r0, [pc, #48]	@ (8001a84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a52:	490d      	ldr	r1, [pc, #52]	@ (8001a88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a54:	4a0d      	ldr	r2, [pc, #52]	@ (8001a8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a58:	e002      	b.n	8001a60 <LoopCopyDataInit>

08001a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5e:	3304      	adds	r3, #4

08001a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a64:	d3f9      	bcc.n	8001a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a66:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a68:	4c0a      	ldr	r4, [pc, #40]	@ (8001a94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a6c:	e001      	b.n	8001a72 <LoopFillZerobss>

08001a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a70:	3204      	adds	r2, #4

08001a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a74:	d3fb      	bcc.n	8001a6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a76:	f004 f8d9 	bl	8005c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a7a:	f7ff fa09 	bl	8000e90 <main>
  bx  lr    
 8001a7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a80:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a88:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001a8c:	08006b70 	.word	0x08006b70
  ldr r2, =_sbss
 8001a90:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001a94:	200003d8 	.word	0x200003d8

08001a98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a98:	e7fe      	b.n	8001a98 <ADC_IRQHandler>

08001a9a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a9e:	2003      	movs	r0, #3
 8001aa0:	f000 fbbc 	bl	800221c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aa4:	200f      	movs	r0, #15
 8001aa6:	f000 f805 	bl	8001ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aaa:	f7ff fc73 	bl	8001394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001abc:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <HAL_InitTick+0x54>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <HAL_InitTick+0x58>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 fbd7 	bl	8002286 <HAL_SYSTICK_Config>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00e      	b.n	8001b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b0f      	cmp	r3, #15
 8001ae6:	d80a      	bhi.n	8001afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	f000 fb9f 	bl	8002232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af4:	4a06      	ldr	r2, [pc, #24]	@ (8001b10 <HAL_InitTick+0x5c>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e000      	b.n	8001b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000004 	.word	0x20000004
 8001b0c:	2000000c 	.word	0x2000000c
 8001b10:	20000008 	.word	0x20000008

08001b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b18:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <HAL_IncTick+0x20>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_IncTick+0x24>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	4a04      	ldr	r2, [pc, #16]	@ (8001b38 <HAL_IncTick+0x24>)
 8001b26:	6013      	str	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	2000000c 	.word	0x2000000c
 8001b38:	20000288 	.word	0x20000288

08001b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b40:	4b03      	ldr	r3, [pc, #12]	@ (8001b50 <HAL_GetTick+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000288 	.word	0x20000288

08001b54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e031      	b.n	8001bce <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff fc32 	bl	80013dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d116      	bne.n	8001bc0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b96:	4b10      	ldr	r3, [pc, #64]	@ (8001bd8 <HAL_ADC_Init+0x84>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	f043 0202 	orr.w	r2, r3, #2
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f970 	bl	8001e88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	f023 0303 	bic.w	r3, r3, #3
 8001bb6:	f043 0201 	orr.w	r2, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bbe:	e001      	b.n	8001bc4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	ffffeefd 	.word	0xffffeefd

08001bdc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d101      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x1c>
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	e136      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x28a>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b09      	cmp	r3, #9
 8001c06:	d93a      	bls.n	8001c7e <HAL_ADC_ConfigChannel+0xa2>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c10:	d035      	beq.n	8001c7e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68d9      	ldr	r1, [r3, #12]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4613      	mov	r3, r2
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	4413      	add	r3, r2
 8001c26:	3b1e      	subs	r3, #30
 8001c28:	2207      	movs	r2, #7
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	400a      	ands	r2, r1
 8001c36:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a8d      	ldr	r2, [pc, #564]	@ (8001e74 <HAL_ADC_ConfigChannel+0x298>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d10a      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68d9      	ldr	r1, [r3, #12]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	061a      	lsls	r2, r3, #24
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c56:	e035      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68d9      	ldr	r1, [r3, #12]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	4618      	mov	r0, r3
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4403      	add	r3, r0
 8001c70:	3b1e      	subs	r3, #30
 8001c72:	409a      	lsls	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c7c:	e022      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6919      	ldr	r1, [r3, #16]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	2207      	movs	r2, #7
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43da      	mvns	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6919      	ldr	r1, [r3, #16]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4403      	add	r3, r0
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b06      	cmp	r3, #6
 8001cca:	d824      	bhi.n	8001d16 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	3b05      	subs	r3, #5
 8001cde:	221f      	movs	r2, #31
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43da      	mvns	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	400a      	ands	r2, r1
 8001cec:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	3b05      	subs	r3, #5
 8001d08:	fa00 f203 	lsl.w	r2, r0, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d14:	e04c      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	d824      	bhi.n	8001d68 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3b23      	subs	r3, #35	@ 0x23
 8001d30:	221f      	movs	r2, #31
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43da      	mvns	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	400a      	ands	r2, r1
 8001d3e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	3b23      	subs	r3, #35	@ 0x23
 8001d5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d66:	e023      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	3b41      	subs	r3, #65	@ 0x41
 8001d7a:	221f      	movs	r2, #31
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43da      	mvns	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	400a      	ands	r2, r1
 8001d88:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	4618      	mov	r0, r3
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	3b41      	subs	r3, #65	@ 0x41
 8001da4:	fa00 f203 	lsl.w	r2, r0, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a30      	ldr	r2, [pc, #192]	@ (8001e78 <HAL_ADC_ConfigChannel+0x29c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d10a      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x1f4>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001dc2:	d105      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001dc4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e7c <HAL_ADC_ConfigChannel+0x2a0>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	4a2c      	ldr	r2, [pc, #176]	@ (8001e7c <HAL_ADC_ConfigChannel+0x2a0>)
 8001dca:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001dce:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a28      	ldr	r2, [pc, #160]	@ (8001e78 <HAL_ADC_ConfigChannel+0x29c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d10f      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x21e>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b12      	cmp	r3, #18
 8001de0:	d10b      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001de2:	4b26      	ldr	r3, [pc, #152]	@ (8001e7c <HAL_ADC_ConfigChannel+0x2a0>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4a25      	ldr	r2, [pc, #148]	@ (8001e7c <HAL_ADC_ConfigChannel+0x2a0>)
 8001de8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001dec:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001dee:	4b23      	ldr	r3, [pc, #140]	@ (8001e7c <HAL_ADC_ConfigChannel+0x2a0>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4a22      	ldr	r2, [pc, #136]	@ (8001e7c <HAL_ADC_ConfigChannel+0x2a0>)
 8001df4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001df8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8001e78 <HAL_ADC_ConfigChannel+0x29c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d12b      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x280>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a1a      	ldr	r2, [pc, #104]	@ (8001e74 <HAL_ADC_ConfigChannel+0x298>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d003      	beq.n	8001e16 <HAL_ADC_ConfigChannel+0x23a>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b11      	cmp	r3, #17
 8001e14:	d122      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001e16:	4b19      	ldr	r3, [pc, #100]	@ (8001e7c <HAL_ADC_ConfigChannel+0x2a0>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4a18      	ldr	r2, [pc, #96]	@ (8001e7c <HAL_ADC_ConfigChannel+0x2a0>)
 8001e1c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001e20:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001e22:	4b16      	ldr	r3, [pc, #88]	@ (8001e7c <HAL_ADC_ConfigChannel+0x2a0>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4a15      	ldr	r2, [pc, #84]	@ (8001e7c <HAL_ADC_ConfigChannel+0x2a0>)
 8001e28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e2c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a10      	ldr	r2, [pc, #64]	@ (8001e74 <HAL_ADC_ConfigChannel+0x298>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d111      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001e38:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <HAL_ADC_ConfigChannel+0x2a4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a11      	ldr	r2, [pc, #68]	@ (8001e84 <HAL_ADC_ConfigChannel+0x2a8>)
 8001e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e42:	0c9a      	lsrs	r2, r3, #18
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e4e:	e002      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f9      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	10000012 	.word	0x10000012
 8001e78:	40012000 	.word	0x40012000
 8001e7c:	40012300 	.word	0x40012300
 8001e80:	20000004 	.word	0x20000004
 8001e84:	431bde83 	.word	0x431bde83

08001e88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001e90:	4b78      	ldr	r3, [pc, #480]	@ (8002074 <ADC_Init+0x1ec>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	4a77      	ldr	r2, [pc, #476]	@ (8002074 <ADC_Init+0x1ec>)
 8001e96:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001e9a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001e9c:	4b75      	ldr	r3, [pc, #468]	@ (8002074 <ADC_Init+0x1ec>)
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4973      	ldr	r1, [pc, #460]	@ (8002074 <ADC_Init+0x1ec>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001eb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6859      	ldr	r1, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	021a      	lsls	r2, r3, #8
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001edc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001efe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6899      	ldr	r1, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f16:	4a58      	ldr	r2, [pc, #352]	@ (8002078 <ADC_Init+0x1f0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d022      	beq.n	8001f62 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6899      	ldr	r1, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6899      	ldr	r1, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	e00f      	b.n	8001f82 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f80:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0202 	bic.w	r2, r2, #2
 8001f90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6899      	ldr	r1, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	005a      	lsls	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d01b      	beq.n	8001fe8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fbe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001fce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6859      	ldr	r1, [r3, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	035a      	lsls	r2, r3, #13
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	e007      	b.n	8001ff8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ff6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002006:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	3b01      	subs	r3, #1
 8002014:	051a      	lsls	r2, r3, #20
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800202c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6899      	ldr	r1, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800203a:	025a      	lsls	r2, r3, #9
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002052:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6899      	ldr	r1, [r3, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	029a      	lsls	r2, r3, #10
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	609a      	str	r2, [r3, #8]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	40012300 	.word	0x40012300
 8002078:	0f000001 	.word	0x0f000001

0800207c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800208c:	4b0b      	ldr	r3, [pc, #44]	@ (80020bc <__NVIC_SetPriorityGrouping+0x40>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002098:	4013      	ands	r3, r2
 800209a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020a4:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <__NVIC_SetPriorityGrouping+0x44>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020aa:	4a04      	ldr	r2, [pc, #16]	@ (80020bc <__NVIC_SetPriorityGrouping+0x40>)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	60d3      	str	r3, [r2, #12]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00
 80020c0:	05fa0000 	.word	0x05fa0000

080020c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c8:	4b04      	ldr	r3, [pc, #16]	@ (80020dc <__NVIC_GetPriorityGrouping+0x18>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	0a1b      	lsrs	r3, r3, #8
 80020ce:	f003 0307 	and.w	r3, r3, #7
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	db0b      	blt.n	800210a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	f003 021f 	and.w	r2, r3, #31
 80020f8:	4907      	ldr	r1, [pc, #28]	@ (8002118 <__NVIC_EnableIRQ+0x38>)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	095b      	lsrs	r3, r3, #5
 8002100:	2001      	movs	r0, #1
 8002102:	fa00 f202 	lsl.w	r2, r0, r2
 8002106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000e100 	.word	0xe000e100

0800211c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	6039      	str	r1, [r7, #0]
 8002126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	2b00      	cmp	r3, #0
 800212e:	db0a      	blt.n	8002146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	490c      	ldr	r1, [pc, #48]	@ (8002168 <__NVIC_SetPriority+0x4c>)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	0112      	lsls	r2, r2, #4
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	440b      	add	r3, r1
 8002140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002144:	e00a      	b.n	800215c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4908      	ldr	r1, [pc, #32]	@ (800216c <__NVIC_SetPriority+0x50>)
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	3b04      	subs	r3, #4
 8002154:	0112      	lsls	r2, r2, #4
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	440b      	add	r3, r1
 800215a:	761a      	strb	r2, [r3, #24]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000e100 	.word	0xe000e100
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	@ 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f1c3 0307 	rsb	r3, r3, #7
 800218a:	2b04      	cmp	r3, #4
 800218c:	bf28      	it	cs
 800218e:	2304      	movcs	r3, #4
 8002190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3304      	adds	r3, #4
 8002196:	2b06      	cmp	r3, #6
 8002198:	d902      	bls.n	80021a0 <NVIC_EncodePriority+0x30>
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3b03      	subs	r3, #3
 800219e:	e000      	b.n	80021a2 <NVIC_EncodePriority+0x32>
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	f04f 32ff 	mov.w	r2, #4294967295
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43da      	mvns	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	401a      	ands	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b8:	f04f 31ff 	mov.w	r1, #4294967295
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa01 f303 	lsl.w	r3, r1, r3
 80021c2:	43d9      	mvns	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	4313      	orrs	r3, r2
         );
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3724      	adds	r7, #36	@ 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021e8:	d301      	bcc.n	80021ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ea:	2301      	movs	r3, #1
 80021ec:	e00f      	b.n	800220e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002218 <SysTick_Config+0x40>)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f6:	210f      	movs	r1, #15
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295
 80021fc:	f7ff ff8e 	bl	800211c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002200:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <SysTick_Config+0x40>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002206:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <SysTick_Config+0x40>)
 8002208:	2207      	movs	r2, #7
 800220a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	e000e010 	.word	0xe000e010

0800221c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ff29 	bl	800207c <__NVIC_SetPriorityGrouping>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002232:	b580      	push	{r7, lr}
 8002234:	b086      	sub	sp, #24
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002244:	f7ff ff3e 	bl	80020c4 <__NVIC_GetPriorityGrouping>
 8002248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	6978      	ldr	r0, [r7, #20]
 8002250:	f7ff ff8e 	bl	8002170 <NVIC_EncodePriority>
 8002254:	4602      	mov	r2, r0
 8002256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff5d 	bl	800211c <__NVIC_SetPriority>
}
 8002262:	bf00      	nop
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	4603      	mov	r3, r0
 8002272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff31 	bl	80020e0 <__NVIC_EnableIRQ>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ffa2 	bl	80021d8 <SysTick_Config>
 8002294:	4603      	mov	r3, r0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80022a4:	f3bf 8f5f 	dmb	sy
}
 80022a8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80022aa:	4b07      	ldr	r3, [pc, #28]	@ (80022c8 <HAL_MPU_Disable+0x28>)
 80022ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ae:	4a06      	ldr	r2, [pc, #24]	@ (80022c8 <HAL_MPU_Disable+0x28>)
 80022b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022b4:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80022b6:	4b05      	ldr	r3, [pc, #20]	@ (80022cc <HAL_MPU_Disable+0x2c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	605a      	str	r2, [r3, #4]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000ed00 	.word	0xe000ed00
 80022cc:	e000ed90 	.word	0xe000ed90

080022d0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80022d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002308 <HAL_MPU_Enable+0x38>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80022e2:	4b0a      	ldr	r3, [pc, #40]	@ (800230c <HAL_MPU_Enable+0x3c>)
 80022e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e6:	4a09      	ldr	r2, [pc, #36]	@ (800230c <HAL_MPU_Enable+0x3c>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ec:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80022ee:	f3bf 8f4f 	dsb	sy
}
 80022f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022f4:	f3bf 8f6f 	isb	sy
}
 80022f8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000ed90 	.word	0xe000ed90
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	785a      	ldrb	r2, [r3, #1]
 800231c:	4b1b      	ldr	r3, [pc, #108]	@ (800238c <HAL_MPU_ConfigRegion+0x7c>)
 800231e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002320:	4b1a      	ldr	r3, [pc, #104]	@ (800238c <HAL_MPU_ConfigRegion+0x7c>)
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	4a19      	ldr	r2, [pc, #100]	@ (800238c <HAL_MPU_ConfigRegion+0x7c>)
 8002326:	f023 0301 	bic.w	r3, r3, #1
 800232a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800232c:	4a17      	ldr	r2, [pc, #92]	@ (800238c <HAL_MPU_ConfigRegion+0x7c>)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	7b1b      	ldrb	r3, [r3, #12]
 8002338:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	7adb      	ldrb	r3, [r3, #11]
 800233e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002340:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	7a9b      	ldrb	r3, [r3, #10]
 8002346:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002348:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	7b5b      	ldrb	r3, [r3, #13]
 800234e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002350:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	7b9b      	ldrb	r3, [r3, #14]
 8002356:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002358:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	7bdb      	ldrb	r3, [r3, #15]
 800235e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002360:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	7a5b      	ldrb	r3, [r3, #9]
 8002366:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002368:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	7a1b      	ldrb	r3, [r3, #8]
 800236e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002370:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	7812      	ldrb	r2, [r2, #0]
 8002376:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002378:	4a04      	ldr	r2, [pc, #16]	@ (800238c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800237a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800237c:	6113      	str	r3, [r2, #16]
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e000ed90 	.word	0xe000ed90

08002390 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e014      	b.n	80023cc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	791b      	ldrb	r3, [r3, #4]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d105      	bne.n	80023b8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff f852 	bl	800145c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2202      	movs	r2, #2
 80023bc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e046      	b.n	8002476 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	795b      	ldrb	r3, [r3, #5]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_DAC_Start+0x20>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e040      	b.n	8002476 <HAL_DAC_Start+0xa2>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2202      	movs	r2, #2
 80023fe:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6819      	ldr	r1, [r3, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2201      	movs	r2, #1
 800240e:	409a      	lsls	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10f      	bne.n	800243e <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002428:	2b3c      	cmp	r3, #60	@ 0x3c
 800242a:	d11d      	bne.n	8002468 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	605a      	str	r2, [r3, #4]
 800243c:	e014      	b.n	8002468 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	213c      	movs	r1, #60	@ 0x3c
 8002450:	fa01 f303 	lsl.w	r3, r1, r3
 8002454:	429a      	cmp	r2, r3
 8002456:	d107      	bne.n	8002468 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0202 	orr.w	r2, r2, #2
 8002466:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002482:	b480      	push	{r7}
 8002484:	b089      	sub	sp, #36	@ 0x24
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <HAL_DAC_ConfigChannel+0x1c>
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e042      	b.n	8002528 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	795b      	ldrb	r3, [r3, #5]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_DAC_ConfigChannel+0x2c>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e03c      	b.n	8002528 <HAL_DAC_ConfigChannel+0xa6>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2202      	movs	r2, #2
 80024b8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6819      	ldr	r1, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	22c0      	movs	r2, #192	@ 0xc0
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43da      	mvns	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	400a      	ands	r2, r1
 8002518:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2201      	movs	r2, #1
 800251e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002526:	7ffb      	ldrb	r3, [r7, #31]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3724      	adds	r7, #36	@ 0x24
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002540:	f7ff fafc 	bl	8001b3c <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e099      	b.n	8002684 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0201 	bic.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002570:	e00f      	b.n	8002592 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002572:	f7ff fae3 	bl	8001b3c <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b05      	cmp	r3, #5
 800257e:	d908      	bls.n	8002592 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2220      	movs	r2, #32
 8002584:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2203      	movs	r2, #3
 800258a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e078      	b.n	8002684 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1e8      	bne.n	8002572 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	4b38      	ldr	r3, [pc, #224]	@ (800268c <HAL_DMA_Init+0x158>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d107      	bne.n	80025fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f4:	4313      	orrs	r3, r2
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f023 0307 	bic.w	r3, r3, #7
 8002612:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	4313      	orrs	r3, r2
 800261c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	2b04      	cmp	r3, #4
 8002624:	d117      	bne.n	8002656 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4313      	orrs	r3, r2
 800262e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00e      	beq.n	8002656 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 fa19 	bl	8002a70 <DMA_CheckFifoParam>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2240      	movs	r2, #64	@ 0x40
 8002648:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002652:	2301      	movs	r3, #1
 8002654:	e016      	b.n	8002684 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f9d0 	bl	8002a04 <DMA_CalcBaseAndBitshift>
 8002664:	4603      	mov	r3, r0
 8002666:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800266c:	223f      	movs	r2, #63	@ 0x3f
 800266e:	409a      	lsls	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	e010803f 	.word	0xe010803f

08002690 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d004      	beq.n	80026ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2280      	movs	r2, #128	@ 0x80
 80026a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e00c      	b.n	80026c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2205      	movs	r2, #5
 80026b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0201 	bic.w	r2, r2, #1
 80026c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80026e0:	4b8e      	ldr	r3, [pc, #568]	@ (800291c <HAL_DMA_IRQHandler+0x248>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a8e      	ldr	r2, [pc, #568]	@ (8002920 <HAL_DMA_IRQHandler+0x24c>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	0a9b      	lsrs	r3, r3, #10
 80026ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fe:	2208      	movs	r2, #8
 8002700:	409a      	lsls	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d01a      	beq.n	8002740 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d013      	beq.n	8002740 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0204 	bic.w	r2, r2, #4
 8002726:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800272c:	2208      	movs	r2, #8
 800272e:	409a      	lsls	r2, r3
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002738:	f043 0201 	orr.w	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002744:	2201      	movs	r2, #1
 8002746:	409a      	lsls	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d012      	beq.n	8002776 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002762:	2201      	movs	r2, #1
 8002764:	409a      	lsls	r2, r3
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800276e:	f043 0202 	orr.w	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277a:	2204      	movs	r2, #4
 800277c:	409a      	lsls	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d012      	beq.n	80027ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00b      	beq.n	80027ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002798:	2204      	movs	r2, #4
 800279a:	409a      	lsls	r2, r3
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027a4:	f043 0204 	orr.w	r2, r3, #4
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b0:	2210      	movs	r2, #16
 80027b2:	409a      	lsls	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d043      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d03c      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ce:	2210      	movs	r2, #16
 80027d0:	409a      	lsls	r2, r3
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d018      	beq.n	8002816 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d108      	bne.n	8002804 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d024      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	4798      	blx	r3
 8002802:	e01f      	b.n	8002844 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002808:	2b00      	cmp	r3, #0
 800280a:	d01b      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	4798      	blx	r3
 8002814:	e016      	b.n	8002844 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d107      	bne.n	8002834 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0208 	bic.w	r2, r2, #8
 8002832:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002848:	2220      	movs	r2, #32
 800284a:	409a      	lsls	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 808f 	beq.w	8002974 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 8087 	beq.w	8002974 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286a:	2220      	movs	r2, #32
 800286c:	409a      	lsls	r2, r3
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b05      	cmp	r3, #5
 800287c:	d136      	bne.n	80028ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0216 	bic.w	r2, r2, #22
 800288c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695a      	ldr	r2, [r3, #20]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800289c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d103      	bne.n	80028ae <HAL_DMA_IRQHandler+0x1da>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d007      	beq.n	80028be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0208 	bic.w	r2, r2, #8
 80028bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c2:	223f      	movs	r2, #63	@ 0x3f
 80028c4:	409a      	lsls	r2, r3
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d07e      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	4798      	blx	r3
        }
        return;
 80028ea:	e079      	b.n	80029e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d01d      	beq.n	8002936 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10d      	bne.n	8002924 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290c:	2b00      	cmp	r3, #0
 800290e:	d031      	beq.n	8002974 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	4798      	blx	r3
 8002918:	e02c      	b.n	8002974 <HAL_DMA_IRQHandler+0x2a0>
 800291a:	bf00      	nop
 800291c:	20000004 	.word	0x20000004
 8002920:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002928:	2b00      	cmp	r3, #0
 800292a:	d023      	beq.n	8002974 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
 8002934:	e01e      	b.n	8002974 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10f      	bne.n	8002964 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0210 	bic.w	r2, r2, #16
 8002952:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002978:	2b00      	cmp	r3, #0
 800297a:	d032      	beq.n	80029e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d022      	beq.n	80029ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2205      	movs	r2, #5
 800298c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0201 	bic.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	3301      	adds	r3, #1
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d307      	bcc.n	80029bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f2      	bne.n	80029a0 <HAL_DMA_IRQHandler+0x2cc>
 80029ba:	e000      	b.n	80029be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	4798      	blx	r3
 80029de:	e000      	b.n	80029e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80029e0:	bf00      	nop
    }
  }
}
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029f6:	b2db      	uxtb	r3, r3
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	3b10      	subs	r3, #16
 8002a14:	4a13      	ldr	r2, [pc, #76]	@ (8002a64 <DMA_CalcBaseAndBitshift+0x60>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	091b      	lsrs	r3, r3, #4
 8002a1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a1e:	4a12      	ldr	r2, [pc, #72]	@ (8002a68 <DMA_CalcBaseAndBitshift+0x64>)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4413      	add	r3, r2
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d908      	bls.n	8002a44 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	4b0c      	ldr	r3, [pc, #48]	@ (8002a6c <DMA_CalcBaseAndBitshift+0x68>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	1d1a      	adds	r2, r3, #4
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a42:	e006      	b.n	8002a52 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4b08      	ldr	r3, [pc, #32]	@ (8002a6c <DMA_CalcBaseAndBitshift+0x68>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	aaaaaaab 	.word	0xaaaaaaab
 8002a68:	08006974 	.word	0x08006974
 8002a6c:	fffffc00 	.word	0xfffffc00

08002a70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d11f      	bne.n	8002aca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d856      	bhi.n	8002b3e <DMA_CheckFifoParam+0xce>
 8002a90:	a201      	add	r2, pc, #4	@ (adr r2, 8002a98 <DMA_CheckFifoParam+0x28>)
 8002a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a96:	bf00      	nop
 8002a98:	08002aa9 	.word	0x08002aa9
 8002a9c:	08002abb 	.word	0x08002abb
 8002aa0:	08002aa9 	.word	0x08002aa9
 8002aa4:	08002b3f 	.word	0x08002b3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d046      	beq.n	8002b42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab8:	e043      	b.n	8002b42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ac2:	d140      	bne.n	8002b46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac8:	e03d      	b.n	8002b46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ad2:	d121      	bne.n	8002b18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d837      	bhi.n	8002b4a <DMA_CheckFifoParam+0xda>
 8002ada:	a201      	add	r2, pc, #4	@ (adr r2, 8002ae0 <DMA_CheckFifoParam+0x70>)
 8002adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae0:	08002af1 	.word	0x08002af1
 8002ae4:	08002af7 	.word	0x08002af7
 8002ae8:	08002af1 	.word	0x08002af1
 8002aec:	08002b09 	.word	0x08002b09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]
      break;
 8002af4:	e030      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d025      	beq.n	8002b4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b06:	e022      	b.n	8002b4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b10:	d11f      	bne.n	8002b52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b16:	e01c      	b.n	8002b52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d903      	bls.n	8002b26 <DMA_CheckFifoParam+0xb6>
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d003      	beq.n	8002b2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b24:	e018      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	73fb      	strb	r3, [r7, #15]
      break;
 8002b2a:	e015      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00e      	beq.n	8002b56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b3c:	e00b      	b.n	8002b56 <DMA_CheckFifoParam+0xe6>
      break;
 8002b3e:	bf00      	nop
 8002b40:	e00a      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
      break;
 8002b42:	bf00      	nop
 8002b44:	e008      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
      break;
 8002b46:	bf00      	nop
 8002b48:	e006      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
      break;
 8002b4a:	bf00      	nop
 8002b4c:	e004      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
      break;
 8002b4e:	bf00      	nop
 8002b50:	e002      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b52:	bf00      	nop
 8002b54:	e000      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
      break;
 8002b56:	bf00      	nop
    }
  } 
  
  return status; 
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop

08002b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b089      	sub	sp, #36	@ 0x24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	e169      	b.n	8002e5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b88:	2201      	movs	r2, #1
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	f040 8158 	bne.w	8002e56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d005      	beq.n	8002bbe <HAL_GPIO_Init+0x56>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d130      	bne.n	8002c20 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	2203      	movs	r2, #3
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	091b      	lsrs	r3, r3, #4
 8002c0a:	f003 0201 	and.w	r2, r3, #1
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d017      	beq.n	8002c5c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	2203      	movs	r2, #3
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d123      	bne.n	8002cb0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	08da      	lsrs	r2, r3, #3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3208      	adds	r2, #8
 8002c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	220f      	movs	r2, #15
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	08da      	lsrs	r2, r3, #3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3208      	adds	r2, #8
 8002caa:	69b9      	ldr	r1, [r7, #24]
 8002cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	2203      	movs	r2, #3
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 0203 	and.w	r2, r3, #3
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80b2 	beq.w	8002e56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf2:	4b60      	ldr	r3, [pc, #384]	@ (8002e74 <HAL_GPIO_Init+0x30c>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf6:	4a5f      	ldr	r2, [pc, #380]	@ (8002e74 <HAL_GPIO_Init+0x30c>)
 8002cf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cfe:	4b5d      	ldr	r3, [pc, #372]	@ (8002e74 <HAL_GPIO_Init+0x30c>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d0a:	4a5b      	ldr	r2, [pc, #364]	@ (8002e78 <HAL_GPIO_Init+0x310>)
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	089b      	lsrs	r3, r3, #2
 8002d10:	3302      	adds	r3, #2
 8002d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	220f      	movs	r2, #15
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a52      	ldr	r2, [pc, #328]	@ (8002e7c <HAL_GPIO_Init+0x314>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d02b      	beq.n	8002d8e <HAL_GPIO_Init+0x226>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a51      	ldr	r2, [pc, #324]	@ (8002e80 <HAL_GPIO_Init+0x318>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d025      	beq.n	8002d8a <HAL_GPIO_Init+0x222>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a50      	ldr	r2, [pc, #320]	@ (8002e84 <HAL_GPIO_Init+0x31c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d01f      	beq.n	8002d86 <HAL_GPIO_Init+0x21e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a4f      	ldr	r2, [pc, #316]	@ (8002e88 <HAL_GPIO_Init+0x320>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d019      	beq.n	8002d82 <HAL_GPIO_Init+0x21a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a4e      	ldr	r2, [pc, #312]	@ (8002e8c <HAL_GPIO_Init+0x324>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d013      	beq.n	8002d7e <HAL_GPIO_Init+0x216>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a4d      	ldr	r2, [pc, #308]	@ (8002e90 <HAL_GPIO_Init+0x328>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00d      	beq.n	8002d7a <HAL_GPIO_Init+0x212>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a4c      	ldr	r2, [pc, #304]	@ (8002e94 <HAL_GPIO_Init+0x32c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d007      	beq.n	8002d76 <HAL_GPIO_Init+0x20e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a4b      	ldr	r2, [pc, #300]	@ (8002e98 <HAL_GPIO_Init+0x330>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d101      	bne.n	8002d72 <HAL_GPIO_Init+0x20a>
 8002d6e:	2307      	movs	r3, #7
 8002d70:	e00e      	b.n	8002d90 <HAL_GPIO_Init+0x228>
 8002d72:	2308      	movs	r3, #8
 8002d74:	e00c      	b.n	8002d90 <HAL_GPIO_Init+0x228>
 8002d76:	2306      	movs	r3, #6
 8002d78:	e00a      	b.n	8002d90 <HAL_GPIO_Init+0x228>
 8002d7a:	2305      	movs	r3, #5
 8002d7c:	e008      	b.n	8002d90 <HAL_GPIO_Init+0x228>
 8002d7e:	2304      	movs	r3, #4
 8002d80:	e006      	b.n	8002d90 <HAL_GPIO_Init+0x228>
 8002d82:	2303      	movs	r3, #3
 8002d84:	e004      	b.n	8002d90 <HAL_GPIO_Init+0x228>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e002      	b.n	8002d90 <HAL_GPIO_Init+0x228>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <HAL_GPIO_Init+0x228>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	69fa      	ldr	r2, [r7, #28]
 8002d92:	f002 0203 	and.w	r2, r2, #3
 8002d96:	0092      	lsls	r2, r2, #2
 8002d98:	4093      	lsls	r3, r2
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002da0:	4935      	ldr	r1, [pc, #212]	@ (8002e78 <HAL_GPIO_Init+0x310>)
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	089b      	lsrs	r3, r3, #2
 8002da6:	3302      	adds	r3, #2
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dae:	4b3b      	ldr	r3, [pc, #236]	@ (8002e9c <HAL_GPIO_Init+0x334>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dd2:	4a32      	ldr	r2, [pc, #200]	@ (8002e9c <HAL_GPIO_Init+0x334>)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dd8:	4b30      	ldr	r3, [pc, #192]	@ (8002e9c <HAL_GPIO_Init+0x334>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dfc:	4a27      	ldr	r2, [pc, #156]	@ (8002e9c <HAL_GPIO_Init+0x334>)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e02:	4b26      	ldr	r3, [pc, #152]	@ (8002e9c <HAL_GPIO_Init+0x334>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e26:	4a1d      	ldr	r2, [pc, #116]	@ (8002e9c <HAL_GPIO_Init+0x334>)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e9c <HAL_GPIO_Init+0x334>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e50:	4a12      	ldr	r2, [pc, #72]	@ (8002e9c <HAL_GPIO_Init+0x334>)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	2b0f      	cmp	r3, #15
 8002e60:	f67f ae92 	bls.w	8002b88 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
 8002e68:	3724      	adds	r7, #36	@ 0x24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40013800 	.word	0x40013800
 8002e7c:	40020000 	.word	0x40020000
 8002e80:	40020400 	.word	0x40020400
 8002e84:	40020800 	.word	0x40020800
 8002e88:	40020c00 	.word	0x40020c00
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40021400 	.word	0x40021400
 8002e94:	40021800 	.word	0x40021800
 8002e98:	40021c00 	.word	0x40021c00
 8002e9c:	40013c00 	.word	0x40013c00

08002ea0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	887b      	ldrh	r3, [r7, #2]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	73fb      	strb	r3, [r7, #15]
 8002ebc:	e001      	b.n	8002ec2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	807b      	strh	r3, [r7, #2]
 8002edc:	4613      	mov	r3, r2
 8002ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ee0:	787b      	ldrb	r3, [r7, #1]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ee6:	887a      	ldrh	r2, [r7, #2]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002eec:	e003      	b.n	8002ef6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002eee:	887b      	ldrh	r3, [r7, #2]
 8002ef0:	041a      	lsls	r2, r3, #16
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	619a      	str	r2, [r3, #24]
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e08b      	b.n	800302e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fe fad6 	bl	80014dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2224      	movs	r2, #36	@ 0x24
 8002f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d107      	bne.n	8002f7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	e006      	b.n	8002f8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002f8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d108      	bne.n	8002fa6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fa2:	605a      	str	r2, [r3, #4]
 8002fa4:	e007      	b.n	8002fb6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fb4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6859      	ldr	r1, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8003038 <HAL_I2C_Init+0x134>)
 8002fc2:	430b      	orrs	r3, r1
 8002fc4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69d9      	ldr	r1, [r3, #28]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1a      	ldr	r2, [r3, #32]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2220      	movs	r2, #32
 800301a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	02008000 	.word	0x02008000

0800303c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	68f9      	ldr	r1, [r7, #12]
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	4798      	blx	r3
  }
}
 8003068:	bf00      	nop
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00f      	beq.n	80030b2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a0:	f043 0201 	orr.w	r2, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030b0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00f      	beq.n	80030dc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ca:	f043 0208 	orr.w	r2, r3, #8
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030da:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00f      	beq.n	8003106 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00a      	beq.n	8003106 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f4:	f043 0202 	orr.w	r2, r3, #2
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003104:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 030b 	and.w	r3, r3, #11
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8003116:	68f9      	ldr	r1, [r7, #12]
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 fbd5 	bl	80038c8 <I2C_ITError>
  }
}
 800311e:	bf00      	nop
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	460b      	mov	r3, r1
 8003158:	70fb      	strb	r3, [r7, #3]
 800315a:	4613      	mov	r3, r2
 800315c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b086      	sub	sp, #24
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <I2C_Slave_ISR_IT+0x24>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e0e2      	b.n	8003390 <I2C_Slave_ISR_IT+0x1ea>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d009      	beq.n	80031f0 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d004      	beq.n	80031f0 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80031e6:	6939      	ldr	r1, [r7, #16]
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 f9b5 	bl	8003558 <I2C_ITSlaveCplt>
 80031ee:	e0ca      	b.n	8003386 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d04b      	beq.n	8003292 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003200:	2b00      	cmp	r3, #0
 8003202:	d046      	beq.n	8003292 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d128      	bne.n	8003260 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b28      	cmp	r3, #40	@ 0x28
 8003218:	d108      	bne.n	800322c <I2C_Slave_ISR_IT+0x86>
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003220:	d104      	bne.n	800322c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003222:	6939      	ldr	r1, [r7, #16]
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fafb 	bl	8003820 <I2C_ITListenCplt>
 800322a:	e031      	b.n	8003290 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b29      	cmp	r3, #41	@ 0x29
 8003236:	d10e      	bne.n	8003256 <I2C_Slave_ISR_IT+0xb0>
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800323e:	d00a      	beq.n	8003256 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2210      	movs	r2, #16
 8003246:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 fc54 	bl	8003af6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 f926 	bl	80034a0 <I2C_ITSlaveSeqCplt>
 8003254:	e01c      	b.n	8003290 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2210      	movs	r2, #16
 800325c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800325e:	e08f      	b.n	8003380 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2210      	movs	r2, #16
 8003266:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326c:	f043 0204 	orr.w	r2, r3, #4
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <I2C_Slave_ISR_IT+0xdc>
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003280:	d17e      	bne.n	8003380 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003286:	4619      	mov	r1, r3
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 fb1d 	bl	80038c8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800328e:	e077      	b.n	8003380 <I2C_Slave_ISR_IT+0x1da>
 8003290:	e076      	b.n	8003380 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d02f      	beq.n	80032fc <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d02a      	beq.n	80032fc <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d018      	beq.n	80032e2 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d14b      	bne.n	8003384 <I2C_Slave_ISR_IT+0x1de>
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032f2:	d047      	beq.n	8003384 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 f8d3 	bl	80034a0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80032fa:	e043      	b.n	8003384 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800330c:	2b00      	cmp	r3, #0
 800330e:	d004      	beq.n	800331a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003310:	6939      	ldr	r1, [r7, #16]
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f840 	bl	8003398 <I2C_ITAddrCplt>
 8003318:	e035      	b.n	8003386 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d030      	beq.n	8003386 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800332a:	2b00      	cmp	r3, #0
 800332c:	d02b      	beq.n	8003386 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003332:	b29b      	uxth	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d018      	beq.n	800336a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333c:	781a      	ldrb	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003368:	e00d      	b.n	8003386 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003370:	d002      	beq.n	8003378 <I2C_Slave_ISR_IT+0x1d2>
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d106      	bne.n	8003386 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 f891 	bl	80034a0 <I2C_ITSlaveSeqCplt>
 800337e:	e002      	b.n	8003386 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003380:	bf00      	nop
 8003382:	e000      	b.n	8003386 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8003384:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80033ae:	2b28      	cmp	r3, #40	@ 0x28
 80033b0:	d16a      	bne.n	8003488 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	0c1b      	lsrs	r3, r3, #16
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	0c1b      	lsrs	r3, r3, #16
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80033d0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033de:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80033ec:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d138      	bne.n	8003468 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80033f6:	897b      	ldrh	r3, [r7, #10]
 80033f8:	09db      	lsrs	r3, r3, #7
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	89bb      	ldrh	r3, [r7, #12]
 80033fe:	4053      	eors	r3, r2
 8003400:	b29b      	uxth	r3, r3
 8003402:	f003 0306 	and.w	r3, r3, #6
 8003406:	2b00      	cmp	r3, #0
 8003408:	d11c      	bne.n	8003444 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800340a:	897b      	ldrh	r3, [r7, #10]
 800340c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800341c:	2b02      	cmp	r3, #2
 800341e:	d13b      	bne.n	8003498 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2208      	movs	r2, #8
 800342c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003436:	89ba      	ldrh	r2, [r7, #12]
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	4619      	mov	r1, r3
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff fe86 	bl	800314e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003442:	e029      	b.n	8003498 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003444:	893b      	ldrh	r3, [r7, #8]
 8003446:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003448:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fb94 	bl	8003b7a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800345a:	89ba      	ldrh	r2, [r7, #12]
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	4619      	mov	r1, r3
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff fe74 	bl	800314e <HAL_I2C_AddrCallback>
}
 8003466:	e017      	b.n	8003498 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003468:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 fb84 	bl	8003b7a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800347a:	89ba      	ldrh	r2, [r7, #12]
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	4619      	mov	r1, r3
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff fe64 	bl	800314e <HAL_I2C_AddrCallback>
}
 8003486:	e007      	b.n	8003498 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2208      	movs	r2, #8
 800348e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003498:	bf00      	nop
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d008      	beq.n	80034d4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	e00c      	b.n	80034ee <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d007      	beq.n	80034ee <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034ec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b29      	cmp	r3, #41	@ 0x29
 80034f8:	d112      	bne.n	8003520 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2228      	movs	r2, #40	@ 0x28
 80034fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2221      	movs	r2, #33	@ 0x21
 8003506:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003508:	2101      	movs	r1, #1
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fb35 	bl	8003b7a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff fe04 	bl	8003126 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800351e:	e017      	b.n	8003550 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b2a      	cmp	r3, #42	@ 0x2a
 800352a:	d111      	bne.n	8003550 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2228      	movs	r2, #40	@ 0x28
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2222      	movs	r2, #34	@ 0x22
 8003538:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800353a:	2102      	movs	r1, #2
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fb1c 	bl	8003b7a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff fdf5 	bl	800313a <HAL_I2C_SlaveRxCpltCallback>
}
 8003550:	bf00      	nop
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003572:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800357a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2220      	movs	r2, #32
 8003582:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003584:	7afb      	ldrb	r3, [r7, #11]
 8003586:	2b21      	cmp	r3, #33	@ 0x21
 8003588:	d002      	beq.n	8003590 <I2C_ITSlaveCplt+0x38>
 800358a:	7afb      	ldrb	r3, [r7, #11]
 800358c:	2b29      	cmp	r3, #41	@ 0x29
 800358e:	d108      	bne.n	80035a2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003590:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 faf0 	bl	8003b7a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2221      	movs	r2, #33	@ 0x21
 800359e:	631a      	str	r2, [r3, #48]	@ 0x30
 80035a0:	e019      	b.n	80035d6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035a2:	7afb      	ldrb	r3, [r7, #11]
 80035a4:	2b22      	cmp	r3, #34	@ 0x22
 80035a6:	d002      	beq.n	80035ae <I2C_ITSlaveCplt+0x56>
 80035a8:	7afb      	ldrb	r3, [r7, #11]
 80035aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80035ac:	d108      	bne.n	80035c0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80035ae:	f248 0102 	movw	r1, #32770	@ 0x8002
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fae1 	bl	8003b7a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2222      	movs	r2, #34	@ 0x22
 80035bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80035be:	e00a      	b.n	80035d6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80035c0:	7afb      	ldrb	r3, [r7, #11]
 80035c2:	2b28      	cmp	r3, #40	@ 0x28
 80035c4:	d107      	bne.n	80035d6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80035c6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fad5 	bl	8003b7a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035e4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6859      	ldr	r1, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	4b89      	ldr	r3, [pc, #548]	@ (8003818 <I2C_ITSlaveCplt+0x2c0>)
 80035f2:	400b      	ands	r3, r1
 80035f4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fa7d 	bl	8003af6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d013      	beq.n	800362e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003614:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361a:	2b00      	cmp	r3, #0
 800361c:	d01f      	beq.n	800365e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	b29a      	uxth	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800362c:	e017      	b.n	800365e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d012      	beq.n	800365e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003646:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d006      	beq.n	800365e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	b29a      	uxth	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d020      	beq.n	80036aa <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f023 0304 	bic.w	r3, r3, #4
 800366e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00c      	beq.n	80036aa <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b8:	f043 0204 	orr.w	r2, r3, #4
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f003 0310 	and.w	r3, r3, #16
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d049      	beq.n	800375e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d044      	beq.n	800375e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d128      	bne.n	8003730 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b28      	cmp	r3, #40	@ 0x28
 80036e8:	d108      	bne.n	80036fc <I2C_ITSlaveCplt+0x1a4>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036f0:	d104      	bne.n	80036fc <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80036f2:	6979      	ldr	r1, [r7, #20]
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f893 	bl	8003820 <I2C_ITListenCplt>
 80036fa:	e030      	b.n	800375e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b29      	cmp	r3, #41	@ 0x29
 8003706:	d10e      	bne.n	8003726 <I2C_ITSlaveCplt+0x1ce>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800370e:	d00a      	beq.n	8003726 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2210      	movs	r2, #16
 8003716:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f9ec 	bl	8003af6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff febe 	bl	80034a0 <I2C_ITSlaveSeqCplt>
 8003724:	e01b      	b.n	800375e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2210      	movs	r2, #16
 800372c:	61da      	str	r2, [r3, #28]
 800372e:	e016      	b.n	800375e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2210      	movs	r2, #16
 8003736:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373c:	f043 0204 	orr.w	r2, r3, #4
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <I2C_ITSlaveCplt+0x1fa>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003750:	d105      	bne.n	800375e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003756:	4619      	mov	r1, r3
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f8b5 	bl	80038c8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003770:	2b00      	cmp	r3, #0
 8003772:	d010      	beq.n	8003796 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003778:	4619      	mov	r1, r3
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f8a4 	bl	80038c8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b28      	cmp	r3, #40	@ 0x28
 800378a:	d141      	bne.n	8003810 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800378c:	6979      	ldr	r1, [r7, #20]
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f846 	bl	8003820 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003794:	e03c      	b.n	8003810 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800379e:	d014      	beq.n	80037ca <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff fe7d 	bl	80034a0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a1c      	ldr	r2, [pc, #112]	@ (800381c <I2C_ITSlaveCplt+0x2c4>)
 80037aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff fcd1 	bl	800316a <HAL_I2C_ListenCpltCallback>
}
 80037c8:	e022      	b.n	8003810 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b22      	cmp	r3, #34	@ 0x22
 80037d4:	d10e      	bne.n	80037f4 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff fca4 	bl	800313a <HAL_I2C_SlaveRxCpltCallback>
}
 80037f2:	e00d      	b.n	8003810 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff fc8b 	bl	8003126 <HAL_I2C_SlaveTxCpltCallback>
}
 8003810:	bf00      	nop
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	fe00e800 	.word	0xfe00e800
 800381c:	ffff0000 	.word	0xffff0000

08003820 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a25      	ldr	r2, [pc, #148]	@ (80038c4 <I2C_ITListenCplt+0xa4>)
 800382e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2220      	movs	r2, #32
 800383a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b00      	cmp	r3, #0
 8003854:	d022      	beq.n	800389c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003872:	2b00      	cmp	r3, #0
 8003874:	d012      	beq.n	800389c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003894:	f043 0204 	orr.w	r2, r3, #4
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800389c:	f248 0103 	movw	r1, #32771	@ 0x8003
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f96a 	bl	8003b7a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2210      	movs	r2, #16
 80038ac:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7ff fc57 	bl	800316a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80038bc:	bf00      	nop
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	ffff0000 	.word	0xffff0000

080038c8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038d8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a6d      	ldr	r2, [pc, #436]	@ (8003a9c <I2C_ITError+0x1d4>)
 80038e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	2b28      	cmp	r3, #40	@ 0x28
 80038fe:	d005      	beq.n	800390c <I2C_ITError+0x44>
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	2b29      	cmp	r3, #41	@ 0x29
 8003904:	d002      	beq.n	800390c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	2b2a      	cmp	r3, #42	@ 0x2a
 800390a:	d10b      	bne.n	8003924 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800390c:	2103      	movs	r1, #3
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f933 	bl	8003b7a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2228      	movs	r2, #40	@ 0x28
 8003918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a60      	ldr	r2, [pc, #384]	@ (8003aa0 <I2C_ITError+0x1d8>)
 8003920:	635a      	str	r2, [r3, #52]	@ 0x34
 8003922:	e030      	b.n	8003986 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003924:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f926 	bl	8003b7a <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f8e1 	bl	8003af6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b60      	cmp	r3, #96	@ 0x60
 800393e:	d01f      	beq.n	8003980 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b20      	cmp	r3, #32
 8003954:	d114      	bne.n	8003980 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b10      	cmp	r3, #16
 8003962:	d109      	bne.n	8003978 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2210      	movs	r2, #16
 800396a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003970:	f043 0204 	orr.w	r2, r3, #4
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2220      	movs	r2, #32
 800397e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003990:	2b00      	cmp	r3, #0
 8003992:	d039      	beq.n	8003a08 <I2C_ITError+0x140>
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b11      	cmp	r3, #17
 8003998:	d002      	beq.n	80039a0 <I2C_ITError+0xd8>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b21      	cmp	r3, #33	@ 0x21
 800399e:	d133      	bne.n	8003a08 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039ae:	d107      	bne.n	80039c0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80039be:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff f80f 	bl	80029e8 <HAL_DMA_GetState>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d017      	beq.n	8003a00 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d4:	4a33      	ldr	r2, [pc, #204]	@ (8003aa4 <I2C_ITError+0x1dc>)
 80039d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fe fe53 	bl	8002690 <HAL_DMA_Abort_IT>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d04d      	beq.n	8003a8c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80039fa:	4610      	mov	r0, r2
 80039fc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039fe:	e045      	b.n	8003a8c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f851 	bl	8003aa8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a06:	e041      	b.n	8003a8c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d039      	beq.n	8003a84 <I2C_ITError+0x1bc>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b12      	cmp	r3, #18
 8003a14:	d002      	beq.n	8003a1c <I2C_ITError+0x154>
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2b22      	cmp	r3, #34	@ 0x22
 8003a1a:	d133      	bne.n	8003a84 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a2a:	d107      	bne.n	8003a3c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a3a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe ffd1 	bl	80029e8 <HAL_DMA_GetState>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d017      	beq.n	8003a7c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a50:	4a14      	ldr	r2, [pc, #80]	@ (8003aa4 <I2C_ITError+0x1dc>)
 8003a52:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fe fe15 	bl	8002690 <HAL_DMA_Abort_IT>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d011      	beq.n	8003a90 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a76:	4610      	mov	r0, r2
 8003a78:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a7a:	e009      	b.n	8003a90 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f813 	bl	8003aa8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a82:	e005      	b.n	8003a90 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f80f 	bl	8003aa8 <I2C_TreatErrorCallback>
  }
}
 8003a8a:	e002      	b.n	8003a92 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a8c:	bf00      	nop
 8003a8e:	e000      	b.n	8003a92 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a90:	bf00      	nop
}
 8003a92:	bf00      	nop
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	ffff0000 	.word	0xffff0000
 8003aa0:	080031a7 	.word	0x080031a7
 8003aa4:	08003b3f 	.word	0x08003b3f

08003aa8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b60      	cmp	r3, #96	@ 0x60
 8003aba:	d10e      	bne.n	8003ada <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff fb5d 	bl	8003192 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ad8:	e009      	b.n	8003aee <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff fb48 	bl	800317e <HAL_I2C_ErrorCallback>
}
 8003aee:	bf00      	nop
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d103      	bne.n	8003b14 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2200      	movs	r2, #0
 8003b12:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d007      	beq.n	8003b32 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699a      	ldr	r2, [r3, #24]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0201 	orr.w	r2, r2, #1
 8003b30:	619a      	str	r2, [r3, #24]
  }
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b58:	2200      	movs	r2, #0
 8003b5a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b68:	2200      	movs	r2, #0
 8003b6a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f7ff ff9b 	bl	8003aa8 <I2C_TreatErrorCallback>
}
 8003b72:	bf00      	nop
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b085      	sub	sp, #20
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	460b      	mov	r3, r1
 8003b84:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003b8a:	887b      	ldrh	r3, [r7, #2]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00f      	beq.n	8003bb4 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003b9a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ba8:	2b28      	cmp	r3, #40	@ 0x28
 8003baa:	d003      	beq.n	8003bb4 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003bb2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003bb4:	887b      	ldrh	r3, [r7, #2]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00f      	beq.n	8003bde <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003bc4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003bd2:	2b28      	cmp	r3, #40	@ 0x28
 8003bd4:	d003      	beq.n	8003bde <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003bdc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003bde:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	da03      	bge.n	8003bee <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003bec:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003bee:	887b      	ldrh	r3, [r7, #2]
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d103      	bne.n	8003bfc <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003bfa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003bfc:	887b      	ldrh	r3, [r7, #2]
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	d103      	bne.n	8003c0a <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f043 0320 	orr.w	r3, r3, #32
 8003c08:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003c0a:	887b      	ldrh	r3, [r7, #2]
 8003c0c:	2b40      	cmp	r3, #64	@ 0x40
 8003c0e:	d103      	bne.n	8003c18 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c16:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6819      	ldr	r1, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	43da      	mvns	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	400a      	ands	r2, r1
 8003c28:	601a      	str	r2, [r3, #0]
}
 8003c2a:	bf00      	nop
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d138      	bne.n	8003cbe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e032      	b.n	8003cc0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2224      	movs	r2, #36	@ 0x24
 8003c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0201 	bic.w	r2, r2, #1
 8003c78:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c88:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6819      	ldr	r1, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0201 	orr.w	r2, r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	e000      	b.n	8003cc0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cbe:	2302      	movs	r3, #2
  }
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b20      	cmp	r3, #32
 8003ce0:	d139      	bne.n	8003d56 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e033      	b.n	8003d58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2224      	movs	r2, #36	@ 0x24
 8003cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0201 	bic.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003d1e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	021b      	lsls	r3, r3, #8
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0201 	orr.w	r2, r2, #1
 8003d40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	e000      	b.n	8003d58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d56:	2302      	movs	r3, #2
  }
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e291      	b.n	800429e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 8087 	beq.w	8003e96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d88:	4b96      	ldr	r3, [pc, #600]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 030c 	and.w	r3, r3, #12
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d00c      	beq.n	8003dae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d94:	4b93      	ldr	r3, [pc, #588]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 030c 	and.w	r3, r3, #12
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d112      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x62>
 8003da0:	4b90      	ldr	r3, [pc, #576]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003da8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dac:	d10b      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dae:	4b8d      	ldr	r3, [pc, #564]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d06c      	beq.n	8003e94 <HAL_RCC_OscConfig+0x130>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d168      	bne.n	8003e94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e26b      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dce:	d106      	bne.n	8003dde <HAL_RCC_OscConfig+0x7a>
 8003dd0:	4b84      	ldr	r3, [pc, #528]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a83      	ldr	r2, [pc, #524]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003dd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	e02e      	b.n	8003e3c <HAL_RCC_OscConfig+0xd8>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10c      	bne.n	8003e00 <HAL_RCC_OscConfig+0x9c>
 8003de6:	4b7f      	ldr	r3, [pc, #508]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a7e      	ldr	r2, [pc, #504]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003dec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	4b7c      	ldr	r3, [pc, #496]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a7b      	ldr	r2, [pc, #492]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003df8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	e01d      	b.n	8003e3c <HAL_RCC_OscConfig+0xd8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e08:	d10c      	bne.n	8003e24 <HAL_RCC_OscConfig+0xc0>
 8003e0a:	4b76      	ldr	r3, [pc, #472]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a75      	ldr	r2, [pc, #468]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003e10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	4b73      	ldr	r3, [pc, #460]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a72      	ldr	r2, [pc, #456]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	e00b      	b.n	8003e3c <HAL_RCC_OscConfig+0xd8>
 8003e24:	4b6f      	ldr	r3, [pc, #444]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a6e      	ldr	r2, [pc, #440]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003e2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	4b6c      	ldr	r3, [pc, #432]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a6b      	ldr	r2, [pc, #428]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003e36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d013      	beq.n	8003e6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7fd fe7a 	bl	8001b3c <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e4c:	f7fd fe76 	bl	8001b3c <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b64      	cmp	r3, #100	@ 0x64
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e21f      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5e:	4b61      	ldr	r3, [pc, #388]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0f0      	beq.n	8003e4c <HAL_RCC_OscConfig+0xe8>
 8003e6a:	e014      	b.n	8003e96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6c:	f7fd fe66 	bl	8001b3c <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e74:	f7fd fe62 	bl	8001b3c <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b64      	cmp	r3, #100	@ 0x64
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e20b      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e86:	4b57      	ldr	r3, [pc, #348]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x110>
 8003e92:	e000      	b.n	8003e96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d069      	beq.n	8003f76 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ea2:	4b50      	ldr	r3, [pc, #320]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 030c 	and.w	r3, r3, #12
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00b      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eae:	4b4d      	ldr	r3, [pc, #308]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d11c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x190>
 8003eba:	4b4a      	ldr	r3, [pc, #296]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d116      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ec6:	4b47      	ldr	r3, [pc, #284]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d005      	beq.n	8003ede <HAL_RCC_OscConfig+0x17a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d001      	beq.n	8003ede <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e1df      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ede:	4b41      	ldr	r3, [pc, #260]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	493d      	ldr	r1, [pc, #244]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ef2:	e040      	b.n	8003f76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d023      	beq.n	8003f44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003efc:	4b39      	ldr	r3, [pc, #228]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a38      	ldr	r2, [pc, #224]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f08:	f7fd fe18 	bl	8001b3c <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f10:	f7fd fe14 	bl	8001b3c <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e1bd      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f22:	4b30      	ldr	r3, [pc, #192]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2e:	4b2d      	ldr	r3, [pc, #180]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	4929      	ldr	r1, [pc, #164]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	600b      	str	r3, [r1, #0]
 8003f42:	e018      	b.n	8003f76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f44:	4b27      	ldr	r3, [pc, #156]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a26      	ldr	r2, [pc, #152]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003f4a:	f023 0301 	bic.w	r3, r3, #1
 8003f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fd fdf4 	bl	8001b3c <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f58:	f7fd fdf0 	bl	8001b3c <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e199      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f0      	bne.n	8003f58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d038      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d019      	beq.n	8003fbe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f8a:	4b16      	ldr	r3, [pc, #88]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003f8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f8e:	4a15      	ldr	r2, [pc, #84]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003f90:	f043 0301 	orr.w	r3, r3, #1
 8003f94:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f96:	f7fd fdd1 	bl	8001b3c <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f9e:	f7fd fdcd 	bl	8001b3c <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e176      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003fb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0f0      	beq.n	8003f9e <HAL_RCC_OscConfig+0x23a>
 8003fbc:	e01a      	b.n	8003ff4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fbe:	4b09      	ldr	r3, [pc, #36]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fc2:	4a08      	ldr	r2, [pc, #32]	@ (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003fc4:	f023 0301 	bic.w	r3, r3, #1
 8003fc8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fca:	f7fd fdb7 	bl	8001b3c <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fd0:	e00a      	b.n	8003fe8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fd2:	f7fd fdb3 	bl	8001b3c <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d903      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e15c      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
 8003fe4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe8:	4b91      	ldr	r3, [pc, #580]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8003fea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1ee      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 80a4 	beq.w	800414a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004002:	4b8b      	ldr	r3, [pc, #556]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10d      	bne.n	800402a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800400e:	4b88      	ldr	r3, [pc, #544]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004012:	4a87      	ldr	r2, [pc, #540]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004018:	6413      	str	r3, [r2, #64]	@ 0x40
 800401a:	4b85      	ldr	r3, [pc, #532]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 800401c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004022:	60bb      	str	r3, [r7, #8]
 8004024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004026:	2301      	movs	r3, #1
 8004028:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800402a:	4b82      	ldr	r3, [pc, #520]	@ (8004234 <HAL_RCC_OscConfig+0x4d0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004032:	2b00      	cmp	r3, #0
 8004034:	d118      	bne.n	8004068 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004036:	4b7f      	ldr	r3, [pc, #508]	@ (8004234 <HAL_RCC_OscConfig+0x4d0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a7e      	ldr	r2, [pc, #504]	@ (8004234 <HAL_RCC_OscConfig+0x4d0>)
 800403c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004042:	f7fd fd7b 	bl	8001b3c <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800404a:	f7fd fd77 	bl	8001b3c <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b64      	cmp	r3, #100	@ 0x64
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e120      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800405c:	4b75      	ldr	r3, [pc, #468]	@ (8004234 <HAL_RCC_OscConfig+0x4d0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0f0      	beq.n	800404a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d106      	bne.n	800407e <HAL_RCC_OscConfig+0x31a>
 8004070:	4b6f      	ldr	r3, [pc, #444]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004074:	4a6e      	ldr	r2, [pc, #440]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	6713      	str	r3, [r2, #112]	@ 0x70
 800407c:	e02d      	b.n	80040da <HAL_RCC_OscConfig+0x376>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10c      	bne.n	80040a0 <HAL_RCC_OscConfig+0x33c>
 8004086:	4b6a      	ldr	r3, [pc, #424]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408a:	4a69      	ldr	r2, [pc, #420]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 800408c:	f023 0301 	bic.w	r3, r3, #1
 8004090:	6713      	str	r3, [r2, #112]	@ 0x70
 8004092:	4b67      	ldr	r3, [pc, #412]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004096:	4a66      	ldr	r2, [pc, #408]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004098:	f023 0304 	bic.w	r3, r3, #4
 800409c:	6713      	str	r3, [r2, #112]	@ 0x70
 800409e:	e01c      	b.n	80040da <HAL_RCC_OscConfig+0x376>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2b05      	cmp	r3, #5
 80040a6:	d10c      	bne.n	80040c2 <HAL_RCC_OscConfig+0x35e>
 80040a8:	4b61      	ldr	r3, [pc, #388]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80040aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ac:	4a60      	ldr	r2, [pc, #384]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80040ae:	f043 0304 	orr.w	r3, r3, #4
 80040b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040b4:	4b5e      	ldr	r3, [pc, #376]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b8:	4a5d      	ldr	r2, [pc, #372]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	6713      	str	r3, [r2, #112]	@ 0x70
 80040c0:	e00b      	b.n	80040da <HAL_RCC_OscConfig+0x376>
 80040c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c6:	4a5a      	ldr	r2, [pc, #360]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ce:	4b58      	ldr	r3, [pc, #352]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d2:	4a57      	ldr	r2, [pc, #348]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80040d4:	f023 0304 	bic.w	r3, r3, #4
 80040d8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d015      	beq.n	800410e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e2:	f7fd fd2b 	bl	8001b3c <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e8:	e00a      	b.n	8004100 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ea:	f7fd fd27 	bl	8001b3c <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e0ce      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004100:	4b4b      	ldr	r3, [pc, #300]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0ee      	beq.n	80040ea <HAL_RCC_OscConfig+0x386>
 800410c:	e014      	b.n	8004138 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410e:	f7fd fd15 	bl	8001b3c <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004114:	e00a      	b.n	800412c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004116:	f7fd fd11 	bl	8001b3c <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004124:	4293      	cmp	r3, r2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e0b8      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800412c:	4b40      	ldr	r3, [pc, #256]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1ee      	bne.n	8004116 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004138:	7dfb      	ldrb	r3, [r7, #23]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d105      	bne.n	800414a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413e:	4b3c      	ldr	r3, [pc, #240]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004142:	4a3b      	ldr	r2, [pc, #236]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004144:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004148:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 80a4 	beq.w	800429c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004154:	4b36      	ldr	r3, [pc, #216]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 030c 	and.w	r3, r3, #12
 800415c:	2b08      	cmp	r3, #8
 800415e:	d06b      	beq.n	8004238 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d149      	bne.n	80041fc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004168:	4b31      	ldr	r3, [pc, #196]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a30      	ldr	r2, [pc, #192]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 800416e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fd fce2 	bl	8001b3c <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800417c:	f7fd fcde 	bl	8001b3c <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e087      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418e:	4b28      	ldr	r3, [pc, #160]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69da      	ldr	r2, [r3, #28]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a8:	019b      	lsls	r3, r3, #6
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b0:	085b      	lsrs	r3, r3, #1
 80041b2:	3b01      	subs	r3, #1
 80041b4:	041b      	lsls	r3, r3, #16
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041bc:	061b      	lsls	r3, r3, #24
 80041be:	4313      	orrs	r3, r2
 80041c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80041c2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80041c6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c8:	4b19      	ldr	r3, [pc, #100]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a18      	ldr	r2, [pc, #96]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80041ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d4:	f7fd fcb2 	bl	8001b3c <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041dc:	f7fd fcae 	bl	8001b3c <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e057      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ee:	4b10      	ldr	r3, [pc, #64]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0x478>
 80041fa:	e04f      	b.n	800429c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a0b      	ldr	r2, [pc, #44]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004202:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004208:	f7fd fc98 	bl	8001b3c <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004210:	f7fd fc94 	bl	8001b3c <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e03d      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004222:	4b03      	ldr	r3, [pc, #12]	@ (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x4ac>
 800422e:	e035      	b.n	800429c <HAL_RCC_OscConfig+0x538>
 8004230:	40023800 	.word	0x40023800
 8004234:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004238:	4b1b      	ldr	r3, [pc, #108]	@ (80042a8 <HAL_RCC_OscConfig+0x544>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d028      	beq.n	8004298 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004250:	429a      	cmp	r2, r3
 8004252:	d121      	bne.n	8004298 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425e:	429a      	cmp	r2, r3
 8004260:	d11a      	bne.n	8004298 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004268:	4013      	ands	r3, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800426e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004270:	4293      	cmp	r3, r2
 8004272:	d111      	bne.n	8004298 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800427e:	085b      	lsrs	r3, r3, #1
 8004280:	3b01      	subs	r3, #1
 8004282:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004284:	429a      	cmp	r2, r3
 8004286:	d107      	bne.n	8004298 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004292:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004294:	429a      	cmp	r2, r3
 8004296:	d001      	beq.n	800429c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e000      	b.n	800429e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40023800 	.word	0x40023800

080042ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80042b6:	2300      	movs	r3, #0
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0d0      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042c4:	4b6a      	ldr	r3, [pc, #424]	@ (8004470 <HAL_RCC_ClockConfig+0x1c4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d910      	bls.n	80042f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b67      	ldr	r3, [pc, #412]	@ (8004470 <HAL_RCC_ClockConfig+0x1c4>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f023 020f 	bic.w	r2, r3, #15
 80042da:	4965      	ldr	r1, [pc, #404]	@ (8004470 <HAL_RCC_ClockConfig+0x1c4>)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	4313      	orrs	r3, r2
 80042e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e2:	4b63      	ldr	r3, [pc, #396]	@ (8004470 <HAL_RCC_ClockConfig+0x1c4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d001      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0b8      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d020      	beq.n	8004342 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800430c:	4b59      	ldr	r3, [pc, #356]	@ (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	4a58      	ldr	r2, [pc, #352]	@ (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 8004312:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004316:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004324:	4b53      	ldr	r3, [pc, #332]	@ (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	4a52      	ldr	r2, [pc, #328]	@ (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 800432a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800432e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004330:	4b50      	ldr	r3, [pc, #320]	@ (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	494d      	ldr	r1, [pc, #308]	@ (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 800433e:	4313      	orrs	r3, r2
 8004340:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d040      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d107      	bne.n	8004366 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004356:	4b47      	ldr	r3, [pc, #284]	@ (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d115      	bne.n	800438e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e07f      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436e:	4b41      	ldr	r3, [pc, #260]	@ (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e073      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437e:	4b3d      	ldr	r3, [pc, #244]	@ (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e06b      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800438e:	4b39      	ldr	r3, [pc, #228]	@ (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f023 0203 	bic.w	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4936      	ldr	r1, [pc, #216]	@ (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a0:	f7fd fbcc 	bl	8001b3c <HAL_GetTick>
 80043a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	e00a      	b.n	80043be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a8:	f7fd fbc8 	bl	8001b3c <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e053      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043be:	4b2d      	ldr	r3, [pc, #180]	@ (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 020c 	and.w	r2, r3, #12
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d1eb      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043d0:	4b27      	ldr	r3, [pc, #156]	@ (8004470 <HAL_RCC_ClockConfig+0x1c4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 030f 	and.w	r3, r3, #15
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d210      	bcs.n	8004400 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043de:	4b24      	ldr	r3, [pc, #144]	@ (8004470 <HAL_RCC_ClockConfig+0x1c4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f023 020f 	bic.w	r2, r3, #15
 80043e6:	4922      	ldr	r1, [pc, #136]	@ (8004470 <HAL_RCC_ClockConfig+0x1c4>)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ee:	4b20      	ldr	r3, [pc, #128]	@ (8004470 <HAL_RCC_ClockConfig+0x1c4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d001      	beq.n	8004400 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e032      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800440c:	4b19      	ldr	r3, [pc, #100]	@ (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4916      	ldr	r1, [pc, #88]	@ (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 800441a:	4313      	orrs	r3, r2
 800441c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b00      	cmp	r3, #0
 8004428:	d009      	beq.n	800443e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800442a:	4b12      	ldr	r3, [pc, #72]	@ (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	490e      	ldr	r1, [pc, #56]	@ (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 800443a:	4313      	orrs	r3, r2
 800443c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800443e:	f000 f821 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 8004442:	4602      	mov	r2, r0
 8004444:	4b0b      	ldr	r3, [pc, #44]	@ (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	091b      	lsrs	r3, r3, #4
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	490a      	ldr	r1, [pc, #40]	@ (8004478 <HAL_RCC_ClockConfig+0x1cc>)
 8004450:	5ccb      	ldrb	r3, [r1, r3]
 8004452:	fa22 f303 	lsr.w	r3, r2, r3
 8004456:	4a09      	ldr	r2, [pc, #36]	@ (800447c <HAL_RCC_ClockConfig+0x1d0>)
 8004458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800445a:	4b09      	ldr	r3, [pc, #36]	@ (8004480 <HAL_RCC_ClockConfig+0x1d4>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7fd fb28 	bl	8001ab4 <HAL_InitTick>

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40023c00 	.word	0x40023c00
 8004474:	40023800 	.word	0x40023800
 8004478:	0800695c 	.word	0x0800695c
 800447c:	20000004 	.word	0x20000004
 8004480:	20000008 	.word	0x20000008

08004484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004488:	b090      	sub	sp, #64	@ 0x40
 800448a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800448c:	2300      	movs	r3, #0
 800448e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004490:	2300      	movs	r3, #0
 8004492:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004494:	2300      	movs	r3, #0
 8004496:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004498:	2300      	movs	r3, #0
 800449a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800449c:	4b59      	ldr	r3, [pc, #356]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x180>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 030c 	and.w	r3, r3, #12
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d00d      	beq.n	80044c4 <HAL_RCC_GetSysClockFreq+0x40>
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	f200 80a1 	bhi.w	80045f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_RCC_GetSysClockFreq+0x34>
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d003      	beq.n	80044be <HAL_RCC_GetSysClockFreq+0x3a>
 80044b6:	e09b      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044b8:	4b53      	ldr	r3, [pc, #332]	@ (8004608 <HAL_RCC_GetSysClockFreq+0x184>)
 80044ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044bc:	e09b      	b.n	80045f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044be:	4b53      	ldr	r3, [pc, #332]	@ (800460c <HAL_RCC_GetSysClockFreq+0x188>)
 80044c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044c2:	e098      	b.n	80045f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044c4:	4b4f      	ldr	r3, [pc, #316]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x180>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80044ce:	4b4d      	ldr	r3, [pc, #308]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x180>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d028      	beq.n	800452c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044da:	4b4a      	ldr	r3, [pc, #296]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x180>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	099b      	lsrs	r3, r3, #6
 80044e0:	2200      	movs	r2, #0
 80044e2:	623b      	str	r3, [r7, #32]
 80044e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80044ec:	2100      	movs	r1, #0
 80044ee:	4b47      	ldr	r3, [pc, #284]	@ (800460c <HAL_RCC_GetSysClockFreq+0x188>)
 80044f0:	fb03 f201 	mul.w	r2, r3, r1
 80044f4:	2300      	movs	r3, #0
 80044f6:	fb00 f303 	mul.w	r3, r0, r3
 80044fa:	4413      	add	r3, r2
 80044fc:	4a43      	ldr	r2, [pc, #268]	@ (800460c <HAL_RCC_GetSysClockFreq+0x188>)
 80044fe:	fba0 1202 	umull	r1, r2, r0, r2
 8004502:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004504:	460a      	mov	r2, r1
 8004506:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004508:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800450a:	4413      	add	r3, r2
 800450c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800450e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004510:	2200      	movs	r2, #0
 8004512:	61bb      	str	r3, [r7, #24]
 8004514:	61fa      	str	r2, [r7, #28]
 8004516:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800451a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800451e:	f7fb fee7 	bl	80002f0 <__aeabi_uldivmod>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	4613      	mov	r3, r2
 8004528:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800452a:	e053      	b.n	80045d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800452c:	4b35      	ldr	r3, [pc, #212]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x180>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	099b      	lsrs	r3, r3, #6
 8004532:	2200      	movs	r2, #0
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	617a      	str	r2, [r7, #20]
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800453e:	f04f 0b00 	mov.w	fp, #0
 8004542:	4652      	mov	r2, sl
 8004544:	465b      	mov	r3, fp
 8004546:	f04f 0000 	mov.w	r0, #0
 800454a:	f04f 0100 	mov.w	r1, #0
 800454e:	0159      	lsls	r1, r3, #5
 8004550:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004554:	0150      	lsls	r0, r2, #5
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	ebb2 080a 	subs.w	r8, r2, sl
 800455e:	eb63 090b 	sbc.w	r9, r3, fp
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800456e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004572:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004576:	ebb2 0408 	subs.w	r4, r2, r8
 800457a:	eb63 0509 	sbc.w	r5, r3, r9
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	f04f 0300 	mov.w	r3, #0
 8004586:	00eb      	lsls	r3, r5, #3
 8004588:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800458c:	00e2      	lsls	r2, r4, #3
 800458e:	4614      	mov	r4, r2
 8004590:	461d      	mov	r5, r3
 8004592:	eb14 030a 	adds.w	r3, r4, sl
 8004596:	603b      	str	r3, [r7, #0]
 8004598:	eb45 030b 	adc.w	r3, r5, fp
 800459c:	607b      	str	r3, [r7, #4]
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045aa:	4629      	mov	r1, r5
 80045ac:	028b      	lsls	r3, r1, #10
 80045ae:	4621      	mov	r1, r4
 80045b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045b4:	4621      	mov	r1, r4
 80045b6:	028a      	lsls	r2, r1, #10
 80045b8:	4610      	mov	r0, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045be:	2200      	movs	r2, #0
 80045c0:	60bb      	str	r3, [r7, #8]
 80045c2:	60fa      	str	r2, [r7, #12]
 80045c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045c8:	f7fb fe92 	bl	80002f0 <__aeabi_uldivmod>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4613      	mov	r3, r2
 80045d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80045d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x180>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	0c1b      	lsrs	r3, r3, #16
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	3301      	adds	r3, #1
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80045e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045ee:	e002      	b.n	80045f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045f0:	4b05      	ldr	r3, [pc, #20]	@ (8004608 <HAL_RCC_GetSysClockFreq+0x184>)
 80045f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3740      	adds	r7, #64	@ 0x40
 80045fc:	46bd      	mov	sp, r7
 80045fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004602:	bf00      	nop
 8004604:	40023800 	.word	0x40023800
 8004608:	00f42400 	.word	0x00f42400
 800460c:	017d7840 	.word	0x017d7840

08004610 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004614:	4b03      	ldr	r3, [pc, #12]	@ (8004624 <HAL_RCC_GetHCLKFreq+0x14>)
 8004616:	681b      	ldr	r3, [r3, #0]
}
 8004618:	4618      	mov	r0, r3
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20000004 	.word	0x20000004

08004628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800462c:	f7ff fff0 	bl	8004610 <HAL_RCC_GetHCLKFreq>
 8004630:	4602      	mov	r2, r0
 8004632:	4b05      	ldr	r3, [pc, #20]	@ (8004648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	0a9b      	lsrs	r3, r3, #10
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	4903      	ldr	r1, [pc, #12]	@ (800464c <HAL_RCC_GetPCLK1Freq+0x24>)
 800463e:	5ccb      	ldrb	r3, [r1, r3]
 8004640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004644:	4618      	mov	r0, r3
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40023800 	.word	0x40023800
 800464c:	0800696c 	.word	0x0800696c

08004650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004654:	f7ff ffdc 	bl	8004610 <HAL_RCC_GetHCLKFreq>
 8004658:	4602      	mov	r2, r0
 800465a:	4b05      	ldr	r3, [pc, #20]	@ (8004670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	0b5b      	lsrs	r3, r3, #13
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	4903      	ldr	r1, [pc, #12]	@ (8004674 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004666:	5ccb      	ldrb	r3, [r1, r3]
 8004668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800466c:	4618      	mov	r0, r3
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40023800 	.word	0x40023800
 8004674:	0800696c 	.word	0x0800696c

08004678 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004684:	2300      	movs	r3, #0
 8004686:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8004688:	2300      	movs	r3, #0
 800468a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b00      	cmp	r3, #0
 800469a:	d012      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800469c:	4b65      	ldr	r3, [pc, #404]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	4a64      	ldr	r2, [pc, #400]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046a2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80046a6:	6093      	str	r3, [r2, #8]
 80046a8:	4b62      	ldr	r3, [pc, #392]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b0:	4960      	ldr	r1, [pc, #384]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80046be:	2301      	movs	r3, #1
 80046c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d017      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046ce:	4b59      	ldr	r3, [pc, #356]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046d4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046dc:	4955      	ldr	r1, [pc, #340]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046ec:	d101      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80046ee:	2301      	movs	r3, #1
 80046f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80046fa:	2301      	movs	r3, #1
 80046fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d017      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800470a:	4b4a      	ldr	r3, [pc, #296]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800470c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004710:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004718:	4946      	ldr	r1, [pc, #280]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004724:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004728:	d101      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800472a:	2301      	movs	r3, #1
 800472c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8004736:	2301      	movs	r3, #1
 8004738:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0320 	and.w	r3, r3, #32
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 808b 	beq.w	800485e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004748:	4b3a      	ldr	r3, [pc, #232]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800474a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474c:	4a39      	ldr	r2, [pc, #228]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800474e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004752:	6413      	str	r3, [r2, #64]	@ 0x40
 8004754:	4b37      	ldr	r3, [pc, #220]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004760:	4b35      	ldr	r3, [pc, #212]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a34      	ldr	r2, [pc, #208]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004766:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800476a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800476c:	f7fd f9e6 	bl	8001b3c <HAL_GetTick>
 8004770:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004774:	f7fd f9e2 	bl	8001b3c <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b64      	cmp	r3, #100	@ 0x64
 8004780:	d901      	bls.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e2bc      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004786:	4b2c      	ldr	r3, [pc, #176]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f0      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004792:	4b28      	ldr	r3, [pc, #160]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800479a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d035      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d02e      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047b0:	4b20      	ldr	r3, [pc, #128]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047be:	4a1d      	ldr	r2, [pc, #116]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047c4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047d0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80047d2:	4a18      	ldr	r2, [pc, #96]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047d8:	4b16      	ldr	r3, [pc, #88]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d114      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e4:	f7fd f9aa 	bl	8001b3c <HAL_GetTick>
 80047e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ea:	e00a      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047ec:	f7fd f9a6 	bl	8001b3c <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d901      	bls.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e27e      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004802:	4b0c      	ldr	r3, [pc, #48]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0ee      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004816:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800481a:	d111      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800481c:	4b05      	ldr	r3, [pc, #20]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004828:	4b04      	ldr	r3, [pc, #16]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800482a:	400b      	ands	r3, r1
 800482c:	4901      	ldr	r1, [pc, #4]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800482e:	4313      	orrs	r3, r2
 8004830:	608b      	str	r3, [r1, #8]
 8004832:	e00b      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004834:	40023800 	.word	0x40023800
 8004838:	40007000 	.word	0x40007000
 800483c:	0ffffcff 	.word	0x0ffffcff
 8004840:	4ba4      	ldr	r3, [pc, #656]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	4aa3      	ldr	r2, [pc, #652]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004846:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800484a:	6093      	str	r3, [r2, #8]
 800484c:	4ba1      	ldr	r3, [pc, #644]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800484e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004858:	499e      	ldr	r1, [pc, #632]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800485a:	4313      	orrs	r3, r2
 800485c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0310 	and.w	r3, r3, #16
 8004866:	2b00      	cmp	r3, #0
 8004868:	d010      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800486a:	4b9a      	ldr	r3, [pc, #616]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800486c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004870:	4a98      	ldr	r2, [pc, #608]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004872:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004876:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800487a:	4b96      	ldr	r3, [pc, #600]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800487c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004884:	4993      	ldr	r1, [pc, #588]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004898:	4b8e      	ldr	r3, [pc, #568]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800489a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800489e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a6:	498b      	ldr	r1, [pc, #556]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048ba:	4b86      	ldr	r3, [pc, #536]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048c8:	4982      	ldr	r1, [pc, #520]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00a      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048dc:	4b7d      	ldr	r3, [pc, #500]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048ea:	497a      	ldr	r1, [pc, #488]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048fe:	4b75      	ldr	r3, [pc, #468]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004904:	f023 0203 	bic.w	r2, r3, #3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800490c:	4971      	ldr	r1, [pc, #452]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800490e:	4313      	orrs	r3, r2
 8004910:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004920:	4b6c      	ldr	r3, [pc, #432]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004926:	f023 020c 	bic.w	r2, r3, #12
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492e:	4969      	ldr	r1, [pc, #420]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004942:	4b64      	ldr	r3, [pc, #400]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004948:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004950:	4960      	ldr	r1, [pc, #384]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00a      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004964:	4b5b      	ldr	r3, [pc, #364]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004972:	4958      	ldr	r1, [pc, #352]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004974:	4313      	orrs	r3, r2
 8004976:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004986:	4b53      	ldr	r3, [pc, #332]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004994:	494f      	ldr	r1, [pc, #316]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004996:	4313      	orrs	r3, r2
 8004998:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80049a8:	4b4a      	ldr	r3, [pc, #296]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b6:	4947      	ldr	r1, [pc, #284]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80049ca:	4b42      	ldr	r3, [pc, #264]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d8:	493e      	ldr	r1, [pc, #248]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80049ec:	4b39      	ldr	r3, [pc, #228]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049fa:	4936      	ldr	r1, [pc, #216]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d011      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a0e:	4b31      	ldr	r3, [pc, #196]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a14:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a1c:	492d      	ldr	r1, [pc, #180]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a2c:	d101      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a3e:	4b25      	ldr	r3, [pc, #148]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a44:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a4c:	4921      	ldr	r1, [pc, #132]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a60:	4b1c      	ldr	r3, [pc, #112]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a66:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a6e:	4919      	ldr	r1, [pc, #100]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004a82:	4b14      	ldr	r3, [pc, #80]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a88:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a90:	4910      	ldr	r1, [pc, #64]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d006      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x434>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 809d 	beq.w	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004aac:	4b09      	ldr	r3, [pc, #36]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a08      	ldr	r2, [pc, #32]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ab2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ab6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab8:	f7fd f840 	bl	8001b3c <HAL_GetTick>
 8004abc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004abe:	e00b      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ac0:	f7fd f83c 	bl	8001b3c <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b64      	cmp	r3, #100	@ 0x64
 8004acc:	d904      	bls.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e116      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004ad2:	bf00      	nop
 8004ad4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ad8:	4b8b      	ldr	r3, [pc, #556]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1ed      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d017      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d113      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004af8:	4b83      	ldr	r3, [pc, #524]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004afe:	0e1b      	lsrs	r3, r3, #24
 8004b00:	f003 030f 	and.w	r3, r3, #15
 8004b04:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	019a      	lsls	r2, r3, #6
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	061b      	lsls	r3, r3, #24
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	071b      	lsls	r3, r3, #28
 8004b18:	497b      	ldr	r1, [pc, #492]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d004      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d024      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b4a:	d11f      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b4c:	4b6e      	ldr	r3, [pc, #440]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b52:	0f1b      	lsrs	r3, r3, #28
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	019a      	lsls	r2, r3, #6
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	061b      	lsls	r3, r3, #24
 8004b66:	431a      	orrs	r2, r3
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	071b      	lsls	r3, r3, #28
 8004b6c:	4966      	ldr	r1, [pc, #408]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b74:	4b64      	ldr	r3, [pc, #400]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b7a:	f023 021f 	bic.w	r2, r3, #31
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	4960      	ldr	r1, [pc, #384]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00d      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	019a      	lsls	r2, r3, #6
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	061b      	lsls	r3, r3, #24
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	071b      	lsls	r3, r3, #28
 8004bac:	4956      	ldr	r1, [pc, #344]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bb4:	4b54      	ldr	r3, [pc, #336]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a53      	ldr	r2, [pc, #332]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc0:	f7fc ffbc 	bl	8001b3c <HAL_GetTick>
 8004bc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bc6:	e008      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bc8:	f7fc ffb8 	bl	8001b3c <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b64      	cmp	r3, #100	@ 0x64
 8004bd4:	d901      	bls.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e092      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bda:	4b4b      	ldr	r3, [pc, #300]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0f0      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	f040 8088 	bne.w	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004bee:	4b46      	ldr	r3, [pc, #280]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a45      	ldr	r2, [pc, #276]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bfa:	f7fc ff9f 	bl	8001b3c <HAL_GetTick>
 8004bfe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c00:	e008      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c02:	f7fc ff9b 	bl	8001b3c <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b64      	cmp	r3, #100	@ 0x64
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e075      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c14:	4b3c      	ldr	r3, [pc, #240]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c20:	d0ef      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d009      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d024      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d120      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c50:	0c1b      	lsrs	r3, r3, #16
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	019a      	lsls	r2, r3, #6
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	041b      	lsls	r3, r3, #16
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	061b      	lsls	r3, r3, #24
 8004c6a:	4927      	ldr	r1, [pc, #156]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c72:	4b25      	ldr	r3, [pc, #148]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c78:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	3b01      	subs	r3, #1
 8004c82:	021b      	lsls	r3, r3, #8
 8004c84:	4920      	ldr	r1, [pc, #128]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d018      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x652>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ca0:	d113      	bne.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ca2:	4b19      	ldr	r3, [pc, #100]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca8:	0e1b      	lsrs	r3, r3, #24
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	019a      	lsls	r2, r3, #6
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	061b      	lsls	r3, r3, #24
 8004cc2:	4911      	ldr	r1, [pc, #68]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004cca:	4b0f      	ldr	r3, [pc, #60]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a0e      	ldr	r2, [pc, #56]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cd6:	f7fc ff31 	bl	8001b3c <HAL_GetTick>
 8004cda:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cde:	f7fc ff2d 	bl	8001b3c <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b64      	cmp	r3, #100	@ 0x64
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e007      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cf0:	4b05      	ldr	r3, [pc, #20]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cfc:	d1ef      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3720      	adds	r7, #32
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	40023800 	.word	0x40023800

08004d0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e040      	b.n	8004da0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fc fca8 	bl	8001684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2224      	movs	r2, #36	@ 0x24
 8004d38:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0201 	bic.w	r2, r2, #1
 8004d48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 fbde 	bl	8005514 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f977 	bl	800504c <UART_SetConfig>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e01b      	b.n	8004da0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0201 	orr.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fc5d 	bl	8005658 <UART_CheckIdleState>
 8004d9e:	4603      	mov	r3, r0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08a      	sub	sp, #40	@ 0x28
 8004dac:	af02      	add	r7, sp, #8
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	4613      	mov	r3, r2
 8004db6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d177      	bne.n	8004eb0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <HAL_UART_Transmit+0x24>
 8004dc6:	88fb      	ldrh	r3, [r7, #6]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e070      	b.n	8004eb2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2221      	movs	r2, #33	@ 0x21
 8004ddc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dde:	f7fc fead 	bl	8001b3c <HAL_GetTick>
 8004de2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	88fa      	ldrh	r2, [r7, #6]
 8004de8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	88fa      	ldrh	r2, [r7, #6]
 8004df0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dfc:	d108      	bne.n	8004e10 <HAL_UART_Transmit+0x68>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d104      	bne.n	8004e10 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	61bb      	str	r3, [r7, #24]
 8004e0e:	e003      	b.n	8004e18 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e14:	2300      	movs	r3, #0
 8004e16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e18:	e02f      	b.n	8004e7a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2200      	movs	r2, #0
 8004e22:	2180      	movs	r1, #128	@ 0x80
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 fc6e 	bl	8005706 <UART_WaitOnFlagUntilTimeout>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d004      	beq.n	8004e3a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2220      	movs	r2, #32
 8004e34:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e03b      	b.n	8004eb2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10b      	bne.n	8004e58 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	3302      	adds	r3, #2
 8004e54:	61bb      	str	r3, [r7, #24]
 8004e56:	e007      	b.n	8004e68 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	781a      	ldrb	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	3301      	adds	r3, #1
 8004e66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1c9      	bne.n	8004e1a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	2140      	movs	r1, #64	@ 0x40
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 fc38 	bl	8005706 <UART_WaitOnFlagUntilTimeout>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d004      	beq.n	8004ea6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e005      	b.n	8004eb2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	e000      	b.n	8004eb2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004eb0:	2302      	movs	r3, #2
  }
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3720      	adds	r7, #32
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b08a      	sub	sp, #40	@ 0x28
 8004ebe:	af02      	add	r7, sp, #8
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	60b9      	str	r1, [r7, #8]
 8004ec4:	603b      	str	r3, [r7, #0]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	f040 80b5 	bne.w	8005040 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <HAL_UART_Receive+0x28>
 8004edc:	88fb      	ldrh	r3, [r7, #6]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e0ad      	b.n	8005042 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2222      	movs	r2, #34	@ 0x22
 8004ef2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004efc:	f7fc fe1e 	bl	8001b3c <HAL_GetTick>
 8004f00:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	88fa      	ldrh	r2, [r7, #6]
 8004f06:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	88fa      	ldrh	r2, [r7, #6]
 8004f0e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f1a:	d10e      	bne.n	8004f3a <HAL_UART_Receive+0x80>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d105      	bne.n	8004f30 <HAL_UART_Receive+0x76>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004f2a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f2e:	e02d      	b.n	8004f8c <HAL_UART_Receive+0xd2>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	22ff      	movs	r2, #255	@ 0xff
 8004f34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f38:	e028      	b.n	8004f8c <HAL_UART_Receive+0xd2>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10d      	bne.n	8004f5e <HAL_UART_Receive+0xa4>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d104      	bne.n	8004f54 <HAL_UART_Receive+0x9a>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	22ff      	movs	r2, #255	@ 0xff
 8004f4e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f52:	e01b      	b.n	8004f8c <HAL_UART_Receive+0xd2>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	227f      	movs	r2, #127	@ 0x7f
 8004f58:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f5c:	e016      	b.n	8004f8c <HAL_UART_Receive+0xd2>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f66:	d10d      	bne.n	8004f84 <HAL_UART_Receive+0xca>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d104      	bne.n	8004f7a <HAL_UART_Receive+0xc0>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	227f      	movs	r2, #127	@ 0x7f
 8004f74:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f78:	e008      	b.n	8004f8c <HAL_UART_Receive+0xd2>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	223f      	movs	r2, #63	@ 0x3f
 8004f7e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f82:	e003      	b.n	8004f8c <HAL_UART_Receive+0xd2>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004f92:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f9c:	d108      	bne.n	8004fb0 <HAL_UART_Receive+0xf6>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d104      	bne.n	8004fb0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	61bb      	str	r3, [r7, #24]
 8004fae:	e003      	b.n	8004fb8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004fb8:	e036      	b.n	8005028 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2120      	movs	r1, #32
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 fb9e 	bl	8005706 <UART_WaitOnFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e032      	b.n	8005042 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10c      	bne.n	8004ffc <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	8a7b      	ldrh	r3, [r7, #18]
 8004fec:	4013      	ands	r3, r2
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	3302      	adds	r3, #2
 8004ff8:	61bb      	str	r3, [r7, #24]
 8004ffa:	e00c      	b.n	8005016 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005002:	b2da      	uxtb	r2, r3
 8005004:	8a7b      	ldrh	r3, [r7, #18]
 8005006:	b2db      	uxtb	r3, r3
 8005008:	4013      	ands	r3, r2
 800500a:	b2da      	uxtb	r2, r3
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	3301      	adds	r3, #1
 8005014:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800501c:	b29b      	uxth	r3, r3
 800501e:	3b01      	subs	r3, #1
 8005020:	b29a      	uxth	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800502e:	b29b      	uxth	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1c2      	bne.n	8004fba <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2220      	movs	r2, #32
 8005038:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	e000      	b.n	8005042 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8005040:	2302      	movs	r3, #2
  }
}
 8005042:	4618      	mov	r0, r3
 8005044:	3720      	adds	r7, #32
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
	...

0800504c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b088      	sub	sp, #32
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	4ba6      	ldr	r3, [pc, #664]	@ (8005310 <UART_SetConfig+0x2c4>)
 8005078:	4013      	ands	r3, r2
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6812      	ldr	r2, [r2, #0]
 800507e:	6979      	ldr	r1, [r7, #20]
 8005080:	430b      	orrs	r3, r1
 8005082:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a94      	ldr	r2, [pc, #592]	@ (8005314 <UART_SetConfig+0x2c8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d120      	bne.n	800510a <UART_SetConfig+0xbe>
 80050c8:	4b93      	ldr	r3, [pc, #588]	@ (8005318 <UART_SetConfig+0x2cc>)
 80050ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	d816      	bhi.n	8005104 <UART_SetConfig+0xb8>
 80050d6:	a201      	add	r2, pc, #4	@ (adr r2, 80050dc <UART_SetConfig+0x90>)
 80050d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050dc:	080050ed 	.word	0x080050ed
 80050e0:	080050f9 	.word	0x080050f9
 80050e4:	080050f3 	.word	0x080050f3
 80050e8:	080050ff 	.word	0x080050ff
 80050ec:	2301      	movs	r3, #1
 80050ee:	77fb      	strb	r3, [r7, #31]
 80050f0:	e150      	b.n	8005394 <UART_SetConfig+0x348>
 80050f2:	2302      	movs	r3, #2
 80050f4:	77fb      	strb	r3, [r7, #31]
 80050f6:	e14d      	b.n	8005394 <UART_SetConfig+0x348>
 80050f8:	2304      	movs	r3, #4
 80050fa:	77fb      	strb	r3, [r7, #31]
 80050fc:	e14a      	b.n	8005394 <UART_SetConfig+0x348>
 80050fe:	2308      	movs	r3, #8
 8005100:	77fb      	strb	r3, [r7, #31]
 8005102:	e147      	b.n	8005394 <UART_SetConfig+0x348>
 8005104:	2310      	movs	r3, #16
 8005106:	77fb      	strb	r3, [r7, #31]
 8005108:	e144      	b.n	8005394 <UART_SetConfig+0x348>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a83      	ldr	r2, [pc, #524]	@ (800531c <UART_SetConfig+0x2d0>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d132      	bne.n	800517a <UART_SetConfig+0x12e>
 8005114:	4b80      	ldr	r3, [pc, #512]	@ (8005318 <UART_SetConfig+0x2cc>)
 8005116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800511a:	f003 030c 	and.w	r3, r3, #12
 800511e:	2b0c      	cmp	r3, #12
 8005120:	d828      	bhi.n	8005174 <UART_SetConfig+0x128>
 8005122:	a201      	add	r2, pc, #4	@ (adr r2, 8005128 <UART_SetConfig+0xdc>)
 8005124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005128:	0800515d 	.word	0x0800515d
 800512c:	08005175 	.word	0x08005175
 8005130:	08005175 	.word	0x08005175
 8005134:	08005175 	.word	0x08005175
 8005138:	08005169 	.word	0x08005169
 800513c:	08005175 	.word	0x08005175
 8005140:	08005175 	.word	0x08005175
 8005144:	08005175 	.word	0x08005175
 8005148:	08005163 	.word	0x08005163
 800514c:	08005175 	.word	0x08005175
 8005150:	08005175 	.word	0x08005175
 8005154:	08005175 	.word	0x08005175
 8005158:	0800516f 	.word	0x0800516f
 800515c:	2300      	movs	r3, #0
 800515e:	77fb      	strb	r3, [r7, #31]
 8005160:	e118      	b.n	8005394 <UART_SetConfig+0x348>
 8005162:	2302      	movs	r3, #2
 8005164:	77fb      	strb	r3, [r7, #31]
 8005166:	e115      	b.n	8005394 <UART_SetConfig+0x348>
 8005168:	2304      	movs	r3, #4
 800516a:	77fb      	strb	r3, [r7, #31]
 800516c:	e112      	b.n	8005394 <UART_SetConfig+0x348>
 800516e:	2308      	movs	r3, #8
 8005170:	77fb      	strb	r3, [r7, #31]
 8005172:	e10f      	b.n	8005394 <UART_SetConfig+0x348>
 8005174:	2310      	movs	r3, #16
 8005176:	77fb      	strb	r3, [r7, #31]
 8005178:	e10c      	b.n	8005394 <UART_SetConfig+0x348>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a68      	ldr	r2, [pc, #416]	@ (8005320 <UART_SetConfig+0x2d4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d120      	bne.n	80051c6 <UART_SetConfig+0x17a>
 8005184:	4b64      	ldr	r3, [pc, #400]	@ (8005318 <UART_SetConfig+0x2cc>)
 8005186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800518a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800518e:	2b30      	cmp	r3, #48	@ 0x30
 8005190:	d013      	beq.n	80051ba <UART_SetConfig+0x16e>
 8005192:	2b30      	cmp	r3, #48	@ 0x30
 8005194:	d814      	bhi.n	80051c0 <UART_SetConfig+0x174>
 8005196:	2b20      	cmp	r3, #32
 8005198:	d009      	beq.n	80051ae <UART_SetConfig+0x162>
 800519a:	2b20      	cmp	r3, #32
 800519c:	d810      	bhi.n	80051c0 <UART_SetConfig+0x174>
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <UART_SetConfig+0x15c>
 80051a2:	2b10      	cmp	r3, #16
 80051a4:	d006      	beq.n	80051b4 <UART_SetConfig+0x168>
 80051a6:	e00b      	b.n	80051c0 <UART_SetConfig+0x174>
 80051a8:	2300      	movs	r3, #0
 80051aa:	77fb      	strb	r3, [r7, #31]
 80051ac:	e0f2      	b.n	8005394 <UART_SetConfig+0x348>
 80051ae:	2302      	movs	r3, #2
 80051b0:	77fb      	strb	r3, [r7, #31]
 80051b2:	e0ef      	b.n	8005394 <UART_SetConfig+0x348>
 80051b4:	2304      	movs	r3, #4
 80051b6:	77fb      	strb	r3, [r7, #31]
 80051b8:	e0ec      	b.n	8005394 <UART_SetConfig+0x348>
 80051ba:	2308      	movs	r3, #8
 80051bc:	77fb      	strb	r3, [r7, #31]
 80051be:	e0e9      	b.n	8005394 <UART_SetConfig+0x348>
 80051c0:	2310      	movs	r3, #16
 80051c2:	77fb      	strb	r3, [r7, #31]
 80051c4:	e0e6      	b.n	8005394 <UART_SetConfig+0x348>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a56      	ldr	r2, [pc, #344]	@ (8005324 <UART_SetConfig+0x2d8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d120      	bne.n	8005212 <UART_SetConfig+0x1c6>
 80051d0:	4b51      	ldr	r3, [pc, #324]	@ (8005318 <UART_SetConfig+0x2cc>)
 80051d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80051da:	2bc0      	cmp	r3, #192	@ 0xc0
 80051dc:	d013      	beq.n	8005206 <UART_SetConfig+0x1ba>
 80051de:	2bc0      	cmp	r3, #192	@ 0xc0
 80051e0:	d814      	bhi.n	800520c <UART_SetConfig+0x1c0>
 80051e2:	2b80      	cmp	r3, #128	@ 0x80
 80051e4:	d009      	beq.n	80051fa <UART_SetConfig+0x1ae>
 80051e6:	2b80      	cmp	r3, #128	@ 0x80
 80051e8:	d810      	bhi.n	800520c <UART_SetConfig+0x1c0>
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <UART_SetConfig+0x1a8>
 80051ee:	2b40      	cmp	r3, #64	@ 0x40
 80051f0:	d006      	beq.n	8005200 <UART_SetConfig+0x1b4>
 80051f2:	e00b      	b.n	800520c <UART_SetConfig+0x1c0>
 80051f4:	2300      	movs	r3, #0
 80051f6:	77fb      	strb	r3, [r7, #31]
 80051f8:	e0cc      	b.n	8005394 <UART_SetConfig+0x348>
 80051fa:	2302      	movs	r3, #2
 80051fc:	77fb      	strb	r3, [r7, #31]
 80051fe:	e0c9      	b.n	8005394 <UART_SetConfig+0x348>
 8005200:	2304      	movs	r3, #4
 8005202:	77fb      	strb	r3, [r7, #31]
 8005204:	e0c6      	b.n	8005394 <UART_SetConfig+0x348>
 8005206:	2308      	movs	r3, #8
 8005208:	77fb      	strb	r3, [r7, #31]
 800520a:	e0c3      	b.n	8005394 <UART_SetConfig+0x348>
 800520c:	2310      	movs	r3, #16
 800520e:	77fb      	strb	r3, [r7, #31]
 8005210:	e0c0      	b.n	8005394 <UART_SetConfig+0x348>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a44      	ldr	r2, [pc, #272]	@ (8005328 <UART_SetConfig+0x2dc>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d125      	bne.n	8005268 <UART_SetConfig+0x21c>
 800521c:	4b3e      	ldr	r3, [pc, #248]	@ (8005318 <UART_SetConfig+0x2cc>)
 800521e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005226:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800522a:	d017      	beq.n	800525c <UART_SetConfig+0x210>
 800522c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005230:	d817      	bhi.n	8005262 <UART_SetConfig+0x216>
 8005232:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005236:	d00b      	beq.n	8005250 <UART_SetConfig+0x204>
 8005238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800523c:	d811      	bhi.n	8005262 <UART_SetConfig+0x216>
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <UART_SetConfig+0x1fe>
 8005242:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005246:	d006      	beq.n	8005256 <UART_SetConfig+0x20a>
 8005248:	e00b      	b.n	8005262 <UART_SetConfig+0x216>
 800524a:	2300      	movs	r3, #0
 800524c:	77fb      	strb	r3, [r7, #31]
 800524e:	e0a1      	b.n	8005394 <UART_SetConfig+0x348>
 8005250:	2302      	movs	r3, #2
 8005252:	77fb      	strb	r3, [r7, #31]
 8005254:	e09e      	b.n	8005394 <UART_SetConfig+0x348>
 8005256:	2304      	movs	r3, #4
 8005258:	77fb      	strb	r3, [r7, #31]
 800525a:	e09b      	b.n	8005394 <UART_SetConfig+0x348>
 800525c:	2308      	movs	r3, #8
 800525e:	77fb      	strb	r3, [r7, #31]
 8005260:	e098      	b.n	8005394 <UART_SetConfig+0x348>
 8005262:	2310      	movs	r3, #16
 8005264:	77fb      	strb	r3, [r7, #31]
 8005266:	e095      	b.n	8005394 <UART_SetConfig+0x348>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a2f      	ldr	r2, [pc, #188]	@ (800532c <UART_SetConfig+0x2e0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d125      	bne.n	80052be <UART_SetConfig+0x272>
 8005272:	4b29      	ldr	r3, [pc, #164]	@ (8005318 <UART_SetConfig+0x2cc>)
 8005274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005278:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800527c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005280:	d017      	beq.n	80052b2 <UART_SetConfig+0x266>
 8005282:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005286:	d817      	bhi.n	80052b8 <UART_SetConfig+0x26c>
 8005288:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800528c:	d00b      	beq.n	80052a6 <UART_SetConfig+0x25a>
 800528e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005292:	d811      	bhi.n	80052b8 <UART_SetConfig+0x26c>
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <UART_SetConfig+0x254>
 8005298:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800529c:	d006      	beq.n	80052ac <UART_SetConfig+0x260>
 800529e:	e00b      	b.n	80052b8 <UART_SetConfig+0x26c>
 80052a0:	2301      	movs	r3, #1
 80052a2:	77fb      	strb	r3, [r7, #31]
 80052a4:	e076      	b.n	8005394 <UART_SetConfig+0x348>
 80052a6:	2302      	movs	r3, #2
 80052a8:	77fb      	strb	r3, [r7, #31]
 80052aa:	e073      	b.n	8005394 <UART_SetConfig+0x348>
 80052ac:	2304      	movs	r3, #4
 80052ae:	77fb      	strb	r3, [r7, #31]
 80052b0:	e070      	b.n	8005394 <UART_SetConfig+0x348>
 80052b2:	2308      	movs	r3, #8
 80052b4:	77fb      	strb	r3, [r7, #31]
 80052b6:	e06d      	b.n	8005394 <UART_SetConfig+0x348>
 80052b8:	2310      	movs	r3, #16
 80052ba:	77fb      	strb	r3, [r7, #31]
 80052bc:	e06a      	b.n	8005394 <UART_SetConfig+0x348>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005330 <UART_SetConfig+0x2e4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d138      	bne.n	800533a <UART_SetConfig+0x2ee>
 80052c8:	4b13      	ldr	r3, [pc, #76]	@ (8005318 <UART_SetConfig+0x2cc>)
 80052ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ce:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80052d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052d6:	d017      	beq.n	8005308 <UART_SetConfig+0x2bc>
 80052d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052dc:	d82a      	bhi.n	8005334 <UART_SetConfig+0x2e8>
 80052de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052e2:	d00b      	beq.n	80052fc <UART_SetConfig+0x2b0>
 80052e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052e8:	d824      	bhi.n	8005334 <UART_SetConfig+0x2e8>
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <UART_SetConfig+0x2aa>
 80052ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052f2:	d006      	beq.n	8005302 <UART_SetConfig+0x2b6>
 80052f4:	e01e      	b.n	8005334 <UART_SetConfig+0x2e8>
 80052f6:	2300      	movs	r3, #0
 80052f8:	77fb      	strb	r3, [r7, #31]
 80052fa:	e04b      	b.n	8005394 <UART_SetConfig+0x348>
 80052fc:	2302      	movs	r3, #2
 80052fe:	77fb      	strb	r3, [r7, #31]
 8005300:	e048      	b.n	8005394 <UART_SetConfig+0x348>
 8005302:	2304      	movs	r3, #4
 8005304:	77fb      	strb	r3, [r7, #31]
 8005306:	e045      	b.n	8005394 <UART_SetConfig+0x348>
 8005308:	2308      	movs	r3, #8
 800530a:	77fb      	strb	r3, [r7, #31]
 800530c:	e042      	b.n	8005394 <UART_SetConfig+0x348>
 800530e:	bf00      	nop
 8005310:	efff69f3 	.word	0xefff69f3
 8005314:	40011000 	.word	0x40011000
 8005318:	40023800 	.word	0x40023800
 800531c:	40004400 	.word	0x40004400
 8005320:	40004800 	.word	0x40004800
 8005324:	40004c00 	.word	0x40004c00
 8005328:	40005000 	.word	0x40005000
 800532c:	40011400 	.word	0x40011400
 8005330:	40007800 	.word	0x40007800
 8005334:	2310      	movs	r3, #16
 8005336:	77fb      	strb	r3, [r7, #31]
 8005338:	e02c      	b.n	8005394 <UART_SetConfig+0x348>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a72      	ldr	r2, [pc, #456]	@ (8005508 <UART_SetConfig+0x4bc>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d125      	bne.n	8005390 <UART_SetConfig+0x344>
 8005344:	4b71      	ldr	r3, [pc, #452]	@ (800550c <UART_SetConfig+0x4c0>)
 8005346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800534a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800534e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005352:	d017      	beq.n	8005384 <UART_SetConfig+0x338>
 8005354:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005358:	d817      	bhi.n	800538a <UART_SetConfig+0x33e>
 800535a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800535e:	d00b      	beq.n	8005378 <UART_SetConfig+0x32c>
 8005360:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005364:	d811      	bhi.n	800538a <UART_SetConfig+0x33e>
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <UART_SetConfig+0x326>
 800536a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800536e:	d006      	beq.n	800537e <UART_SetConfig+0x332>
 8005370:	e00b      	b.n	800538a <UART_SetConfig+0x33e>
 8005372:	2300      	movs	r3, #0
 8005374:	77fb      	strb	r3, [r7, #31]
 8005376:	e00d      	b.n	8005394 <UART_SetConfig+0x348>
 8005378:	2302      	movs	r3, #2
 800537a:	77fb      	strb	r3, [r7, #31]
 800537c:	e00a      	b.n	8005394 <UART_SetConfig+0x348>
 800537e:	2304      	movs	r3, #4
 8005380:	77fb      	strb	r3, [r7, #31]
 8005382:	e007      	b.n	8005394 <UART_SetConfig+0x348>
 8005384:	2308      	movs	r3, #8
 8005386:	77fb      	strb	r3, [r7, #31]
 8005388:	e004      	b.n	8005394 <UART_SetConfig+0x348>
 800538a:	2310      	movs	r3, #16
 800538c:	77fb      	strb	r3, [r7, #31]
 800538e:	e001      	b.n	8005394 <UART_SetConfig+0x348>
 8005390:	2310      	movs	r3, #16
 8005392:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800539c:	d15b      	bne.n	8005456 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800539e:	7ffb      	ldrb	r3, [r7, #31]
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d828      	bhi.n	80053f6 <UART_SetConfig+0x3aa>
 80053a4:	a201      	add	r2, pc, #4	@ (adr r2, 80053ac <UART_SetConfig+0x360>)
 80053a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053aa:	bf00      	nop
 80053ac:	080053d1 	.word	0x080053d1
 80053b0:	080053d9 	.word	0x080053d9
 80053b4:	080053e1 	.word	0x080053e1
 80053b8:	080053f7 	.word	0x080053f7
 80053bc:	080053e7 	.word	0x080053e7
 80053c0:	080053f7 	.word	0x080053f7
 80053c4:	080053f7 	.word	0x080053f7
 80053c8:	080053f7 	.word	0x080053f7
 80053cc:	080053ef 	.word	0x080053ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053d0:	f7ff f92a 	bl	8004628 <HAL_RCC_GetPCLK1Freq>
 80053d4:	61b8      	str	r0, [r7, #24]
        break;
 80053d6:	e013      	b.n	8005400 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053d8:	f7ff f93a 	bl	8004650 <HAL_RCC_GetPCLK2Freq>
 80053dc:	61b8      	str	r0, [r7, #24]
        break;
 80053de:	e00f      	b.n	8005400 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053e0:	4b4b      	ldr	r3, [pc, #300]	@ (8005510 <UART_SetConfig+0x4c4>)
 80053e2:	61bb      	str	r3, [r7, #24]
        break;
 80053e4:	e00c      	b.n	8005400 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053e6:	f7ff f84d 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 80053ea:	61b8      	str	r0, [r7, #24]
        break;
 80053ec:	e008      	b.n	8005400 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053f2:	61bb      	str	r3, [r7, #24]
        break;
 80053f4:	e004      	b.n	8005400 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	77bb      	strb	r3, [r7, #30]
        break;
 80053fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d074      	beq.n	80054f0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	005a      	lsls	r2, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	085b      	lsrs	r3, r3, #1
 8005410:	441a      	add	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	fbb2 f3f3 	udiv	r3, r2, r3
 800541a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	2b0f      	cmp	r3, #15
 8005420:	d916      	bls.n	8005450 <UART_SetConfig+0x404>
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005428:	d212      	bcs.n	8005450 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	b29b      	uxth	r3, r3
 800542e:	f023 030f 	bic.w	r3, r3, #15
 8005432:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	085b      	lsrs	r3, r3, #1
 8005438:	b29b      	uxth	r3, r3
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	b29a      	uxth	r2, r3
 8005440:	89fb      	ldrh	r3, [r7, #14]
 8005442:	4313      	orrs	r3, r2
 8005444:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	89fa      	ldrh	r2, [r7, #14]
 800544c:	60da      	str	r2, [r3, #12]
 800544e:	e04f      	b.n	80054f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	77bb      	strb	r3, [r7, #30]
 8005454:	e04c      	b.n	80054f0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005456:	7ffb      	ldrb	r3, [r7, #31]
 8005458:	2b08      	cmp	r3, #8
 800545a:	d828      	bhi.n	80054ae <UART_SetConfig+0x462>
 800545c:	a201      	add	r2, pc, #4	@ (adr r2, 8005464 <UART_SetConfig+0x418>)
 800545e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005462:	bf00      	nop
 8005464:	08005489 	.word	0x08005489
 8005468:	08005491 	.word	0x08005491
 800546c:	08005499 	.word	0x08005499
 8005470:	080054af 	.word	0x080054af
 8005474:	0800549f 	.word	0x0800549f
 8005478:	080054af 	.word	0x080054af
 800547c:	080054af 	.word	0x080054af
 8005480:	080054af 	.word	0x080054af
 8005484:	080054a7 	.word	0x080054a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005488:	f7ff f8ce 	bl	8004628 <HAL_RCC_GetPCLK1Freq>
 800548c:	61b8      	str	r0, [r7, #24]
        break;
 800548e:	e013      	b.n	80054b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005490:	f7ff f8de 	bl	8004650 <HAL_RCC_GetPCLK2Freq>
 8005494:	61b8      	str	r0, [r7, #24]
        break;
 8005496:	e00f      	b.n	80054b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005498:	4b1d      	ldr	r3, [pc, #116]	@ (8005510 <UART_SetConfig+0x4c4>)
 800549a:	61bb      	str	r3, [r7, #24]
        break;
 800549c:	e00c      	b.n	80054b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800549e:	f7fe fff1 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 80054a2:	61b8      	str	r0, [r7, #24]
        break;
 80054a4:	e008      	b.n	80054b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054aa:	61bb      	str	r3, [r7, #24]
        break;
 80054ac:	e004      	b.n	80054b8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	77bb      	strb	r3, [r7, #30]
        break;
 80054b6:	bf00      	nop
    }

    if (pclk != 0U)
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d018      	beq.n	80054f0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	085a      	lsrs	r2, r3, #1
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	441a      	add	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	2b0f      	cmp	r3, #15
 80054d6:	d909      	bls.n	80054ec <UART_SetConfig+0x4a0>
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054de:	d205      	bcs.n	80054ec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60da      	str	r2, [r3, #12]
 80054ea:	e001      	b.n	80054f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80054fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3720      	adds	r7, #32
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	40007c00 	.word	0x40007c00
 800550c:	40023800 	.word	0x40023800
 8005510:	00f42400 	.word	0x00f42400

08005514 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005520:	f003 0308 	and.w	r3, r3, #8
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a8:	f003 0310 	and.w	r3, r3, #16
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d01a      	beq.n	800562a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005612:	d10a      	bne.n	800562a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	605a      	str	r2, [r3, #4]
  }
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08c      	sub	sp, #48	@ 0x30
 800565c:	af02      	add	r7, sp, #8
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005668:	f7fc fa68 	bl	8001b3c <HAL_GetTick>
 800566c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0308 	and.w	r3, r3, #8
 8005678:	2b08      	cmp	r3, #8
 800567a:	d12e      	bne.n	80056da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800567c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005684:	2200      	movs	r2, #0
 8005686:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f83b 	bl	8005706 <UART_WaitOnFlagUntilTimeout>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d021      	beq.n	80056da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	e853 3f00 	ldrex	r3, [r3]
 80056a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056aa:	623b      	str	r3, [r7, #32]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	461a      	mov	r2, r3
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	61fb      	str	r3, [r7, #28]
 80056b6:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b8:	69b9      	ldr	r1, [r7, #24]
 80056ba:	69fa      	ldr	r2, [r7, #28]
 80056bc:	e841 2300 	strex	r3, r2, [r1]
 80056c0:	617b      	str	r3, [r7, #20]
   return(result);
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1e6      	bne.n	8005696 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2220      	movs	r2, #32
 80056cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e011      	b.n	80056fe <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2220      	movs	r2, #32
 80056de:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2220      	movs	r2, #32
 80056e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3728      	adds	r7, #40	@ 0x28
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b084      	sub	sp, #16
 800570a:	af00      	add	r7, sp, #0
 800570c:	60f8      	str	r0, [r7, #12]
 800570e:	60b9      	str	r1, [r7, #8]
 8005710:	603b      	str	r3, [r7, #0]
 8005712:	4613      	mov	r3, r2
 8005714:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005716:	e04f      	b.n	80057b8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571e:	d04b      	beq.n	80057b8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005720:	f7fc fa0c 	bl	8001b3c <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	429a      	cmp	r2, r3
 800572e:	d302      	bcc.n	8005736 <UART_WaitOnFlagUntilTimeout+0x30>
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e04e      	b.n	80057d8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b00      	cmp	r3, #0
 8005746:	d037      	beq.n	80057b8 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b80      	cmp	r3, #128	@ 0x80
 800574c:	d034      	beq.n	80057b8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2b40      	cmp	r3, #64	@ 0x40
 8005752:	d031      	beq.n	80057b8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	f003 0308 	and.w	r3, r3, #8
 800575e:	2b08      	cmp	r3, #8
 8005760:	d110      	bne.n	8005784 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2208      	movs	r2, #8
 8005768:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 f838 	bl	80057e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2208      	movs	r2, #8
 8005774:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e029      	b.n	80057d8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800578e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005792:	d111      	bne.n	80057b8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800579c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 f81e 	bl	80057e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e00f      	b.n	80057d8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	69da      	ldr	r2, [r3, #28]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	4013      	ands	r3, r2
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	bf0c      	ite	eq
 80057c8:	2301      	moveq	r3, #1
 80057ca:	2300      	movne	r3, #0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	461a      	mov	r2, r3
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d0a0      	beq.n	8005718 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b095      	sub	sp, #84	@ 0x54
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f0:	e853 3f00 	ldrex	r3, [r3]
 80057f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	461a      	mov	r2, r3
 8005804:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005806:	643b      	str	r3, [r7, #64]	@ 0x40
 8005808:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800580c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e6      	bne.n	80057e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3308      	adds	r3, #8
 8005820:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	61fb      	str	r3, [r7, #28]
   return(result);
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	f023 0301 	bic.w	r3, r3, #1
 8005830:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3308      	adds	r3, #8
 8005838:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800583a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800583c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005840:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e5      	bne.n	800581a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005852:	2b01      	cmp	r3, #1
 8005854:	d118      	bne.n	8005888 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	e853 3f00 	ldrex	r3, [r3]
 8005862:	60bb      	str	r3, [r7, #8]
   return(result);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f023 0310 	bic.w	r3, r3, #16
 800586a:	647b      	str	r3, [r7, #68]	@ 0x44
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	461a      	mov	r2, r3
 8005872:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005874:	61bb      	str	r3, [r7, #24]
 8005876:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005878:	6979      	ldr	r1, [r7, #20]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	e841 2300 	strex	r3, r2, [r1]
 8005880:	613b      	str	r3, [r7, #16]
   return(result);
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e6      	bne.n	8005856 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2220      	movs	r2, #32
 800588c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800589c:	bf00      	nop
 800589e:	3754      	adds	r7, #84	@ 0x54
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <std>:
 80058a8:	2300      	movs	r3, #0
 80058aa:	b510      	push	{r4, lr}
 80058ac:	4604      	mov	r4, r0
 80058ae:	e9c0 3300 	strd	r3, r3, [r0]
 80058b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058b6:	6083      	str	r3, [r0, #8]
 80058b8:	8181      	strh	r1, [r0, #12]
 80058ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80058bc:	81c2      	strh	r2, [r0, #14]
 80058be:	6183      	str	r3, [r0, #24]
 80058c0:	4619      	mov	r1, r3
 80058c2:	2208      	movs	r2, #8
 80058c4:	305c      	adds	r0, #92	@ 0x5c
 80058c6:	f000 f8f4 	bl	8005ab2 <memset>
 80058ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005900 <std+0x58>)
 80058cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80058ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005904 <std+0x5c>)
 80058d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80058d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005908 <std+0x60>)
 80058d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80058d6:	4b0d      	ldr	r3, [pc, #52]	@ (800590c <std+0x64>)
 80058d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80058da:	4b0d      	ldr	r3, [pc, #52]	@ (8005910 <std+0x68>)
 80058dc:	6224      	str	r4, [r4, #32]
 80058de:	429c      	cmp	r4, r3
 80058e0:	d006      	beq.n	80058f0 <std+0x48>
 80058e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80058e6:	4294      	cmp	r4, r2
 80058e8:	d002      	beq.n	80058f0 <std+0x48>
 80058ea:	33d0      	adds	r3, #208	@ 0xd0
 80058ec:	429c      	cmp	r4, r3
 80058ee:	d105      	bne.n	80058fc <std+0x54>
 80058f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80058f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058f8:	f000 b9bc 	b.w	8005c74 <__retarget_lock_init_recursive>
 80058fc:	bd10      	pop	{r4, pc}
 80058fe:	bf00      	nop
 8005900:	08005a2d 	.word	0x08005a2d
 8005904:	08005a4f 	.word	0x08005a4f
 8005908:	08005a87 	.word	0x08005a87
 800590c:	08005aab 	.word	0x08005aab
 8005910:	2000028c 	.word	0x2000028c

08005914 <stdio_exit_handler>:
 8005914:	4a02      	ldr	r2, [pc, #8]	@ (8005920 <stdio_exit_handler+0xc>)
 8005916:	4903      	ldr	r1, [pc, #12]	@ (8005924 <stdio_exit_handler+0x10>)
 8005918:	4803      	ldr	r0, [pc, #12]	@ (8005928 <stdio_exit_handler+0x14>)
 800591a:	f000 b869 	b.w	80059f0 <_fwalk_sglue>
 800591e:	bf00      	nop
 8005920:	20000010 	.word	0x20000010
 8005924:	08005fd1 	.word	0x08005fd1
 8005928:	20000020 	.word	0x20000020

0800592c <cleanup_stdio>:
 800592c:	6841      	ldr	r1, [r0, #4]
 800592e:	4b0c      	ldr	r3, [pc, #48]	@ (8005960 <cleanup_stdio+0x34>)
 8005930:	4299      	cmp	r1, r3
 8005932:	b510      	push	{r4, lr}
 8005934:	4604      	mov	r4, r0
 8005936:	d001      	beq.n	800593c <cleanup_stdio+0x10>
 8005938:	f000 fb4a 	bl	8005fd0 <_fflush_r>
 800593c:	68a1      	ldr	r1, [r4, #8]
 800593e:	4b09      	ldr	r3, [pc, #36]	@ (8005964 <cleanup_stdio+0x38>)
 8005940:	4299      	cmp	r1, r3
 8005942:	d002      	beq.n	800594a <cleanup_stdio+0x1e>
 8005944:	4620      	mov	r0, r4
 8005946:	f000 fb43 	bl	8005fd0 <_fflush_r>
 800594a:	68e1      	ldr	r1, [r4, #12]
 800594c:	4b06      	ldr	r3, [pc, #24]	@ (8005968 <cleanup_stdio+0x3c>)
 800594e:	4299      	cmp	r1, r3
 8005950:	d004      	beq.n	800595c <cleanup_stdio+0x30>
 8005952:	4620      	mov	r0, r4
 8005954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005958:	f000 bb3a 	b.w	8005fd0 <_fflush_r>
 800595c:	bd10      	pop	{r4, pc}
 800595e:	bf00      	nop
 8005960:	2000028c 	.word	0x2000028c
 8005964:	200002f4 	.word	0x200002f4
 8005968:	2000035c 	.word	0x2000035c

0800596c <global_stdio_init.part.0>:
 800596c:	b510      	push	{r4, lr}
 800596e:	4b0b      	ldr	r3, [pc, #44]	@ (800599c <global_stdio_init.part.0+0x30>)
 8005970:	4c0b      	ldr	r4, [pc, #44]	@ (80059a0 <global_stdio_init.part.0+0x34>)
 8005972:	4a0c      	ldr	r2, [pc, #48]	@ (80059a4 <global_stdio_init.part.0+0x38>)
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	4620      	mov	r0, r4
 8005978:	2200      	movs	r2, #0
 800597a:	2104      	movs	r1, #4
 800597c:	f7ff ff94 	bl	80058a8 <std>
 8005980:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005984:	2201      	movs	r2, #1
 8005986:	2109      	movs	r1, #9
 8005988:	f7ff ff8e 	bl	80058a8 <std>
 800598c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005990:	2202      	movs	r2, #2
 8005992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005996:	2112      	movs	r1, #18
 8005998:	f7ff bf86 	b.w	80058a8 <std>
 800599c:	200003c4 	.word	0x200003c4
 80059a0:	2000028c 	.word	0x2000028c
 80059a4:	08005915 	.word	0x08005915

080059a8 <__sfp_lock_acquire>:
 80059a8:	4801      	ldr	r0, [pc, #4]	@ (80059b0 <__sfp_lock_acquire+0x8>)
 80059aa:	f000 b964 	b.w	8005c76 <__retarget_lock_acquire_recursive>
 80059ae:	bf00      	nop
 80059b0:	200003cd 	.word	0x200003cd

080059b4 <__sfp_lock_release>:
 80059b4:	4801      	ldr	r0, [pc, #4]	@ (80059bc <__sfp_lock_release+0x8>)
 80059b6:	f000 b95f 	b.w	8005c78 <__retarget_lock_release_recursive>
 80059ba:	bf00      	nop
 80059bc:	200003cd 	.word	0x200003cd

080059c0 <__sinit>:
 80059c0:	b510      	push	{r4, lr}
 80059c2:	4604      	mov	r4, r0
 80059c4:	f7ff fff0 	bl	80059a8 <__sfp_lock_acquire>
 80059c8:	6a23      	ldr	r3, [r4, #32]
 80059ca:	b11b      	cbz	r3, 80059d4 <__sinit+0x14>
 80059cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059d0:	f7ff bff0 	b.w	80059b4 <__sfp_lock_release>
 80059d4:	4b04      	ldr	r3, [pc, #16]	@ (80059e8 <__sinit+0x28>)
 80059d6:	6223      	str	r3, [r4, #32]
 80059d8:	4b04      	ldr	r3, [pc, #16]	@ (80059ec <__sinit+0x2c>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1f5      	bne.n	80059cc <__sinit+0xc>
 80059e0:	f7ff ffc4 	bl	800596c <global_stdio_init.part.0>
 80059e4:	e7f2      	b.n	80059cc <__sinit+0xc>
 80059e6:	bf00      	nop
 80059e8:	0800592d 	.word	0x0800592d
 80059ec:	200003c4 	.word	0x200003c4

080059f0 <_fwalk_sglue>:
 80059f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059f4:	4607      	mov	r7, r0
 80059f6:	4688      	mov	r8, r1
 80059f8:	4614      	mov	r4, r2
 80059fa:	2600      	movs	r6, #0
 80059fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a00:	f1b9 0901 	subs.w	r9, r9, #1
 8005a04:	d505      	bpl.n	8005a12 <_fwalk_sglue+0x22>
 8005a06:	6824      	ldr	r4, [r4, #0]
 8005a08:	2c00      	cmp	r4, #0
 8005a0a:	d1f7      	bne.n	80059fc <_fwalk_sglue+0xc>
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a12:	89ab      	ldrh	r3, [r5, #12]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d907      	bls.n	8005a28 <_fwalk_sglue+0x38>
 8005a18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	d003      	beq.n	8005a28 <_fwalk_sglue+0x38>
 8005a20:	4629      	mov	r1, r5
 8005a22:	4638      	mov	r0, r7
 8005a24:	47c0      	blx	r8
 8005a26:	4306      	orrs	r6, r0
 8005a28:	3568      	adds	r5, #104	@ 0x68
 8005a2a:	e7e9      	b.n	8005a00 <_fwalk_sglue+0x10>

08005a2c <__sread>:
 8005a2c:	b510      	push	{r4, lr}
 8005a2e:	460c      	mov	r4, r1
 8005a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a34:	f000 f8d0 	bl	8005bd8 <_read_r>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	bfab      	itete	ge
 8005a3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a3e:	89a3      	ldrhlt	r3, [r4, #12]
 8005a40:	181b      	addge	r3, r3, r0
 8005a42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a46:	bfac      	ite	ge
 8005a48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a4a:	81a3      	strhlt	r3, [r4, #12]
 8005a4c:	bd10      	pop	{r4, pc}

08005a4e <__swrite>:
 8005a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a52:	461f      	mov	r7, r3
 8005a54:	898b      	ldrh	r3, [r1, #12]
 8005a56:	05db      	lsls	r3, r3, #23
 8005a58:	4605      	mov	r5, r0
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	4616      	mov	r6, r2
 8005a5e:	d505      	bpl.n	8005a6c <__swrite+0x1e>
 8005a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a64:	2302      	movs	r3, #2
 8005a66:	2200      	movs	r2, #0
 8005a68:	f000 f8a4 	bl	8005bb4 <_lseek_r>
 8005a6c:	89a3      	ldrh	r3, [r4, #12]
 8005a6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a76:	81a3      	strh	r3, [r4, #12]
 8005a78:	4632      	mov	r2, r6
 8005a7a:	463b      	mov	r3, r7
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a82:	f000 b8bb 	b.w	8005bfc <_write_r>

08005a86 <__sseek>:
 8005a86:	b510      	push	{r4, lr}
 8005a88:	460c      	mov	r4, r1
 8005a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a8e:	f000 f891 	bl	8005bb4 <_lseek_r>
 8005a92:	1c43      	adds	r3, r0, #1
 8005a94:	89a3      	ldrh	r3, [r4, #12]
 8005a96:	bf15      	itete	ne
 8005a98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005aa2:	81a3      	strheq	r3, [r4, #12]
 8005aa4:	bf18      	it	ne
 8005aa6:	81a3      	strhne	r3, [r4, #12]
 8005aa8:	bd10      	pop	{r4, pc}

08005aaa <__sclose>:
 8005aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aae:	f000 b871 	b.w	8005b94 <_close_r>

08005ab2 <memset>:
 8005ab2:	4402      	add	r2, r0
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d100      	bne.n	8005abc <memset+0xa>
 8005aba:	4770      	bx	lr
 8005abc:	f803 1b01 	strb.w	r1, [r3], #1
 8005ac0:	e7f9      	b.n	8005ab6 <memset+0x4>

08005ac2 <strchr>:
 8005ac2:	b2c9      	uxtb	r1, r1
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005acc:	b112      	cbz	r2, 8005ad4 <strchr+0x12>
 8005ace:	428a      	cmp	r2, r1
 8005ad0:	d1f9      	bne.n	8005ac6 <strchr+0x4>
 8005ad2:	4770      	bx	lr
 8005ad4:	2900      	cmp	r1, #0
 8005ad6:	bf18      	it	ne
 8005ad8:	2000      	movne	r0, #0
 8005ada:	4770      	bx	lr

08005adc <strtok>:
 8005adc:	4b16      	ldr	r3, [pc, #88]	@ (8005b38 <strtok+0x5c>)
 8005ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae2:	681f      	ldr	r7, [r3, #0]
 8005ae4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8005ae6:	4605      	mov	r5, r0
 8005ae8:	460e      	mov	r6, r1
 8005aea:	b9ec      	cbnz	r4, 8005b28 <strtok+0x4c>
 8005aec:	2050      	movs	r0, #80	@ 0x50
 8005aee:	f000 f935 	bl	8005d5c <malloc>
 8005af2:	4602      	mov	r2, r0
 8005af4:	6478      	str	r0, [r7, #68]	@ 0x44
 8005af6:	b920      	cbnz	r0, 8005b02 <strtok+0x26>
 8005af8:	4b10      	ldr	r3, [pc, #64]	@ (8005b3c <strtok+0x60>)
 8005afa:	4811      	ldr	r0, [pc, #68]	@ (8005b40 <strtok+0x64>)
 8005afc:	215b      	movs	r1, #91	@ 0x5b
 8005afe:	f000 f8c5 	bl	8005c8c <__assert_func>
 8005b02:	e9c0 4400 	strd	r4, r4, [r0]
 8005b06:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005b0a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005b0e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8005b12:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8005b16:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8005b1a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8005b1e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8005b22:	6184      	str	r4, [r0, #24]
 8005b24:	7704      	strb	r4, [r0, #28]
 8005b26:	6244      	str	r4, [r0, #36]	@ 0x24
 8005b28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b2a:	4631      	mov	r1, r6
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b34:	f000 b806 	b.w	8005b44 <__strtok_r>
 8005b38:	2000001c 	.word	0x2000001c
 8005b3c:	08006a7d 	.word	0x08006a7d
 8005b40:	08006a94 	.word	0x08006a94

08005b44 <__strtok_r>:
 8005b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b46:	4604      	mov	r4, r0
 8005b48:	b908      	cbnz	r0, 8005b4e <__strtok_r+0xa>
 8005b4a:	6814      	ldr	r4, [r2, #0]
 8005b4c:	b144      	cbz	r4, 8005b60 <__strtok_r+0x1c>
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005b54:	460f      	mov	r7, r1
 8005b56:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005b5a:	b91e      	cbnz	r6, 8005b64 <__strtok_r+0x20>
 8005b5c:	b965      	cbnz	r5, 8005b78 <__strtok_r+0x34>
 8005b5e:	6015      	str	r5, [r2, #0]
 8005b60:	2000      	movs	r0, #0
 8005b62:	e005      	b.n	8005b70 <__strtok_r+0x2c>
 8005b64:	42b5      	cmp	r5, r6
 8005b66:	d1f6      	bne.n	8005b56 <__strtok_r+0x12>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1f0      	bne.n	8005b4e <__strtok_r+0xa>
 8005b6c:	6014      	str	r4, [r2, #0]
 8005b6e:	7003      	strb	r3, [r0, #0]
 8005b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b72:	461c      	mov	r4, r3
 8005b74:	e00c      	b.n	8005b90 <__strtok_r+0x4c>
 8005b76:	b915      	cbnz	r5, 8005b7e <__strtok_r+0x3a>
 8005b78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005b7c:	460e      	mov	r6, r1
 8005b7e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005b82:	42ab      	cmp	r3, r5
 8005b84:	d1f7      	bne.n	8005b76 <__strtok_r+0x32>
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0f3      	beq.n	8005b72 <__strtok_r+0x2e>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005b90:	6014      	str	r4, [r2, #0]
 8005b92:	e7ed      	b.n	8005b70 <__strtok_r+0x2c>

08005b94 <_close_r>:
 8005b94:	b538      	push	{r3, r4, r5, lr}
 8005b96:	4d06      	ldr	r5, [pc, #24]	@ (8005bb0 <_close_r+0x1c>)
 8005b98:	2300      	movs	r3, #0
 8005b9a:	4604      	mov	r4, r0
 8005b9c:	4608      	mov	r0, r1
 8005b9e:	602b      	str	r3, [r5, #0]
 8005ba0:	f7fb fe82 	bl	80018a8 <_close>
 8005ba4:	1c43      	adds	r3, r0, #1
 8005ba6:	d102      	bne.n	8005bae <_close_r+0x1a>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	b103      	cbz	r3, 8005bae <_close_r+0x1a>
 8005bac:	6023      	str	r3, [r4, #0]
 8005bae:	bd38      	pop	{r3, r4, r5, pc}
 8005bb0:	200003c8 	.word	0x200003c8

08005bb4 <_lseek_r>:
 8005bb4:	b538      	push	{r3, r4, r5, lr}
 8005bb6:	4d07      	ldr	r5, [pc, #28]	@ (8005bd4 <_lseek_r+0x20>)
 8005bb8:	4604      	mov	r4, r0
 8005bba:	4608      	mov	r0, r1
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	602a      	str	r2, [r5, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f7fb fe97 	bl	80018f6 <_lseek>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	d102      	bne.n	8005bd2 <_lseek_r+0x1e>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	b103      	cbz	r3, 8005bd2 <_lseek_r+0x1e>
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
 8005bd4:	200003c8 	.word	0x200003c8

08005bd8 <_read_r>:
 8005bd8:	b538      	push	{r3, r4, r5, lr}
 8005bda:	4d07      	ldr	r5, [pc, #28]	@ (8005bf8 <_read_r+0x20>)
 8005bdc:	4604      	mov	r4, r0
 8005bde:	4608      	mov	r0, r1
 8005be0:	4611      	mov	r1, r2
 8005be2:	2200      	movs	r2, #0
 8005be4:	602a      	str	r2, [r5, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	f7fb fe25 	bl	8001836 <_read>
 8005bec:	1c43      	adds	r3, r0, #1
 8005bee:	d102      	bne.n	8005bf6 <_read_r+0x1e>
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	b103      	cbz	r3, 8005bf6 <_read_r+0x1e>
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	bd38      	pop	{r3, r4, r5, pc}
 8005bf8:	200003c8 	.word	0x200003c8

08005bfc <_write_r>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	4d07      	ldr	r5, [pc, #28]	@ (8005c1c <_write_r+0x20>)
 8005c00:	4604      	mov	r4, r0
 8005c02:	4608      	mov	r0, r1
 8005c04:	4611      	mov	r1, r2
 8005c06:	2200      	movs	r2, #0
 8005c08:	602a      	str	r2, [r5, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f7fb fe30 	bl	8001870 <_write>
 8005c10:	1c43      	adds	r3, r0, #1
 8005c12:	d102      	bne.n	8005c1a <_write_r+0x1e>
 8005c14:	682b      	ldr	r3, [r5, #0]
 8005c16:	b103      	cbz	r3, 8005c1a <_write_r+0x1e>
 8005c18:	6023      	str	r3, [r4, #0]
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
 8005c1c:	200003c8 	.word	0x200003c8

08005c20 <__errno>:
 8005c20:	4b01      	ldr	r3, [pc, #4]	@ (8005c28 <__errno+0x8>)
 8005c22:	6818      	ldr	r0, [r3, #0]
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	2000001c 	.word	0x2000001c

08005c2c <__libc_init_array>:
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	4d0d      	ldr	r5, [pc, #52]	@ (8005c64 <__libc_init_array+0x38>)
 8005c30:	4c0d      	ldr	r4, [pc, #52]	@ (8005c68 <__libc_init_array+0x3c>)
 8005c32:	1b64      	subs	r4, r4, r5
 8005c34:	10a4      	asrs	r4, r4, #2
 8005c36:	2600      	movs	r6, #0
 8005c38:	42a6      	cmp	r6, r4
 8005c3a:	d109      	bne.n	8005c50 <__libc_init_array+0x24>
 8005c3c:	4d0b      	ldr	r5, [pc, #44]	@ (8005c6c <__libc_init_array+0x40>)
 8005c3e:	4c0c      	ldr	r4, [pc, #48]	@ (8005c70 <__libc_init_array+0x44>)
 8005c40:	f000 fe42 	bl	80068c8 <_init>
 8005c44:	1b64      	subs	r4, r4, r5
 8005c46:	10a4      	asrs	r4, r4, #2
 8005c48:	2600      	movs	r6, #0
 8005c4a:	42a6      	cmp	r6, r4
 8005c4c:	d105      	bne.n	8005c5a <__libc_init_array+0x2e>
 8005c4e:	bd70      	pop	{r4, r5, r6, pc}
 8005c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c54:	4798      	blx	r3
 8005c56:	3601      	adds	r6, #1
 8005c58:	e7ee      	b.n	8005c38 <__libc_init_array+0xc>
 8005c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c5e:	4798      	blx	r3
 8005c60:	3601      	adds	r6, #1
 8005c62:	e7f2      	b.n	8005c4a <__libc_init_array+0x1e>
 8005c64:	08006b68 	.word	0x08006b68
 8005c68:	08006b68 	.word	0x08006b68
 8005c6c:	08006b68 	.word	0x08006b68
 8005c70:	08006b6c 	.word	0x08006b6c

08005c74 <__retarget_lock_init_recursive>:
 8005c74:	4770      	bx	lr

08005c76 <__retarget_lock_acquire_recursive>:
 8005c76:	4770      	bx	lr

08005c78 <__retarget_lock_release_recursive>:
 8005c78:	4770      	bx	lr

08005c7a <strcpy>:
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c80:	f803 2b01 	strb.w	r2, [r3], #1
 8005c84:	2a00      	cmp	r2, #0
 8005c86:	d1f9      	bne.n	8005c7c <strcpy+0x2>
 8005c88:	4770      	bx	lr
	...

08005c8c <__assert_func>:
 8005c8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c8e:	4614      	mov	r4, r2
 8005c90:	461a      	mov	r2, r3
 8005c92:	4b09      	ldr	r3, [pc, #36]	@ (8005cb8 <__assert_func+0x2c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4605      	mov	r5, r0
 8005c98:	68d8      	ldr	r0, [r3, #12]
 8005c9a:	b954      	cbnz	r4, 8005cb2 <__assert_func+0x26>
 8005c9c:	4b07      	ldr	r3, [pc, #28]	@ (8005cbc <__assert_func+0x30>)
 8005c9e:	461c      	mov	r4, r3
 8005ca0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ca4:	9100      	str	r1, [sp, #0]
 8005ca6:	462b      	mov	r3, r5
 8005ca8:	4905      	ldr	r1, [pc, #20]	@ (8005cc0 <__assert_func+0x34>)
 8005caa:	f000 f9b9 	bl	8006020 <fiprintf>
 8005cae:	f000 f9d9 	bl	8006064 <abort>
 8005cb2:	4b04      	ldr	r3, [pc, #16]	@ (8005cc4 <__assert_func+0x38>)
 8005cb4:	e7f4      	b.n	8005ca0 <__assert_func+0x14>
 8005cb6:	bf00      	nop
 8005cb8:	2000001c 	.word	0x2000001c
 8005cbc:	08006b29 	.word	0x08006b29
 8005cc0:	08006afb 	.word	0x08006afb
 8005cc4:	08006aee 	.word	0x08006aee

08005cc8 <_free_r>:
 8005cc8:	b538      	push	{r3, r4, r5, lr}
 8005cca:	4605      	mov	r5, r0
 8005ccc:	2900      	cmp	r1, #0
 8005cce:	d041      	beq.n	8005d54 <_free_r+0x8c>
 8005cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cd4:	1f0c      	subs	r4, r1, #4
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	bfb8      	it	lt
 8005cda:	18e4      	addlt	r4, r4, r3
 8005cdc:	f000 f8e8 	bl	8005eb0 <__malloc_lock>
 8005ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8005d58 <_free_r+0x90>)
 8005ce2:	6813      	ldr	r3, [r2, #0]
 8005ce4:	b933      	cbnz	r3, 8005cf4 <_free_r+0x2c>
 8005ce6:	6063      	str	r3, [r4, #4]
 8005ce8:	6014      	str	r4, [r2, #0]
 8005cea:	4628      	mov	r0, r5
 8005cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cf0:	f000 b8e4 	b.w	8005ebc <__malloc_unlock>
 8005cf4:	42a3      	cmp	r3, r4
 8005cf6:	d908      	bls.n	8005d0a <_free_r+0x42>
 8005cf8:	6820      	ldr	r0, [r4, #0]
 8005cfa:	1821      	adds	r1, r4, r0
 8005cfc:	428b      	cmp	r3, r1
 8005cfe:	bf01      	itttt	eq
 8005d00:	6819      	ldreq	r1, [r3, #0]
 8005d02:	685b      	ldreq	r3, [r3, #4]
 8005d04:	1809      	addeq	r1, r1, r0
 8005d06:	6021      	streq	r1, [r4, #0]
 8005d08:	e7ed      	b.n	8005ce6 <_free_r+0x1e>
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	b10b      	cbz	r3, 8005d14 <_free_r+0x4c>
 8005d10:	42a3      	cmp	r3, r4
 8005d12:	d9fa      	bls.n	8005d0a <_free_r+0x42>
 8005d14:	6811      	ldr	r1, [r2, #0]
 8005d16:	1850      	adds	r0, r2, r1
 8005d18:	42a0      	cmp	r0, r4
 8005d1a:	d10b      	bne.n	8005d34 <_free_r+0x6c>
 8005d1c:	6820      	ldr	r0, [r4, #0]
 8005d1e:	4401      	add	r1, r0
 8005d20:	1850      	adds	r0, r2, r1
 8005d22:	4283      	cmp	r3, r0
 8005d24:	6011      	str	r1, [r2, #0]
 8005d26:	d1e0      	bne.n	8005cea <_free_r+0x22>
 8005d28:	6818      	ldr	r0, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	6053      	str	r3, [r2, #4]
 8005d2e:	4408      	add	r0, r1
 8005d30:	6010      	str	r0, [r2, #0]
 8005d32:	e7da      	b.n	8005cea <_free_r+0x22>
 8005d34:	d902      	bls.n	8005d3c <_free_r+0x74>
 8005d36:	230c      	movs	r3, #12
 8005d38:	602b      	str	r3, [r5, #0]
 8005d3a:	e7d6      	b.n	8005cea <_free_r+0x22>
 8005d3c:	6820      	ldr	r0, [r4, #0]
 8005d3e:	1821      	adds	r1, r4, r0
 8005d40:	428b      	cmp	r3, r1
 8005d42:	bf04      	itt	eq
 8005d44:	6819      	ldreq	r1, [r3, #0]
 8005d46:	685b      	ldreq	r3, [r3, #4]
 8005d48:	6063      	str	r3, [r4, #4]
 8005d4a:	bf04      	itt	eq
 8005d4c:	1809      	addeq	r1, r1, r0
 8005d4e:	6021      	streq	r1, [r4, #0]
 8005d50:	6054      	str	r4, [r2, #4]
 8005d52:	e7ca      	b.n	8005cea <_free_r+0x22>
 8005d54:	bd38      	pop	{r3, r4, r5, pc}
 8005d56:	bf00      	nop
 8005d58:	200003d4 	.word	0x200003d4

08005d5c <malloc>:
 8005d5c:	4b02      	ldr	r3, [pc, #8]	@ (8005d68 <malloc+0xc>)
 8005d5e:	4601      	mov	r1, r0
 8005d60:	6818      	ldr	r0, [r3, #0]
 8005d62:	f000 b825 	b.w	8005db0 <_malloc_r>
 8005d66:	bf00      	nop
 8005d68:	2000001c 	.word	0x2000001c

08005d6c <sbrk_aligned>:
 8005d6c:	b570      	push	{r4, r5, r6, lr}
 8005d6e:	4e0f      	ldr	r6, [pc, #60]	@ (8005dac <sbrk_aligned+0x40>)
 8005d70:	460c      	mov	r4, r1
 8005d72:	6831      	ldr	r1, [r6, #0]
 8005d74:	4605      	mov	r5, r0
 8005d76:	b911      	cbnz	r1, 8005d7e <sbrk_aligned+0x12>
 8005d78:	f000 f964 	bl	8006044 <_sbrk_r>
 8005d7c:	6030      	str	r0, [r6, #0]
 8005d7e:	4621      	mov	r1, r4
 8005d80:	4628      	mov	r0, r5
 8005d82:	f000 f95f 	bl	8006044 <_sbrk_r>
 8005d86:	1c43      	adds	r3, r0, #1
 8005d88:	d103      	bne.n	8005d92 <sbrk_aligned+0x26>
 8005d8a:	f04f 34ff 	mov.w	r4, #4294967295
 8005d8e:	4620      	mov	r0, r4
 8005d90:	bd70      	pop	{r4, r5, r6, pc}
 8005d92:	1cc4      	adds	r4, r0, #3
 8005d94:	f024 0403 	bic.w	r4, r4, #3
 8005d98:	42a0      	cmp	r0, r4
 8005d9a:	d0f8      	beq.n	8005d8e <sbrk_aligned+0x22>
 8005d9c:	1a21      	subs	r1, r4, r0
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f000 f950 	bl	8006044 <_sbrk_r>
 8005da4:	3001      	adds	r0, #1
 8005da6:	d1f2      	bne.n	8005d8e <sbrk_aligned+0x22>
 8005da8:	e7ef      	b.n	8005d8a <sbrk_aligned+0x1e>
 8005daa:	bf00      	nop
 8005dac:	200003d0 	.word	0x200003d0

08005db0 <_malloc_r>:
 8005db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005db4:	1ccd      	adds	r5, r1, #3
 8005db6:	f025 0503 	bic.w	r5, r5, #3
 8005dba:	3508      	adds	r5, #8
 8005dbc:	2d0c      	cmp	r5, #12
 8005dbe:	bf38      	it	cc
 8005dc0:	250c      	movcc	r5, #12
 8005dc2:	2d00      	cmp	r5, #0
 8005dc4:	4606      	mov	r6, r0
 8005dc6:	db01      	blt.n	8005dcc <_malloc_r+0x1c>
 8005dc8:	42a9      	cmp	r1, r5
 8005dca:	d904      	bls.n	8005dd6 <_malloc_r+0x26>
 8005dcc:	230c      	movs	r3, #12
 8005dce:	6033      	str	r3, [r6, #0]
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005eac <_malloc_r+0xfc>
 8005dda:	f000 f869 	bl	8005eb0 <__malloc_lock>
 8005dde:	f8d8 3000 	ldr.w	r3, [r8]
 8005de2:	461c      	mov	r4, r3
 8005de4:	bb44      	cbnz	r4, 8005e38 <_malloc_r+0x88>
 8005de6:	4629      	mov	r1, r5
 8005de8:	4630      	mov	r0, r6
 8005dea:	f7ff ffbf 	bl	8005d6c <sbrk_aligned>
 8005dee:	1c43      	adds	r3, r0, #1
 8005df0:	4604      	mov	r4, r0
 8005df2:	d158      	bne.n	8005ea6 <_malloc_r+0xf6>
 8005df4:	f8d8 4000 	ldr.w	r4, [r8]
 8005df8:	4627      	mov	r7, r4
 8005dfa:	2f00      	cmp	r7, #0
 8005dfc:	d143      	bne.n	8005e86 <_malloc_r+0xd6>
 8005dfe:	2c00      	cmp	r4, #0
 8005e00:	d04b      	beq.n	8005e9a <_malloc_r+0xea>
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	4639      	mov	r1, r7
 8005e06:	4630      	mov	r0, r6
 8005e08:	eb04 0903 	add.w	r9, r4, r3
 8005e0c:	f000 f91a 	bl	8006044 <_sbrk_r>
 8005e10:	4581      	cmp	r9, r0
 8005e12:	d142      	bne.n	8005e9a <_malloc_r+0xea>
 8005e14:	6821      	ldr	r1, [r4, #0]
 8005e16:	1a6d      	subs	r5, r5, r1
 8005e18:	4629      	mov	r1, r5
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	f7ff ffa6 	bl	8005d6c <sbrk_aligned>
 8005e20:	3001      	adds	r0, #1
 8005e22:	d03a      	beq.n	8005e9a <_malloc_r+0xea>
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	442b      	add	r3, r5
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	bb62      	cbnz	r2, 8005e8c <_malloc_r+0xdc>
 8005e32:	f8c8 7000 	str.w	r7, [r8]
 8005e36:	e00f      	b.n	8005e58 <_malloc_r+0xa8>
 8005e38:	6822      	ldr	r2, [r4, #0]
 8005e3a:	1b52      	subs	r2, r2, r5
 8005e3c:	d420      	bmi.n	8005e80 <_malloc_r+0xd0>
 8005e3e:	2a0b      	cmp	r2, #11
 8005e40:	d917      	bls.n	8005e72 <_malloc_r+0xc2>
 8005e42:	1961      	adds	r1, r4, r5
 8005e44:	42a3      	cmp	r3, r4
 8005e46:	6025      	str	r5, [r4, #0]
 8005e48:	bf18      	it	ne
 8005e4a:	6059      	strne	r1, [r3, #4]
 8005e4c:	6863      	ldr	r3, [r4, #4]
 8005e4e:	bf08      	it	eq
 8005e50:	f8c8 1000 	streq.w	r1, [r8]
 8005e54:	5162      	str	r2, [r4, r5]
 8005e56:	604b      	str	r3, [r1, #4]
 8005e58:	4630      	mov	r0, r6
 8005e5a:	f000 f82f 	bl	8005ebc <__malloc_unlock>
 8005e5e:	f104 000b 	add.w	r0, r4, #11
 8005e62:	1d23      	adds	r3, r4, #4
 8005e64:	f020 0007 	bic.w	r0, r0, #7
 8005e68:	1ac2      	subs	r2, r0, r3
 8005e6a:	bf1c      	itt	ne
 8005e6c:	1a1b      	subne	r3, r3, r0
 8005e6e:	50a3      	strne	r3, [r4, r2]
 8005e70:	e7af      	b.n	8005dd2 <_malloc_r+0x22>
 8005e72:	6862      	ldr	r2, [r4, #4]
 8005e74:	42a3      	cmp	r3, r4
 8005e76:	bf0c      	ite	eq
 8005e78:	f8c8 2000 	streq.w	r2, [r8]
 8005e7c:	605a      	strne	r2, [r3, #4]
 8005e7e:	e7eb      	b.n	8005e58 <_malloc_r+0xa8>
 8005e80:	4623      	mov	r3, r4
 8005e82:	6864      	ldr	r4, [r4, #4]
 8005e84:	e7ae      	b.n	8005de4 <_malloc_r+0x34>
 8005e86:	463c      	mov	r4, r7
 8005e88:	687f      	ldr	r7, [r7, #4]
 8005e8a:	e7b6      	b.n	8005dfa <_malloc_r+0x4a>
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	42a3      	cmp	r3, r4
 8005e92:	d1fb      	bne.n	8005e8c <_malloc_r+0xdc>
 8005e94:	2300      	movs	r3, #0
 8005e96:	6053      	str	r3, [r2, #4]
 8005e98:	e7de      	b.n	8005e58 <_malloc_r+0xa8>
 8005e9a:	230c      	movs	r3, #12
 8005e9c:	6033      	str	r3, [r6, #0]
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	f000 f80c 	bl	8005ebc <__malloc_unlock>
 8005ea4:	e794      	b.n	8005dd0 <_malloc_r+0x20>
 8005ea6:	6005      	str	r5, [r0, #0]
 8005ea8:	e7d6      	b.n	8005e58 <_malloc_r+0xa8>
 8005eaa:	bf00      	nop
 8005eac:	200003d4 	.word	0x200003d4

08005eb0 <__malloc_lock>:
 8005eb0:	4801      	ldr	r0, [pc, #4]	@ (8005eb8 <__malloc_lock+0x8>)
 8005eb2:	f7ff bee0 	b.w	8005c76 <__retarget_lock_acquire_recursive>
 8005eb6:	bf00      	nop
 8005eb8:	200003cc 	.word	0x200003cc

08005ebc <__malloc_unlock>:
 8005ebc:	4801      	ldr	r0, [pc, #4]	@ (8005ec4 <__malloc_unlock+0x8>)
 8005ebe:	f7ff bedb 	b.w	8005c78 <__retarget_lock_release_recursive>
 8005ec2:	bf00      	nop
 8005ec4:	200003cc 	.word	0x200003cc

08005ec8 <__sflush_r>:
 8005ec8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed0:	0716      	lsls	r6, r2, #28
 8005ed2:	4605      	mov	r5, r0
 8005ed4:	460c      	mov	r4, r1
 8005ed6:	d454      	bmi.n	8005f82 <__sflush_r+0xba>
 8005ed8:	684b      	ldr	r3, [r1, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	dc02      	bgt.n	8005ee4 <__sflush_r+0x1c>
 8005ede:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	dd48      	ble.n	8005f76 <__sflush_r+0xae>
 8005ee4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ee6:	2e00      	cmp	r6, #0
 8005ee8:	d045      	beq.n	8005f76 <__sflush_r+0xae>
 8005eea:	2300      	movs	r3, #0
 8005eec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005ef0:	682f      	ldr	r7, [r5, #0]
 8005ef2:	6a21      	ldr	r1, [r4, #32]
 8005ef4:	602b      	str	r3, [r5, #0]
 8005ef6:	d030      	beq.n	8005f5a <__sflush_r+0x92>
 8005ef8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005efa:	89a3      	ldrh	r3, [r4, #12]
 8005efc:	0759      	lsls	r1, r3, #29
 8005efe:	d505      	bpl.n	8005f0c <__sflush_r+0x44>
 8005f00:	6863      	ldr	r3, [r4, #4]
 8005f02:	1ad2      	subs	r2, r2, r3
 8005f04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f06:	b10b      	cbz	r3, 8005f0c <__sflush_r+0x44>
 8005f08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f0a:	1ad2      	subs	r2, r2, r3
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f10:	6a21      	ldr	r1, [r4, #32]
 8005f12:	4628      	mov	r0, r5
 8005f14:	47b0      	blx	r6
 8005f16:	1c43      	adds	r3, r0, #1
 8005f18:	89a3      	ldrh	r3, [r4, #12]
 8005f1a:	d106      	bne.n	8005f2a <__sflush_r+0x62>
 8005f1c:	6829      	ldr	r1, [r5, #0]
 8005f1e:	291d      	cmp	r1, #29
 8005f20:	d82b      	bhi.n	8005f7a <__sflush_r+0xb2>
 8005f22:	4a2a      	ldr	r2, [pc, #168]	@ (8005fcc <__sflush_r+0x104>)
 8005f24:	410a      	asrs	r2, r1
 8005f26:	07d6      	lsls	r6, r2, #31
 8005f28:	d427      	bmi.n	8005f7a <__sflush_r+0xb2>
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	6062      	str	r2, [r4, #4]
 8005f2e:	04d9      	lsls	r1, r3, #19
 8005f30:	6922      	ldr	r2, [r4, #16]
 8005f32:	6022      	str	r2, [r4, #0]
 8005f34:	d504      	bpl.n	8005f40 <__sflush_r+0x78>
 8005f36:	1c42      	adds	r2, r0, #1
 8005f38:	d101      	bne.n	8005f3e <__sflush_r+0x76>
 8005f3a:	682b      	ldr	r3, [r5, #0]
 8005f3c:	b903      	cbnz	r3, 8005f40 <__sflush_r+0x78>
 8005f3e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f42:	602f      	str	r7, [r5, #0]
 8005f44:	b1b9      	cbz	r1, 8005f76 <__sflush_r+0xae>
 8005f46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f4a:	4299      	cmp	r1, r3
 8005f4c:	d002      	beq.n	8005f54 <__sflush_r+0x8c>
 8005f4e:	4628      	mov	r0, r5
 8005f50:	f7ff feba 	bl	8005cc8 <_free_r>
 8005f54:	2300      	movs	r3, #0
 8005f56:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f58:	e00d      	b.n	8005f76 <__sflush_r+0xae>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	47b0      	blx	r6
 8005f60:	4602      	mov	r2, r0
 8005f62:	1c50      	adds	r0, r2, #1
 8005f64:	d1c9      	bne.n	8005efa <__sflush_r+0x32>
 8005f66:	682b      	ldr	r3, [r5, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0c6      	beq.n	8005efa <__sflush_r+0x32>
 8005f6c:	2b1d      	cmp	r3, #29
 8005f6e:	d001      	beq.n	8005f74 <__sflush_r+0xac>
 8005f70:	2b16      	cmp	r3, #22
 8005f72:	d11e      	bne.n	8005fb2 <__sflush_r+0xea>
 8005f74:	602f      	str	r7, [r5, #0]
 8005f76:	2000      	movs	r0, #0
 8005f78:	e022      	b.n	8005fc0 <__sflush_r+0xf8>
 8005f7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f7e:	b21b      	sxth	r3, r3
 8005f80:	e01b      	b.n	8005fba <__sflush_r+0xf2>
 8005f82:	690f      	ldr	r7, [r1, #16]
 8005f84:	2f00      	cmp	r7, #0
 8005f86:	d0f6      	beq.n	8005f76 <__sflush_r+0xae>
 8005f88:	0793      	lsls	r3, r2, #30
 8005f8a:	680e      	ldr	r6, [r1, #0]
 8005f8c:	bf08      	it	eq
 8005f8e:	694b      	ldreq	r3, [r1, #20]
 8005f90:	600f      	str	r7, [r1, #0]
 8005f92:	bf18      	it	ne
 8005f94:	2300      	movne	r3, #0
 8005f96:	eba6 0807 	sub.w	r8, r6, r7
 8005f9a:	608b      	str	r3, [r1, #8]
 8005f9c:	f1b8 0f00 	cmp.w	r8, #0
 8005fa0:	dde9      	ble.n	8005f76 <__sflush_r+0xae>
 8005fa2:	6a21      	ldr	r1, [r4, #32]
 8005fa4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005fa6:	4643      	mov	r3, r8
 8005fa8:	463a      	mov	r2, r7
 8005faa:	4628      	mov	r0, r5
 8005fac:	47b0      	blx	r6
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	dc08      	bgt.n	8005fc4 <__sflush_r+0xfc>
 8005fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fba:	81a3      	strh	r3, [r4, #12]
 8005fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fc4:	4407      	add	r7, r0
 8005fc6:	eba8 0800 	sub.w	r8, r8, r0
 8005fca:	e7e7      	b.n	8005f9c <__sflush_r+0xd4>
 8005fcc:	dfbffffe 	.word	0xdfbffffe

08005fd0 <_fflush_r>:
 8005fd0:	b538      	push	{r3, r4, r5, lr}
 8005fd2:	690b      	ldr	r3, [r1, #16]
 8005fd4:	4605      	mov	r5, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	b913      	cbnz	r3, 8005fe0 <_fflush_r+0x10>
 8005fda:	2500      	movs	r5, #0
 8005fdc:	4628      	mov	r0, r5
 8005fde:	bd38      	pop	{r3, r4, r5, pc}
 8005fe0:	b118      	cbz	r0, 8005fea <_fflush_r+0x1a>
 8005fe2:	6a03      	ldr	r3, [r0, #32]
 8005fe4:	b90b      	cbnz	r3, 8005fea <_fflush_r+0x1a>
 8005fe6:	f7ff fceb 	bl	80059c0 <__sinit>
 8005fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0f3      	beq.n	8005fda <_fflush_r+0xa>
 8005ff2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ff4:	07d0      	lsls	r0, r2, #31
 8005ff6:	d404      	bmi.n	8006002 <_fflush_r+0x32>
 8005ff8:	0599      	lsls	r1, r3, #22
 8005ffa:	d402      	bmi.n	8006002 <_fflush_r+0x32>
 8005ffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ffe:	f7ff fe3a 	bl	8005c76 <__retarget_lock_acquire_recursive>
 8006002:	4628      	mov	r0, r5
 8006004:	4621      	mov	r1, r4
 8006006:	f7ff ff5f 	bl	8005ec8 <__sflush_r>
 800600a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800600c:	07da      	lsls	r2, r3, #31
 800600e:	4605      	mov	r5, r0
 8006010:	d4e4      	bmi.n	8005fdc <_fflush_r+0xc>
 8006012:	89a3      	ldrh	r3, [r4, #12]
 8006014:	059b      	lsls	r3, r3, #22
 8006016:	d4e1      	bmi.n	8005fdc <_fflush_r+0xc>
 8006018:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800601a:	f7ff fe2d 	bl	8005c78 <__retarget_lock_release_recursive>
 800601e:	e7dd      	b.n	8005fdc <_fflush_r+0xc>

08006020 <fiprintf>:
 8006020:	b40e      	push	{r1, r2, r3}
 8006022:	b503      	push	{r0, r1, lr}
 8006024:	4601      	mov	r1, r0
 8006026:	ab03      	add	r3, sp, #12
 8006028:	4805      	ldr	r0, [pc, #20]	@ (8006040 <fiprintf+0x20>)
 800602a:	f853 2b04 	ldr.w	r2, [r3], #4
 800602e:	6800      	ldr	r0, [r0, #0]
 8006030:	9301      	str	r3, [sp, #4]
 8006032:	f000 f847 	bl	80060c4 <_vfiprintf_r>
 8006036:	b002      	add	sp, #8
 8006038:	f85d eb04 	ldr.w	lr, [sp], #4
 800603c:	b003      	add	sp, #12
 800603e:	4770      	bx	lr
 8006040:	2000001c 	.word	0x2000001c

08006044 <_sbrk_r>:
 8006044:	b538      	push	{r3, r4, r5, lr}
 8006046:	4d06      	ldr	r5, [pc, #24]	@ (8006060 <_sbrk_r+0x1c>)
 8006048:	2300      	movs	r3, #0
 800604a:	4604      	mov	r4, r0
 800604c:	4608      	mov	r0, r1
 800604e:	602b      	str	r3, [r5, #0]
 8006050:	f7fb fc5e 	bl	8001910 <_sbrk>
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	d102      	bne.n	800605e <_sbrk_r+0x1a>
 8006058:	682b      	ldr	r3, [r5, #0]
 800605a:	b103      	cbz	r3, 800605e <_sbrk_r+0x1a>
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	bd38      	pop	{r3, r4, r5, pc}
 8006060:	200003c8 	.word	0x200003c8

08006064 <abort>:
 8006064:	b508      	push	{r3, lr}
 8006066:	2006      	movs	r0, #6
 8006068:	f000 fb8e 	bl	8006788 <raise>
 800606c:	2001      	movs	r0, #1
 800606e:	f7fb fbd7 	bl	8001820 <_exit>

08006072 <__sfputc_r>:
 8006072:	6893      	ldr	r3, [r2, #8]
 8006074:	3b01      	subs	r3, #1
 8006076:	2b00      	cmp	r3, #0
 8006078:	b410      	push	{r4}
 800607a:	6093      	str	r3, [r2, #8]
 800607c:	da08      	bge.n	8006090 <__sfputc_r+0x1e>
 800607e:	6994      	ldr	r4, [r2, #24]
 8006080:	42a3      	cmp	r3, r4
 8006082:	db01      	blt.n	8006088 <__sfputc_r+0x16>
 8006084:	290a      	cmp	r1, #10
 8006086:	d103      	bne.n	8006090 <__sfputc_r+0x1e>
 8006088:	f85d 4b04 	ldr.w	r4, [sp], #4
 800608c:	f000 bac0 	b.w	8006610 <__swbuf_r>
 8006090:	6813      	ldr	r3, [r2, #0]
 8006092:	1c58      	adds	r0, r3, #1
 8006094:	6010      	str	r0, [r2, #0]
 8006096:	7019      	strb	r1, [r3, #0]
 8006098:	4608      	mov	r0, r1
 800609a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <__sfputs_r>:
 80060a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a2:	4606      	mov	r6, r0
 80060a4:	460f      	mov	r7, r1
 80060a6:	4614      	mov	r4, r2
 80060a8:	18d5      	adds	r5, r2, r3
 80060aa:	42ac      	cmp	r4, r5
 80060ac:	d101      	bne.n	80060b2 <__sfputs_r+0x12>
 80060ae:	2000      	movs	r0, #0
 80060b0:	e007      	b.n	80060c2 <__sfputs_r+0x22>
 80060b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060b6:	463a      	mov	r2, r7
 80060b8:	4630      	mov	r0, r6
 80060ba:	f7ff ffda 	bl	8006072 <__sfputc_r>
 80060be:	1c43      	adds	r3, r0, #1
 80060c0:	d1f3      	bne.n	80060aa <__sfputs_r+0xa>
 80060c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080060c4 <_vfiprintf_r>:
 80060c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c8:	460d      	mov	r5, r1
 80060ca:	b09d      	sub	sp, #116	@ 0x74
 80060cc:	4614      	mov	r4, r2
 80060ce:	4698      	mov	r8, r3
 80060d0:	4606      	mov	r6, r0
 80060d2:	b118      	cbz	r0, 80060dc <_vfiprintf_r+0x18>
 80060d4:	6a03      	ldr	r3, [r0, #32]
 80060d6:	b90b      	cbnz	r3, 80060dc <_vfiprintf_r+0x18>
 80060d8:	f7ff fc72 	bl	80059c0 <__sinit>
 80060dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060de:	07d9      	lsls	r1, r3, #31
 80060e0:	d405      	bmi.n	80060ee <_vfiprintf_r+0x2a>
 80060e2:	89ab      	ldrh	r3, [r5, #12]
 80060e4:	059a      	lsls	r2, r3, #22
 80060e6:	d402      	bmi.n	80060ee <_vfiprintf_r+0x2a>
 80060e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060ea:	f7ff fdc4 	bl	8005c76 <__retarget_lock_acquire_recursive>
 80060ee:	89ab      	ldrh	r3, [r5, #12]
 80060f0:	071b      	lsls	r3, r3, #28
 80060f2:	d501      	bpl.n	80060f8 <_vfiprintf_r+0x34>
 80060f4:	692b      	ldr	r3, [r5, #16]
 80060f6:	b99b      	cbnz	r3, 8006120 <_vfiprintf_r+0x5c>
 80060f8:	4629      	mov	r1, r5
 80060fa:	4630      	mov	r0, r6
 80060fc:	f000 fac6 	bl	800668c <__swsetup_r>
 8006100:	b170      	cbz	r0, 8006120 <_vfiprintf_r+0x5c>
 8006102:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006104:	07dc      	lsls	r4, r3, #31
 8006106:	d504      	bpl.n	8006112 <_vfiprintf_r+0x4e>
 8006108:	f04f 30ff 	mov.w	r0, #4294967295
 800610c:	b01d      	add	sp, #116	@ 0x74
 800610e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006112:	89ab      	ldrh	r3, [r5, #12]
 8006114:	0598      	lsls	r0, r3, #22
 8006116:	d4f7      	bmi.n	8006108 <_vfiprintf_r+0x44>
 8006118:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800611a:	f7ff fdad 	bl	8005c78 <__retarget_lock_release_recursive>
 800611e:	e7f3      	b.n	8006108 <_vfiprintf_r+0x44>
 8006120:	2300      	movs	r3, #0
 8006122:	9309      	str	r3, [sp, #36]	@ 0x24
 8006124:	2320      	movs	r3, #32
 8006126:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800612a:	f8cd 800c 	str.w	r8, [sp, #12]
 800612e:	2330      	movs	r3, #48	@ 0x30
 8006130:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80062e0 <_vfiprintf_r+0x21c>
 8006134:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006138:	f04f 0901 	mov.w	r9, #1
 800613c:	4623      	mov	r3, r4
 800613e:	469a      	mov	sl, r3
 8006140:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006144:	b10a      	cbz	r2, 800614a <_vfiprintf_r+0x86>
 8006146:	2a25      	cmp	r2, #37	@ 0x25
 8006148:	d1f9      	bne.n	800613e <_vfiprintf_r+0x7a>
 800614a:	ebba 0b04 	subs.w	fp, sl, r4
 800614e:	d00b      	beq.n	8006168 <_vfiprintf_r+0xa4>
 8006150:	465b      	mov	r3, fp
 8006152:	4622      	mov	r2, r4
 8006154:	4629      	mov	r1, r5
 8006156:	4630      	mov	r0, r6
 8006158:	f7ff ffa2 	bl	80060a0 <__sfputs_r>
 800615c:	3001      	adds	r0, #1
 800615e:	f000 80a7 	beq.w	80062b0 <_vfiprintf_r+0x1ec>
 8006162:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006164:	445a      	add	r2, fp
 8006166:	9209      	str	r2, [sp, #36]	@ 0x24
 8006168:	f89a 3000 	ldrb.w	r3, [sl]
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 809f 	beq.w	80062b0 <_vfiprintf_r+0x1ec>
 8006172:	2300      	movs	r3, #0
 8006174:	f04f 32ff 	mov.w	r2, #4294967295
 8006178:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800617c:	f10a 0a01 	add.w	sl, sl, #1
 8006180:	9304      	str	r3, [sp, #16]
 8006182:	9307      	str	r3, [sp, #28]
 8006184:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006188:	931a      	str	r3, [sp, #104]	@ 0x68
 800618a:	4654      	mov	r4, sl
 800618c:	2205      	movs	r2, #5
 800618e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006192:	4853      	ldr	r0, [pc, #332]	@ (80062e0 <_vfiprintf_r+0x21c>)
 8006194:	f7fa f85c 	bl	8000250 <memchr>
 8006198:	9a04      	ldr	r2, [sp, #16]
 800619a:	b9d8      	cbnz	r0, 80061d4 <_vfiprintf_r+0x110>
 800619c:	06d1      	lsls	r1, r2, #27
 800619e:	bf44      	itt	mi
 80061a0:	2320      	movmi	r3, #32
 80061a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061a6:	0713      	lsls	r3, r2, #28
 80061a8:	bf44      	itt	mi
 80061aa:	232b      	movmi	r3, #43	@ 0x2b
 80061ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061b0:	f89a 3000 	ldrb.w	r3, [sl]
 80061b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80061b6:	d015      	beq.n	80061e4 <_vfiprintf_r+0x120>
 80061b8:	9a07      	ldr	r2, [sp, #28]
 80061ba:	4654      	mov	r4, sl
 80061bc:	2000      	movs	r0, #0
 80061be:	f04f 0c0a 	mov.w	ip, #10
 80061c2:	4621      	mov	r1, r4
 80061c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061c8:	3b30      	subs	r3, #48	@ 0x30
 80061ca:	2b09      	cmp	r3, #9
 80061cc:	d94b      	bls.n	8006266 <_vfiprintf_r+0x1a2>
 80061ce:	b1b0      	cbz	r0, 80061fe <_vfiprintf_r+0x13a>
 80061d0:	9207      	str	r2, [sp, #28]
 80061d2:	e014      	b.n	80061fe <_vfiprintf_r+0x13a>
 80061d4:	eba0 0308 	sub.w	r3, r0, r8
 80061d8:	fa09 f303 	lsl.w	r3, r9, r3
 80061dc:	4313      	orrs	r3, r2
 80061de:	9304      	str	r3, [sp, #16]
 80061e0:	46a2      	mov	sl, r4
 80061e2:	e7d2      	b.n	800618a <_vfiprintf_r+0xc6>
 80061e4:	9b03      	ldr	r3, [sp, #12]
 80061e6:	1d19      	adds	r1, r3, #4
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	9103      	str	r1, [sp, #12]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	bfbb      	ittet	lt
 80061f0:	425b      	neglt	r3, r3
 80061f2:	f042 0202 	orrlt.w	r2, r2, #2
 80061f6:	9307      	strge	r3, [sp, #28]
 80061f8:	9307      	strlt	r3, [sp, #28]
 80061fa:	bfb8      	it	lt
 80061fc:	9204      	strlt	r2, [sp, #16]
 80061fe:	7823      	ldrb	r3, [r4, #0]
 8006200:	2b2e      	cmp	r3, #46	@ 0x2e
 8006202:	d10a      	bne.n	800621a <_vfiprintf_r+0x156>
 8006204:	7863      	ldrb	r3, [r4, #1]
 8006206:	2b2a      	cmp	r3, #42	@ 0x2a
 8006208:	d132      	bne.n	8006270 <_vfiprintf_r+0x1ac>
 800620a:	9b03      	ldr	r3, [sp, #12]
 800620c:	1d1a      	adds	r2, r3, #4
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	9203      	str	r2, [sp, #12]
 8006212:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006216:	3402      	adds	r4, #2
 8006218:	9305      	str	r3, [sp, #20]
 800621a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80062f0 <_vfiprintf_r+0x22c>
 800621e:	7821      	ldrb	r1, [r4, #0]
 8006220:	2203      	movs	r2, #3
 8006222:	4650      	mov	r0, sl
 8006224:	f7fa f814 	bl	8000250 <memchr>
 8006228:	b138      	cbz	r0, 800623a <_vfiprintf_r+0x176>
 800622a:	9b04      	ldr	r3, [sp, #16]
 800622c:	eba0 000a 	sub.w	r0, r0, sl
 8006230:	2240      	movs	r2, #64	@ 0x40
 8006232:	4082      	lsls	r2, r0
 8006234:	4313      	orrs	r3, r2
 8006236:	3401      	adds	r4, #1
 8006238:	9304      	str	r3, [sp, #16]
 800623a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800623e:	4829      	ldr	r0, [pc, #164]	@ (80062e4 <_vfiprintf_r+0x220>)
 8006240:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006244:	2206      	movs	r2, #6
 8006246:	f7fa f803 	bl	8000250 <memchr>
 800624a:	2800      	cmp	r0, #0
 800624c:	d03f      	beq.n	80062ce <_vfiprintf_r+0x20a>
 800624e:	4b26      	ldr	r3, [pc, #152]	@ (80062e8 <_vfiprintf_r+0x224>)
 8006250:	bb1b      	cbnz	r3, 800629a <_vfiprintf_r+0x1d6>
 8006252:	9b03      	ldr	r3, [sp, #12]
 8006254:	3307      	adds	r3, #7
 8006256:	f023 0307 	bic.w	r3, r3, #7
 800625a:	3308      	adds	r3, #8
 800625c:	9303      	str	r3, [sp, #12]
 800625e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006260:	443b      	add	r3, r7
 8006262:	9309      	str	r3, [sp, #36]	@ 0x24
 8006264:	e76a      	b.n	800613c <_vfiprintf_r+0x78>
 8006266:	fb0c 3202 	mla	r2, ip, r2, r3
 800626a:	460c      	mov	r4, r1
 800626c:	2001      	movs	r0, #1
 800626e:	e7a8      	b.n	80061c2 <_vfiprintf_r+0xfe>
 8006270:	2300      	movs	r3, #0
 8006272:	3401      	adds	r4, #1
 8006274:	9305      	str	r3, [sp, #20]
 8006276:	4619      	mov	r1, r3
 8006278:	f04f 0c0a 	mov.w	ip, #10
 800627c:	4620      	mov	r0, r4
 800627e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006282:	3a30      	subs	r2, #48	@ 0x30
 8006284:	2a09      	cmp	r2, #9
 8006286:	d903      	bls.n	8006290 <_vfiprintf_r+0x1cc>
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0c6      	beq.n	800621a <_vfiprintf_r+0x156>
 800628c:	9105      	str	r1, [sp, #20]
 800628e:	e7c4      	b.n	800621a <_vfiprintf_r+0x156>
 8006290:	fb0c 2101 	mla	r1, ip, r1, r2
 8006294:	4604      	mov	r4, r0
 8006296:	2301      	movs	r3, #1
 8006298:	e7f0      	b.n	800627c <_vfiprintf_r+0x1b8>
 800629a:	ab03      	add	r3, sp, #12
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	462a      	mov	r2, r5
 80062a0:	4b12      	ldr	r3, [pc, #72]	@ (80062ec <_vfiprintf_r+0x228>)
 80062a2:	a904      	add	r1, sp, #16
 80062a4:	4630      	mov	r0, r6
 80062a6:	f3af 8000 	nop.w
 80062aa:	4607      	mov	r7, r0
 80062ac:	1c78      	adds	r0, r7, #1
 80062ae:	d1d6      	bne.n	800625e <_vfiprintf_r+0x19a>
 80062b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062b2:	07d9      	lsls	r1, r3, #31
 80062b4:	d405      	bmi.n	80062c2 <_vfiprintf_r+0x1fe>
 80062b6:	89ab      	ldrh	r3, [r5, #12]
 80062b8:	059a      	lsls	r2, r3, #22
 80062ba:	d402      	bmi.n	80062c2 <_vfiprintf_r+0x1fe>
 80062bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062be:	f7ff fcdb 	bl	8005c78 <__retarget_lock_release_recursive>
 80062c2:	89ab      	ldrh	r3, [r5, #12]
 80062c4:	065b      	lsls	r3, r3, #25
 80062c6:	f53f af1f 	bmi.w	8006108 <_vfiprintf_r+0x44>
 80062ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062cc:	e71e      	b.n	800610c <_vfiprintf_r+0x48>
 80062ce:	ab03      	add	r3, sp, #12
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	462a      	mov	r2, r5
 80062d4:	4b05      	ldr	r3, [pc, #20]	@ (80062ec <_vfiprintf_r+0x228>)
 80062d6:	a904      	add	r1, sp, #16
 80062d8:	4630      	mov	r0, r6
 80062da:	f000 f879 	bl	80063d0 <_printf_i>
 80062de:	e7e4      	b.n	80062aa <_vfiprintf_r+0x1e6>
 80062e0:	08006b2a 	.word	0x08006b2a
 80062e4:	08006b34 	.word	0x08006b34
 80062e8:	00000000 	.word	0x00000000
 80062ec:	080060a1 	.word	0x080060a1
 80062f0:	08006b30 	.word	0x08006b30

080062f4 <_printf_common>:
 80062f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062f8:	4616      	mov	r6, r2
 80062fa:	4698      	mov	r8, r3
 80062fc:	688a      	ldr	r2, [r1, #8]
 80062fe:	690b      	ldr	r3, [r1, #16]
 8006300:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006304:	4293      	cmp	r3, r2
 8006306:	bfb8      	it	lt
 8006308:	4613      	movlt	r3, r2
 800630a:	6033      	str	r3, [r6, #0]
 800630c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006310:	4607      	mov	r7, r0
 8006312:	460c      	mov	r4, r1
 8006314:	b10a      	cbz	r2, 800631a <_printf_common+0x26>
 8006316:	3301      	adds	r3, #1
 8006318:	6033      	str	r3, [r6, #0]
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	0699      	lsls	r1, r3, #26
 800631e:	bf42      	ittt	mi
 8006320:	6833      	ldrmi	r3, [r6, #0]
 8006322:	3302      	addmi	r3, #2
 8006324:	6033      	strmi	r3, [r6, #0]
 8006326:	6825      	ldr	r5, [r4, #0]
 8006328:	f015 0506 	ands.w	r5, r5, #6
 800632c:	d106      	bne.n	800633c <_printf_common+0x48>
 800632e:	f104 0a19 	add.w	sl, r4, #25
 8006332:	68e3      	ldr	r3, [r4, #12]
 8006334:	6832      	ldr	r2, [r6, #0]
 8006336:	1a9b      	subs	r3, r3, r2
 8006338:	42ab      	cmp	r3, r5
 800633a:	dc26      	bgt.n	800638a <_printf_common+0x96>
 800633c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006340:	6822      	ldr	r2, [r4, #0]
 8006342:	3b00      	subs	r3, #0
 8006344:	bf18      	it	ne
 8006346:	2301      	movne	r3, #1
 8006348:	0692      	lsls	r2, r2, #26
 800634a:	d42b      	bmi.n	80063a4 <_printf_common+0xb0>
 800634c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006350:	4641      	mov	r1, r8
 8006352:	4638      	mov	r0, r7
 8006354:	47c8      	blx	r9
 8006356:	3001      	adds	r0, #1
 8006358:	d01e      	beq.n	8006398 <_printf_common+0xa4>
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	6922      	ldr	r2, [r4, #16]
 800635e:	f003 0306 	and.w	r3, r3, #6
 8006362:	2b04      	cmp	r3, #4
 8006364:	bf02      	ittt	eq
 8006366:	68e5      	ldreq	r5, [r4, #12]
 8006368:	6833      	ldreq	r3, [r6, #0]
 800636a:	1aed      	subeq	r5, r5, r3
 800636c:	68a3      	ldr	r3, [r4, #8]
 800636e:	bf0c      	ite	eq
 8006370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006374:	2500      	movne	r5, #0
 8006376:	4293      	cmp	r3, r2
 8006378:	bfc4      	itt	gt
 800637a:	1a9b      	subgt	r3, r3, r2
 800637c:	18ed      	addgt	r5, r5, r3
 800637e:	2600      	movs	r6, #0
 8006380:	341a      	adds	r4, #26
 8006382:	42b5      	cmp	r5, r6
 8006384:	d11a      	bne.n	80063bc <_printf_common+0xc8>
 8006386:	2000      	movs	r0, #0
 8006388:	e008      	b.n	800639c <_printf_common+0xa8>
 800638a:	2301      	movs	r3, #1
 800638c:	4652      	mov	r2, sl
 800638e:	4641      	mov	r1, r8
 8006390:	4638      	mov	r0, r7
 8006392:	47c8      	blx	r9
 8006394:	3001      	adds	r0, #1
 8006396:	d103      	bne.n	80063a0 <_printf_common+0xac>
 8006398:	f04f 30ff 	mov.w	r0, #4294967295
 800639c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a0:	3501      	adds	r5, #1
 80063a2:	e7c6      	b.n	8006332 <_printf_common+0x3e>
 80063a4:	18e1      	adds	r1, r4, r3
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	2030      	movs	r0, #48	@ 0x30
 80063aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80063ae:	4422      	add	r2, r4
 80063b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80063b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80063b8:	3302      	adds	r3, #2
 80063ba:	e7c7      	b.n	800634c <_printf_common+0x58>
 80063bc:	2301      	movs	r3, #1
 80063be:	4622      	mov	r2, r4
 80063c0:	4641      	mov	r1, r8
 80063c2:	4638      	mov	r0, r7
 80063c4:	47c8      	blx	r9
 80063c6:	3001      	adds	r0, #1
 80063c8:	d0e6      	beq.n	8006398 <_printf_common+0xa4>
 80063ca:	3601      	adds	r6, #1
 80063cc:	e7d9      	b.n	8006382 <_printf_common+0x8e>
	...

080063d0 <_printf_i>:
 80063d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063d4:	7e0f      	ldrb	r7, [r1, #24]
 80063d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063d8:	2f78      	cmp	r7, #120	@ 0x78
 80063da:	4691      	mov	r9, r2
 80063dc:	4680      	mov	r8, r0
 80063de:	460c      	mov	r4, r1
 80063e0:	469a      	mov	sl, r3
 80063e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063e6:	d807      	bhi.n	80063f8 <_printf_i+0x28>
 80063e8:	2f62      	cmp	r7, #98	@ 0x62
 80063ea:	d80a      	bhi.n	8006402 <_printf_i+0x32>
 80063ec:	2f00      	cmp	r7, #0
 80063ee:	f000 80d2 	beq.w	8006596 <_printf_i+0x1c6>
 80063f2:	2f58      	cmp	r7, #88	@ 0x58
 80063f4:	f000 80b9 	beq.w	800656a <_printf_i+0x19a>
 80063f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006400:	e03a      	b.n	8006478 <_printf_i+0xa8>
 8006402:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006406:	2b15      	cmp	r3, #21
 8006408:	d8f6      	bhi.n	80063f8 <_printf_i+0x28>
 800640a:	a101      	add	r1, pc, #4	@ (adr r1, 8006410 <_printf_i+0x40>)
 800640c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006410:	08006469 	.word	0x08006469
 8006414:	0800647d 	.word	0x0800647d
 8006418:	080063f9 	.word	0x080063f9
 800641c:	080063f9 	.word	0x080063f9
 8006420:	080063f9 	.word	0x080063f9
 8006424:	080063f9 	.word	0x080063f9
 8006428:	0800647d 	.word	0x0800647d
 800642c:	080063f9 	.word	0x080063f9
 8006430:	080063f9 	.word	0x080063f9
 8006434:	080063f9 	.word	0x080063f9
 8006438:	080063f9 	.word	0x080063f9
 800643c:	0800657d 	.word	0x0800657d
 8006440:	080064a7 	.word	0x080064a7
 8006444:	08006537 	.word	0x08006537
 8006448:	080063f9 	.word	0x080063f9
 800644c:	080063f9 	.word	0x080063f9
 8006450:	0800659f 	.word	0x0800659f
 8006454:	080063f9 	.word	0x080063f9
 8006458:	080064a7 	.word	0x080064a7
 800645c:	080063f9 	.word	0x080063f9
 8006460:	080063f9 	.word	0x080063f9
 8006464:	0800653f 	.word	0x0800653f
 8006468:	6833      	ldr	r3, [r6, #0]
 800646a:	1d1a      	adds	r2, r3, #4
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6032      	str	r2, [r6, #0]
 8006470:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006474:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006478:	2301      	movs	r3, #1
 800647a:	e09d      	b.n	80065b8 <_printf_i+0x1e8>
 800647c:	6833      	ldr	r3, [r6, #0]
 800647e:	6820      	ldr	r0, [r4, #0]
 8006480:	1d19      	adds	r1, r3, #4
 8006482:	6031      	str	r1, [r6, #0]
 8006484:	0606      	lsls	r6, r0, #24
 8006486:	d501      	bpl.n	800648c <_printf_i+0xbc>
 8006488:	681d      	ldr	r5, [r3, #0]
 800648a:	e003      	b.n	8006494 <_printf_i+0xc4>
 800648c:	0645      	lsls	r5, r0, #25
 800648e:	d5fb      	bpl.n	8006488 <_printf_i+0xb8>
 8006490:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006494:	2d00      	cmp	r5, #0
 8006496:	da03      	bge.n	80064a0 <_printf_i+0xd0>
 8006498:	232d      	movs	r3, #45	@ 0x2d
 800649a:	426d      	negs	r5, r5
 800649c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064a0:	4859      	ldr	r0, [pc, #356]	@ (8006608 <_printf_i+0x238>)
 80064a2:	230a      	movs	r3, #10
 80064a4:	e011      	b.n	80064ca <_printf_i+0xfa>
 80064a6:	6821      	ldr	r1, [r4, #0]
 80064a8:	6833      	ldr	r3, [r6, #0]
 80064aa:	0608      	lsls	r0, r1, #24
 80064ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80064b0:	d402      	bmi.n	80064b8 <_printf_i+0xe8>
 80064b2:	0649      	lsls	r1, r1, #25
 80064b4:	bf48      	it	mi
 80064b6:	b2ad      	uxthmi	r5, r5
 80064b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80064ba:	4853      	ldr	r0, [pc, #332]	@ (8006608 <_printf_i+0x238>)
 80064bc:	6033      	str	r3, [r6, #0]
 80064be:	bf14      	ite	ne
 80064c0:	230a      	movne	r3, #10
 80064c2:	2308      	moveq	r3, #8
 80064c4:	2100      	movs	r1, #0
 80064c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064ca:	6866      	ldr	r6, [r4, #4]
 80064cc:	60a6      	str	r6, [r4, #8]
 80064ce:	2e00      	cmp	r6, #0
 80064d0:	bfa2      	ittt	ge
 80064d2:	6821      	ldrge	r1, [r4, #0]
 80064d4:	f021 0104 	bicge.w	r1, r1, #4
 80064d8:	6021      	strge	r1, [r4, #0]
 80064da:	b90d      	cbnz	r5, 80064e0 <_printf_i+0x110>
 80064dc:	2e00      	cmp	r6, #0
 80064de:	d04b      	beq.n	8006578 <_printf_i+0x1a8>
 80064e0:	4616      	mov	r6, r2
 80064e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80064e6:	fb03 5711 	mls	r7, r3, r1, r5
 80064ea:	5dc7      	ldrb	r7, [r0, r7]
 80064ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064f0:	462f      	mov	r7, r5
 80064f2:	42bb      	cmp	r3, r7
 80064f4:	460d      	mov	r5, r1
 80064f6:	d9f4      	bls.n	80064e2 <_printf_i+0x112>
 80064f8:	2b08      	cmp	r3, #8
 80064fa:	d10b      	bne.n	8006514 <_printf_i+0x144>
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	07df      	lsls	r7, r3, #31
 8006500:	d508      	bpl.n	8006514 <_printf_i+0x144>
 8006502:	6923      	ldr	r3, [r4, #16]
 8006504:	6861      	ldr	r1, [r4, #4]
 8006506:	4299      	cmp	r1, r3
 8006508:	bfde      	ittt	le
 800650a:	2330      	movle	r3, #48	@ 0x30
 800650c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006510:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006514:	1b92      	subs	r2, r2, r6
 8006516:	6122      	str	r2, [r4, #16]
 8006518:	f8cd a000 	str.w	sl, [sp]
 800651c:	464b      	mov	r3, r9
 800651e:	aa03      	add	r2, sp, #12
 8006520:	4621      	mov	r1, r4
 8006522:	4640      	mov	r0, r8
 8006524:	f7ff fee6 	bl	80062f4 <_printf_common>
 8006528:	3001      	adds	r0, #1
 800652a:	d14a      	bne.n	80065c2 <_printf_i+0x1f2>
 800652c:	f04f 30ff 	mov.w	r0, #4294967295
 8006530:	b004      	add	sp, #16
 8006532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	f043 0320 	orr.w	r3, r3, #32
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	4833      	ldr	r0, [pc, #204]	@ (800660c <_printf_i+0x23c>)
 8006540:	2778      	movs	r7, #120	@ 0x78
 8006542:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	6831      	ldr	r1, [r6, #0]
 800654a:	061f      	lsls	r7, r3, #24
 800654c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006550:	d402      	bmi.n	8006558 <_printf_i+0x188>
 8006552:	065f      	lsls	r7, r3, #25
 8006554:	bf48      	it	mi
 8006556:	b2ad      	uxthmi	r5, r5
 8006558:	6031      	str	r1, [r6, #0]
 800655a:	07d9      	lsls	r1, r3, #31
 800655c:	bf44      	itt	mi
 800655e:	f043 0320 	orrmi.w	r3, r3, #32
 8006562:	6023      	strmi	r3, [r4, #0]
 8006564:	b11d      	cbz	r5, 800656e <_printf_i+0x19e>
 8006566:	2310      	movs	r3, #16
 8006568:	e7ac      	b.n	80064c4 <_printf_i+0xf4>
 800656a:	4827      	ldr	r0, [pc, #156]	@ (8006608 <_printf_i+0x238>)
 800656c:	e7e9      	b.n	8006542 <_printf_i+0x172>
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	f023 0320 	bic.w	r3, r3, #32
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	e7f6      	b.n	8006566 <_printf_i+0x196>
 8006578:	4616      	mov	r6, r2
 800657a:	e7bd      	b.n	80064f8 <_printf_i+0x128>
 800657c:	6833      	ldr	r3, [r6, #0]
 800657e:	6825      	ldr	r5, [r4, #0]
 8006580:	6961      	ldr	r1, [r4, #20]
 8006582:	1d18      	adds	r0, r3, #4
 8006584:	6030      	str	r0, [r6, #0]
 8006586:	062e      	lsls	r6, r5, #24
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	d501      	bpl.n	8006590 <_printf_i+0x1c0>
 800658c:	6019      	str	r1, [r3, #0]
 800658e:	e002      	b.n	8006596 <_printf_i+0x1c6>
 8006590:	0668      	lsls	r0, r5, #25
 8006592:	d5fb      	bpl.n	800658c <_printf_i+0x1bc>
 8006594:	8019      	strh	r1, [r3, #0]
 8006596:	2300      	movs	r3, #0
 8006598:	6123      	str	r3, [r4, #16]
 800659a:	4616      	mov	r6, r2
 800659c:	e7bc      	b.n	8006518 <_printf_i+0x148>
 800659e:	6833      	ldr	r3, [r6, #0]
 80065a0:	1d1a      	adds	r2, r3, #4
 80065a2:	6032      	str	r2, [r6, #0]
 80065a4:	681e      	ldr	r6, [r3, #0]
 80065a6:	6862      	ldr	r2, [r4, #4]
 80065a8:	2100      	movs	r1, #0
 80065aa:	4630      	mov	r0, r6
 80065ac:	f7f9 fe50 	bl	8000250 <memchr>
 80065b0:	b108      	cbz	r0, 80065b6 <_printf_i+0x1e6>
 80065b2:	1b80      	subs	r0, r0, r6
 80065b4:	6060      	str	r0, [r4, #4]
 80065b6:	6863      	ldr	r3, [r4, #4]
 80065b8:	6123      	str	r3, [r4, #16]
 80065ba:	2300      	movs	r3, #0
 80065bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065c0:	e7aa      	b.n	8006518 <_printf_i+0x148>
 80065c2:	6923      	ldr	r3, [r4, #16]
 80065c4:	4632      	mov	r2, r6
 80065c6:	4649      	mov	r1, r9
 80065c8:	4640      	mov	r0, r8
 80065ca:	47d0      	blx	sl
 80065cc:	3001      	adds	r0, #1
 80065ce:	d0ad      	beq.n	800652c <_printf_i+0x15c>
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	079b      	lsls	r3, r3, #30
 80065d4:	d413      	bmi.n	80065fe <_printf_i+0x22e>
 80065d6:	68e0      	ldr	r0, [r4, #12]
 80065d8:	9b03      	ldr	r3, [sp, #12]
 80065da:	4298      	cmp	r0, r3
 80065dc:	bfb8      	it	lt
 80065de:	4618      	movlt	r0, r3
 80065e0:	e7a6      	b.n	8006530 <_printf_i+0x160>
 80065e2:	2301      	movs	r3, #1
 80065e4:	4632      	mov	r2, r6
 80065e6:	4649      	mov	r1, r9
 80065e8:	4640      	mov	r0, r8
 80065ea:	47d0      	blx	sl
 80065ec:	3001      	adds	r0, #1
 80065ee:	d09d      	beq.n	800652c <_printf_i+0x15c>
 80065f0:	3501      	adds	r5, #1
 80065f2:	68e3      	ldr	r3, [r4, #12]
 80065f4:	9903      	ldr	r1, [sp, #12]
 80065f6:	1a5b      	subs	r3, r3, r1
 80065f8:	42ab      	cmp	r3, r5
 80065fa:	dcf2      	bgt.n	80065e2 <_printf_i+0x212>
 80065fc:	e7eb      	b.n	80065d6 <_printf_i+0x206>
 80065fe:	2500      	movs	r5, #0
 8006600:	f104 0619 	add.w	r6, r4, #25
 8006604:	e7f5      	b.n	80065f2 <_printf_i+0x222>
 8006606:	bf00      	nop
 8006608:	08006b3b 	.word	0x08006b3b
 800660c:	08006b4c 	.word	0x08006b4c

08006610 <__swbuf_r>:
 8006610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006612:	460e      	mov	r6, r1
 8006614:	4614      	mov	r4, r2
 8006616:	4605      	mov	r5, r0
 8006618:	b118      	cbz	r0, 8006622 <__swbuf_r+0x12>
 800661a:	6a03      	ldr	r3, [r0, #32]
 800661c:	b90b      	cbnz	r3, 8006622 <__swbuf_r+0x12>
 800661e:	f7ff f9cf 	bl	80059c0 <__sinit>
 8006622:	69a3      	ldr	r3, [r4, #24]
 8006624:	60a3      	str	r3, [r4, #8]
 8006626:	89a3      	ldrh	r3, [r4, #12]
 8006628:	071a      	lsls	r2, r3, #28
 800662a:	d501      	bpl.n	8006630 <__swbuf_r+0x20>
 800662c:	6923      	ldr	r3, [r4, #16]
 800662e:	b943      	cbnz	r3, 8006642 <__swbuf_r+0x32>
 8006630:	4621      	mov	r1, r4
 8006632:	4628      	mov	r0, r5
 8006634:	f000 f82a 	bl	800668c <__swsetup_r>
 8006638:	b118      	cbz	r0, 8006642 <__swbuf_r+0x32>
 800663a:	f04f 37ff 	mov.w	r7, #4294967295
 800663e:	4638      	mov	r0, r7
 8006640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	6922      	ldr	r2, [r4, #16]
 8006646:	1a98      	subs	r0, r3, r2
 8006648:	6963      	ldr	r3, [r4, #20]
 800664a:	b2f6      	uxtb	r6, r6
 800664c:	4283      	cmp	r3, r0
 800664e:	4637      	mov	r7, r6
 8006650:	dc05      	bgt.n	800665e <__swbuf_r+0x4e>
 8006652:	4621      	mov	r1, r4
 8006654:	4628      	mov	r0, r5
 8006656:	f7ff fcbb 	bl	8005fd0 <_fflush_r>
 800665a:	2800      	cmp	r0, #0
 800665c:	d1ed      	bne.n	800663a <__swbuf_r+0x2a>
 800665e:	68a3      	ldr	r3, [r4, #8]
 8006660:	3b01      	subs	r3, #1
 8006662:	60a3      	str	r3, [r4, #8]
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	1c5a      	adds	r2, r3, #1
 8006668:	6022      	str	r2, [r4, #0]
 800666a:	701e      	strb	r6, [r3, #0]
 800666c:	6962      	ldr	r2, [r4, #20]
 800666e:	1c43      	adds	r3, r0, #1
 8006670:	429a      	cmp	r2, r3
 8006672:	d004      	beq.n	800667e <__swbuf_r+0x6e>
 8006674:	89a3      	ldrh	r3, [r4, #12]
 8006676:	07db      	lsls	r3, r3, #31
 8006678:	d5e1      	bpl.n	800663e <__swbuf_r+0x2e>
 800667a:	2e0a      	cmp	r6, #10
 800667c:	d1df      	bne.n	800663e <__swbuf_r+0x2e>
 800667e:	4621      	mov	r1, r4
 8006680:	4628      	mov	r0, r5
 8006682:	f7ff fca5 	bl	8005fd0 <_fflush_r>
 8006686:	2800      	cmp	r0, #0
 8006688:	d0d9      	beq.n	800663e <__swbuf_r+0x2e>
 800668a:	e7d6      	b.n	800663a <__swbuf_r+0x2a>

0800668c <__swsetup_r>:
 800668c:	b538      	push	{r3, r4, r5, lr}
 800668e:	4b29      	ldr	r3, [pc, #164]	@ (8006734 <__swsetup_r+0xa8>)
 8006690:	4605      	mov	r5, r0
 8006692:	6818      	ldr	r0, [r3, #0]
 8006694:	460c      	mov	r4, r1
 8006696:	b118      	cbz	r0, 80066a0 <__swsetup_r+0x14>
 8006698:	6a03      	ldr	r3, [r0, #32]
 800669a:	b90b      	cbnz	r3, 80066a0 <__swsetup_r+0x14>
 800669c:	f7ff f990 	bl	80059c0 <__sinit>
 80066a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066a4:	0719      	lsls	r1, r3, #28
 80066a6:	d422      	bmi.n	80066ee <__swsetup_r+0x62>
 80066a8:	06da      	lsls	r2, r3, #27
 80066aa:	d407      	bmi.n	80066bc <__swsetup_r+0x30>
 80066ac:	2209      	movs	r2, #9
 80066ae:	602a      	str	r2, [r5, #0]
 80066b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066b4:	81a3      	strh	r3, [r4, #12]
 80066b6:	f04f 30ff 	mov.w	r0, #4294967295
 80066ba:	e033      	b.n	8006724 <__swsetup_r+0x98>
 80066bc:	0758      	lsls	r0, r3, #29
 80066be:	d512      	bpl.n	80066e6 <__swsetup_r+0x5a>
 80066c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066c2:	b141      	cbz	r1, 80066d6 <__swsetup_r+0x4a>
 80066c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066c8:	4299      	cmp	r1, r3
 80066ca:	d002      	beq.n	80066d2 <__swsetup_r+0x46>
 80066cc:	4628      	mov	r0, r5
 80066ce:	f7ff fafb 	bl	8005cc8 <_free_r>
 80066d2:	2300      	movs	r3, #0
 80066d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80066d6:	89a3      	ldrh	r3, [r4, #12]
 80066d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80066dc:	81a3      	strh	r3, [r4, #12]
 80066de:	2300      	movs	r3, #0
 80066e0:	6063      	str	r3, [r4, #4]
 80066e2:	6923      	ldr	r3, [r4, #16]
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	89a3      	ldrh	r3, [r4, #12]
 80066e8:	f043 0308 	orr.w	r3, r3, #8
 80066ec:	81a3      	strh	r3, [r4, #12]
 80066ee:	6923      	ldr	r3, [r4, #16]
 80066f0:	b94b      	cbnz	r3, 8006706 <__swsetup_r+0x7a>
 80066f2:	89a3      	ldrh	r3, [r4, #12]
 80066f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80066f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066fc:	d003      	beq.n	8006706 <__swsetup_r+0x7a>
 80066fe:	4621      	mov	r1, r4
 8006700:	4628      	mov	r0, r5
 8006702:	f000 f883 	bl	800680c <__smakebuf_r>
 8006706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800670a:	f013 0201 	ands.w	r2, r3, #1
 800670e:	d00a      	beq.n	8006726 <__swsetup_r+0x9a>
 8006710:	2200      	movs	r2, #0
 8006712:	60a2      	str	r2, [r4, #8]
 8006714:	6962      	ldr	r2, [r4, #20]
 8006716:	4252      	negs	r2, r2
 8006718:	61a2      	str	r2, [r4, #24]
 800671a:	6922      	ldr	r2, [r4, #16]
 800671c:	b942      	cbnz	r2, 8006730 <__swsetup_r+0xa4>
 800671e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006722:	d1c5      	bne.n	80066b0 <__swsetup_r+0x24>
 8006724:	bd38      	pop	{r3, r4, r5, pc}
 8006726:	0799      	lsls	r1, r3, #30
 8006728:	bf58      	it	pl
 800672a:	6962      	ldrpl	r2, [r4, #20]
 800672c:	60a2      	str	r2, [r4, #8]
 800672e:	e7f4      	b.n	800671a <__swsetup_r+0x8e>
 8006730:	2000      	movs	r0, #0
 8006732:	e7f7      	b.n	8006724 <__swsetup_r+0x98>
 8006734:	2000001c 	.word	0x2000001c

08006738 <_raise_r>:
 8006738:	291f      	cmp	r1, #31
 800673a:	b538      	push	{r3, r4, r5, lr}
 800673c:	4605      	mov	r5, r0
 800673e:	460c      	mov	r4, r1
 8006740:	d904      	bls.n	800674c <_raise_r+0x14>
 8006742:	2316      	movs	r3, #22
 8006744:	6003      	str	r3, [r0, #0]
 8006746:	f04f 30ff 	mov.w	r0, #4294967295
 800674a:	bd38      	pop	{r3, r4, r5, pc}
 800674c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800674e:	b112      	cbz	r2, 8006756 <_raise_r+0x1e>
 8006750:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006754:	b94b      	cbnz	r3, 800676a <_raise_r+0x32>
 8006756:	4628      	mov	r0, r5
 8006758:	f000 f830 	bl	80067bc <_getpid_r>
 800675c:	4622      	mov	r2, r4
 800675e:	4601      	mov	r1, r0
 8006760:	4628      	mov	r0, r5
 8006762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006766:	f000 b817 	b.w	8006798 <_kill_r>
 800676a:	2b01      	cmp	r3, #1
 800676c:	d00a      	beq.n	8006784 <_raise_r+0x4c>
 800676e:	1c59      	adds	r1, r3, #1
 8006770:	d103      	bne.n	800677a <_raise_r+0x42>
 8006772:	2316      	movs	r3, #22
 8006774:	6003      	str	r3, [r0, #0]
 8006776:	2001      	movs	r0, #1
 8006778:	e7e7      	b.n	800674a <_raise_r+0x12>
 800677a:	2100      	movs	r1, #0
 800677c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006780:	4620      	mov	r0, r4
 8006782:	4798      	blx	r3
 8006784:	2000      	movs	r0, #0
 8006786:	e7e0      	b.n	800674a <_raise_r+0x12>

08006788 <raise>:
 8006788:	4b02      	ldr	r3, [pc, #8]	@ (8006794 <raise+0xc>)
 800678a:	4601      	mov	r1, r0
 800678c:	6818      	ldr	r0, [r3, #0]
 800678e:	f7ff bfd3 	b.w	8006738 <_raise_r>
 8006792:	bf00      	nop
 8006794:	2000001c 	.word	0x2000001c

08006798 <_kill_r>:
 8006798:	b538      	push	{r3, r4, r5, lr}
 800679a:	4d07      	ldr	r5, [pc, #28]	@ (80067b8 <_kill_r+0x20>)
 800679c:	2300      	movs	r3, #0
 800679e:	4604      	mov	r4, r0
 80067a0:	4608      	mov	r0, r1
 80067a2:	4611      	mov	r1, r2
 80067a4:	602b      	str	r3, [r5, #0]
 80067a6:	f7fb f82b 	bl	8001800 <_kill>
 80067aa:	1c43      	adds	r3, r0, #1
 80067ac:	d102      	bne.n	80067b4 <_kill_r+0x1c>
 80067ae:	682b      	ldr	r3, [r5, #0]
 80067b0:	b103      	cbz	r3, 80067b4 <_kill_r+0x1c>
 80067b2:	6023      	str	r3, [r4, #0]
 80067b4:	bd38      	pop	{r3, r4, r5, pc}
 80067b6:	bf00      	nop
 80067b8:	200003c8 	.word	0x200003c8

080067bc <_getpid_r>:
 80067bc:	f7fb b818 	b.w	80017f0 <_getpid>

080067c0 <__swhatbuf_r>:
 80067c0:	b570      	push	{r4, r5, r6, lr}
 80067c2:	460c      	mov	r4, r1
 80067c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067c8:	2900      	cmp	r1, #0
 80067ca:	b096      	sub	sp, #88	@ 0x58
 80067cc:	4615      	mov	r5, r2
 80067ce:	461e      	mov	r6, r3
 80067d0:	da0d      	bge.n	80067ee <__swhatbuf_r+0x2e>
 80067d2:	89a3      	ldrh	r3, [r4, #12]
 80067d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80067d8:	f04f 0100 	mov.w	r1, #0
 80067dc:	bf14      	ite	ne
 80067de:	2340      	movne	r3, #64	@ 0x40
 80067e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80067e4:	2000      	movs	r0, #0
 80067e6:	6031      	str	r1, [r6, #0]
 80067e8:	602b      	str	r3, [r5, #0]
 80067ea:	b016      	add	sp, #88	@ 0x58
 80067ec:	bd70      	pop	{r4, r5, r6, pc}
 80067ee:	466a      	mov	r2, sp
 80067f0:	f000 f848 	bl	8006884 <_fstat_r>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	dbec      	blt.n	80067d2 <__swhatbuf_r+0x12>
 80067f8:	9901      	ldr	r1, [sp, #4]
 80067fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80067fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006802:	4259      	negs	r1, r3
 8006804:	4159      	adcs	r1, r3
 8006806:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800680a:	e7eb      	b.n	80067e4 <__swhatbuf_r+0x24>

0800680c <__smakebuf_r>:
 800680c:	898b      	ldrh	r3, [r1, #12]
 800680e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006810:	079d      	lsls	r5, r3, #30
 8006812:	4606      	mov	r6, r0
 8006814:	460c      	mov	r4, r1
 8006816:	d507      	bpl.n	8006828 <__smakebuf_r+0x1c>
 8006818:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800681c:	6023      	str	r3, [r4, #0]
 800681e:	6123      	str	r3, [r4, #16]
 8006820:	2301      	movs	r3, #1
 8006822:	6163      	str	r3, [r4, #20]
 8006824:	b003      	add	sp, #12
 8006826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006828:	ab01      	add	r3, sp, #4
 800682a:	466a      	mov	r2, sp
 800682c:	f7ff ffc8 	bl	80067c0 <__swhatbuf_r>
 8006830:	9f00      	ldr	r7, [sp, #0]
 8006832:	4605      	mov	r5, r0
 8006834:	4639      	mov	r1, r7
 8006836:	4630      	mov	r0, r6
 8006838:	f7ff faba 	bl	8005db0 <_malloc_r>
 800683c:	b948      	cbnz	r0, 8006852 <__smakebuf_r+0x46>
 800683e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006842:	059a      	lsls	r2, r3, #22
 8006844:	d4ee      	bmi.n	8006824 <__smakebuf_r+0x18>
 8006846:	f023 0303 	bic.w	r3, r3, #3
 800684a:	f043 0302 	orr.w	r3, r3, #2
 800684e:	81a3      	strh	r3, [r4, #12]
 8006850:	e7e2      	b.n	8006818 <__smakebuf_r+0xc>
 8006852:	89a3      	ldrh	r3, [r4, #12]
 8006854:	6020      	str	r0, [r4, #0]
 8006856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800685a:	81a3      	strh	r3, [r4, #12]
 800685c:	9b01      	ldr	r3, [sp, #4]
 800685e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006862:	b15b      	cbz	r3, 800687c <__smakebuf_r+0x70>
 8006864:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006868:	4630      	mov	r0, r6
 800686a:	f000 f81d 	bl	80068a8 <_isatty_r>
 800686e:	b128      	cbz	r0, 800687c <__smakebuf_r+0x70>
 8006870:	89a3      	ldrh	r3, [r4, #12]
 8006872:	f023 0303 	bic.w	r3, r3, #3
 8006876:	f043 0301 	orr.w	r3, r3, #1
 800687a:	81a3      	strh	r3, [r4, #12]
 800687c:	89a3      	ldrh	r3, [r4, #12]
 800687e:	431d      	orrs	r5, r3
 8006880:	81a5      	strh	r5, [r4, #12]
 8006882:	e7cf      	b.n	8006824 <__smakebuf_r+0x18>

08006884 <_fstat_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	4d07      	ldr	r5, [pc, #28]	@ (80068a4 <_fstat_r+0x20>)
 8006888:	2300      	movs	r3, #0
 800688a:	4604      	mov	r4, r0
 800688c:	4608      	mov	r0, r1
 800688e:	4611      	mov	r1, r2
 8006890:	602b      	str	r3, [r5, #0]
 8006892:	f7fb f815 	bl	80018c0 <_fstat>
 8006896:	1c43      	adds	r3, r0, #1
 8006898:	d102      	bne.n	80068a0 <_fstat_r+0x1c>
 800689a:	682b      	ldr	r3, [r5, #0]
 800689c:	b103      	cbz	r3, 80068a0 <_fstat_r+0x1c>
 800689e:	6023      	str	r3, [r4, #0]
 80068a0:	bd38      	pop	{r3, r4, r5, pc}
 80068a2:	bf00      	nop
 80068a4:	200003c8 	.word	0x200003c8

080068a8 <_isatty_r>:
 80068a8:	b538      	push	{r3, r4, r5, lr}
 80068aa:	4d06      	ldr	r5, [pc, #24]	@ (80068c4 <_isatty_r+0x1c>)
 80068ac:	2300      	movs	r3, #0
 80068ae:	4604      	mov	r4, r0
 80068b0:	4608      	mov	r0, r1
 80068b2:	602b      	str	r3, [r5, #0]
 80068b4:	f7fb f814 	bl	80018e0 <_isatty>
 80068b8:	1c43      	adds	r3, r0, #1
 80068ba:	d102      	bne.n	80068c2 <_isatty_r+0x1a>
 80068bc:	682b      	ldr	r3, [r5, #0]
 80068be:	b103      	cbz	r3, 80068c2 <_isatty_r+0x1a>
 80068c0:	6023      	str	r3, [r4, #0]
 80068c2:	bd38      	pop	{r3, r4, r5, pc}
 80068c4:	200003c8 	.word	0x200003c8

080068c8 <_init>:
 80068c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ca:	bf00      	nop
 80068cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ce:	bc08      	pop	{r3}
 80068d0:	469e      	mov	lr, r3
 80068d2:	4770      	bx	lr

080068d4 <_fini>:
 80068d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d6:	bf00      	nop
 80068d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068da:	bc08      	pop	{r3}
 80068dc:	469e      	mov	lr, r3
 80068de:	4770      	bx	lr


PCI100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000550c  080001e0  080001e0  000011e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  080056ec  080056ec  000066ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059a4  080059a4  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  080059a4  080059a4  000069a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059ac  080059ac  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059ac  080059ac  000069ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059b0  080059b0  000069b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080059b4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000768  20000070  08005a24  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007d8  08005a24  000077d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cbd  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a78  00000000  00000000  00018d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  0001b7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3b  00000000  00000000  0001c510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002357c  00000000  00000000  0001cf4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013af5  00000000  00000000  000404c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9646  00000000  00000000  00053fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d602  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037a8  00000000  00000000  0012d648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  00130df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	080056d4 	.word	0x080056d4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	080056d4 	.word	0x080056d4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr

08000244 <__aeabi_uldivmod>:
 8000244:	b953      	cbnz	r3, 800025c <__aeabi_uldivmod+0x18>
 8000246:	b94a      	cbnz	r2, 800025c <__aeabi_uldivmod+0x18>
 8000248:	2900      	cmp	r1, #0
 800024a:	bf08      	it	eq
 800024c:	2800      	cmpeq	r0, #0
 800024e:	bf1c      	itt	ne
 8000250:	f04f 31ff 	movne.w	r1, #4294967295
 8000254:	f04f 30ff 	movne.w	r0, #4294967295
 8000258:	f000 b96a 	b.w	8000530 <__aeabi_idiv0>
 800025c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000260:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4770      	bx	lr

08000274 <__udivmoddi4>:
 8000274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000278:	9d08      	ldr	r5, [sp, #32]
 800027a:	460c      	mov	r4, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14e      	bne.n	800031e <__udivmoddi4+0xaa>
 8000280:	4694      	mov	ip, r2
 8000282:	458c      	cmp	ip, r1
 8000284:	4686      	mov	lr, r0
 8000286:	fab2 f282 	clz	r2, r2
 800028a:	d962      	bls.n	8000352 <__udivmoddi4+0xde>
 800028c:	b14a      	cbz	r2, 80002a2 <__udivmoddi4+0x2e>
 800028e:	f1c2 0320 	rsb	r3, r2, #32
 8000292:	4091      	lsls	r1, r2
 8000294:	fa20 f303 	lsr.w	r3, r0, r3
 8000298:	fa0c fc02 	lsl.w	ip, ip, r2
 800029c:	4319      	orrs	r1, r3
 800029e:	fa00 fe02 	lsl.w	lr, r0, r2
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f f68c 	uxth.w	r6, ip
 80002aa:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b2:	fb07 1114 	mls	r1, r7, r4, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb04 f106 	mul.w	r1, r4, r6
 80002be:	4299      	cmp	r1, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x64>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ca:	f080 8112 	bcs.w	80004f2 <__udivmoddi4+0x27e>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 810f 	bls.w	80004f2 <__udivmoddi4+0x27e>
 80002d4:	3c02      	subs	r4, #2
 80002d6:	4463      	add	r3, ip
 80002d8:	1a59      	subs	r1, r3, r1
 80002da:	fa1f f38e 	uxth.w	r3, lr
 80002de:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e2:	fb07 1110 	mls	r1, r7, r0, r1
 80002e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ea:	fb00 f606 	mul.w	r6, r0, r6
 80002ee:	429e      	cmp	r6, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x94>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fa:	f080 80fc 	bcs.w	80004f6 <__udivmoddi4+0x282>
 80002fe:	429e      	cmp	r6, r3
 8000300:	f240 80f9 	bls.w	80004f6 <__udivmoddi4+0x282>
 8000304:	4463      	add	r3, ip
 8000306:	3802      	subs	r0, #2
 8000308:	1b9b      	subs	r3, r3, r6
 800030a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030e:	2100      	movs	r1, #0
 8000310:	b11d      	cbz	r5, 800031a <__udivmoddi4+0xa6>
 8000312:	40d3      	lsrs	r3, r2
 8000314:	2200      	movs	r2, #0
 8000316:	e9c5 3200 	strd	r3, r2, [r5]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d905      	bls.n	800032e <__udivmoddi4+0xba>
 8000322:	b10d      	cbz	r5, 8000328 <__udivmoddi4+0xb4>
 8000324:	e9c5 0100 	strd	r0, r1, [r5]
 8000328:	2100      	movs	r1, #0
 800032a:	4608      	mov	r0, r1
 800032c:	e7f5      	b.n	800031a <__udivmoddi4+0xa6>
 800032e:	fab3 f183 	clz	r1, r3
 8000332:	2900      	cmp	r1, #0
 8000334:	d146      	bne.n	80003c4 <__udivmoddi4+0x150>
 8000336:	42a3      	cmp	r3, r4
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xcc>
 800033a:	4290      	cmp	r0, r2
 800033c:	f0c0 80f0 	bcc.w	8000520 <__udivmoddi4+0x2ac>
 8000340:	1a86      	subs	r6, r0, r2
 8000342:	eb64 0303 	sbc.w	r3, r4, r3
 8000346:	2001      	movs	r0, #1
 8000348:	2d00      	cmp	r5, #0
 800034a:	d0e6      	beq.n	800031a <__udivmoddi4+0xa6>
 800034c:	e9c5 6300 	strd	r6, r3, [r5]
 8000350:	e7e3      	b.n	800031a <__udivmoddi4+0xa6>
 8000352:	2a00      	cmp	r2, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x204>
 8000358:	eba1 040c 	sub.w	r4, r1, ip
 800035c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000360:	fa1f f78c 	uxth.w	r7, ip
 8000364:	2101      	movs	r1, #1
 8000366:	fbb4 f6f8 	udiv	r6, r4, r8
 800036a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036e:	fb08 4416 	mls	r4, r8, r6, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb07 f006 	mul.w	r0, r7, r6
 800037a:	4298      	cmp	r0, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x11c>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f106 34ff 	add.w	r4, r6, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x11a>
 8000388:	4298      	cmp	r0, r3
 800038a:	f200 80cd 	bhi.w	8000528 <__udivmoddi4+0x2b4>
 800038e:	4626      	mov	r6, r4
 8000390:	1a1c      	subs	r4, r3, r0
 8000392:	fa1f f38e 	uxth.w	r3, lr
 8000396:	fbb4 f0f8 	udiv	r0, r4, r8
 800039a:	fb08 4410 	mls	r4, r8, r0, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb00 f707 	mul.w	r7, r0, r7
 80003a6:	429f      	cmp	r7, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x148>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f100 34ff 	add.w	r4, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x146>
 80003b4:	429f      	cmp	r7, r3
 80003b6:	f200 80b0 	bhi.w	800051a <__udivmoddi4+0x2a6>
 80003ba:	4620      	mov	r0, r4
 80003bc:	1bdb      	subs	r3, r3, r7
 80003be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003c2:	e7a5      	b.n	8000310 <__udivmoddi4+0x9c>
 80003c4:	f1c1 0620 	rsb	r6, r1, #32
 80003c8:	408b      	lsls	r3, r1
 80003ca:	fa22 f706 	lsr.w	r7, r2, r6
 80003ce:	431f      	orrs	r7, r3
 80003d0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d4:	fa04 f301 	lsl.w	r3, r4, r1
 80003d8:	ea43 030c 	orr.w	r3, r3, ip
 80003dc:	40f4      	lsrs	r4, r6
 80003de:	fa00 f801 	lsl.w	r8, r0, r1
 80003e2:	0c38      	lsrs	r0, r7, #16
 80003e4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ec:	fa1f fc87 	uxth.w	ip, r7
 80003f0:	fb00 441e 	mls	r4, r0, lr, r4
 80003f4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f8:	fb0e f90c 	mul.w	r9, lr, ip
 80003fc:	45a1      	cmp	r9, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	d90a      	bls.n	800041a <__udivmoddi4+0x1a6>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f10e 3aff 	add.w	sl, lr, #4294967295
 800040a:	f080 8084 	bcs.w	8000516 <__udivmoddi4+0x2a2>
 800040e:	45a1      	cmp	r9, r4
 8000410:	f240 8081 	bls.w	8000516 <__udivmoddi4+0x2a2>
 8000414:	f1ae 0e02 	sub.w	lr, lr, #2
 8000418:	443c      	add	r4, r7
 800041a:	eba4 0409 	sub.w	r4, r4, r9
 800041e:	fa1f f983 	uxth.w	r9, r3
 8000422:	fbb4 f3f0 	udiv	r3, r4, r0
 8000426:	fb00 4413 	mls	r4, r0, r3, r4
 800042a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000432:	45a4      	cmp	ip, r4
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x1d2>
 8000436:	193c      	adds	r4, r7, r4
 8000438:	f103 30ff 	add.w	r0, r3, #4294967295
 800043c:	d267      	bcs.n	800050e <__udivmoddi4+0x29a>
 800043e:	45a4      	cmp	ip, r4
 8000440:	d965      	bls.n	800050e <__udivmoddi4+0x29a>
 8000442:	3b02      	subs	r3, #2
 8000444:	443c      	add	r4, r7
 8000446:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800044a:	fba0 9302 	umull	r9, r3, r0, r2
 800044e:	eba4 040c 	sub.w	r4, r4, ip
 8000452:	429c      	cmp	r4, r3
 8000454:	46ce      	mov	lr, r9
 8000456:	469c      	mov	ip, r3
 8000458:	d351      	bcc.n	80004fe <__udivmoddi4+0x28a>
 800045a:	d04e      	beq.n	80004fa <__udivmoddi4+0x286>
 800045c:	b155      	cbz	r5, 8000474 <__udivmoddi4+0x200>
 800045e:	ebb8 030e 	subs.w	r3, r8, lr
 8000462:	eb64 040c 	sbc.w	r4, r4, ip
 8000466:	fa04 f606 	lsl.w	r6, r4, r6
 800046a:	40cb      	lsrs	r3, r1
 800046c:	431e      	orrs	r6, r3
 800046e:	40cc      	lsrs	r4, r1
 8000470:	e9c5 6400 	strd	r6, r4, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	e750      	b.n	800031a <__udivmoddi4+0xa6>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f103 	lsr.w	r1, r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa24 f303 	lsr.w	r3, r4, r3
 8000488:	4094      	lsls	r4, r2
 800048a:	430c      	orrs	r4, r1
 800048c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000490:	fa00 fe02 	lsl.w	lr, r0, r2
 8000494:	fa1f f78c 	uxth.w	r7, ip
 8000498:	fbb3 f0f8 	udiv	r0, r3, r8
 800049c:	fb08 3110 	mls	r1, r8, r0, r3
 80004a0:	0c23      	lsrs	r3, r4, #16
 80004a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a6:	fb00 f107 	mul.w	r1, r0, r7
 80004aa:	4299      	cmp	r1, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x24c>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b6:	d22c      	bcs.n	8000512 <__udivmoddi4+0x29e>
 80004b8:	4299      	cmp	r1, r3
 80004ba:	d92a      	bls.n	8000512 <__udivmoddi4+0x29e>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1a5b      	subs	r3, r3, r1
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c8:	fb08 3311 	mls	r3, r8, r1, r3
 80004cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d0:	fb01 f307 	mul.w	r3, r1, r7
 80004d4:	42a3      	cmp	r3, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x276>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f101 36ff 	add.w	r6, r1, #4294967295
 80004e0:	d213      	bcs.n	800050a <__udivmoddi4+0x296>
 80004e2:	42a3      	cmp	r3, r4
 80004e4:	d911      	bls.n	800050a <__udivmoddi4+0x296>
 80004e6:	3902      	subs	r1, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	1ae4      	subs	r4, r4, r3
 80004ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004f0:	e739      	b.n	8000366 <__udivmoddi4+0xf2>
 80004f2:	4604      	mov	r4, r0
 80004f4:	e6f0      	b.n	80002d8 <__udivmoddi4+0x64>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e706      	b.n	8000308 <__udivmoddi4+0x94>
 80004fa:	45c8      	cmp	r8, r9
 80004fc:	d2ae      	bcs.n	800045c <__udivmoddi4+0x1e8>
 80004fe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000502:	eb63 0c07 	sbc.w	ip, r3, r7
 8000506:	3801      	subs	r0, #1
 8000508:	e7a8      	b.n	800045c <__udivmoddi4+0x1e8>
 800050a:	4631      	mov	r1, r6
 800050c:	e7ed      	b.n	80004ea <__udivmoddi4+0x276>
 800050e:	4603      	mov	r3, r0
 8000510:	e799      	b.n	8000446 <__udivmoddi4+0x1d2>
 8000512:	4630      	mov	r0, r6
 8000514:	e7d4      	b.n	80004c0 <__udivmoddi4+0x24c>
 8000516:	46d6      	mov	lr, sl
 8000518:	e77f      	b.n	800041a <__udivmoddi4+0x1a6>
 800051a:	4463      	add	r3, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e74d      	b.n	80003bc <__udivmoddi4+0x148>
 8000520:	4606      	mov	r6, r0
 8000522:	4623      	mov	r3, r4
 8000524:	4608      	mov	r0, r1
 8000526:	e70f      	b.n	8000348 <__udivmoddi4+0xd4>
 8000528:	3e02      	subs	r6, #2
 800052a:	4463      	add	r3, ip
 800052c:	e730      	b.n	8000390 <__udivmoddi4+0x11c>
 800052e:	bf00      	nop

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <cli_engine>:
// Created by Artyom on 3/17/2025.
//
#include "cli.h"
#include <string.h>

void cli_engine(UART_HandleTypeDef *huartx, message_handler_t handle) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]

  static uint8_t buf[UART_BUFFER_SIZE] = {0};
  static uint16_t pos = 0;
  static uint8_t prompt = 1;

  if (prompt) {
 800053e:	4b27      	ldr	r3, [pc, #156]	@ (80005dc <cli_engine+0xa8>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d008      	beq.n	8000558 <cli_engine+0x24>
	  prompt = 0;
 8000546:	4b25      	ldr	r3, [pc, #148]	@ (80005dc <cli_engine+0xa8>)
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(huartx, (uint8_t *)PROMPT, 9, 100);
 800054c:	2364      	movs	r3, #100	@ 0x64
 800054e:	2209      	movs	r2, #9
 8000550:	4923      	ldr	r1, [pc, #140]	@ (80005e0 <cli_engine+0xac>)
 8000552:	6878      	ldr	r0, [r7, #4]
 8000554:	f004 fa72 	bl	8004a3c <HAL_UART_Transmit>
  }

  if (HAL_OK == HAL_UART_Receive(huartx, buf + pos, 1, UART_RECEIVE_TIMEOUT)) {
 8000558:	4b22      	ldr	r3, [pc, #136]	@ (80005e4 <cli_engine+0xb0>)
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	461a      	mov	r2, r3
 800055e:	4b22      	ldr	r3, [pc, #136]	@ (80005e8 <cli_engine+0xb4>)
 8000560:	18d1      	adds	r1, r2, r3
 8000562:	2364      	movs	r3, #100	@ 0x64
 8000564:	2201      	movs	r2, #1
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f004 faf1 	bl	8004b4e <HAL_UART_Receive>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d12f      	bne.n	80005d2 <cli_engine+0x9e>
    if (buf[pos] == '\r') {
 8000572:	4b1c      	ldr	r3, [pc, #112]	@ (80005e4 <cli_engine+0xb0>)
 8000574:	881b      	ldrh	r3, [r3, #0]
 8000576:	461a      	mov	r2, r3
 8000578:	4b1b      	ldr	r3, [pc, #108]	@ (80005e8 <cli_engine+0xb4>)
 800057a:	5c9b      	ldrb	r3, [r3, r2]
 800057c:	2b0d      	cmp	r3, #13
 800057e:	d118      	bne.n	80005b2 <cli_engine+0x7e>
      buf[pos] = '\0';
 8000580:	4b18      	ldr	r3, [pc, #96]	@ (80005e4 <cli_engine+0xb0>)
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b18      	ldr	r3, [pc, #96]	@ (80005e8 <cli_engine+0xb4>)
 8000588:	2100      	movs	r1, #0
 800058a:	5499      	strb	r1, [r3, r2]
      cli_putnl(huartx);
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 f851 	bl	8000634 <cli_putnl>
      handle((const char *)buf);
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	4814      	ldr	r0, [pc, #80]	@ (80005e8 <cli_engine+0xb4>)
 8000596:	4798      	blx	r3
      memset(buf, 0, UART_BUFFER_SIZE);
 8000598:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800059c:	2100      	movs	r1, #0
 800059e:	4812      	ldr	r0, [pc, #72]	@ (80005e8 <cli_engine+0xb4>)
 80005a0:	f005 f854 	bl	800564c <memset>
      pos = 0;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <cli_engine+0xb0>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	801a      	strh	r2, [r3, #0]
      prompt = 1;
 80005aa:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <cli_engine+0xa8>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	701a      	strb	r2, [r3, #0]
    } else {
      HAL_UART_Transmit(huartx, buf + pos, 1, UART_TRANSMIT_TIMEOUT);
      ++pos;
    }
  }
}
 80005b0:	e00f      	b.n	80005d2 <cli_engine+0x9e>
      HAL_UART_Transmit(huartx, buf + pos, 1, UART_TRANSMIT_TIMEOUT);
 80005b2:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <cli_engine+0xb0>)
 80005b4:	881b      	ldrh	r3, [r3, #0]
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b0b      	ldr	r3, [pc, #44]	@ (80005e8 <cli_engine+0xb4>)
 80005ba:	18d1      	adds	r1, r2, r3
 80005bc:	2364      	movs	r3, #100	@ 0x64
 80005be:	2201      	movs	r2, #1
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f004 fa3b 	bl	8004a3c <HAL_UART_Transmit>
      ++pos;
 80005c6:	4b07      	ldr	r3, [pc, #28]	@ (80005e4 <cli_engine+0xb0>)
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	3301      	adds	r3, #1
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	4b05      	ldr	r3, [pc, #20]	@ (80005e4 <cli_engine+0xb0>)
 80005d0:	801a      	strh	r2, [r3, #0]
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000000 	.word	0x20000000
 80005e0:	080056ec 	.word	0x080056ec
 80005e4:	2000008c 	.word	0x2000008c
 80005e8:	20000090 	.word	0x20000090

080005ec <cli_writeline>:


void cli_writeline(UART_HandleTypeDef *huartx, const char *s) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
  cli_puts(huartx, s);
 80005f6:	6839      	ldr	r1, [r7, #0]
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 f807 	bl	800060c <cli_puts>
  cli_putnl(huartx);
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 f818 	bl	8000634 <cli_putnl>
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <cli_puts>:

void cli_puts(UART_HandleTypeDef *huartx, const char *s) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(huartx, (const uint8_t *)s, strlen(s), UART_TRANSMIT_TIMEOUT);
 8000616:	6838      	ldr	r0, [r7, #0]
 8000618:	f7ff fe0c 	bl	8000234 <strlen>
 800061c:	4603      	mov	r3, r0
 800061e:	b29a      	uxth	r2, r3
 8000620:	2364      	movs	r3, #100	@ 0x64
 8000622:	6839      	ldr	r1, [r7, #0]
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f004 fa09 	bl	8004a3c <HAL_UART_Transmit>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <cli_putnl>:

void cli_putnl(UART_HandleTypeDef *huartx) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(huartx, (const uint8_t *)"\r\n", 2, UART_TRANSMIT_TIMEOUT);
 800063c:	2364      	movs	r3, #100	@ 0x64
 800063e:	2202      	movs	r2, #2
 8000640:	4903      	ldr	r1, [pc, #12]	@ (8000650 <cli_putnl+0x1c>)
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f004 f9fa 	bl	8004a3c <HAL_UART_Transmit>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	080056f8 	.word	0x080056f8

08000654 <starts_with>:

uint8_t starts_with(const char *s1, const char *s2) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
  return (strncmp(s1, s2, strlen(s2)) == 0);
 800065e:	6838      	ldr	r0, [r7, #0]
 8000660:	f7ff fde8 	bl	8000234 <strlen>
 8000664:	4603      	mov	r3, r0
 8000666:	461a      	mov	r2, r3
 8000668:	6839      	ldr	r1, [r7, #0]
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f004 fff6 	bl	800565c <strncmp>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	bf0c      	ite	eq
 8000676:	2301      	moveq	r3, #1
 8000678:	2300      	movne	r3, #0
 800067a:	b2db      	uxtb	r3, r3
}
 800067c:	4618      	mov	r0, r3
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <dac_write>:
#include <string.h>

extern UART_HandleTypeDef huart1;
extern DAC_HandleTypeDef hdac;

static void dac_write(uint16_t dac_value) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	80fb      	strh	r3, [r7, #6]
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 800068e:	88fb      	ldrh	r3, [r7, #6]
 8000690:	2200      	movs	r2, #0
 8000692:	2100      	movs	r1, #0
 8000694:	4803      	ldr	r0, [pc, #12]	@ (80006a4 <dac_write+0x20>)
 8000696:	f001 fcfa 	bl	800208e <HAL_DAC_SetValue>
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200004e0 	.word	0x200004e0

080006a8 <parse_expr>:

static int32_t parse_expr(const char* s) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  if (!s) {
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d102      	bne.n	80006bc <parse_expr+0x14>
    return -1;
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ba:	e019      	b.n	80006f0 <parse_expr+0x48>
  }
  const int32_t res = atoi(s);
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f004 ff3d 	bl	800553c <atoi>
 80006c2:	60f8      	str	r0, [r7, #12]
  while (isdigit((uint8_t)*s)) {
 80006c4:	e002      	b.n	80006cc <parse_expr+0x24>
    ++s;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	3301      	adds	r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
  while (isdigit((uint8_t)*s)) {
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	3301      	adds	r3, #1
 80006d2:	4a09      	ldr	r2, [pc, #36]	@ (80006f8 <parse_expr+0x50>)
 80006d4:	4413      	add	r3, r2
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	f003 0304 	and.w	r3, r3, #4
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1f2      	bne.n	80006c6 <parse_expr+0x1e>
  }
  return (*s == '\0') ? res : -1;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d101      	bne.n	80006ec <parse_expr+0x44>
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	e001      	b.n	80006f0 <parse_expr+0x48>
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	080058a0 	.word	0x080058a0

080006fc <dac_message_handler>:

uint8_t dac_message_handler(const char *message) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

  if (!strcmp(message, "help")) {
 8000704:	4917      	ldr	r1, [pc, #92]	@ (8000764 <dac_message_handler+0x68>)
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff fd8a 	bl	8000220 <strcmp>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d105      	bne.n	800071e <dac_message_handler+0x22>
    cli_writeline(&huart1, "to set DAC value, type `dac write <value>`");
 8000712:	4915      	ldr	r1, [pc, #84]	@ (8000768 <dac_message_handler+0x6c>)
 8000714:	4815      	ldr	r0, [pc, #84]	@ (800076c <dac_message_handler+0x70>)
 8000716:	f7ff ff69 	bl	80005ec <cli_writeline>
    return CLI_OK;
 800071a:	2300      	movs	r3, #0
 800071c:	e01d      	b.n	800075a <dac_message_handler+0x5e>
  }

  else if (starts_with(message, "dac write ")) {
 800071e:	4914      	ldr	r1, [pc, #80]	@ (8000770 <dac_message_handler+0x74>)
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff ff97 	bl	8000654 <starts_with>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d015      	beq.n	8000758 <dac_message_handler+0x5c>
    const uint32_t value = parse_expr(message + strlen("dac write "));
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	330a      	adds	r3, #10
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ffb9 	bl	80006a8 <parse_expr>
 8000736:	4603      	mov	r3, r0
 8000738:	60fb      	str	r3, [r7, #12]
    if (-1 != value && value < DAC12_MAX) {
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000740:	d008      	beq.n	8000754 <dac_message_handler+0x58>
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000748:	d204      	bcs.n	8000754 <dac_message_handler+0x58>
      dac_write(value);
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	b29b      	uxth	r3, r3
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff98 	bl	8000684 <dac_write>
    }
    return CLI_OK;
 8000754:	2300      	movs	r3, #0
 8000756:	e000      	b.n	800075a <dac_message_handler+0x5e>
  }

  return CLI_COMMAND_NOT_FOUND;
 8000758:	237f      	movs	r3, #127	@ 0x7f
}
 800075a:	4618      	mov	r0, r3
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	080056fc 	.word	0x080056fc
 8000768:	08005704 	.word	0x08005704
 800076c:	20000608 	.word	0x20000608
 8000770:	08005730 	.word	0x08005730

08000774 <get_led_mode>:
uint8_t BLINK_MODE = BLINK_OFF;
uint8_t LED_STATE = LED_OFF;

static uint32_t start = 0;

static const char *get_led_mode(void) {
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  if (LED_STATE == LED_OFF) {
 8000778:	4b0b      	ldr	r3, [pc, #44]	@ (80007a8 <get_led_mode+0x34>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d101      	bne.n	8000784 <get_led_mode+0x10>
	  return "off";
 8000780:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <get_led_mode+0x38>)
 8000782:	e00f      	b.n	80007a4 <get_led_mode+0x30>
  } else if (LED_STATE == LED_ON && BLINK_MODE == BLINK_OFF) {
 8000784:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <get_led_mode+0x34>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d105      	bne.n	8000798 <get_led_mode+0x24>
 800078c:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <get_led_mode+0x3c>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d101      	bne.n	8000798 <get_led_mode+0x24>
	  return "on";
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <get_led_mode+0x40>)
 8000796:	e005      	b.n	80007a4 <get_led_mode+0x30>
  } else {
	  return static_itoa(BLINK_FREQ);
 8000798:	4b07      	ldr	r3, [pc, #28]	@ (80007b8 <get_led_mode+0x44>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	f000 feff 	bl	80015a0 <static_itoa>
 80007a2:	4603      	mov	r3, r0
  }
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000002 	.word	0x20000002
 80007ac:	0800573c 	.word	0x0800573c
 80007b0:	20000001 	.word	0x20000001
 80007b4:	08005740 	.word	0x08005740
 80007b8:	20000490 	.word	0x20000490

080007bc <blink_led>:

void blink_led(const uint32_t frequency) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  if (BLINK_MODE == BLINK_OFF) {
 80007c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <blink_led+0x44>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d014      	beq.n	80007f6 <blink_led+0x3a>
    return;
  }
  const uint32_t current_tick = HAL_GetTick();
 80007cc:	f000 ffbc 	bl	8001748 <HAL_GetTick>
 80007d0:	60f8      	str	r0, [r7, #12]
  if (current_tick >= start + frequency) {
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <blink_led+0x48>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d30b      	bcc.n	80007f8 <blink_led+0x3c>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 80007e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007e4:	4808      	ldr	r0, [pc, #32]	@ (8000808 <blink_led+0x4c>)
 80007e6:	f002 f9bc 	bl	8002b62 <HAL_GPIO_TogglePin>
    start = HAL_GetTick();
 80007ea:	f000 ffad 	bl	8001748 <HAL_GetTick>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4a04      	ldr	r2, [pc, #16]	@ (8000804 <blink_led+0x48>)
 80007f2:	6013      	str	r3, [r2, #0]
 80007f4:	e000      	b.n	80007f8 <blink_led+0x3c>
    return;
 80007f6:	bf00      	nop
  }
}
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000001 	.word	0x20000001
 8000804:	20000494 	.word	0x20000494
 8000808:	40020400 	.word	0x40020400

0800080c <set_led_config>:

void set_led_config(void) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
  uint8_t input = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	71fb      	strb	r3, [r7, #7]

  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000816:	2101      	movs	r1, #1
 8000818:	485e      	ldr	r0, [pc, #376]	@ (8000994 <set_led_config+0x188>)
 800081a:	f002 f971 	bl	8002b00 <HAL_GPIO_ReadPin>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	bf0c      	ite	eq
 8000824:	2301      	moveq	r3, #1
 8000826:	2300      	movne	r3, #0
 8000828:	b2db      	uxtb	r3, r3
 800082a:	b25a      	sxtb	r2, r3
 800082c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000830:	4313      	orrs	r3, r2
 8000832:	b25b      	sxtb	r3, r3
 8000834:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) << 1;
 8000836:	2102      	movs	r1, #2
 8000838:	4856      	ldr	r0, [pc, #344]	@ (8000994 <set_led_config+0x188>)
 800083a:	f002 f961 	bl	8002b00 <HAL_GPIO_ReadPin>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d101      	bne.n	8000848 <set_led_config+0x3c>
 8000844:	2302      	movs	r3, #2
 8000846:	e000      	b.n	800084a <set_led_config+0x3e>
 8000848:	2300      	movs	r3, #0
 800084a:	b25a      	sxtb	r2, r3
 800084c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000850:	4313      	orrs	r3, r2
 8000852:	b25b      	sxtb	r3, r3
 8000854:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) << 2;
 8000856:	2104      	movs	r1, #4
 8000858:	484e      	ldr	r0, [pc, #312]	@ (8000994 <set_led_config+0x188>)
 800085a:	f002 f951 	bl	8002b00 <HAL_GPIO_ReadPin>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d101      	bne.n	8000868 <set_led_config+0x5c>
 8000864:	2304      	movs	r3, #4
 8000866:	e000      	b.n	800086a <set_led_config+0x5e>
 8000868:	2300      	movs	r3, #0
 800086a:	b25a      	sxtb	r2, r3
 800086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000870:	4313      	orrs	r3, r2
 8000872:	b25b      	sxtb	r3, r3
 8000874:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) << 3;
 8000876:	2108      	movs	r1, #8
 8000878:	4846      	ldr	r0, [pc, #280]	@ (8000994 <set_led_config+0x188>)
 800087a:	f002 f941 	bl	8002b00 <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d101      	bne.n	8000888 <set_led_config+0x7c>
 8000884:	2308      	movs	r3, #8
 8000886:	e000      	b.n	800088a <set_led_config+0x7e>
 8000888:	2300      	movs	r3, #0
 800088a:	b25a      	sxtb	r2, r3
 800088c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000890:	4313      	orrs	r3, r2
 8000892:	b25b      	sxtb	r3, r3
 8000894:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) << 4;
 8000896:	2110      	movs	r1, #16
 8000898:	483e      	ldr	r0, [pc, #248]	@ (8000994 <set_led_config+0x188>)
 800089a:	f002 f931 	bl	8002b00 <HAL_GPIO_ReadPin>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d101      	bne.n	80008a8 <set_led_config+0x9c>
 80008a4:	2310      	movs	r3, #16
 80008a6:	e000      	b.n	80008aa <set_led_config+0x9e>
 80008a8:	2300      	movs	r3, #0
 80008aa:	b25a      	sxtb	r2, r3
 80008ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	b25b      	sxtb	r3, r3
 80008b4:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) << 5;
 80008b6:	2120      	movs	r1, #32
 80008b8:	4836      	ldr	r0, [pc, #216]	@ (8000994 <set_led_config+0x188>)
 80008ba:	f002 f921 	bl	8002b00 <HAL_GPIO_ReadPin>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d101      	bne.n	80008c8 <set_led_config+0xbc>
 80008c4:	2320      	movs	r3, #32
 80008c6:	e000      	b.n	80008ca <set_led_config+0xbe>
 80008c8:	2300      	movs	r3, #0
 80008ca:	b25a      	sxtb	r2, r3
 80008cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	b25b      	sxtb	r3, r3
 80008d4:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) << 6;
 80008d6:	2140      	movs	r1, #64	@ 0x40
 80008d8:	482e      	ldr	r0, [pc, #184]	@ (8000994 <set_led_config+0x188>)
 80008da:	f002 f911 	bl	8002b00 <HAL_GPIO_ReadPin>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d101      	bne.n	80008e8 <set_led_config+0xdc>
 80008e4:	2340      	movs	r3, #64	@ 0x40
 80008e6:	e000      	b.n	80008ea <set_led_config+0xde>
 80008e8:	2300      	movs	r3, #0
 80008ea:	b25a      	sxtb	r2, r3
 80008ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) << 7;
 80008f6:	2180      	movs	r1, #128	@ 0x80
 80008f8:	4826      	ldr	r0, [pc, #152]	@ (8000994 <set_led_config+0x188>)
 80008fa:	f002 f901 	bl	8002b00 <HAL_GPIO_ReadPin>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d101      	bne.n	8000908 <set_led_config+0xfc>
 8000904:	2380      	movs	r3, #128	@ 0x80
 8000906:	e000      	b.n	800090a <set_led_config+0xfe>
 8000908:	2300      	movs	r3, #0
 800090a:	b25a      	sxtb	r2, r3
 800090c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000910:	4313      	orrs	r3, r2
 8000912:	b25b      	sxtb	r3, r3
 8000914:	71fb      	strb	r3, [r7, #7]
    BLINK_50,
    BLINK_100,
    BLINK_1000,
  };

  switch (input) {
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b08      	cmp	r3, #8
 800091a:	dc2a      	bgt.n	8000972 <set_led_config+0x166>
 800091c:	2b02      	cmp	r3, #2
 800091e:	da1e      	bge.n	800095e <set_led_config+0x152>
 8000920:	2b00      	cmp	r3, #0
 8000922:	d002      	beq.n	800092a <set_led_config+0x11e>
 8000924:	2b01      	cmp	r3, #1
 8000926:	d00d      	beq.n	8000944 <set_led_config+0x138>
 8000928:	e023      	b.n	8000972 <set_led_config+0x166>
  case 0:
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800092a:	2201      	movs	r2, #1
 800092c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000930:	4819      	ldr	r0, [pc, #100]	@ (8000998 <set_led_config+0x18c>)
 8000932:	f002 f8fd 	bl	8002b30 <HAL_GPIO_WritePin>
    BLINK_FREQ = 0;
 8000936:	4b19      	ldr	r3, [pc, #100]	@ (800099c <set_led_config+0x190>)
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
    BLINK_MODE = BLINK_OFF;
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <set_led_config+0x194>)
 800093e:	2201      	movs	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
    break;
 8000942:	e023      	b.n	800098c <set_led_config+0x180>
  case 1:
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800094a:	4813      	ldr	r0, [pc, #76]	@ (8000998 <set_led_config+0x18c>)
 800094c:	f002 f8f0 	bl	8002b30 <HAL_GPIO_WritePin>
    BLINK_FREQ = 1;
 8000950:	4b12      	ldr	r3, [pc, #72]	@ (800099c <set_led_config+0x190>)
 8000952:	2201      	movs	r2, #1
 8000954:	601a      	str	r2, [r3, #0]
    BLINK_MODE = BLINK_OFF;
 8000956:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <set_led_config+0x194>)
 8000958:	2201      	movs	r2, #1
 800095a:	701a      	strb	r2, [r3, #0]
    break;
 800095c:	e016      	b.n	800098c <set_led_config+0x180>
  case 2 ... 8:
    BLINK_MODE = BLINK_ON;
 800095e:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <set_led_config+0x194>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
    BLINK_FREQ = fmap[input];
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	4a0f      	ldr	r2, [pc, #60]	@ (80009a4 <set_led_config+0x198>)
 8000968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800096c:	461a      	mov	r2, r3
 800096e:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <set_led_config+0x190>)
 8000970:	601a      	str	r2, [r3, #0]
  default:
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000972:	2201      	movs	r2, #1
 8000974:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000978:	4807      	ldr	r0, [pc, #28]	@ (8000998 <set_led_config+0x18c>)
 800097a:	f002 f8d9 	bl	8002b30 <HAL_GPIO_WritePin>
    BLINK_MODE = BLINK_OFF;
 800097e:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <set_led_config+0x194>)
 8000980:	2201      	movs	r2, #1
 8000982:	701a      	strb	r2, [r3, #0]
    BLINK_FREQ = 0;
 8000984:	4b05      	ldr	r3, [pc, #20]	@ (800099c <set_led_config+0x190>)
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
  }
}
 800098a:	bf00      	nop
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40020000 	.word	0x40020000
 8000998:	40020400 	.word	0x40020400
 800099c:	20000490 	.word	0x20000490
 80009a0:	20000001 	.word	0x20000001
 80009a4:	0800586c 	.word	0x0800586c

080009a8 <parse_set_expr>:

static int32_t parse_set_expr(const char* s) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if (!s) {
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d105      	bne.n	80009c2 <parse_set_expr+0x1a>
    return -1;
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	e02a      	b.n	8000a12 <parse_set_expr+0x6a>
  }
  while (*s && !isdigit((const uint8_t)*s)) {
    ++s;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3301      	adds	r3, #1
 80009c0:	607b      	str	r3, [r7, #4]
  while (*s && !isdigit((const uint8_t)*s)) {
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d009      	beq.n	80009de <parse_set_expr+0x36>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	3301      	adds	r3, #1
 80009d0:	4a12      	ldr	r2, [pc, #72]	@ (8000a1c <parse_set_expr+0x74>)
 80009d2:	4413      	add	r3, r2
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d0ee      	beq.n	80009bc <parse_set_expr+0x14>
  }
  const int32_t res = atoi(s);
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f004 fdac 	bl	800553c <atoi>
 80009e4:	60f8      	str	r0, [r7, #12]
  while (isdigit((const uint8_t)*s)) {
 80009e6:	e002      	b.n	80009ee <parse_set_expr+0x46>
    ++s;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3301      	adds	r3, #1
 80009ec:	607b      	str	r3, [r7, #4]
  while (isdigit((const uint8_t)*s)) {
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	3301      	adds	r3, #1
 80009f4:	4a09      	ldr	r2, [pc, #36]	@ (8000a1c <parse_set_expr+0x74>)
 80009f6:	4413      	add	r3, r2
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d1f2      	bne.n	80009e8 <parse_set_expr+0x40>
  }
  return (*s == '\0') ? res : -1;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d101      	bne.n	8000a0e <parse_set_expr+0x66>
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	e001      	b.n	8000a12 <parse_set_expr+0x6a>
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3710      	adds	r7, #16
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	080058a0 	.word	0x080058a0

08000a20 <led_blink_handler>:


static uint8_t led_blink_handler(const int32_t val) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	if (-1 == val) {
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a2e:	d101      	bne.n	8000a34 <led_blink_handler+0x14>
		return CLI_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	e011      	b.n	8000a58 <led_blink_handler+0x38>
	}

	BLINK_MODE = BLINK_ON;
 8000a34:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <led_blink_handler+0x40>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]
	BLINK_FREQ = val;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a09      	ldr	r2, [pc, #36]	@ (8000a64 <led_blink_handler+0x44>)
 8000a3e:	6013      	str	r3, [r2, #0]
	cli_puts(&huart1, "Led frequency set to ");
 8000a40:	4909      	ldr	r1, [pc, #36]	@ (8000a68 <led_blink_handler+0x48>)
 8000a42:	480a      	ldr	r0, [pc, #40]	@ (8000a6c <led_blink_handler+0x4c>)
 8000a44:	f7ff fde2 	bl	800060c <cli_puts>
	cli_puts(&huart1, get_led_mode());
 8000a48:	f7ff fe94 	bl	8000774 <get_led_mode>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4806      	ldr	r0, [pc, #24]	@ (8000a6c <led_blink_handler+0x4c>)
 8000a52:	f7ff fddb 	bl	800060c <cli_puts>

	return CLI_OK;
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000001 	.word	0x20000001
 8000a64:	20000490 	.word	0x20000490
 8000a68:	08005744 	.word	0x08005744
 8000a6c:	20000608 	.word	0x20000608

08000a70 <led_message_handler>:

uint8_t led_message_handler(const char *message) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

  if (!strcmp(message, "led on")) {
 8000a78:	4934      	ldr	r1, [pc, #208]	@ (8000b4c <led_message_handler+0xdc>)
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff fbd0 	bl	8000220 <strcmp>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d111      	bne.n	8000aaa <led_message_handler+0x3a>
    BLINK_MODE = BLINK_OFF;
 8000a86:	4b32      	ldr	r3, [pc, #200]	@ (8000b50 <led_message_handler+0xe0>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	701a      	strb	r2, [r3, #0]
    LED_STATE = LED_ON;
 8000a8c:	4b31      	ldr	r3, [pc, #196]	@ (8000b54 <led_message_handler+0xe4>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a98:	482f      	ldr	r0, [pc, #188]	@ (8000b58 <led_message_handler+0xe8>)
 8000a9a:	f002 f849 	bl	8002b30 <HAL_GPIO_WritePin>
    cli_writeline(&huart1, "Led is now on");
 8000a9e:	492f      	ldr	r1, [pc, #188]	@ (8000b5c <led_message_handler+0xec>)
 8000aa0:	482f      	ldr	r0, [pc, #188]	@ (8000b60 <led_message_handler+0xf0>)
 8000aa2:	f7ff fda3 	bl	80005ec <cli_writeline>
    return CLI_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e04c      	b.n	8000b44 <led_message_handler+0xd4>
  }

  if (!strcmp(message, "led off")) {
 8000aaa:	492e      	ldr	r1, [pc, #184]	@ (8000b64 <led_message_handler+0xf4>)
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff fbb7 	bl	8000220 <strcmp>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d111      	bne.n	8000adc <led_message_handler+0x6c>
    BLINK_MODE = BLINK_OFF;
 8000ab8:	4b25      	ldr	r3, [pc, #148]	@ (8000b50 <led_message_handler+0xe0>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	701a      	strb	r2, [r3, #0]
    LED_STATE = LED_OFF;
 8000abe:	4b25      	ldr	r3, [pc, #148]	@ (8000b54 <led_message_handler+0xe4>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000aca:	4823      	ldr	r0, [pc, #140]	@ (8000b58 <led_message_handler+0xe8>)
 8000acc:	f002 f830 	bl	8002b30 <HAL_GPIO_WritePin>
    cli_writeline(&huart1, "Led is now off");
 8000ad0:	4925      	ldr	r1, [pc, #148]	@ (8000b68 <led_message_handler+0xf8>)
 8000ad2:	4823      	ldr	r0, [pc, #140]	@ (8000b60 <led_message_handler+0xf0>)
 8000ad4:	f7ff fd8a 	bl	80005ec <cli_writeline>
    return CLI_OK;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	e033      	b.n	8000b44 <led_message_handler+0xd4>
  }

  if (starts_with(message, "led blink ")) {
 8000adc:	4923      	ldr	r1, [pc, #140]	@ (8000b6c <led_message_handler+0xfc>)
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff fdb8 	bl	8000654 <starts_with>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d008      	beq.n	8000afc <led_message_handler+0x8c>
    led_blink_handler(parse_set_expr(message));
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff ff5c 	bl	80009a8 <parse_set_expr>
 8000af0:	4603      	mov	r3, r0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff ff94 	bl	8000a20 <led_blink_handler>
    return CLI_OK;
 8000af8:	2300      	movs	r3, #0
 8000afa:	e023      	b.n	8000b44 <led_message_handler+0xd4>
  }

  if (!strcmp(message, "led reset")) {
 8000afc:	491c      	ldr	r1, [pc, #112]	@ (8000b70 <led_message_handler+0x100>)
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff fb8e 	bl	8000220 <strcmp>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d107      	bne.n	8000b1a <led_message_handler+0xaa>
    set_led_config();
 8000b0a:	f7ff fe7f 	bl	800080c <set_led_config>
    cli_writeline(&huart1, "led mode is now configured by physical switches");
 8000b0e:	4919      	ldr	r1, [pc, #100]	@ (8000b74 <led_message_handler+0x104>)
 8000b10:	4813      	ldr	r0, [pc, #76]	@ (8000b60 <led_message_handler+0xf0>)
 8000b12:	f7ff fd6b 	bl	80005ec <cli_writeline>
    return CLI_OK;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e014      	b.n	8000b44 <led_message_handler+0xd4>
  }

  if (!strcmp(message, "led get state")) {
 8000b1a:	4917      	ldr	r1, [pc, #92]	@ (8000b78 <led_message_handler+0x108>)
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff fb7f 	bl	8000220 <strcmp>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d10c      	bne.n	8000b42 <led_message_handler+0xd2>
    cli_puts(&huart1, "led mode is ");
 8000b28:	4914      	ldr	r1, [pc, #80]	@ (8000b7c <led_message_handler+0x10c>)
 8000b2a:	480d      	ldr	r0, [pc, #52]	@ (8000b60 <led_message_handler+0xf0>)
 8000b2c:	f7ff fd6e 	bl	800060c <cli_puts>
    cli_writeline(&huart1, get_led_mode());
 8000b30:	f7ff fe20 	bl	8000774 <get_led_mode>
 8000b34:	4603      	mov	r3, r0
 8000b36:	4619      	mov	r1, r3
 8000b38:	4809      	ldr	r0, [pc, #36]	@ (8000b60 <led_message_handler+0xf0>)
 8000b3a:	f7ff fd57 	bl	80005ec <cli_writeline>
    return CLI_OK;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e000      	b.n	8000b44 <led_message_handler+0xd4>
  }

  return CLI_COMMAND_NOT_FOUND;
 8000b42:	237f      	movs	r3, #127	@ 0x7f
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	0800575c 	.word	0x0800575c
 8000b50:	20000001 	.word	0x20000001
 8000b54:	20000002 	.word	0x20000002
 8000b58:	40020400 	.word	0x40020400
 8000b5c:	08005764 	.word	0x08005764
 8000b60:	20000608 	.word	0x20000608
 8000b64:	08005774 	.word	0x08005774
 8000b68:	0800577c 	.word	0x0800577c
 8000b6c:	0800578c 	.word	0x0800578c
 8000b70:	08005798 	.word	0x08005798
 8000b74:	080057a4 	.word	0x080057a4
 8000b78:	080057d4 	.word	0x080057d4
 8000b7c:	080057e4 	.word	0x080057e4

08000b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b84:	f000 fa2a 	bl	8000fdc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b88:	f000 fd8d 	bl	80016a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8c:	f000 f818 	bl	8000bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b90:	f000 f984 	bl	8000e9c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b94:	f000 f95c 	bl	8000e50 <MX_DMA_Init>
  MX_I2C1_Init();
 8000b98:	f000 f8ea 	bl	8000d70 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000b9c:	f000 f928 	bl	8000df0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000ba0:	f000 f86a 	bl	8000c78 <MX_ADC1_Init>
  MX_DAC_Init();
 8000ba4:	f000 f8ba 	bl	8000d1c <MX_DAC_Init>
  /* USER CODE BEGIN WHILE */

  // uint8_t TX_Buffer = 5;
  // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4804      	ldr	r0, [pc, #16]	@ (8000bbc <main+0x3c>)
 8000bac:	f001 fa18 	bl	8001fe0 <HAL_DAC_Start>
  set_led_config();
 8000bb0:	f7ff fe2c 	bl	800080c <set_led_config>

  while (1)
  {
	  pci100_cli();
 8000bb4:	f000 fa8e 	bl	80010d4 <pci100_cli>
 8000bb8:	e7fc      	b.n	8000bb4 <main+0x34>
 8000bba:	bf00      	nop
 8000bbc:	200004e0 	.word	0x200004e0

08000bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b094      	sub	sp, #80	@ 0x50
 8000bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc6:	f107 0320 	add.w	r3, r7, #32
 8000bca:	2230      	movs	r2, #48	@ 0x30
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f004 fd3c 	bl	800564c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be4:	4b22      	ldr	r3, [pc, #136]	@ (8000c70 <SystemClock_Config+0xb0>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be8:	4a21      	ldr	r2, [pc, #132]	@ (8000c70 <SystemClock_Config+0xb0>)
 8000bea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bee:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c70 <SystemClock_Config+0xb0>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c74 <SystemClock_Config+0xb4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c04:	4a1b      	ldr	r2, [pc, #108]	@ (8000c74 <SystemClock_Config+0xb4>)
 8000c06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	4b19      	ldr	r3, [pc, #100]	@ (8000c74 <SystemClock_Config+0xb4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c20:	2310      	movs	r3, #16
 8000c22:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c28:	f107 0320 	add.w	r3, r7, #32
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f002 fee3 	bl	80039f8 <HAL_RCC_OscConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000c38:	f000 f9fc 	bl	8001034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f003 f972 	bl	8003f40 <HAL_RCC_ClockConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c62:	f000 f9e7 	bl	8001034 <Error_Handler>
  }
}
 8000c66:	bf00      	nop
 8000c68:	3750      	adds	r7, #80	@ 0x50
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40007000 	.word	0x40007000

08000c78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7e:	463b      	mov	r3, r7
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c8a:	4b21      	ldr	r3, [pc, #132]	@ (8000d10 <MX_ADC1_Init+0x98>)
 8000c8c:	4a21      	ldr	r2, [pc, #132]	@ (8000d14 <MX_ADC1_Init+0x9c>)
 8000c8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c90:	4b1f      	ldr	r3, [pc, #124]	@ (8000d10 <MX_ADC1_Init+0x98>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c96:	4b1e      	ldr	r3, [pc, #120]	@ (8000d10 <MX_ADC1_Init+0x98>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d10 <MX_ADC1_Init+0x98>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <MX_ADC1_Init+0x98>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ca8:	4b19      	ldr	r3, [pc, #100]	@ (8000d10 <MX_ADC1_Init+0x98>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cb0:	4b17      	ldr	r3, [pc, #92]	@ (8000d10 <MX_ADC1_Init+0x98>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cb6:	4b16      	ldr	r3, [pc, #88]	@ (8000d10 <MX_ADC1_Init+0x98>)
 8000cb8:	4a17      	ldr	r2, [pc, #92]	@ (8000d18 <MX_ADC1_Init+0xa0>)
 8000cba:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <MX_ADC1_Init+0x98>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	@ (8000d10 <MX_ADC1_Init+0x98>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <MX_ADC1_Init+0x98>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <MX_ADC1_Init+0x98>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd6:	480e      	ldr	r0, [pc, #56]	@ (8000d10 <MX_ADC1_Init+0x98>)
 8000cd8:	f000 fd42 	bl	8001760 <HAL_ADC_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ce2:	f000 f9a7 	bl	8001034 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ce6:	230a      	movs	r3, #10
 8000ce8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cea:	2301      	movs	r3, #1
 8000cec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4806      	ldr	r0, [pc, #24]	@ (8000d10 <MX_ADC1_Init+0x98>)
 8000cf8:	f000 fd76 	bl	80017e8 <HAL_ADC_ConfigChannel>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d02:	f000 f997 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000498 	.word	0x20000498
 8000d14:	40012000 	.word	0x40012000
 8000d18:	0f000001 	.word	0x0f000001

08000d1c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d22:	463b      	mov	r3, r7
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <MX_DAC_Init+0x4c>)
 8000d2c:	4a0f      	ldr	r2, [pc, #60]	@ (8000d6c <MX_DAC_Init+0x50>)
 8000d2e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000d30:	480d      	ldr	r0, [pc, #52]	@ (8000d68 <MX_DAC_Init+0x4c>)
 8000d32:	f001 f933 	bl	8001f9c <HAL_DAC_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000d3c:	f000 f97a 	bl	8001034 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d48:	463b      	mov	r3, r7
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4806      	ldr	r0, [pc, #24]	@ (8000d68 <MX_DAC_Init+0x4c>)
 8000d50:	f001 f9c7 	bl	80020e2 <HAL_DAC_ConfigChannel>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000d5a:	f000 f96b 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200004e0 	.word	0x200004e0
 8000d6c:	40007400 	.word	0x40007400

08000d70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <MX_I2C1_Init+0x74>)
 8000d76:	4a1c      	ldr	r2, [pc, #112]	@ (8000de8 <MX_I2C1_Init+0x78>)
 8000d78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <MX_I2C1_Init+0x74>)
 8000d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dec <MX_I2C1_Init+0x7c>)
 8000d7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d80:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <MX_I2C1_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d86:	4b17      	ldr	r3, [pc, #92]	@ (8000de4 <MX_I2C1_Init+0x74>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d8c:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <MX_I2C1_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <MX_I2C1_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d98:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <MX_I2C1_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <MX_I2C1_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <MX_I2C1_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000daa:	480e      	ldr	r0, [pc, #56]	@ (8000de4 <MX_I2C1_Init+0x74>)
 8000dac:	f001 fef4 	bl	8002b98 <HAL_I2C_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000db6:	f000 f93d 	bl	8001034 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4809      	ldr	r0, [pc, #36]	@ (8000de4 <MX_I2C1_Init+0x74>)
 8000dbe:	f002 fd84 	bl	80038ca <HAL_I2CEx_ConfigAnalogFilter>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dc8:	f000 f934 	bl	8001034 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <MX_I2C1_Init+0x74>)
 8000dd0:	f002 fdc6 	bl	8003960 <HAL_I2CEx_ConfigDigitalFilter>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dda:	f000 f92b 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200004f4 	.word	0x200004f4
 8000de8:	40005400 	.word	0x40005400
 8000dec:	00303d5b 	.word	0x00303d5b

08000df0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000df4:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <MX_USART1_UART_Init+0x58>)
 8000df6:	4a15      	ldr	r2, [pc, #84]	@ (8000e4c <MX_USART1_UART_Init+0x5c>)
 8000df8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dfa:	4b13      	ldr	r3, [pc, #76]	@ (8000e48 <MX_USART1_UART_Init+0x58>)
 8000dfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e02:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <MX_USART1_UART_Init+0x58>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <MX_USART1_UART_Init+0x58>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <MX_USART1_UART_Init+0x58>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <MX_USART1_UART_Init+0x58>)
 8000e16:	220c      	movs	r2, #12
 8000e18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <MX_USART1_UART_Init+0x58>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e20:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <MX_USART1_UART_Init+0x58>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e26:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <MX_USART1_UART_Init+0x58>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <MX_USART1_UART_Init+0x58>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e32:	4805      	ldr	r0, [pc, #20]	@ (8000e48 <MX_USART1_UART_Init+0x58>)
 8000e34:	f003 fdb4 	bl	80049a0 <HAL_UART_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e3e:	f000 f8f9 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000608 	.word	0x20000608
 8000e4c:	40011000 	.word	0x40011000

08000e50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e56:	4b10      	ldr	r3, [pc, #64]	@ (8000e98 <MX_DMA_Init+0x48>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e98 <MX_DMA_Init+0x48>)
 8000e5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e62:	4b0d      	ldr	r3, [pc, #52]	@ (8000e98 <MX_DMA_Init+0x48>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	200b      	movs	r0, #11
 8000e74:	f000 ffe3 	bl	8001e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e78:	200b      	movs	r0, #11
 8000e7a:	f000 fffc 	bl	8001e76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2011      	movs	r0, #17
 8000e84:	f000 ffdb 	bl	8001e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000e88:	2011      	movs	r0, #17
 8000e8a:	f000 fff4 	bl	8001e76 <HAL_NVIC_EnableIRQ>

}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800

08000e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	@ 0x28
 8000ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eb2:	4b46      	ldr	r3, [pc, #280]	@ (8000fcc <MX_GPIO_Init+0x130>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a45      	ldr	r2, [pc, #276]	@ (8000fcc <MX_GPIO_Init+0x130>)
 8000eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b43      	ldr	r3, [pc, #268]	@ (8000fcc <MX_GPIO_Init+0x130>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eca:	4b40      	ldr	r3, [pc, #256]	@ (8000fcc <MX_GPIO_Init+0x130>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	4a3f      	ldr	r2, [pc, #252]	@ (8000fcc <MX_GPIO_Init+0x130>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed6:	4b3d      	ldr	r3, [pc, #244]	@ (8000fcc <MX_GPIO_Init+0x130>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	4b3a      	ldr	r3, [pc, #232]	@ (8000fcc <MX_GPIO_Init+0x130>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	4a39      	ldr	r2, [pc, #228]	@ (8000fcc <MX_GPIO_Init+0x130>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eee:	4b37      	ldr	r3, [pc, #220]	@ (8000fcc <MX_GPIO_Init+0x130>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	4b34      	ldr	r3, [pc, #208]	@ (8000fcc <MX_GPIO_Init+0x130>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	4a33      	ldr	r2, [pc, #204]	@ (8000fcc <MX_GPIO_Init+0x130>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f06:	4b31      	ldr	r3, [pc, #196]	@ (8000fcc <MX_GPIO_Init+0x130>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2104      	movs	r1, #4
 8000f16:	482e      	ldr	r0, [pc, #184]	@ (8000fd0 <MX_GPIO_Init+0x134>)
 8000f18:	f001 fe0a 	bl	8002b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_ACT_LED_GPIO_Port, MCU_ACT_LED_Pin, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f22:	482c      	ldr	r0, [pc, #176]	@ (8000fd4 <MX_GPIO_Init+0x138>)
 8000f24:	f001 fe04 	bl	8002b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4824      	ldr	r0, [pc, #144]	@ (8000fd0 <MX_GPIO_Init+0x134>)
 8000f40:	f001 fc42 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f44:	2308      	movs	r3, #8
 8000f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	481e      	ldr	r0, [pc, #120]	@ (8000fd0 <MX_GPIO_Init+0x134>)
 8000f58:	f001 fc36 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8000f5c:	23ee      	movs	r3, #238	@ 0xee
 8000f5e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	481a      	ldr	r0, [pc, #104]	@ (8000fd8 <MX_GPIO_Init+0x13c>)
 8000f70:	f001 fc2a 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACT_LED_Pin */
  GPIO_InitStruct.Pin = MCU_ACT_LED_Pin;
 8000f74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_ACT_LED_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4811      	ldr	r0, [pc, #68]	@ (8000fd4 <MX_GPIO_Init+0x138>)
 8000f8e:	f001 fc1b 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480a      	ldr	r0, [pc, #40]	@ (8000fd0 <MX_GPIO_Init+0x134>)
 8000fa8:	f001 fc0e 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fac:	2310      	movs	r3, #16
 8000fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <MX_GPIO_Init+0x138>)
 8000fc0:	f001 fc02 	bl	80027c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fc4:	bf00      	nop
 8000fc6:	3728      	adds	r7, #40	@ 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	40020000 	.word	0x40020000

08000fdc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000fee:	f000 ff5d 	bl	8001eac <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ffe:	231f      	movs	r3, #31
 8001000:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001002:	2387      	movs	r3, #135	@ 0x87
 8001004:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001006:	2300      	movs	r3, #0
 8001008:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800100a:	2300      	movs	r3, #0
 800100c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800100e:	2301      	movs	r3, #1
 8001010:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001012:	2301      	movs	r3, #1
 8001014:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001016:	2300      	movs	r3, #0
 8001018:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800101e:	463b      	mov	r3, r7
 8001020:	4618      	mov	r0, r3
 8001022:	f000 ff7b 	bl	8001f1c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001026:	2004      	movs	r0, #4
 8001028:	f000 ff58 	bl	8001edc <HAL_MPU_Enable>

}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001038:	b672      	cpsid	i
}
 800103a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <Error_Handler+0x8>

08001040 <pci100_message_handler>:
		command_not_found_handler,
		NULL
};


void pci100_message_handler(const char *message) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if (!strcmp(message, "help")) {
 8001048:	491a      	ldr	r1, [pc, #104]	@ (80010b4 <pci100_message_handler+0x74>)
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff f8e8 	bl	8000220 <strcmp>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d113      	bne.n	800107e <pci100_message_handler+0x3e>
      cli_writeline(&huart1, "led <on/off>");
 8001056:	4918      	ldr	r1, [pc, #96]	@ (80010b8 <pci100_message_handler+0x78>)
 8001058:	4818      	ldr	r0, [pc, #96]	@ (80010bc <pci100_message_handler+0x7c>)
 800105a:	f7ff fac7 	bl	80005ec <cli_writeline>
      cli_writeline(&huart1, "led blink <hz>");
 800105e:	4918      	ldr	r1, [pc, #96]	@ (80010c0 <pci100_message_handler+0x80>)
 8001060:	4816      	ldr	r0, [pc, #88]	@ (80010bc <pci100_message_handler+0x7c>)
 8001062:	f7ff fac3 	bl	80005ec <cli_writeline>
      cli_writeline(&huart1, "led reset");
 8001066:	4917      	ldr	r1, [pc, #92]	@ (80010c4 <pci100_message_handler+0x84>)
 8001068:	4814      	ldr	r0, [pc, #80]	@ (80010bc <pci100_message_handler+0x7c>)
 800106a:	f7ff fabf 	bl	80005ec <cli_writeline>
      cli_writeline(&huart1, "led get state");
 800106e:	4916      	ldr	r1, [pc, #88]	@ (80010c8 <pci100_message_handler+0x88>)
 8001070:	4812      	ldr	r0, [pc, #72]	@ (80010bc <pci100_message_handler+0x7c>)
 8001072:	f7ff fabb 	bl	80005ec <cli_writeline>
      cli_writeline(&huart1, "dac <id> write <value>");
 8001076:	4915      	ldr	r1, [pc, #84]	@ (80010cc <pci100_message_handler+0x8c>)
 8001078:	4810      	ldr	r0, [pc, #64]	@ (80010bc <pci100_message_handler+0x7c>)
 800107a:	f7ff fab7 	bl	80005ec <cli_writeline>
  }

  for (uint16_t i = 0; HANDLERS[i]; ++i) {
 800107e:	2300      	movs	r3, #0
 8001080:	81fb      	strh	r3, [r7, #14]
 8001082:	e00b      	b.n	800109c <pci100_message_handler+0x5c>
	  if (CLI_COMMAND_NOT_FOUND != HANDLERS[i](message)) {
 8001084:	89fb      	ldrh	r3, [r7, #14]
 8001086:	4a12      	ldr	r2, [pc, #72]	@ (80010d0 <pci100_message_handler+0x90>)
 8001088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	4798      	blx	r3
 8001090:	4603      	mov	r3, r0
 8001092:	2b7f      	cmp	r3, #127	@ 0x7f
 8001094:	d109      	bne.n	80010aa <pci100_message_handler+0x6a>
  for (uint16_t i = 0; HANDLERS[i]; ++i) {
 8001096:	89fb      	ldrh	r3, [r7, #14]
 8001098:	3301      	adds	r3, #1
 800109a:	81fb      	strh	r3, [r7, #14]
 800109c:	89fb      	ldrh	r3, [r7, #14]
 800109e:	4a0c      	ldr	r2, [pc, #48]	@ (80010d0 <pci100_message_handler+0x90>)
 80010a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1ed      	bne.n	8001084 <pci100_message_handler+0x44>
		  break;
	  }
  }
}
 80010a8:	e000      	b.n	80010ac <pci100_message_handler+0x6c>
		  break;
 80010aa:	bf00      	nop
}
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	080057f4 	.word	0x080057f4
 80010b8:	080057fc 	.word	0x080057fc
 80010bc:	20000608 	.word	0x20000608
 80010c0:	0800580c 	.word	0x0800580c
 80010c4:	0800581c 	.word	0x0800581c
 80010c8:	08005828 	.word	0x08005828
 80010cc:	08005838 	.word	0x08005838
 80010d0:	20000004 	.word	0x20000004

080010d4 <pci100_cli>:


void pci100_cli(void) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	blink_led(BLINK_FREQ);
 80010d8:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <pci100_cli+0x1c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fb6d 	bl	80007bc <blink_led>
	cli_engine(&huart1, pci100_message_handler);
 80010e2:	4904      	ldr	r1, [pc, #16]	@ (80010f4 <pci100_cli+0x20>)
 80010e4:	4804      	ldr	r0, [pc, #16]	@ (80010f8 <pci100_cli+0x24>)
 80010e6:	f7ff fa25 	bl	8000534 <cli_engine>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000490 	.word	0x20000490
 80010f4:	08001041 	.word	0x08001041
 80010f8:	20000608 	.word	0x20000608

080010fc <command_not_found_handler>:


uint8_t command_not_found_handler(const char *message) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	cli_writeline(&huart1, "error: command not found");
 8001104:	4904      	ldr	r1, [pc, #16]	@ (8001118 <command_not_found_handler+0x1c>)
 8001106:	4805      	ldr	r0, [pc, #20]	@ (800111c <command_not_found_handler+0x20>)
 8001108:	f7ff fa70 	bl	80005ec <cli_writeline>
	return CLI_COMMAND_NOT_FOUND;
 800110c:	237f      	movs	r3, #127	@ 0x7f
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	08005850 	.word	0x08005850
 800111c:	20000608 	.word	0x20000608

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001126:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <HAL_MspInit+0x44>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	4a0e      	ldr	r2, [pc, #56]	@ (8001164 <HAL_MspInit+0x44>)
 800112c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001130:	6413      	str	r3, [r2, #64]	@ 0x40
 8001132:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <HAL_MspInit+0x44>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <HAL_MspInit+0x44>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	4a08      	ldr	r2, [pc, #32]	@ (8001164 <HAL_MspInit+0x44>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001148:	6453      	str	r3, [r2, #68]	@ 0x44
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_MspInit+0x44>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800

08001168 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	@ 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a15      	ldr	r2, [pc, #84]	@ (80011dc <HAL_ADC_MspInit+0x74>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d123      	bne.n	80011d2 <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <HAL_ADC_MspInit+0x78>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118e:	4a14      	ldr	r2, [pc, #80]	@ (80011e0 <HAL_ADC_MspInit+0x78>)
 8001190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001194:	6453      	str	r3, [r2, #68]	@ 0x44
 8001196:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <HAL_ADC_MspInit+0x78>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a2:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <HAL_ADC_MspInit+0x78>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a0e      	ldr	r2, [pc, #56]	@ (80011e0 <HAL_ADC_MspInit+0x78>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <HAL_ADC_MspInit+0x78>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011ba:	2301      	movs	r3, #1
 80011bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011be:	2303      	movs	r3, #3
 80011c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	4805      	ldr	r0, [pc, #20]	@ (80011e4 <HAL_ADC_MspInit+0x7c>)
 80011ce:	f001 fafb 	bl	80027c8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80011d2:	bf00      	nop
 80011d4:	3728      	adds	r7, #40	@ 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40012000 	.word	0x40012000
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020800 	.word	0x40020800

080011e8 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	@ 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a15      	ldr	r2, [pc, #84]	@ (800125c <HAL_DAC_MspInit+0x74>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d123      	bne.n	8001252 <HAL_DAC_MspInit+0x6a>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800120a:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <HAL_DAC_MspInit+0x78>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	4a14      	ldr	r2, [pc, #80]	@ (8001260 <HAL_DAC_MspInit+0x78>)
 8001210:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001214:	6413      	str	r3, [r2, #64]	@ 0x40
 8001216:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <HAL_DAC_MspInit+0x78>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <HAL_DAC_MspInit+0x78>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a0e      	ldr	r2, [pc, #56]	@ (8001260 <HAL_DAC_MspInit+0x78>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <HAL_DAC_MspInit+0x78>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800123a:	2310      	movs	r3, #16
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123e:	2303      	movs	r3, #3
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	@ (8001264 <HAL_DAC_MspInit+0x7c>)
 800124e:	f001 fabb 	bl	80027c8 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	@ 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40007400 	.word	0x40007400
 8001260:	40023800 	.word	0x40023800
 8001264:	40020000 	.word	0x40020000

08001268 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b0aa      	sub	sp, #168	@ 0xa8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2280      	movs	r2, #128	@ 0x80
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f004 f9df 	bl	800564c <memset>
  if(hi2c->Instance==I2C1)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a58      	ldr	r2, [pc, #352]	@ (80013f4 <HAL_I2C_MspInit+0x18c>)
 8001294:	4293      	cmp	r3, r2
 8001296:	f040 80a8 	bne.w	80013ea <HAL_I2C_MspInit+0x182>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800129a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800129e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4618      	mov	r0, r3
 80012aa:	f003 f82f 	bl	800430c <HAL_RCCEx_PeriphCLKConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80012b4:	f7ff febe 	bl	8001034 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b8:	4b4f      	ldr	r3, [pc, #316]	@ (80013f8 <HAL_I2C_MspInit+0x190>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012bc:	4a4e      	ldr	r2, [pc, #312]	@ (80013f8 <HAL_I2C_MspInit+0x190>)
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c4:	4b4c      	ldr	r3, [pc, #304]	@ (80013f8 <HAL_I2C_MspInit+0x190>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012d0:	23c0      	movs	r3, #192	@ 0xc0
 80012d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d6:	2312      	movs	r3, #18
 80012d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012dc:	2301      	movs	r3, #1
 80012de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e2:	2303      	movs	r3, #3
 80012e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012e8:	2304      	movs	r3, #4
 80012ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80012f2:	4619      	mov	r1, r3
 80012f4:	4841      	ldr	r0, [pc, #260]	@ (80013fc <HAL_I2C_MspInit+0x194>)
 80012f6:	f001 fa67 	bl	80027c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012fa:	4b3f      	ldr	r3, [pc, #252]	@ (80013f8 <HAL_I2C_MspInit+0x190>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	4a3e      	ldr	r2, [pc, #248]	@ (80013f8 <HAL_I2C_MspInit+0x190>)
 8001300:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001304:	6413      	str	r3, [r2, #64]	@ 0x40
 8001306:	4b3c      	ldr	r3, [pc, #240]	@ (80013f8 <HAL_I2C_MspInit+0x190>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001312:	4b3b      	ldr	r3, [pc, #236]	@ (8001400 <HAL_I2C_MspInit+0x198>)
 8001314:	4a3b      	ldr	r2, [pc, #236]	@ (8001404 <HAL_I2C_MspInit+0x19c>)
 8001316:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001318:	4b39      	ldr	r3, [pc, #228]	@ (8001400 <HAL_I2C_MspInit+0x198>)
 800131a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800131e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001320:	4b37      	ldr	r3, [pc, #220]	@ (8001400 <HAL_I2C_MspInit+0x198>)
 8001322:	2240      	movs	r2, #64	@ 0x40
 8001324:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001326:	4b36      	ldr	r3, [pc, #216]	@ (8001400 <HAL_I2C_MspInit+0x198>)
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800132c:	4b34      	ldr	r3, [pc, #208]	@ (8001400 <HAL_I2C_MspInit+0x198>)
 800132e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001332:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001334:	4b32      	ldr	r3, [pc, #200]	@ (8001400 <HAL_I2C_MspInit+0x198>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800133a:	4b31      	ldr	r3, [pc, #196]	@ (8001400 <HAL_I2C_MspInit+0x198>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001340:	4b2f      	ldr	r3, [pc, #188]	@ (8001400 <HAL_I2C_MspInit+0x198>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001346:	4b2e      	ldr	r3, [pc, #184]	@ (8001400 <HAL_I2C_MspInit+0x198>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800134c:	4b2c      	ldr	r3, [pc, #176]	@ (8001400 <HAL_I2C_MspInit+0x198>)
 800134e:	2200      	movs	r2, #0
 8001350:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001352:	482b      	ldr	r0, [pc, #172]	@ (8001400 <HAL_I2C_MspInit+0x198>)
 8001354:	f000 ff1e 	bl	8002194 <HAL_DMA_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 800135e:	f7ff fe69 	bl	8001034 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a26      	ldr	r2, [pc, #152]	@ (8001400 <HAL_I2C_MspInit+0x198>)
 8001366:	639a      	str	r2, [r3, #56]	@ 0x38
 8001368:	4a25      	ldr	r2, [pc, #148]	@ (8001400 <HAL_I2C_MspInit+0x198>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800136e:	4b26      	ldr	r3, [pc, #152]	@ (8001408 <HAL_I2C_MspInit+0x1a0>)
 8001370:	4a26      	ldr	r2, [pc, #152]	@ (800140c <HAL_I2C_MspInit+0x1a4>)
 8001372:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001374:	4b24      	ldr	r3, [pc, #144]	@ (8001408 <HAL_I2C_MspInit+0x1a0>)
 8001376:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800137a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800137c:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <HAL_I2C_MspInit+0x1a0>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001382:	4b21      	ldr	r3, [pc, #132]	@ (8001408 <HAL_I2C_MspInit+0x1a0>)
 8001384:	2200      	movs	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001388:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <HAL_I2C_MspInit+0x1a0>)
 800138a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800138e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001390:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <HAL_I2C_MspInit+0x1a0>)
 8001392:	2200      	movs	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001396:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <HAL_I2C_MspInit+0x1a0>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800139c:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <HAL_I2C_MspInit+0x1a0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013a2:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <HAL_I2C_MspInit+0x1a0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013a8:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <HAL_I2C_MspInit+0x1a0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80013ae:	4816      	ldr	r0, [pc, #88]	@ (8001408 <HAL_I2C_MspInit+0x1a0>)
 80013b0:	f000 fef0 	bl	8002194 <HAL_DMA_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_I2C_MspInit+0x156>
    {
      Error_Handler();
 80013ba:	f7ff fe3b 	bl	8001034 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a11      	ldr	r2, [pc, #68]	@ (8001408 <HAL_I2C_MspInit+0x1a0>)
 80013c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013c4:	4a10      	ldr	r2, [pc, #64]	@ (8001408 <HAL_I2C_MspInit+0x1a0>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	201f      	movs	r0, #31
 80013d0:	f000 fd35 	bl	8001e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80013d4:	201f      	movs	r0, #31
 80013d6:	f000 fd4e 	bl	8001e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2100      	movs	r1, #0
 80013de:	2020      	movs	r0, #32
 80013e0:	f000 fd2d 	bl	8001e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80013e4:	2020      	movs	r0, #32
 80013e6:	f000 fd46 	bl	8001e76 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80013ea:	bf00      	nop
 80013ec:	37a8      	adds	r7, #168	@ 0xa8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40005400 	.word	0x40005400
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020400 	.word	0x40020400
 8001400:	20000548 	.word	0x20000548
 8001404:	400260a0 	.word	0x400260a0
 8001408:	200005a8 	.word	0x200005a8
 800140c:	40026010 	.word	0x40026010

08001410 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b0aa      	sub	sp, #168	@ 0xa8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2280      	movs	r2, #128	@ 0x80
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f004 f90b 	bl	800564c <memset>
  if(huart->Instance==USART1)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a21      	ldr	r2, [pc, #132]	@ (80014c0 <HAL_UART_MspInit+0xb0>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d13b      	bne.n	80014b8 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001440:	2340      	movs	r3, #64	@ 0x40
 8001442:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001444:	2300      	movs	r3, #0
 8001446:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4618      	mov	r0, r3
 800144e:	f002 ff5d 	bl	800430c <HAL_RCCEx_PeriphCLKConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001458:	f7ff fdec 	bl	8001034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800145c:	4b19      	ldr	r3, [pc, #100]	@ (80014c4 <HAL_UART_MspInit+0xb4>)
 800145e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001460:	4a18      	ldr	r2, [pc, #96]	@ (80014c4 <HAL_UART_MspInit+0xb4>)
 8001462:	f043 0310 	orr.w	r3, r3, #16
 8001466:	6453      	str	r3, [r2, #68]	@ 0x44
 8001468:	4b16      	ldr	r3, [pc, #88]	@ (80014c4 <HAL_UART_MspInit+0xb4>)
 800146a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146c:	f003 0310 	and.w	r3, r3, #16
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001474:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <HAL_UART_MspInit+0xb4>)
 8001476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001478:	4a12      	ldr	r2, [pc, #72]	@ (80014c4 <HAL_UART_MspInit+0xb4>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001480:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <HAL_UART_MspInit+0xb4>)
 8001482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800148c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001490:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014a6:	2307      	movs	r3, #7
 80014a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ac:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80014b0:	4619      	mov	r1, r3
 80014b2:	4805      	ldr	r0, [pc, #20]	@ (80014c8 <HAL_UART_MspInit+0xb8>)
 80014b4:	f001 f988 	bl	80027c8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80014b8:	bf00      	nop
 80014ba:	37a8      	adds	r7, #168	@ 0xa8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40011000 	.word	0x40011000
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020000 	.word	0x40020000

080014cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <NMI_Handler+0x4>

080014d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <HardFault_Handler+0x4>

080014dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <MemManage_Handler+0x4>

080014e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <BusFault_Handler+0x4>

080014ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <UsageFault_Handler+0x4>

080014f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001522:	f000 f8fd 	bl	8001720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001530:	4802      	ldr	r0, [pc, #8]	@ (800153c <DMA1_Stream0_IRQHandler+0x10>)
 8001532:	f000 feff 	bl	8002334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200005a8 	.word	0x200005a8

08001540 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001544:	4802      	ldr	r0, [pc, #8]	@ (8001550 <DMA1_Stream6_IRQHandler+0x10>)
 8001546:	f000 fef5 	bl	8002334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000548 	.word	0x20000548

08001554 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001558:	4802      	ldr	r0, [pc, #8]	@ (8001564 <I2C1_EV_IRQHandler+0x10>)
 800155a:	f001 fbb9 	bl	8002cd0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200004f4 	.word	0x200004f4

08001568 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800156c:	4802      	ldr	r0, [pc, #8]	@ (8001578 <I2C1_ER_IRQHandler+0x10>)
 800156e:	f001 fbc9 	bl	8002d04 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200004f4 	.word	0x200004f4

0800157c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <SystemInit+0x20>)
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001586:	4a05      	ldr	r2, [pc, #20]	@ (800159c <SystemInit+0x20>)
 8001588:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800158c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <static_itoa>:
  if (HAL_OK == HAL_UART_Receive(&huart1, &rxbuf, 1, 10)) {
    HAL_UART_Transmit(&huart1, &rxbuf, 1, 10);
  }
}

const char *static_itoa(uint32_t n) {
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  static char res[UINT32_MAX_DIGITS + 1] = {0};
  uint8_t i = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	73fb      	strb	r3, [r7, #15]

  while (n > 9) {
 80015ac:	e018      	b.n	80015e0 <static_itoa+0x40>
    res[i] = '0' + (n % 10);
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	4b26      	ldr	r3, [pc, #152]	@ (800164c <static_itoa+0xac>)
 80015b2:	fba3 2301 	umull	r2, r3, r3, r1
 80015b6:	08da      	lsrs	r2, r3, #3
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	1aca      	subs	r2, r1, r3
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	3230      	adds	r2, #48	@ 0x30
 80015c8:	b2d1      	uxtb	r1, r2
 80015ca:	4a21      	ldr	r2, [pc, #132]	@ (8001650 <static_itoa+0xb0>)
 80015cc:	54d1      	strb	r1, [r2, r3]
    n /= 10;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a1e      	ldr	r2, [pc, #120]	@ (800164c <static_itoa+0xac>)
 80015d2:	fba2 2303 	umull	r2, r3, r2, r3
 80015d6:	08db      	lsrs	r3, r3, #3
 80015d8:	607b      	str	r3, [r7, #4]
    ++i;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	3301      	adds	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
  while (n > 9) {
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b09      	cmp	r3, #9
 80015e4:	d8e3      	bhi.n	80015ae <static_itoa+0xe>
  }
  res[i] = '0' + n;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	3230      	adds	r2, #48	@ 0x30
 80015ee:	b2d1      	uxtb	r1, r2
 80015f0:	4a17      	ldr	r2, [pc, #92]	@ (8001650 <static_itoa+0xb0>)
 80015f2:	54d1      	strb	r1, [r2, r3]
  res[i + 1] = '\0';
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	3301      	adds	r3, #1
 80015f8:	4a15      	ldr	r2, [pc, #84]	@ (8001650 <static_itoa+0xb0>)
 80015fa:	2100      	movs	r1, #0
 80015fc:	54d1      	strb	r1, [r2, r3]

  for (int8_t j = 0; j < i; ++j, --i) {
 80015fe:	2300      	movs	r3, #0
 8001600:	73bb      	strb	r3, [r7, #14]
 8001602:	e016      	b.n	8001632 <static_itoa+0x92>
    const char t = res[j];
 8001604:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001608:	4a11      	ldr	r2, [pc, #68]	@ (8001650 <static_itoa+0xb0>)
 800160a:	5cd3      	ldrb	r3, [r2, r3]
 800160c:	737b      	strb	r3, [r7, #13]
    res[j] = res[i];
 800160e:	7bfa      	ldrb	r2, [r7, #15]
 8001610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001614:	490e      	ldr	r1, [pc, #56]	@ (8001650 <static_itoa+0xb0>)
 8001616:	5c89      	ldrb	r1, [r1, r2]
 8001618:	4a0d      	ldr	r2, [pc, #52]	@ (8001650 <static_itoa+0xb0>)
 800161a:	54d1      	strb	r1, [r2, r3]
    res[i] = t;
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	490c      	ldr	r1, [pc, #48]	@ (8001650 <static_itoa+0xb0>)
 8001620:	7b7a      	ldrb	r2, [r7, #13]
 8001622:	54ca      	strb	r2, [r1, r3]
  for (int8_t j = 0; j < i; ++j, --i) {
 8001624:	7bbb      	ldrb	r3, [r7, #14]
 8001626:	3301      	adds	r3, #1
 8001628:	b2db      	uxtb	r3, r3
 800162a:	73bb      	strb	r3, [r7, #14]
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	3b01      	subs	r3, #1
 8001630:	73fb      	strb	r3, [r7, #15]
 8001632:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	429a      	cmp	r2, r3
 800163a:	dbe3      	blt.n	8001604 <static_itoa+0x64>
  }

  return res;
 800163c:	4b04      	ldr	r3, [pc, #16]	@ (8001650 <static_itoa+0xb0>)
 800163e:	4618      	mov	r0, r3
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	cccccccd 	.word	0xcccccccd
 8001650:	20000690 	.word	0x20000690

08001654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800168c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8001658:	f7ff ff90 	bl	800157c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800165c:	480c      	ldr	r0, [pc, #48]	@ (8001690 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800165e:	490d      	ldr	r1, [pc, #52]	@ (8001694 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001660:	4a0d      	ldr	r2, [pc, #52]	@ (8001698 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001664:	e002      	b.n	800166c <LoopCopyDataInit>

08001666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166a:	3304      	adds	r3, #4

0800166c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800166c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001670:	d3f9      	bcc.n	8001666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001672:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001674:	4c0a      	ldr	r4, [pc, #40]	@ (80016a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001678:	e001      	b.n	800167e <LoopFillZerobss>

0800167a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800167c:	3204      	adds	r2, #4

0800167e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001680:	d3fb      	bcc.n	800167a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001682:	f004 f803 	bl	800568c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001686:	f7ff fa7b 	bl	8000b80 <main>
  bx  lr    
 800168a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800168c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001694:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001698:	080059b4 	.word	0x080059b4
  ldr r2, =_sbss
 800169c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016a0:	200007d8 	.word	0x200007d8

080016a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC_IRQHandler>

080016a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016aa:	2003      	movs	r0, #3
 80016ac:	f000 fbbc 	bl	8001e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b0:	200f      	movs	r0, #15
 80016b2:	f000 f805 	bl	80016c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b6:	f7ff fd33 	bl	8001120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c8:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <HAL_InitTick+0x54>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <HAL_InitTick+0x58>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 fbd7 	bl	8001e92 <HAL_SYSTICK_Config>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00e      	b.n	800170c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d80a      	bhi.n	800170a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f4:	2200      	movs	r2, #0
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f000 fb9f 	bl	8001e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001700:	4a06      	ldr	r2, [pc, #24]	@ (800171c <HAL_InitTick+0x5c>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e000      	b.n	800170c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000014 	.word	0x20000014
 8001718:	2000001c 	.word	0x2000001c
 800171c:	20000018 	.word	0x20000018

08001720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001724:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <HAL_IncTick+0x20>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <HAL_IncTick+0x24>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4a04      	ldr	r2, [pc, #16]	@ (8001744 <HAL_IncTick+0x24>)
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	2000001c 	.word	0x2000001c
 8001744:	2000069c 	.word	0x2000069c

08001748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return uwTick;
 800174c:	4b03      	ldr	r3, [pc, #12]	@ (800175c <HAL_GetTick+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	2000069c 	.word	0x2000069c

08001760 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e031      	b.n	80017da <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	2b00      	cmp	r3, #0
 800177c:	d109      	bne.n	8001792 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff fcf2 	bl	8001168 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	2b00      	cmp	r3, #0
 800179c:	d116      	bne.n	80017cc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017a2:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <HAL_ADC_Init+0x84>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	f043 0202 	orr.w	r2, r3, #2
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 f970 	bl	8001a94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	f023 0303 	bic.w	r3, r3, #3
 80017c2:	f043 0201 	orr.w	r2, r3, #1
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80017ca:	e001      	b.n	80017d0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	ffffeefd 	.word	0xffffeefd

080017e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x1c>
 8001800:	2302      	movs	r3, #2
 8001802:	e136      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x28a>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b09      	cmp	r3, #9
 8001812:	d93a      	bls.n	800188a <HAL_ADC_ConfigChannel+0xa2>
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800181c:	d035      	beq.n	800188a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68d9      	ldr	r1, [r3, #12]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	b29b      	uxth	r3, r3
 800182a:	461a      	mov	r2, r3
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	3b1e      	subs	r3, #30
 8001834:	2207      	movs	r2, #7
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43da      	mvns	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	400a      	ands	r2, r1
 8001842:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a8d      	ldr	r2, [pc, #564]	@ (8001a80 <HAL_ADC_ConfigChannel+0x298>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d10a      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68d9      	ldr	r1, [r3, #12]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	061a      	lsls	r2, r3, #24
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001862:	e035      	b.n	80018d0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68d9      	ldr	r1, [r3, #12]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	b29b      	uxth	r3, r3
 8001874:	4618      	mov	r0, r3
 8001876:	4603      	mov	r3, r0
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4403      	add	r3, r0
 800187c:	3b1e      	subs	r3, #30
 800187e:	409a      	lsls	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001888:	e022      	b.n	80018d0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6919      	ldr	r1, [r3, #16]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	b29b      	uxth	r3, r3
 8001896:	461a      	mov	r2, r3
 8001898:	4613      	mov	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4413      	add	r3, r2
 800189e:	2207      	movs	r2, #7
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43da      	mvns	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	400a      	ands	r2, r1
 80018ac:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6919      	ldr	r1, [r3, #16]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	4603      	mov	r3, r0
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4403      	add	r3, r0
 80018c6:	409a      	lsls	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b06      	cmp	r3, #6
 80018d6:	d824      	bhi.n	8001922 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	3b05      	subs	r3, #5
 80018ea:	221f      	movs	r2, #31
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43da      	mvns	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	400a      	ands	r2, r1
 80018f8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	b29b      	uxth	r3, r3
 8001906:	4618      	mov	r0, r3
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	3b05      	subs	r3, #5
 8001914:	fa00 f203 	lsl.w	r2, r0, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001920:	e04c      	b.n	80019bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b0c      	cmp	r3, #12
 8001928:	d824      	bhi.n	8001974 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	3b23      	subs	r3, #35	@ 0x23
 800193c:	221f      	movs	r2, #31
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43da      	mvns	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	400a      	ands	r2, r1
 800194a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	b29b      	uxth	r3, r3
 8001958:	4618      	mov	r0, r3
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	3b23      	subs	r3, #35	@ 0x23
 8001966:	fa00 f203 	lsl.w	r2, r0, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	631a      	str	r2, [r3, #48]	@ 0x30
 8001972:	e023      	b.n	80019bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	3b41      	subs	r3, #65	@ 0x41
 8001986:	221f      	movs	r2, #31
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43da      	mvns	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	400a      	ands	r2, r1
 8001994:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	4618      	mov	r0, r3
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	3b41      	subs	r3, #65	@ 0x41
 80019b0:	fa00 f203 	lsl.w	r2, r0, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a30      	ldr	r2, [pc, #192]	@ (8001a84 <HAL_ADC_ConfigChannel+0x29c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d10a      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x1f4>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80019ce:	d105      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80019d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a88 <HAL_ADC_ConfigChannel+0x2a0>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	4a2c      	ldr	r2, [pc, #176]	@ (8001a88 <HAL_ADC_ConfigChannel+0x2a0>)
 80019d6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80019da:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a28      	ldr	r2, [pc, #160]	@ (8001a84 <HAL_ADC_ConfigChannel+0x29c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d10f      	bne.n	8001a06 <HAL_ADC_ConfigChannel+0x21e>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b12      	cmp	r3, #18
 80019ec:	d10b      	bne.n	8001a06 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80019ee:	4b26      	ldr	r3, [pc, #152]	@ (8001a88 <HAL_ADC_ConfigChannel+0x2a0>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4a25      	ldr	r2, [pc, #148]	@ (8001a88 <HAL_ADC_ConfigChannel+0x2a0>)
 80019f4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80019f8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80019fa:	4b23      	ldr	r3, [pc, #140]	@ (8001a88 <HAL_ADC_ConfigChannel+0x2a0>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	4a22      	ldr	r2, [pc, #136]	@ (8001a88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a04:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001a84 <HAL_ADC_ConfigChannel+0x29c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d12b      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x280>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a1a      	ldr	r2, [pc, #104]	@ (8001a80 <HAL_ADC_ConfigChannel+0x298>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d003      	beq.n	8001a22 <HAL_ADC_ConfigChannel+0x23a>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b11      	cmp	r3, #17
 8001a20:	d122      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001a22:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4a18      	ldr	r2, [pc, #96]	@ (8001a88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a28:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001a2c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001a2e:	4b16      	ldr	r3, [pc, #88]	@ (8001a88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4a15      	ldr	r2, [pc, #84]	@ (8001a88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a38:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a10      	ldr	r2, [pc, #64]	@ (8001a80 <HAL_ADC_ConfigChannel+0x298>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d111      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a44:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <HAL_ADC_ConfigChannel+0x2a4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a11      	ldr	r2, [pc, #68]	@ (8001a90 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4e:	0c9a      	lsrs	r2, r3, #18
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a5a:	e002      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f9      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	10000012 	.word	0x10000012
 8001a84:	40012000 	.word	0x40012000
 8001a88:	40012300 	.word	0x40012300
 8001a8c:	20000014 	.word	0x20000014
 8001a90:	431bde83 	.word	0x431bde83

08001a94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001a9c:	4b78      	ldr	r3, [pc, #480]	@ (8001c80 <ADC_Init+0x1ec>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	4a77      	ldr	r2, [pc, #476]	@ (8001c80 <ADC_Init+0x1ec>)
 8001aa2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001aa6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001aa8:	4b75      	ldr	r3, [pc, #468]	@ (8001c80 <ADC_Init+0x1ec>)
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	4973      	ldr	r1, [pc, #460]	@ (8001c80 <ADC_Init+0x1ec>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ac4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6859      	ldr	r1, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	021a      	lsls	r2, r3, #8
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ae8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6859      	ldr	r1, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6899      	ldr	r1, [r3, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b22:	4a58      	ldr	r2, [pc, #352]	@ (8001c84 <ADC_Init+0x1f0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d022      	beq.n	8001b6e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6899      	ldr	r1, [r3, #8]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6899      	ldr	r1, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	e00f      	b.n	8001b8e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0202 	bic.w	r2, r2, #2
 8001b9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6899      	ldr	r1, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	005a      	lsls	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d01b      	beq.n	8001bf4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001bda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6859      	ldr	r1, [r3, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be6:	3b01      	subs	r3, #1
 8001be8:	035a      	lsls	r2, r3, #13
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	e007      	b.n	8001c04 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c02:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	051a      	lsls	r2, r3, #20
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6899      	ldr	r1, [r3, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c46:	025a      	lsls	r2, r3, #9
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6899      	ldr	r1, [r3, #8]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	029a      	lsls	r2, r3, #10
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	609a      	str	r2, [r3, #8]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	40012300 	.word	0x40012300
 8001c84:	0f000001 	.word	0x0f000001

08001c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c98:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <__NVIC_SetPriorityGrouping+0x40>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb6:	4a04      	ldr	r2, [pc, #16]	@ (8001cc8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	60d3      	str	r3, [r2, #12]
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00
 8001ccc:	05fa0000 	.word	0x05fa0000

08001cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd4:	4b04      	ldr	r3, [pc, #16]	@ (8001ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	0a1b      	lsrs	r3, r3, #8
 8001cda:	f003 0307 	and.w	r3, r3, #7
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	db0b      	blt.n	8001d16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	f003 021f 	and.w	r2, r3, #31
 8001d04:	4907      	ldr	r1, [pc, #28]	@ (8001d24 <__NVIC_EnableIRQ+0x38>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000e100 	.word	0xe000e100

08001d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	db0a      	blt.n	8001d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	490c      	ldr	r1, [pc, #48]	@ (8001d74 <__NVIC_SetPriority+0x4c>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	0112      	lsls	r2, r2, #4
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d50:	e00a      	b.n	8001d68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4908      	ldr	r1, [pc, #32]	@ (8001d78 <__NVIC_SetPriority+0x50>)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	3b04      	subs	r3, #4
 8001d60:	0112      	lsls	r2, r2, #4
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	440b      	add	r3, r1
 8001d66:	761a      	strb	r2, [r3, #24]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000e100 	.word	0xe000e100
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	@ 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f1c3 0307 	rsb	r3, r3, #7
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	bf28      	it	cs
 8001d9a:	2304      	movcs	r3, #4
 8001d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3304      	adds	r3, #4
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d902      	bls.n	8001dac <NVIC_EncodePriority+0x30>
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3b03      	subs	r3, #3
 8001daa:	e000      	b.n	8001dae <NVIC_EncodePriority+0x32>
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	f04f 32ff 	mov.w	r2, #4294967295
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	43d9      	mvns	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	4313      	orrs	r3, r2
         );
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3724      	adds	r7, #36	@ 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001df4:	d301      	bcc.n	8001dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001df6:	2301      	movs	r3, #1
 8001df8:	e00f      	b.n	8001e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <SysTick_Config+0x40>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e02:	210f      	movs	r1, #15
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295
 8001e08:	f7ff ff8e 	bl	8001d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e0c:	4b05      	ldr	r3, [pc, #20]	@ (8001e24 <SysTick_Config+0x40>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e12:	4b04      	ldr	r3, [pc, #16]	@ (8001e24 <SysTick_Config+0x40>)
 8001e14:	2207      	movs	r2, #7
 8001e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	e000e010 	.word	0xe000e010

08001e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ff29 	bl	8001c88 <__NVIC_SetPriorityGrouping>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b086      	sub	sp, #24
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
 8001e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e50:	f7ff ff3e 	bl	8001cd0 <__NVIC_GetPriorityGrouping>
 8001e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	6978      	ldr	r0, [r7, #20]
 8001e5c:	f7ff ff8e 	bl	8001d7c <NVIC_EncodePriority>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff5d 	bl	8001d28 <__NVIC_SetPriority>
}
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff31 	bl	8001cec <__NVIC_EnableIRQ>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ffa2 	bl	8001de4 <SysTick_Config>
 8001ea0:	4603      	mov	r3, r0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001eb0:	f3bf 8f5f 	dmb	sy
}
 8001eb4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001eb6:	4b07      	ldr	r3, [pc, #28]	@ (8001ed4 <HAL_MPU_Disable+0x28>)
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eba:	4a06      	ldr	r2, [pc, #24]	@ (8001ed4 <HAL_MPU_Disable+0x28>)
 8001ebc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ec0:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001ec2:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <HAL_MPU_Disable+0x2c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	605a      	str	r2, [r3, #4]
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00
 8001ed8:	e000ed90 	.word	0xe000ed90

08001edc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001ee4:	4a0b      	ldr	r2, [pc, #44]	@ (8001f14 <HAL_MPU_Enable+0x38>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001eee:	4b0a      	ldr	r3, [pc, #40]	@ (8001f18 <HAL_MPU_Enable+0x3c>)
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef2:	4a09      	ldr	r2, [pc, #36]	@ (8001f18 <HAL_MPU_Enable+0x3c>)
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001efa:	f3bf 8f4f 	dsb	sy
}
 8001efe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f00:	f3bf 8f6f 	isb	sy
}
 8001f04:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000ed90 	.word	0xe000ed90
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	785a      	ldrb	r2, [r3, #1]
 8001f28:	4b1b      	ldr	r3, [pc, #108]	@ (8001f98 <HAL_MPU_ConfigRegion+0x7c>)
 8001f2a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f98 <HAL_MPU_ConfigRegion+0x7c>)
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	4a19      	ldr	r2, [pc, #100]	@ (8001f98 <HAL_MPU_ConfigRegion+0x7c>)
 8001f32:	f023 0301 	bic.w	r3, r3, #1
 8001f36:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001f38:	4a17      	ldr	r2, [pc, #92]	@ (8001f98 <HAL_MPU_ConfigRegion+0x7c>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	7b1b      	ldrb	r3, [r3, #12]
 8001f44:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	7adb      	ldrb	r3, [r3, #11]
 8001f4a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	7a9b      	ldrb	r3, [r3, #10]
 8001f52:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	7b5b      	ldrb	r3, [r3, #13]
 8001f5a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	7b9b      	ldrb	r3, [r3, #14]
 8001f62:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	7bdb      	ldrb	r3, [r3, #15]
 8001f6a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	7a5b      	ldrb	r3, [r3, #9]
 8001f72:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	7a1b      	ldrb	r3, [r3, #8]
 8001f7a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f7c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	7812      	ldrb	r2, [r2, #0]
 8001f82:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f84:	4a04      	ldr	r2, [pc, #16]	@ (8001f98 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f86:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f88:	6113      	str	r3, [r2, #16]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000ed90 	.word	0xe000ed90

08001f9c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e014      	b.n	8001fd8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	791b      	ldrb	r3, [r3, #4]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d105      	bne.n	8001fc4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff f912 	bl	80011e8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e046      	b.n	8002082 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	795b      	ldrb	r3, [r3, #5]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_DAC_Start+0x20>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e040      	b.n	8002082 <HAL_DAC_Start+0xa2>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2202      	movs	r2, #2
 800200a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6819      	ldr	r1, [r3, #0]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2201      	movs	r2, #1
 800201a:	409a      	lsls	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10f      	bne.n	800204a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002034:	2b3c      	cmp	r3, #60	@ 0x3c
 8002036:	d11d      	bne.n	8002074 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	e014      	b.n	8002074 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	213c      	movs	r1, #60	@ 0x3c
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	429a      	cmp	r2, r3
 8002062:	d107      	bne.n	8002074 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0202 	orr.w	r2, r2, #2
 8002072:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800208e:	b480      	push	{r7}
 8002090:	b087      	sub	sp, #28
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e015      	b.n	80020d6 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d105      	bne.n	80020c2 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4413      	add	r3, r2
 80020bc:	3308      	adds	r3, #8
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	e004      	b.n	80020cc <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4413      	add	r3, r2
 80020c8:	3314      	adds	r3, #20
 80020ca:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	461a      	mov	r2, r3
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	371c      	adds	r7, #28
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b089      	sub	sp, #36	@ 0x24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <HAL_DAC_ConfigChannel+0x1c>
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e042      	b.n	8002188 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	795b      	ldrb	r3, [r3, #5]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_DAC_ConfigChannel+0x2c>
 800210a:	2302      	movs	r3, #2
 800210c:	e03c      	b.n	8002188 <HAL_DAC_ConfigChannel+0xa6>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2201      	movs	r2, #1
 8002112:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2202      	movs	r2, #2
 8002118:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	4313      	orrs	r3, r2
 8002142:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6819      	ldr	r1, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f003 0310 	and.w	r3, r3, #16
 800216a:	22c0      	movs	r2, #192	@ 0xc0
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43da      	mvns	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	400a      	ands	r2, r1
 8002178:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2201      	movs	r2, #1
 800217e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002186:	7ffb      	ldrb	r3, [r7, #31]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3724      	adds	r7, #36	@ 0x24
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021a0:	f7ff fad2 	bl	8001748 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e099      	b.n	80022e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2202      	movs	r2, #2
 80021b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0201 	bic.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d0:	e00f      	b.n	80021f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021d2:	f7ff fab9 	bl	8001748 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b05      	cmp	r3, #5
 80021de:	d908      	bls.n	80021f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2220      	movs	r2, #32
 80021e4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2203      	movs	r2, #3
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e078      	b.n	80022e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1e8      	bne.n	80021d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	4b38      	ldr	r3, [pc, #224]	@ (80022ec <HAL_DMA_Init+0x158>)
 800220c:	4013      	ands	r3, r2
 800220e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800221e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800222a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002236:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	4313      	orrs	r3, r2
 8002242:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002248:	2b04      	cmp	r3, #4
 800224a:	d107      	bne.n	800225c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002254:	4313      	orrs	r3, r2
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	4313      	orrs	r3, r2
 800225a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f023 0307 	bic.w	r3, r3, #7
 8002272:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	4313      	orrs	r3, r2
 800227c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002282:	2b04      	cmp	r3, #4
 8002284:	d117      	bne.n	80022b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4313      	orrs	r3, r2
 800228e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00e      	beq.n	80022b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 fa19 	bl	80026d0 <DMA_CheckFifoParam>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2240      	movs	r2, #64	@ 0x40
 80022a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80022b2:	2301      	movs	r3, #1
 80022b4:	e016      	b.n	80022e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f9d0 	bl	8002664 <DMA_CalcBaseAndBitshift>
 80022c4:	4603      	mov	r3, r0
 80022c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022cc:	223f      	movs	r2, #63	@ 0x3f
 80022ce:	409a      	lsls	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	e010803f 	.word	0xe010803f

080022f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d004      	beq.n	800230e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2280      	movs	r2, #128	@ 0x80
 8002308:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e00c      	b.n	8002328 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2205      	movs	r2, #5
 8002312:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0201 	bic.w	r2, r2, #1
 8002324:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002340:	4b8e      	ldr	r3, [pc, #568]	@ (800257c <HAL_DMA_IRQHandler+0x248>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a8e      	ldr	r2, [pc, #568]	@ (8002580 <HAL_DMA_IRQHandler+0x24c>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	0a9b      	lsrs	r3, r3, #10
 800234c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002352:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235e:	2208      	movs	r2, #8
 8002360:	409a      	lsls	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	4013      	ands	r3, r2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d01a      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d013      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0204 	bic.w	r2, r2, #4
 8002386:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800238c:	2208      	movs	r2, #8
 800238e:	409a      	lsls	r2, r3
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002398:	f043 0201 	orr.w	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a4:	2201      	movs	r2, #1
 80023a6:	409a      	lsls	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4013      	ands	r3, r2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d012      	beq.n	80023d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00b      	beq.n	80023d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c2:	2201      	movs	r2, #1
 80023c4:	409a      	lsls	r2, r3
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ce:	f043 0202 	orr.w	r2, r3, #2
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023da:	2204      	movs	r2, #4
 80023dc:	409a      	lsls	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d012      	beq.n	800240c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00b      	beq.n	800240c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f8:	2204      	movs	r2, #4
 80023fa:	409a      	lsls	r2, r3
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002404:	f043 0204 	orr.w	r2, r3, #4
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002410:	2210      	movs	r2, #16
 8002412:	409a      	lsls	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4013      	ands	r3, r2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d043      	beq.n	80024a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d03c      	beq.n	80024a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242e:	2210      	movs	r2, #16
 8002430:	409a      	lsls	r2, r3
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d018      	beq.n	8002476 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d108      	bne.n	8002464 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	d024      	beq.n	80024a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	4798      	blx	r3
 8002462:	e01f      	b.n	80024a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01b      	beq.n	80024a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	4798      	blx	r3
 8002474:	e016      	b.n	80024a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002480:	2b00      	cmp	r3, #0
 8002482:	d107      	bne.n	8002494 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0208 	bic.w	r2, r2, #8
 8002492:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a8:	2220      	movs	r2, #32
 80024aa:	409a      	lsls	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 808f 	beq.w	80025d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0310 	and.w	r3, r3, #16
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 8087 	beq.w	80025d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ca:	2220      	movs	r2, #32
 80024cc:	409a      	lsls	r2, r3
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b05      	cmp	r3, #5
 80024dc:	d136      	bne.n	800254c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0216 	bic.w	r2, r2, #22
 80024ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695a      	ldr	r2, [r3, #20]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	d103      	bne.n	800250e <HAL_DMA_IRQHandler+0x1da>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800250a:	2b00      	cmp	r3, #0
 800250c:	d007      	beq.n	800251e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0208 	bic.w	r2, r2, #8
 800251c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002522:	223f      	movs	r2, #63	@ 0x3f
 8002524:	409a      	lsls	r2, r3
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800253e:	2b00      	cmp	r3, #0
 8002540:	d07e      	beq.n	8002640 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	4798      	blx	r3
        }
        return;
 800254a:	e079      	b.n	8002640 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d01d      	beq.n	8002596 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10d      	bne.n	8002584 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256c:	2b00      	cmp	r3, #0
 800256e:	d031      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	4798      	blx	r3
 8002578:	e02c      	b.n	80025d4 <HAL_DMA_IRQHandler+0x2a0>
 800257a:	bf00      	nop
 800257c:	20000014 	.word	0x20000014
 8002580:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002588:	2b00      	cmp	r3, #0
 800258a:	d023      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4798      	blx	r3
 8002594:	e01e      	b.n	80025d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10f      	bne.n	80025c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0210 	bic.w	r2, r2, #16
 80025b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d032      	beq.n	8002642 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d022      	beq.n	800262e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2205      	movs	r2, #5
 80025ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0201 	bic.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	3301      	adds	r3, #1
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	429a      	cmp	r2, r3
 800260a:	d307      	bcc.n	800261c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f2      	bne.n	8002600 <HAL_DMA_IRQHandler+0x2cc>
 800261a:	e000      	b.n	800261e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800261c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	4798      	blx	r3
 800263e:	e000      	b.n	8002642 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002640:	bf00      	nop
    }
  }
}
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002656:	b2db      	uxtb	r3, r3
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	3b10      	subs	r3, #16
 8002674:	4a13      	ldr	r2, [pc, #76]	@ (80026c4 <DMA_CalcBaseAndBitshift+0x60>)
 8002676:	fba2 2303 	umull	r2, r3, r2, r3
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800267e:	4a12      	ldr	r2, [pc, #72]	@ (80026c8 <DMA_CalcBaseAndBitshift+0x64>)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4413      	add	r3, r2
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2b03      	cmp	r3, #3
 8002690:	d908      	bls.n	80026a4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	4b0c      	ldr	r3, [pc, #48]	@ (80026cc <DMA_CalcBaseAndBitshift+0x68>)
 800269a:	4013      	ands	r3, r2
 800269c:	1d1a      	adds	r2, r3, #4
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80026a2:	e006      	b.n	80026b2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	4b08      	ldr	r3, [pc, #32]	@ (80026cc <DMA_CalcBaseAndBitshift+0x68>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	aaaaaaab 	.word	0xaaaaaaab
 80026c8:	08005898 	.word	0x08005898
 80026cc:	fffffc00 	.word	0xfffffc00

080026d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d11f      	bne.n	800272a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d856      	bhi.n	800279e <DMA_CheckFifoParam+0xce>
 80026f0:	a201      	add	r2, pc, #4	@ (adr r2, 80026f8 <DMA_CheckFifoParam+0x28>)
 80026f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f6:	bf00      	nop
 80026f8:	08002709 	.word	0x08002709
 80026fc:	0800271b 	.word	0x0800271b
 8002700:	08002709 	.word	0x08002709
 8002704:	0800279f 	.word	0x0800279f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d046      	beq.n	80027a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002718:	e043      	b.n	80027a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002722:	d140      	bne.n	80027a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002728:	e03d      	b.n	80027a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002732:	d121      	bne.n	8002778 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b03      	cmp	r3, #3
 8002738:	d837      	bhi.n	80027aa <DMA_CheckFifoParam+0xda>
 800273a:	a201      	add	r2, pc, #4	@ (adr r2, 8002740 <DMA_CheckFifoParam+0x70>)
 800273c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002740:	08002751 	.word	0x08002751
 8002744:	08002757 	.word	0x08002757
 8002748:	08002751 	.word	0x08002751
 800274c:	08002769 	.word	0x08002769
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
      break;
 8002754:	e030      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d025      	beq.n	80027ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002766:	e022      	b.n	80027ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800276c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002770:	d11f      	bne.n	80027b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002776:	e01c      	b.n	80027b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d903      	bls.n	8002786 <DMA_CheckFifoParam+0xb6>
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b03      	cmp	r3, #3
 8002782:	d003      	beq.n	800278c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002784:	e018      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
      break;
 800278a:	e015      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002790:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00e      	beq.n	80027b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
      break;
 800279c:	e00b      	b.n	80027b6 <DMA_CheckFifoParam+0xe6>
      break;
 800279e:	bf00      	nop
 80027a0:	e00a      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
      break;
 80027a2:	bf00      	nop
 80027a4:	e008      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
      break;
 80027a6:	bf00      	nop
 80027a8:	e006      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
      break;
 80027aa:	bf00      	nop
 80027ac:	e004      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
      break;
 80027ae:	bf00      	nop
 80027b0:	e002      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80027b2:	bf00      	nop
 80027b4:	e000      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
      break;
 80027b6:	bf00      	nop
    }
  } 
  
  return status; 
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop

080027c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b089      	sub	sp, #36	@ 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027da:	2300      	movs	r3, #0
 80027dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027de:	2300      	movs	r3, #0
 80027e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
 80027e6:	e169      	b.n	8002abc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027e8:	2201      	movs	r2, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4013      	ands	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	429a      	cmp	r2, r3
 8002802:	f040 8158 	bne.w	8002ab6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	2b01      	cmp	r3, #1
 8002810:	d005      	beq.n	800281e <HAL_GPIO_Init+0x56>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d130      	bne.n	8002880 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	2203      	movs	r2, #3
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43db      	mvns	r3, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4013      	ands	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002854:	2201      	movs	r2, #1
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	f003 0201 	and.w	r2, r3, #1
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b03      	cmp	r3, #3
 800288a:	d017      	beq.n	80028bc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	2203      	movs	r2, #3
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d123      	bne.n	8002910 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	08da      	lsrs	r2, r3, #3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3208      	adds	r2, #8
 80028d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	220f      	movs	r2, #15
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	08da      	lsrs	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3208      	adds	r2, #8
 800290a:	69b9      	ldr	r1, [r7, #24]
 800290c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	2203      	movs	r2, #3
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0203 	and.w	r2, r3, #3
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 80b2 	beq.w	8002ab6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002952:	4b60      	ldr	r3, [pc, #384]	@ (8002ad4 <HAL_GPIO_Init+0x30c>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002956:	4a5f      	ldr	r2, [pc, #380]	@ (8002ad4 <HAL_GPIO_Init+0x30c>)
 8002958:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800295c:	6453      	str	r3, [r2, #68]	@ 0x44
 800295e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ad4 <HAL_GPIO_Init+0x30c>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800296a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ad8 <HAL_GPIO_Init+0x310>)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	089b      	lsrs	r3, r3, #2
 8002970:	3302      	adds	r3, #2
 8002972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	220f      	movs	r2, #15
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a52      	ldr	r2, [pc, #328]	@ (8002adc <HAL_GPIO_Init+0x314>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d02b      	beq.n	80029ee <HAL_GPIO_Init+0x226>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a51      	ldr	r2, [pc, #324]	@ (8002ae0 <HAL_GPIO_Init+0x318>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d025      	beq.n	80029ea <HAL_GPIO_Init+0x222>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a50      	ldr	r2, [pc, #320]	@ (8002ae4 <HAL_GPIO_Init+0x31c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d01f      	beq.n	80029e6 <HAL_GPIO_Init+0x21e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a4f      	ldr	r2, [pc, #316]	@ (8002ae8 <HAL_GPIO_Init+0x320>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d019      	beq.n	80029e2 <HAL_GPIO_Init+0x21a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a4e      	ldr	r2, [pc, #312]	@ (8002aec <HAL_GPIO_Init+0x324>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d013      	beq.n	80029de <HAL_GPIO_Init+0x216>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a4d      	ldr	r2, [pc, #308]	@ (8002af0 <HAL_GPIO_Init+0x328>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00d      	beq.n	80029da <HAL_GPIO_Init+0x212>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a4c      	ldr	r2, [pc, #304]	@ (8002af4 <HAL_GPIO_Init+0x32c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d007      	beq.n	80029d6 <HAL_GPIO_Init+0x20e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a4b      	ldr	r2, [pc, #300]	@ (8002af8 <HAL_GPIO_Init+0x330>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d101      	bne.n	80029d2 <HAL_GPIO_Init+0x20a>
 80029ce:	2307      	movs	r3, #7
 80029d0:	e00e      	b.n	80029f0 <HAL_GPIO_Init+0x228>
 80029d2:	2308      	movs	r3, #8
 80029d4:	e00c      	b.n	80029f0 <HAL_GPIO_Init+0x228>
 80029d6:	2306      	movs	r3, #6
 80029d8:	e00a      	b.n	80029f0 <HAL_GPIO_Init+0x228>
 80029da:	2305      	movs	r3, #5
 80029dc:	e008      	b.n	80029f0 <HAL_GPIO_Init+0x228>
 80029de:	2304      	movs	r3, #4
 80029e0:	e006      	b.n	80029f0 <HAL_GPIO_Init+0x228>
 80029e2:	2303      	movs	r3, #3
 80029e4:	e004      	b.n	80029f0 <HAL_GPIO_Init+0x228>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e002      	b.n	80029f0 <HAL_GPIO_Init+0x228>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_GPIO_Init+0x228>
 80029ee:	2300      	movs	r3, #0
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	f002 0203 	and.w	r2, r2, #3
 80029f6:	0092      	lsls	r2, r2, #2
 80029f8:	4093      	lsls	r3, r2
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a00:	4935      	ldr	r1, [pc, #212]	@ (8002ad8 <HAL_GPIO_Init+0x310>)
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	3302      	adds	r3, #2
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002afc <HAL_GPIO_Init+0x334>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a32:	4a32      	ldr	r2, [pc, #200]	@ (8002afc <HAL_GPIO_Init+0x334>)
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a38:	4b30      	ldr	r3, [pc, #192]	@ (8002afc <HAL_GPIO_Init+0x334>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a5c:	4a27      	ldr	r2, [pc, #156]	@ (8002afc <HAL_GPIO_Init+0x334>)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a62:	4b26      	ldr	r3, [pc, #152]	@ (8002afc <HAL_GPIO_Init+0x334>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a86:	4a1d      	ldr	r2, [pc, #116]	@ (8002afc <HAL_GPIO_Init+0x334>)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002afc <HAL_GPIO_Init+0x334>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ab0:	4a12      	ldr	r2, [pc, #72]	@ (8002afc <HAL_GPIO_Init+0x334>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	61fb      	str	r3, [r7, #28]
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	2b0f      	cmp	r3, #15
 8002ac0:	f67f ae92 	bls.w	80027e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop
 8002ac8:	3724      	adds	r7, #36	@ 0x24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40013800 	.word	0x40013800
 8002adc:	40020000 	.word	0x40020000
 8002ae0:	40020400 	.word	0x40020400
 8002ae4:	40020800 	.word	0x40020800
 8002ae8:	40020c00 	.word	0x40020c00
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40021400 	.word	0x40021400
 8002af4:	40021800 	.word	0x40021800
 8002af8:	40021c00 	.word	0x40021c00
 8002afc:	40013c00 	.word	0x40013c00

08002b00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	887b      	ldrh	r3, [r7, #2]
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d002      	beq.n	8002b1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
 8002b1c:	e001      	b.n	8002b22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	807b      	strh	r3, [r7, #2]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b40:	787b      	ldrb	r3, [r7, #1]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b46:	887a      	ldrh	r2, [r7, #2]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b4c:	e003      	b.n	8002b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b4e:	887b      	ldrh	r3, [r7, #2]
 8002b50:	041a      	lsls	r2, r3, #16
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	619a      	str	r2, [r3, #24]
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b085      	sub	sp, #20
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b74:	887a      	ldrh	r2, [r7, #2]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	041a      	lsls	r2, r3, #16
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	43d9      	mvns	r1, r3
 8002b80:	887b      	ldrh	r3, [r7, #2]
 8002b82:	400b      	ands	r3, r1
 8002b84:	431a      	orrs	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	619a      	str	r2, [r3, #24]
}
 8002b8a:	bf00      	nop
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e08b      	b.n	8002cc2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fe fb52 	bl	8001268 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2224      	movs	r2, #36	@ 0x24
 8002bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0201 	bic.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002be8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bf8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d107      	bne.n	8002c12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	e006      	b.n	8002c20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002c1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d108      	bne.n	8002c3a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c36:	605a      	str	r2, [r3, #4]
 8002c38:	e007      	b.n	8002c4a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6859      	ldr	r1, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4b1d      	ldr	r3, [pc, #116]	@ (8002ccc <HAL_I2C_Init+0x134>)
 8002c56:	430b      	orrs	r3, r1
 8002c58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69d9      	ldr	r1, [r3, #28]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1a      	ldr	r2, [r3, #32]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0201 	orr.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2220      	movs	r2, #32
 8002cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	02008000 	.word	0x02008000

08002cd0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	68f9      	ldr	r1, [r7, #12]
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	4798      	blx	r3
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00f      	beq.n	8002d46 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d34:	f043 0201 	orr.w	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d44:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00f      	beq.n	8002d70 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5e:	f043 0208 	orr.w	r2, r3, #8
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d6e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00f      	beq.n	8002d9a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d88:	f043 0202 	orr.w	r2, r3, #2
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d98:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 030b 	and.w	r3, r3, #11
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002daa:	68f9      	ldr	r1, [r7, #12]
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 fbd5 	bl	800355c <I2C_ITError>
  }
}
 8002db2:	bf00      	nop
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	460b      	mov	r3, r1
 8002dec:	70fb      	strb	r3, [r7, #3]
 8002dee:	4613      	mov	r3, r2
 8002df0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b086      	sub	sp, #24
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <I2C_Slave_ISR_IT+0x24>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e0e2      	b.n	8003024 <I2C_Slave_ISR_IT+0x1ea>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f003 0320 	and.w	r3, r3, #32
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d009      	beq.n	8002e84 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d004      	beq.n	8002e84 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002e7a:	6939      	ldr	r1, [r7, #16]
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 f9b5 	bl	80031ec <I2C_ITSlaveCplt>
 8002e82:	e0ca      	b.n	800301a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d04b      	beq.n	8002f26 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d046      	beq.n	8002f26 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d128      	bne.n	8002ef4 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b28      	cmp	r3, #40	@ 0x28
 8002eac:	d108      	bne.n	8002ec0 <I2C_Slave_ISR_IT+0x86>
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002eb4:	d104      	bne.n	8002ec0 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002eb6:	6939      	ldr	r1, [r7, #16]
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 fafb 	bl	80034b4 <I2C_ITListenCplt>
 8002ebe:	e031      	b.n	8002f24 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b29      	cmp	r3, #41	@ 0x29
 8002eca:	d10e      	bne.n	8002eea <I2C_Slave_ISR_IT+0xb0>
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ed2:	d00a      	beq.n	8002eea <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2210      	movs	r2, #16
 8002eda:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 fc54 	bl	800378a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f926 	bl	8003134 <I2C_ITSlaveSeqCplt>
 8002ee8:	e01c      	b.n	8002f24 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2210      	movs	r2, #16
 8002ef0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002ef2:	e08f      	b.n	8003014 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2210      	movs	r2, #16
 8002efa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f00:	f043 0204 	orr.w	r2, r3, #4
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <I2C_Slave_ISR_IT+0xdc>
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f14:	d17e      	bne.n	8003014 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 fb1d 	bl	800355c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002f22:	e077      	b.n	8003014 <I2C_Slave_ISR_IT+0x1da>
 8002f24:	e076      	b.n	8003014 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d02f      	beq.n	8002f90 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d02a      	beq.n	8002f90 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d018      	beq.n	8002f76 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f56:	1c5a      	adds	r2, r3, #1
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d14b      	bne.n	8003018 <I2C_Slave_ISR_IT+0x1de>
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f86:	d047      	beq.n	8003018 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 f8d3 	bl	8003134 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002f8e:	e043      	b.n	8003018 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d009      	beq.n	8002fae <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d004      	beq.n	8002fae <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002fa4:	6939      	ldr	r1, [r7, #16]
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f840 	bl	800302c <I2C_ITAddrCplt>
 8002fac:	e035      	b.n	800301a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d030      	beq.n	800301a <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d02b      	beq.n	800301a <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d018      	beq.n	8002ffe <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	781a      	ldrb	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002ffc:	e00d      	b.n	800301a <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003004:	d002      	beq.n	800300c <I2C_Slave_ISR_IT+0x1d2>
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d106      	bne.n	800301a <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f891 	bl	8003134 <I2C_ITSlaveSeqCplt>
 8003012:	e002      	b.n	800301a <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003014:	bf00      	nop
 8003016:	e000      	b.n	800301a <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8003018:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003042:	2b28      	cmp	r3, #40	@ 0x28
 8003044:	d16a      	bne.n	800311c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	0c1b      	lsrs	r3, r3, #16
 800304e:	b2db      	uxtb	r3, r3
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	0c1b      	lsrs	r3, r3, #16
 800305e:	b29b      	uxth	r3, r3
 8003060:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003064:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	b29b      	uxth	r3, r3
 800306e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003072:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	b29b      	uxth	r3, r3
 800307c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003080:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d138      	bne.n	80030fc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800308a:	897b      	ldrh	r3, [r7, #10]
 800308c:	09db      	lsrs	r3, r3, #7
 800308e:	b29a      	uxth	r2, r3
 8003090:	89bb      	ldrh	r3, [r7, #12]
 8003092:	4053      	eors	r3, r2
 8003094:	b29b      	uxth	r3, r3
 8003096:	f003 0306 	and.w	r3, r3, #6
 800309a:	2b00      	cmp	r3, #0
 800309c:	d11c      	bne.n	80030d8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800309e:	897b      	ldrh	r3, [r7, #10]
 80030a0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d13b      	bne.n	800312c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2208      	movs	r2, #8
 80030c0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80030ca:	89ba      	ldrh	r2, [r7, #12]
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	4619      	mov	r1, r3
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff fe86 	bl	8002de2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80030d6:	e029      	b.n	800312c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80030d8:	893b      	ldrh	r3, [r7, #8]
 80030da:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80030dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 fb94 	bl	800380e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80030ee:	89ba      	ldrh	r2, [r7, #12]
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	4619      	mov	r1, r3
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff fe74 	bl	8002de2 <HAL_I2C_AddrCallback>
}
 80030fa:	e017      	b.n	800312c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80030fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 fb84 	bl	800380e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800310e:	89ba      	ldrh	r2, [r7, #12]
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	4619      	mov	r1, r3
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff fe64 	bl	8002de2 <HAL_I2C_AddrCallback>
}
 800311a:	e007      	b.n	800312c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2208      	movs	r2, #8
 8003122:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800312c:	bf00      	nop
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d008      	beq.n	8003168 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	e00c      	b.n	8003182 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003180:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b29      	cmp	r3, #41	@ 0x29
 800318c:	d112      	bne.n	80031b4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2228      	movs	r2, #40	@ 0x28
 8003192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2221      	movs	r2, #33	@ 0x21
 800319a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800319c:	2101      	movs	r1, #1
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 fb35 	bl	800380e <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff fe04 	bl	8002dba <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80031b2:	e017      	b.n	80031e4 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80031be:	d111      	bne.n	80031e4 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2228      	movs	r2, #40	@ 0x28
 80031c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2222      	movs	r2, #34	@ 0x22
 80031cc:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80031ce:	2102      	movs	r1, #2
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 fb1c 	bl	800380e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7ff fdf5 	bl	8002dce <HAL_I2C_SlaveRxCpltCallback>
}
 80031e4:	bf00      	nop
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003206:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800320e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2220      	movs	r2, #32
 8003216:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003218:	7afb      	ldrb	r3, [r7, #11]
 800321a:	2b21      	cmp	r3, #33	@ 0x21
 800321c:	d002      	beq.n	8003224 <I2C_ITSlaveCplt+0x38>
 800321e:	7afb      	ldrb	r3, [r7, #11]
 8003220:	2b29      	cmp	r3, #41	@ 0x29
 8003222:	d108      	bne.n	8003236 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003224:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 faf0 	bl	800380e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2221      	movs	r2, #33	@ 0x21
 8003232:	631a      	str	r2, [r3, #48]	@ 0x30
 8003234:	e019      	b.n	800326a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003236:	7afb      	ldrb	r3, [r7, #11]
 8003238:	2b22      	cmp	r3, #34	@ 0x22
 800323a:	d002      	beq.n	8003242 <I2C_ITSlaveCplt+0x56>
 800323c:	7afb      	ldrb	r3, [r7, #11]
 800323e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003240:	d108      	bne.n	8003254 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003242:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fae1 	bl	800380e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2222      	movs	r2, #34	@ 0x22
 8003250:	631a      	str	r2, [r3, #48]	@ 0x30
 8003252:	e00a      	b.n	800326a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003254:	7afb      	ldrb	r3, [r7, #11]
 8003256:	2b28      	cmp	r3, #40	@ 0x28
 8003258:	d107      	bne.n	800326a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800325a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fad5 	bl	800380e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003278:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6859      	ldr	r1, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4b89      	ldr	r3, [pc, #548]	@ (80034ac <I2C_ITSlaveCplt+0x2c0>)
 8003286:	400b      	ands	r3, r1
 8003288:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fa7d 	bl	800378a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d013      	beq.n	80032c2 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032a8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d01f      	beq.n	80032f2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032c0:	e017      	b.n	80032f2 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d012      	beq.n	80032f2 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032da:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d006      	beq.n	80032f2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d020      	beq.n	800333e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f023 0304 	bic.w	r3, r3, #4
 8003302:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00c      	beq.n	800333e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003334:	b29b      	uxth	r3, r3
 8003336:	3b01      	subs	r3, #1
 8003338:	b29a      	uxth	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003342:	b29b      	uxth	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334c:	f043 0204 	orr.w	r2, r3, #4
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	2b00      	cmp	r3, #0
 800335c:	d049      	beq.n	80033f2 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003364:	2b00      	cmp	r3, #0
 8003366:	d044      	beq.n	80033f2 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d128      	bne.n	80033c4 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b28      	cmp	r3, #40	@ 0x28
 800337c:	d108      	bne.n	8003390 <I2C_ITSlaveCplt+0x1a4>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003384:	d104      	bne.n	8003390 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003386:	6979      	ldr	r1, [r7, #20]
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f893 	bl	80034b4 <I2C_ITListenCplt>
 800338e:	e030      	b.n	80033f2 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b29      	cmp	r3, #41	@ 0x29
 800339a:	d10e      	bne.n	80033ba <I2C_ITSlaveCplt+0x1ce>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033a2:	d00a      	beq.n	80033ba <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2210      	movs	r2, #16
 80033aa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f9ec 	bl	800378a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff febe 	bl	8003134 <I2C_ITSlaveSeqCplt>
 80033b8:	e01b      	b.n	80033f2 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2210      	movs	r2, #16
 80033c0:	61da      	str	r2, [r3, #28]
 80033c2:	e016      	b.n	80033f2 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2210      	movs	r2, #16
 80033ca:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d0:	f043 0204 	orr.w	r2, r3, #4
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <I2C_ITSlaveCplt+0x1fa>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033e4:	d105      	bne.n	80033f2 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ea:	4619      	mov	r1, r3
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f8b5 	bl	800355c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003404:	2b00      	cmp	r3, #0
 8003406:	d010      	beq.n	800342a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340c:	4619      	mov	r1, r3
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f8a4 	bl	800355c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b28      	cmp	r3, #40	@ 0x28
 800341e:	d141      	bne.n	80034a4 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003420:	6979      	ldr	r1, [r7, #20]
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f846 	bl	80034b4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003428:	e03c      	b.n	80034a4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003432:	d014      	beq.n	800345e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff fe7d 	bl	8003134 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a1c      	ldr	r2, [pc, #112]	@ (80034b0 <I2C_ITSlaveCplt+0x2c4>)
 800343e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff fcd1 	bl	8002dfe <HAL_I2C_ListenCpltCallback>
}
 800345c:	e022      	b.n	80034a4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b22      	cmp	r3, #34	@ 0x22
 8003468:	d10e      	bne.n	8003488 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2220      	movs	r2, #32
 800346e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff fca4 	bl	8002dce <HAL_I2C_SlaveRxCpltCallback>
}
 8003486:	e00d      	b.n	80034a4 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff fc8b 	bl	8002dba <HAL_I2C_SlaveTxCpltCallback>
}
 80034a4:	bf00      	nop
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	fe00e800 	.word	0xfe00e800
 80034b0:	ffff0000 	.word	0xffff0000

080034b4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a25      	ldr	r2, [pc, #148]	@ (8003558 <I2C_ITListenCplt+0xa4>)
 80034c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d022      	beq.n	8003530 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003506:	2b00      	cmp	r3, #0
 8003508:	d012      	beq.n	8003530 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003528:	f043 0204 	orr.w	r2, r3, #4
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003530:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f96a 	bl	800380e <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2210      	movs	r2, #16
 8003540:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff fc57 	bl	8002dfe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	ffff0000 	.word	0xffff0000

0800355c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800356c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a6d      	ldr	r2, [pc, #436]	@ (8003730 <I2C_ITError+0x1d4>)
 800357a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800358e:	7bfb      	ldrb	r3, [r7, #15]
 8003590:	2b28      	cmp	r3, #40	@ 0x28
 8003592:	d005      	beq.n	80035a0 <I2C_ITError+0x44>
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	2b29      	cmp	r3, #41	@ 0x29
 8003598:	d002      	beq.n	80035a0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	2b2a      	cmp	r3, #42	@ 0x2a
 800359e:	d10b      	bne.n	80035b8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80035a0:	2103      	movs	r1, #3
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f933 	bl	800380e <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2228      	movs	r2, #40	@ 0x28
 80035ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a60      	ldr	r2, [pc, #384]	@ (8003734 <I2C_ITError+0x1d8>)
 80035b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80035b6:	e030      	b.n	800361a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80035b8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f926 	bl	800380e <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f8e1 	bl	800378a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b60      	cmp	r3, #96	@ 0x60
 80035d2:	d01f      	beq.n	8003614 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d114      	bne.n	8003614 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b10      	cmp	r3, #16
 80035f6:	d109      	bne.n	800360c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2210      	movs	r2, #16
 80035fe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003604:	f043 0204 	orr.w	r2, r3, #4
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2220      	movs	r2, #32
 8003612:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003624:	2b00      	cmp	r3, #0
 8003626:	d039      	beq.n	800369c <I2C_ITError+0x140>
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b11      	cmp	r3, #17
 800362c:	d002      	beq.n	8003634 <I2C_ITError+0xd8>
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b21      	cmp	r3, #33	@ 0x21
 8003632:	d133      	bne.n	800369c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800363e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003642:	d107      	bne.n	8003654 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003652:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003658:	4618      	mov	r0, r3
 800365a:	f7fe fff5 	bl	8002648 <HAL_DMA_GetState>
 800365e:	4603      	mov	r3, r0
 8003660:	2b01      	cmp	r3, #1
 8003662:	d017      	beq.n	8003694 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003668:	4a33      	ldr	r2, [pc, #204]	@ (8003738 <I2C_ITError+0x1dc>)
 800366a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003678:	4618      	mov	r0, r3
 800367a:	f7fe fe39 	bl	80022f0 <HAL_DMA_Abort_IT>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d04d      	beq.n	8003720 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800368e:	4610      	mov	r0, r2
 8003690:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003692:	e045      	b.n	8003720 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f851 	bl	800373c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800369a:	e041      	b.n	8003720 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d039      	beq.n	8003718 <I2C_ITError+0x1bc>
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b12      	cmp	r3, #18
 80036a8:	d002      	beq.n	80036b0 <I2C_ITError+0x154>
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	2b22      	cmp	r3, #34	@ 0x22
 80036ae:	d133      	bne.n	8003718 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036be:	d107      	bne.n	80036d0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036ce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fe ffb7 	bl	8002648 <HAL_DMA_GetState>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d017      	beq.n	8003710 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e4:	4a14      	ldr	r2, [pc, #80]	@ (8003738 <I2C_ITError+0x1dc>)
 80036e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fe fdfb 	bl	80022f0 <HAL_DMA_Abort_IT>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d011      	beq.n	8003724 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800370a:	4610      	mov	r0, r2
 800370c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800370e:	e009      	b.n	8003724 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f813 	bl	800373c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003716:	e005      	b.n	8003724 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f80f 	bl	800373c <I2C_TreatErrorCallback>
  }
}
 800371e:	e002      	b.n	8003726 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003720:	bf00      	nop
 8003722:	e000      	b.n	8003726 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003724:	bf00      	nop
}
 8003726:	bf00      	nop
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	ffff0000 	.word	0xffff0000
 8003734:	08002e3b 	.word	0x08002e3b
 8003738:	080037d3 	.word	0x080037d3

0800373c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b60      	cmp	r3, #96	@ 0x60
 800374e:	d10e      	bne.n	800376e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff fb5d 	bl	8002e26 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800376c:	e009      	b.n	8003782 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff fb48 	bl	8002e12 <HAL_I2C_ErrorCallback>
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b02      	cmp	r3, #2
 800379e:	d103      	bne.n	80037a8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2200      	movs	r2, #0
 80037a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d007      	beq.n	80037c6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699a      	ldr	r2, [r3, #24]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0201 	orr.w	r2, r2, #1
 80037c4:	619a      	str	r2, [r3, #24]
  }
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037de:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ec:	2200      	movs	r2, #0
 80037ee:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037fc:	2200      	movs	r2, #0
 80037fe:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f7ff ff9b 	bl	800373c <I2C_TreatErrorCallback>
}
 8003806:	bf00      	nop
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800380e:	b480      	push	{r7}
 8003810:	b085      	sub	sp, #20
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	460b      	mov	r3, r1
 8003818:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800381e:	887b      	ldrh	r3, [r7, #2]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00f      	beq.n	8003848 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800382e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003836:	b2db      	uxtb	r3, r3
 8003838:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800383c:	2b28      	cmp	r3, #40	@ 0x28
 800383e:	d003      	beq.n	8003848 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003846:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003848:	887b      	ldrh	r3, [r7, #2]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00f      	beq.n	8003872 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003858:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003860:	b2db      	uxtb	r3, r3
 8003862:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003866:	2b28      	cmp	r3, #40	@ 0x28
 8003868:	d003      	beq.n	8003872 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003870:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003872:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003876:	2b00      	cmp	r3, #0
 8003878:	da03      	bge.n	8003882 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003880:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003882:	887b      	ldrh	r3, [r7, #2]
 8003884:	2b10      	cmp	r3, #16
 8003886:	d103      	bne.n	8003890 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800388e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003890:	887b      	ldrh	r3, [r7, #2]
 8003892:	2b20      	cmp	r3, #32
 8003894:	d103      	bne.n	800389e <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f043 0320 	orr.w	r3, r3, #32
 800389c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800389e:	887b      	ldrh	r3, [r7, #2]
 80038a0:	2b40      	cmp	r3, #64	@ 0x40
 80038a2:	d103      	bne.n	80038ac <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038aa:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6819      	ldr	r1, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	43da      	mvns	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	400a      	ands	r2, r1
 80038bc:	601a      	str	r2, [r3, #0]
}
 80038be:	bf00      	nop
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b20      	cmp	r3, #32
 80038de:	d138      	bne.n	8003952 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e032      	b.n	8003954 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2224      	movs	r2, #36	@ 0x24
 80038fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0201 	bic.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800391c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6819      	ldr	r1, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f042 0201 	orr.w	r2, r2, #1
 800393c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	e000      	b.n	8003954 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003952:	2302      	movs	r3, #2
  }
}
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b20      	cmp	r3, #32
 8003974:	d139      	bne.n	80039ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003980:	2302      	movs	r3, #2
 8003982:	e033      	b.n	80039ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2224      	movs	r2, #36	@ 0x24
 8003990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0201 	bic.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f042 0201 	orr.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e000      	b.n	80039ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039ea:	2302      	movs	r3, #2
  }
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a00:	2300      	movs	r3, #0
 8003a02:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e291      	b.n	8003f32 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 8087 	beq.w	8003b2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a1c:	4b96      	ldr	r3, [pc, #600]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 030c 	and.w	r3, r3, #12
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d00c      	beq.n	8003a42 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a28:	4b93      	ldr	r3, [pc, #588]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 030c 	and.w	r3, r3, #12
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d112      	bne.n	8003a5a <HAL_RCC_OscConfig+0x62>
 8003a34:	4b90      	ldr	r3, [pc, #576]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a40:	d10b      	bne.n	8003a5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a42:	4b8d      	ldr	r3, [pc, #564]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d06c      	beq.n	8003b28 <HAL_RCC_OscConfig+0x130>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d168      	bne.n	8003b28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e26b      	b.n	8003f32 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a62:	d106      	bne.n	8003a72 <HAL_RCC_OscConfig+0x7a>
 8003a64:	4b84      	ldr	r3, [pc, #528]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a83      	ldr	r2, [pc, #524]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003a6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	e02e      	b.n	8003ad0 <HAL_RCC_OscConfig+0xd8>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10c      	bne.n	8003a94 <HAL_RCC_OscConfig+0x9c>
 8003a7a:	4b7f      	ldr	r3, [pc, #508]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a7e      	ldr	r2, [pc, #504]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003a80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	4b7c      	ldr	r3, [pc, #496]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a7b      	ldr	r2, [pc, #492]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003a8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	e01d      	b.n	8003ad0 <HAL_RCC_OscConfig+0xd8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_RCC_OscConfig+0xc0>
 8003a9e:	4b76      	ldr	r3, [pc, #472]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a75      	ldr	r2, [pc, #468]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003aa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	4b73      	ldr	r3, [pc, #460]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a72      	ldr	r2, [pc, #456]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	e00b      	b.n	8003ad0 <HAL_RCC_OscConfig+0xd8>
 8003ab8:	4b6f      	ldr	r3, [pc, #444]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a6e      	ldr	r2, [pc, #440]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	4b6c      	ldr	r3, [pc, #432]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a6b      	ldr	r2, [pc, #428]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003aca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d013      	beq.n	8003b00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad8:	f7fd fe36 	bl	8001748 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae0:	f7fd fe32 	bl	8001748 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b64      	cmp	r3, #100	@ 0x64
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e21f      	b.n	8003f32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af2:	4b61      	ldr	r3, [pc, #388]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0f0      	beq.n	8003ae0 <HAL_RCC_OscConfig+0xe8>
 8003afe:	e014      	b.n	8003b2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b00:	f7fd fe22 	bl	8001748 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b08:	f7fd fe1e 	bl	8001748 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b64      	cmp	r3, #100	@ 0x64
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e20b      	b.n	8003f32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b1a:	4b57      	ldr	r3, [pc, #348]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCC_OscConfig+0x110>
 8003b26:	e000      	b.n	8003b2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d069      	beq.n	8003c0a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b36:	4b50      	ldr	r3, [pc, #320]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 030c 	and.w	r3, r3, #12
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00b      	beq.n	8003b5a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b42:	4b4d      	ldr	r3, [pc, #308]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d11c      	bne.n	8003b88 <HAL_RCC_OscConfig+0x190>
 8003b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d116      	bne.n	8003b88 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b5a:	4b47      	ldr	r3, [pc, #284]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d005      	beq.n	8003b72 <HAL_RCC_OscConfig+0x17a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d001      	beq.n	8003b72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e1df      	b.n	8003f32 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b72:	4b41      	ldr	r3, [pc, #260]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	493d      	ldr	r1, [pc, #244]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b86:	e040      	b.n	8003c0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d023      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b90:	4b39      	ldr	r3, [pc, #228]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a38      	ldr	r2, [pc, #224]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9c:	f7fd fdd4 	bl	8001748 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba4:	f7fd fdd0 	bl	8001748 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e1bd      	b.n	8003f32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb6:	4b30      	ldr	r3, [pc, #192]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4929      	ldr	r1, [pc, #164]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	600b      	str	r3, [r1, #0]
 8003bd6:	e018      	b.n	8003c0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bd8:	4b27      	ldr	r3, [pc, #156]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a26      	ldr	r2, [pc, #152]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003bde:	f023 0301 	bic.w	r3, r3, #1
 8003be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7fd fdb0 	bl	8001748 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bec:	f7fd fdac 	bl	8001748 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e199      	b.n	8003f32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d038      	beq.n	8003c88 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d019      	beq.n	8003c52 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c1e:	4b16      	ldr	r3, [pc, #88]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003c20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c22:	4a15      	ldr	r2, [pc, #84]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003c24:	f043 0301 	orr.w	r3, r3, #1
 8003c28:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2a:	f7fd fd8d 	bl	8001748 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c32:	f7fd fd89 	bl	8001748 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e176      	b.n	8003f32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c44:	4b0c      	ldr	r3, [pc, #48]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003c46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x23a>
 8003c50:	e01a      	b.n	8003c88 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c52:	4b09      	ldr	r3, [pc, #36]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003c54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c56:	4a08      	ldr	r2, [pc, #32]	@ (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003c58:	f023 0301 	bic.w	r3, r3, #1
 8003c5c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5e:	f7fd fd73 	bl	8001748 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c64:	e00a      	b.n	8003c7c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c66:	f7fd fd6f 	bl	8001748 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d903      	bls.n	8003c7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e15c      	b.n	8003f32 <HAL_RCC_OscConfig+0x53a>
 8003c78:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c7c:	4b91      	ldr	r3, [pc, #580]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003c7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1ee      	bne.n	8003c66 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 80a4 	beq.w	8003dde <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c96:	4b8b      	ldr	r3, [pc, #556]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10d      	bne.n	8003cbe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca2:	4b88      	ldr	r3, [pc, #544]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca6:	4a87      	ldr	r2, [pc, #540]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cae:	4b85      	ldr	r3, [pc, #532]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cbe:	4b82      	ldr	r3, [pc, #520]	@ (8003ec8 <HAL_RCC_OscConfig+0x4d0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d118      	bne.n	8003cfc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003cca:	4b7f      	ldr	r3, [pc, #508]	@ (8003ec8 <HAL_RCC_OscConfig+0x4d0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a7e      	ldr	r2, [pc, #504]	@ (8003ec8 <HAL_RCC_OscConfig+0x4d0>)
 8003cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd6:	f7fd fd37 	bl	8001748 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cde:	f7fd fd33 	bl	8001748 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b64      	cmp	r3, #100	@ 0x64
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e120      	b.n	8003f32 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cf0:	4b75      	ldr	r3, [pc, #468]	@ (8003ec8 <HAL_RCC_OscConfig+0x4d0>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0f0      	beq.n	8003cde <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d106      	bne.n	8003d12 <HAL_RCC_OscConfig+0x31a>
 8003d04:	4b6f      	ldr	r3, [pc, #444]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d08:	4a6e      	ldr	r2, [pc, #440]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d10:	e02d      	b.n	8003d6e <HAL_RCC_OscConfig+0x376>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10c      	bne.n	8003d34 <HAL_RCC_OscConfig+0x33c>
 8003d1a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1e:	4a69      	ldr	r2, [pc, #420]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d26:	4b67      	ldr	r3, [pc, #412]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2a:	4a66      	ldr	r2, [pc, #408]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003d2c:	f023 0304 	bic.w	r3, r3, #4
 8003d30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d32:	e01c      	b.n	8003d6e <HAL_RCC_OscConfig+0x376>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2b05      	cmp	r3, #5
 8003d3a:	d10c      	bne.n	8003d56 <HAL_RCC_OscConfig+0x35e>
 8003d3c:	4b61      	ldr	r3, [pc, #388]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d40:	4a60      	ldr	r2, [pc, #384]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003d42:	f043 0304 	orr.w	r3, r3, #4
 8003d46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d48:	4b5e      	ldr	r3, [pc, #376]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003d4e:	f043 0301 	orr.w	r3, r3, #1
 8003d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d54:	e00b      	b.n	8003d6e <HAL_RCC_OscConfig+0x376>
 8003d56:	4b5b      	ldr	r3, [pc, #364]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5a:	4a5a      	ldr	r2, [pc, #360]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003d5c:	f023 0301 	bic.w	r3, r3, #1
 8003d60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d62:	4b58      	ldr	r3, [pc, #352]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d66:	4a57      	ldr	r2, [pc, #348]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003d68:	f023 0304 	bic.w	r3, r3, #4
 8003d6c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d015      	beq.n	8003da2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d76:	f7fd fce7 	bl	8001748 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d7c:	e00a      	b.n	8003d94 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7e:	f7fd fce3 	bl	8001748 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e0ce      	b.n	8003f32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d94:	4b4b      	ldr	r3, [pc, #300]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0ee      	beq.n	8003d7e <HAL_RCC_OscConfig+0x386>
 8003da0:	e014      	b.n	8003dcc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da2:	f7fd fcd1 	bl	8001748 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da8:	e00a      	b.n	8003dc0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003daa:	f7fd fccd 	bl	8001748 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e0b8      	b.n	8003f32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc0:	4b40      	ldr	r3, [pc, #256]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1ee      	bne.n	8003daa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dcc:	7dfb      	ldrb	r3, [r7, #23]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d105      	bne.n	8003dde <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd2:	4b3c      	ldr	r3, [pc, #240]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	4a3b      	ldr	r2, [pc, #236]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003dd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ddc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 80a4 	beq.w	8003f30 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003de8:	4b36      	ldr	r3, [pc, #216]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 030c 	and.w	r3, r3, #12
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d06b      	beq.n	8003ecc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d149      	bne.n	8003e90 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dfc:	4b31      	ldr	r3, [pc, #196]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a30      	ldr	r2, [pc, #192]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003e02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e08:	f7fd fc9e 	bl	8001748 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e10:	f7fd fc9a 	bl	8001748 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e087      	b.n	8003f32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e22:	4b28      	ldr	r3, [pc, #160]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f0      	bne.n	8003e10 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69da      	ldr	r2, [r3, #28]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3c:	019b      	lsls	r3, r3, #6
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e44:	085b      	lsrs	r3, r3, #1
 8003e46:	3b01      	subs	r3, #1
 8003e48:	041b      	lsls	r3, r3, #16
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e50:	061b      	lsls	r3, r3, #24
 8003e52:	4313      	orrs	r3, r2
 8003e54:	4a1b      	ldr	r2, [pc, #108]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003e56:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003e5a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e5c:	4b19      	ldr	r3, [pc, #100]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a18      	ldr	r2, [pc, #96]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003e62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e68:	f7fd fc6e 	bl	8001748 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e70:	f7fd fc6a 	bl	8001748 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e057      	b.n	8003f32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e82:	4b10      	ldr	r3, [pc, #64]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0x478>
 8003e8e:	e04f      	b.n	8003f30 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e90:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a0b      	ldr	r2, [pc, #44]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003e96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9c:	f7fd fc54 	bl	8001748 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea4:	f7fd fc50 	bl	8001748 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e03d      	b.n	8003f32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb6:	4b03      	ldr	r3, [pc, #12]	@ (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1f0      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x4ac>
 8003ec2:	e035      	b.n	8003f30 <HAL_RCC_OscConfig+0x538>
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f3c <HAL_RCC_OscConfig+0x544>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d028      	beq.n	8003f2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d121      	bne.n	8003f2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d11a      	bne.n	8003f2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003efc:	4013      	ands	r3, r2
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f02:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d111      	bne.n	8003f2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f12:	085b      	lsrs	r3, r3, #1
 8003f14:	3b01      	subs	r3, #1
 8003f16:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d107      	bne.n	8003f2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f26:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e000      	b.n	8003f32 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40023800 	.word	0x40023800

08003f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0d0      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f58:	4b6a      	ldr	r3, [pc, #424]	@ (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d910      	bls.n	8003f88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f66:	4b67      	ldr	r3, [pc, #412]	@ (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f023 020f 	bic.w	r2, r3, #15
 8003f6e:	4965      	ldr	r1, [pc, #404]	@ (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f76:	4b63      	ldr	r3, [pc, #396]	@ (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d001      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e0b8      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d020      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fa0:	4b59      	ldr	r3, [pc, #356]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	4a58      	ldr	r2, [pc, #352]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003faa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fb8:	4b53      	ldr	r3, [pc, #332]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	4a52      	ldr	r2, [pc, #328]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8003fbe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc4:	4b50      	ldr	r3, [pc, #320]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	494d      	ldr	r1, [pc, #308]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d040      	beq.n	8004064 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d107      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fea:	4b47      	ldr	r3, [pc, #284]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d115      	bne.n	8004022 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e07f      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d107      	bne.n	8004012 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004002:	4b41      	ldr	r3, [pc, #260]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d109      	bne.n	8004022 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e073      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004012:	4b3d      	ldr	r3, [pc, #244]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e06b      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004022:	4b39      	ldr	r3, [pc, #228]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f023 0203 	bic.w	r2, r3, #3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	4936      	ldr	r1, [pc, #216]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8004030:	4313      	orrs	r3, r2
 8004032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004034:	f7fd fb88 	bl	8001748 <HAL_GetTick>
 8004038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403a:	e00a      	b.n	8004052 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800403c:	f7fd fb84 	bl	8001748 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800404a:	4293      	cmp	r3, r2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e053      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004052:	4b2d      	ldr	r3, [pc, #180]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 020c 	and.w	r2, r3, #12
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	429a      	cmp	r2, r3
 8004062:	d1eb      	bne.n	800403c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004064:	4b27      	ldr	r3, [pc, #156]	@ (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d210      	bcs.n	8004094 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004072:	4b24      	ldr	r3, [pc, #144]	@ (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f023 020f 	bic.w	r2, r3, #15
 800407a:	4922      	ldr	r1, [pc, #136]	@ (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	4313      	orrs	r3, r2
 8004080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004082:	4b20      	ldr	r3, [pc, #128]	@ (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d001      	beq.n	8004094 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e032      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040a0:	4b19      	ldr	r3, [pc, #100]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	4916      	ldr	r1, [pc, #88]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d009      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040be:	4b12      	ldr	r3, [pc, #72]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	490e      	ldr	r1, [pc, #56]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040d2:	f000 f821 	bl	8004118 <HAL_RCC_GetSysClockFreq>
 80040d6:	4602      	mov	r2, r0
 80040d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	091b      	lsrs	r3, r3, #4
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	490a      	ldr	r1, [pc, #40]	@ (800410c <HAL_RCC_ClockConfig+0x1cc>)
 80040e4:	5ccb      	ldrb	r3, [r1, r3]
 80040e6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ea:	4a09      	ldr	r2, [pc, #36]	@ (8004110 <HAL_RCC_ClockConfig+0x1d0>)
 80040ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040ee:	4b09      	ldr	r3, [pc, #36]	@ (8004114 <HAL_RCC_ClockConfig+0x1d4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fd fae4 	bl	80016c0 <HAL_InitTick>

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40023c00 	.word	0x40023c00
 8004108:	40023800 	.word	0x40023800
 800410c:	08005880 	.word	0x08005880
 8004110:	20000014 	.word	0x20000014
 8004114:	20000018 	.word	0x20000018

08004118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800411c:	b090      	sub	sp, #64	@ 0x40
 800411e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004120:	2300      	movs	r3, #0
 8004122:	637b      	str	r3, [r7, #52]	@ 0x34
 8004124:	2300      	movs	r3, #0
 8004126:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004128:	2300      	movs	r3, #0
 800412a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800412c:	2300      	movs	r3, #0
 800412e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004130:	4b59      	ldr	r3, [pc, #356]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x180>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 030c 	and.w	r3, r3, #12
 8004138:	2b08      	cmp	r3, #8
 800413a:	d00d      	beq.n	8004158 <HAL_RCC_GetSysClockFreq+0x40>
 800413c:	2b08      	cmp	r3, #8
 800413e:	f200 80a1 	bhi.w	8004284 <HAL_RCC_GetSysClockFreq+0x16c>
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <HAL_RCC_GetSysClockFreq+0x34>
 8004146:	2b04      	cmp	r3, #4
 8004148:	d003      	beq.n	8004152 <HAL_RCC_GetSysClockFreq+0x3a>
 800414a:	e09b      	b.n	8004284 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800414c:	4b53      	ldr	r3, [pc, #332]	@ (800429c <HAL_RCC_GetSysClockFreq+0x184>)
 800414e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004150:	e09b      	b.n	800428a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004152:	4b53      	ldr	r3, [pc, #332]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004154:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004156:	e098      	b.n	800428a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004158:	4b4f      	ldr	r3, [pc, #316]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x180>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004160:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004162:	4b4d      	ldr	r3, [pc, #308]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x180>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d028      	beq.n	80041c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800416e:	4b4a      	ldr	r3, [pc, #296]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x180>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	099b      	lsrs	r3, r3, #6
 8004174:	2200      	movs	r2, #0
 8004176:	623b      	str	r3, [r7, #32]
 8004178:	627a      	str	r2, [r7, #36]	@ 0x24
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004180:	2100      	movs	r1, #0
 8004182:	4b47      	ldr	r3, [pc, #284]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004184:	fb03 f201 	mul.w	r2, r3, r1
 8004188:	2300      	movs	r3, #0
 800418a:	fb00 f303 	mul.w	r3, r0, r3
 800418e:	4413      	add	r3, r2
 8004190:	4a43      	ldr	r2, [pc, #268]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004192:	fba0 1202 	umull	r1, r2, r0, r2
 8004196:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004198:	460a      	mov	r2, r1
 800419a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800419c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800419e:	4413      	add	r3, r2
 80041a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a4:	2200      	movs	r2, #0
 80041a6:	61bb      	str	r3, [r7, #24]
 80041a8:	61fa      	str	r2, [r7, #28]
 80041aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80041b2:	f7fc f847 	bl	8000244 <__aeabi_uldivmod>
 80041b6:	4602      	mov	r2, r0
 80041b8:	460b      	mov	r3, r1
 80041ba:	4613      	mov	r3, r2
 80041bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041be:	e053      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c0:	4b35      	ldr	r3, [pc, #212]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x180>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	099b      	lsrs	r3, r3, #6
 80041c6:	2200      	movs	r2, #0
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	617a      	str	r2, [r7, #20]
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041d2:	f04f 0b00 	mov.w	fp, #0
 80041d6:	4652      	mov	r2, sl
 80041d8:	465b      	mov	r3, fp
 80041da:	f04f 0000 	mov.w	r0, #0
 80041de:	f04f 0100 	mov.w	r1, #0
 80041e2:	0159      	lsls	r1, r3, #5
 80041e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041e8:	0150      	lsls	r0, r2, #5
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	ebb2 080a 	subs.w	r8, r2, sl
 80041f2:	eb63 090b 	sbc.w	r9, r3, fp
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	f04f 0300 	mov.w	r3, #0
 80041fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004202:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004206:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800420a:	ebb2 0408 	subs.w	r4, r2, r8
 800420e:	eb63 0509 	sbc.w	r5, r3, r9
 8004212:	f04f 0200 	mov.w	r2, #0
 8004216:	f04f 0300 	mov.w	r3, #0
 800421a:	00eb      	lsls	r3, r5, #3
 800421c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004220:	00e2      	lsls	r2, r4, #3
 8004222:	4614      	mov	r4, r2
 8004224:	461d      	mov	r5, r3
 8004226:	eb14 030a 	adds.w	r3, r4, sl
 800422a:	603b      	str	r3, [r7, #0]
 800422c:	eb45 030b 	adc.w	r3, r5, fp
 8004230:	607b      	str	r3, [r7, #4]
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800423e:	4629      	mov	r1, r5
 8004240:	028b      	lsls	r3, r1, #10
 8004242:	4621      	mov	r1, r4
 8004244:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004248:	4621      	mov	r1, r4
 800424a:	028a      	lsls	r2, r1, #10
 800424c:	4610      	mov	r0, r2
 800424e:	4619      	mov	r1, r3
 8004250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004252:	2200      	movs	r2, #0
 8004254:	60bb      	str	r3, [r7, #8]
 8004256:	60fa      	str	r2, [r7, #12]
 8004258:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800425c:	f7fb fff2 	bl	8000244 <__aeabi_uldivmod>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4613      	mov	r3, r2
 8004266:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004268:	4b0b      	ldr	r3, [pc, #44]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x180>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	0c1b      	lsrs	r3, r3, #16
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	3301      	adds	r3, #1
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004278:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800427a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004280:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004282:	e002      	b.n	800428a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004284:	4b05      	ldr	r3, [pc, #20]	@ (800429c <HAL_RCC_GetSysClockFreq+0x184>)
 8004286:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004288:	bf00      	nop
    }
  }
  return sysclockfreq;
 800428a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800428c:	4618      	mov	r0, r3
 800428e:	3740      	adds	r7, #64	@ 0x40
 8004290:	46bd      	mov	sp, r7
 8004292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004296:	bf00      	nop
 8004298:	40023800 	.word	0x40023800
 800429c:	00f42400 	.word	0x00f42400
 80042a0:	017d7840 	.word	0x017d7840

080042a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042a8:	4b03      	ldr	r3, [pc, #12]	@ (80042b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042aa:	681b      	ldr	r3, [r3, #0]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	20000014 	.word	0x20000014

080042bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042c0:	f7ff fff0 	bl	80042a4 <HAL_RCC_GetHCLKFreq>
 80042c4:	4602      	mov	r2, r0
 80042c6:	4b05      	ldr	r3, [pc, #20]	@ (80042dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	0a9b      	lsrs	r3, r3, #10
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	4903      	ldr	r1, [pc, #12]	@ (80042e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042d2:	5ccb      	ldrb	r3, [r1, r3]
 80042d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d8:	4618      	mov	r0, r3
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40023800 	.word	0x40023800
 80042e0:	08005890 	.word	0x08005890

080042e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042e8:	f7ff ffdc 	bl	80042a4 <HAL_RCC_GetHCLKFreq>
 80042ec:	4602      	mov	r2, r0
 80042ee:	4b05      	ldr	r3, [pc, #20]	@ (8004304 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	0b5b      	lsrs	r3, r3, #13
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	4903      	ldr	r1, [pc, #12]	@ (8004308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042fa:	5ccb      	ldrb	r3, [r1, r3]
 80042fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004300:	4618      	mov	r0, r3
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40023800 	.word	0x40023800
 8004308:	08005890 	.word	0x08005890

0800430c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b088      	sub	sp, #32
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004314:	2300      	movs	r3, #0
 8004316:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004318:	2300      	movs	r3, #0
 800431a:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800431c:	2300      	movs	r3, #0
 800431e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d012      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004330:	4b65      	ldr	r3, [pc, #404]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	4a64      	ldr	r2, [pc, #400]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004336:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800433a:	6093      	str	r3, [r2, #8]
 800433c:	4b62      	ldr	r3, [pc, #392]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004344:	4960      	ldr	r1, [pc, #384]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004346:	4313      	orrs	r3, r2
 8004348:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8004352:	2301      	movs	r3, #1
 8004354:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d017      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004362:	4b59      	ldr	r3, [pc, #356]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004364:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004368:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004370:	4955      	ldr	r1, [pc, #340]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800437c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004380:	d101      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8004382:	2301      	movs	r3, #1
 8004384:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800438e:	2301      	movs	r3, #1
 8004390:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d017      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800439e:	4b4a      	ldr	r3, [pc, #296]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ac:	4946      	ldr	r1, [pc, #280]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043bc:	d101      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80043be:	2301      	movs	r3, #1
 80043c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80043ca:	2301      	movs	r3, #1
 80043cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 808b 	beq.w	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043dc:	4b3a      	ldr	r3, [pc, #232]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e0:	4a39      	ldr	r2, [pc, #228]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80043e8:	4b37      	ldr	r3, [pc, #220]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043f4:	4b35      	ldr	r3, [pc, #212]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a34      	ldr	r2, [pc, #208]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004400:	f7fd f9a2 	bl	8001748 <HAL_GetTick>
 8004404:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004406:	e008      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004408:	f7fd f99e 	bl	8001748 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b64      	cmp	r3, #100	@ 0x64
 8004414:	d901      	bls.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e2bc      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800441a:	4b2c      	ldr	r3, [pc, #176]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f0      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004426:	4b28      	ldr	r3, [pc, #160]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800442e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d035      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	429a      	cmp	r2, r3
 8004442:	d02e      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004444:	4b20      	ldr	r3, [pc, #128]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004448:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800444c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800444e:	4b1e      	ldr	r3, [pc, #120]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004452:	4a1d      	ldr	r2, [pc, #116]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004458:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800445a:	4b1b      	ldr	r3, [pc, #108]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800445c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800445e:	4a1a      	ldr	r2, [pc, #104]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004460:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004464:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004466:	4a18      	ldr	r2, [pc, #96]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800446c:	4b16      	ldr	r3, [pc, #88]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800446e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b01      	cmp	r3, #1
 8004476:	d114      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fd f966 	bl	8001748 <HAL_GetTick>
 800447c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800447e:	e00a      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004480:	f7fd f962 	bl	8001748 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800448e:	4293      	cmp	r3, r2
 8004490:	d901      	bls.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e27e      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004496:	4b0c      	ldr	r3, [pc, #48]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0ee      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044ae:	d111      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80044b0:	4b05      	ldr	r3, [pc, #20]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80044bc:	4b04      	ldr	r3, [pc, #16]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80044be:	400b      	ands	r3, r1
 80044c0:	4901      	ldr	r1, [pc, #4]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	608b      	str	r3, [r1, #8]
 80044c6:	e00b      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80044c8:	40023800 	.word	0x40023800
 80044cc:	40007000 	.word	0x40007000
 80044d0:	0ffffcff 	.word	0x0ffffcff
 80044d4:	4ba4      	ldr	r3, [pc, #656]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	4aa3      	ldr	r2, [pc, #652]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044da:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80044de:	6093      	str	r3, [r2, #8]
 80044e0:	4ba1      	ldr	r3, [pc, #644]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ec:	499e      	ldr	r1, [pc, #632]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0310 	and.w	r3, r3, #16
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d010      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044fe:	4b9a      	ldr	r3, [pc, #616]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004500:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004504:	4a98      	ldr	r2, [pc, #608]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004506:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800450a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800450e:	4b96      	ldr	r3, [pc, #600]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004510:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004518:	4993      	ldr	r1, [pc, #588]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800451a:	4313      	orrs	r3, r2
 800451c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00a      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800452c:	4b8e      	ldr	r3, [pc, #568]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800452e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004532:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800453a:	498b      	ldr	r1, [pc, #556]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800454e:	4b86      	ldr	r3, [pc, #536]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004554:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800455c:	4982      	ldr	r1, [pc, #520]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00a      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004570:	4b7d      	ldr	r3, [pc, #500]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004576:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800457e:	497a      	ldr	r1, [pc, #488]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004592:	4b75      	ldr	r3, [pc, #468]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004598:	f023 0203 	bic.w	r2, r3, #3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a0:	4971      	ldr	r1, [pc, #452]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00a      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045b4:	4b6c      	ldr	r3, [pc, #432]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ba:	f023 020c 	bic.w	r2, r3, #12
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c2:	4969      	ldr	r1, [pc, #420]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045d6:	4b64      	ldr	r3, [pc, #400]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e4:	4960      	ldr	r1, [pc, #384]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045f8:	4b5b      	ldr	r3, [pc, #364]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004606:	4958      	ldr	r1, [pc, #352]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800461a:	4b53      	ldr	r3, [pc, #332]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800461c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004620:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004628:	494f      	ldr	r1, [pc, #316]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800463c:	4b4a      	ldr	r3, [pc, #296]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800463e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004642:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800464a:	4947      	ldr	r1, [pc, #284]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800465e:	4b42      	ldr	r3, [pc, #264]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004664:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800466c:	493e      	ldr	r1, [pc, #248]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004680:	4b39      	ldr	r3, [pc, #228]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004686:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800468e:	4936      	ldr	r1, [pc, #216]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d011      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80046a2:	4b31      	ldr	r3, [pc, #196]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046b0:	492d      	ldr	r1, [pc, #180]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046c0:	d101      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80046c2:	2301      	movs	r3, #1
 80046c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046d2:	4b25      	ldr	r3, [pc, #148]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046e0:	4921      	ldr	r1, [pc, #132]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046fa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004702:	4919      	ldr	r1, [pc, #100]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004716:	4b14      	ldr	r3, [pc, #80]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800471c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004724:	4910      	ldr	r1, [pc, #64]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d006      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 809d 	beq.w	800487a <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004740:	4b09      	ldr	r3, [pc, #36]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a08      	ldr	r2, [pc, #32]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004746:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800474a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800474c:	f7fc fffc 	bl	8001748 <HAL_GetTick>
 8004750:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004752:	e00b      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004754:	f7fc fff8 	bl	8001748 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b64      	cmp	r3, #100	@ 0x64
 8004760:	d904      	bls.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e116      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004766:	bf00      	nop
 8004768:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800476c:	4b8b      	ldr	r3, [pc, #556]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1ed      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b00      	cmp	r3, #0
 8004782:	d017      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004788:	2b00      	cmp	r3, #0
 800478a:	d113      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800478c:	4b83      	ldr	r3, [pc, #524]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800478e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004792:	0e1b      	lsrs	r3, r3, #24
 8004794:	f003 030f 	and.w	r3, r3, #15
 8004798:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	019a      	lsls	r2, r3, #6
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	061b      	lsls	r3, r3, #24
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	071b      	lsls	r3, r3, #28
 80047ac:	497b      	ldr	r1, [pc, #492]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d004      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047c8:	d00a      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d024      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047de:	d11f      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047e0:	4b6e      	ldr	r3, [pc, #440]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80047e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047e6:	0f1b      	lsrs	r3, r3, #28
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	019a      	lsls	r2, r3, #6
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	061b      	lsls	r3, r3, #24
 80047fa:	431a      	orrs	r2, r3
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	071b      	lsls	r3, r3, #28
 8004800:	4966      	ldr	r1, [pc, #408]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004808:	4b64      	ldr	r3, [pc, #400]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800480a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800480e:	f023 021f 	bic.w	r2, r3, #31
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	3b01      	subs	r3, #1
 8004818:	4960      	ldr	r1, [pc, #384]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00d      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	019a      	lsls	r2, r3, #6
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	061b      	lsls	r3, r3, #24
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	071b      	lsls	r3, r3, #28
 8004840:	4956      	ldr	r1, [pc, #344]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004848:	4b54      	ldr	r3, [pc, #336]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a53      	ldr	r2, [pc, #332]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800484e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004852:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004854:	f7fc ff78 	bl	8001748 <HAL_GetTick>
 8004858:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800485a:	e008      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800485c:	f7fc ff74 	bl	8001748 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b64      	cmp	r3, #100	@ 0x64
 8004868:	d901      	bls.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e092      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800486e:	4b4b      	ldr	r3, [pc, #300]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0f0      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	2b01      	cmp	r3, #1
 800487e:	f040 8088 	bne.w	8004992 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004882:	4b46      	ldr	r3, [pc, #280]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a45      	ldr	r2, [pc, #276]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004888:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800488c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800488e:	f7fc ff5b 	bl	8001748 <HAL_GetTick>
 8004892:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004894:	e008      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004896:	f7fc ff57 	bl	8001748 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b64      	cmp	r3, #100	@ 0x64
 80048a2:	d901      	bls.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e075      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048a8:	4b3c      	ldr	r3, [pc, #240]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048b4:	d0ef      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d024      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d120      	bne.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048de:	4b2f      	ldr	r3, [pc, #188]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e4:	0c1b      	lsrs	r3, r3, #16
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	019a      	lsls	r2, r3, #6
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	041b      	lsls	r3, r3, #16
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	061b      	lsls	r3, r3, #24
 80048fe:	4927      	ldr	r1, [pc, #156]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004906:	4b25      	ldr	r3, [pc, #148]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004908:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800490c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	3b01      	subs	r3, #1
 8004916:	021b      	lsls	r3, r3, #8
 8004918:	4920      	ldr	r1, [pc, #128]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d018      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x652>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004930:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004934:	d113      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004936:	4b19      	ldr	r3, [pc, #100]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800493c:	0e1b      	lsrs	r3, r3, #24
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	019a      	lsls	r2, r3, #6
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	041b      	lsls	r3, r3, #16
 8004950:	431a      	orrs	r2, r3
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	061b      	lsls	r3, r3, #24
 8004956:	4911      	ldr	r1, [pc, #68]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800495e:	4b0f      	ldr	r3, [pc, #60]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a0e      	ldr	r2, [pc, #56]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004968:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800496a:	f7fc feed 	bl	8001748 <HAL_GetTick>
 800496e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004970:	e008      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004972:	f7fc fee9 	bl	8001748 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b64      	cmp	r3, #100	@ 0x64
 800497e:	d901      	bls.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e007      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004984:	4b05      	ldr	r3, [pc, #20]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800498c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004990:	d1ef      	bne.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3720      	adds	r7, #32
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40023800 	.word	0x40023800

080049a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e040      	b.n	8004a34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fc fd24 	bl	8001410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2224      	movs	r2, #36	@ 0x24
 80049cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0201 	bic.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fbde 	bl	80051a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f977 	bl	8004ce0 <UART_SetConfig>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e01b      	b.n	8004a34 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0201 	orr.w	r2, r2, #1
 8004a2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 fc5d 	bl	80052ec <UART_CheckIdleState>
 8004a32:	4603      	mov	r3, r0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08a      	sub	sp, #40	@ 0x28
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	603b      	str	r3, [r7, #0]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d177      	bne.n	8004b44 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_UART_Transmit+0x24>
 8004a5a:	88fb      	ldrh	r3, [r7, #6]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e070      	b.n	8004b46 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2221      	movs	r2, #33	@ 0x21
 8004a70:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a72:	f7fc fe69 	bl	8001748 <HAL_GetTick>
 8004a76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	88fa      	ldrh	r2, [r7, #6]
 8004a7c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	88fa      	ldrh	r2, [r7, #6]
 8004a84:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a90:	d108      	bne.n	8004aa4 <HAL_UART_Transmit+0x68>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d104      	bne.n	8004aa4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	61bb      	str	r3, [r7, #24]
 8004aa2:	e003      	b.n	8004aac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004aac:	e02f      	b.n	8004b0e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	2180      	movs	r1, #128	@ 0x80
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 fc6e 	bl	800539a <UART_WaitOnFlagUntilTimeout>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d004      	beq.n	8004ace <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e03b      	b.n	8004b46 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10b      	bne.n	8004aec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ae2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	3302      	adds	r3, #2
 8004ae8:	61bb      	str	r3, [r7, #24]
 8004aea:	e007      	b.n	8004afc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	781a      	ldrb	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	3301      	adds	r3, #1
 8004afa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	3b01      	subs	r3, #1
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1c9      	bne.n	8004aae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2200      	movs	r2, #0
 8004b22:	2140      	movs	r1, #64	@ 0x40
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 fc38 	bl	800539a <UART_WaitOnFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d004      	beq.n	8004b3a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e005      	b.n	8004b46 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004b40:	2300      	movs	r3, #0
 8004b42:	e000      	b.n	8004b46 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004b44:	2302      	movs	r3, #2
  }
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3720      	adds	r7, #32
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b08a      	sub	sp, #40	@ 0x28
 8004b52:	af02      	add	r7, sp, #8
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	60b9      	str	r1, [r7, #8]
 8004b58:	603b      	str	r3, [r7, #0]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b64:	2b20      	cmp	r3, #32
 8004b66:	f040 80b5 	bne.w	8004cd4 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <HAL_UART_Receive+0x28>
 8004b70:	88fb      	ldrh	r3, [r7, #6]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e0ad      	b.n	8004cd6 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2222      	movs	r2, #34	@ 0x22
 8004b86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b90:	f7fc fdda 	bl	8001748 <HAL_GetTick>
 8004b94:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	88fa      	ldrh	r2, [r7, #6]
 8004b9a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	88fa      	ldrh	r2, [r7, #6]
 8004ba2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bae:	d10e      	bne.n	8004bce <HAL_UART_Receive+0x80>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d105      	bne.n	8004bc4 <HAL_UART_Receive+0x76>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004bbe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004bc2:	e02d      	b.n	8004c20 <HAL_UART_Receive+0xd2>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	22ff      	movs	r2, #255	@ 0xff
 8004bc8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004bcc:	e028      	b.n	8004c20 <HAL_UART_Receive+0xd2>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10d      	bne.n	8004bf2 <HAL_UART_Receive+0xa4>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d104      	bne.n	8004be8 <HAL_UART_Receive+0x9a>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	22ff      	movs	r2, #255	@ 0xff
 8004be2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004be6:	e01b      	b.n	8004c20 <HAL_UART_Receive+0xd2>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	227f      	movs	r2, #127	@ 0x7f
 8004bec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004bf0:	e016      	b.n	8004c20 <HAL_UART_Receive+0xd2>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bfa:	d10d      	bne.n	8004c18 <HAL_UART_Receive+0xca>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d104      	bne.n	8004c0e <HAL_UART_Receive+0xc0>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	227f      	movs	r2, #127	@ 0x7f
 8004c08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c0c:	e008      	b.n	8004c20 <HAL_UART_Receive+0xd2>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	223f      	movs	r2, #63	@ 0x3f
 8004c12:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c16:	e003      	b.n	8004c20 <HAL_UART_Receive+0xd2>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004c26:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c30:	d108      	bne.n	8004c44 <HAL_UART_Receive+0xf6>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d104      	bne.n	8004c44 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	e003      	b.n	8004c4c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004c4c:	e036      	b.n	8004cbc <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2200      	movs	r2, #0
 8004c56:	2120      	movs	r1, #32
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 fb9e 	bl	800539a <UART_WaitOnFlagUntilTimeout>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e032      	b.n	8004cd6 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10c      	bne.n	8004c90 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	8a7b      	ldrh	r3, [r7, #18]
 8004c80:	4013      	ands	r3, r2
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	3302      	adds	r3, #2
 8004c8c:	61bb      	str	r3, [r7, #24]
 8004c8e:	e00c      	b.n	8004caa <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	8a7b      	ldrh	r3, [r7, #18]
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1c2      	bne.n	8004c4e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	e000      	b.n	8004cd6 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004cd4:	2302      	movs	r3, #2
  }
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3720      	adds	r7, #32
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
	...

08004ce0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	4ba6      	ldr	r3, [pc, #664]	@ (8004fa4 <UART_SetConfig+0x2c4>)
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6812      	ldr	r2, [r2, #0]
 8004d12:	6979      	ldr	r1, [r7, #20]
 8004d14:	430b      	orrs	r3, r1
 8004d16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a94      	ldr	r2, [pc, #592]	@ (8004fa8 <UART_SetConfig+0x2c8>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d120      	bne.n	8004d9e <UART_SetConfig+0xbe>
 8004d5c:	4b93      	ldr	r3, [pc, #588]	@ (8004fac <UART_SetConfig+0x2cc>)
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d816      	bhi.n	8004d98 <UART_SetConfig+0xb8>
 8004d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d70 <UART_SetConfig+0x90>)
 8004d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d70:	08004d81 	.word	0x08004d81
 8004d74:	08004d8d 	.word	0x08004d8d
 8004d78:	08004d87 	.word	0x08004d87
 8004d7c:	08004d93 	.word	0x08004d93
 8004d80:	2301      	movs	r3, #1
 8004d82:	77fb      	strb	r3, [r7, #31]
 8004d84:	e150      	b.n	8005028 <UART_SetConfig+0x348>
 8004d86:	2302      	movs	r3, #2
 8004d88:	77fb      	strb	r3, [r7, #31]
 8004d8a:	e14d      	b.n	8005028 <UART_SetConfig+0x348>
 8004d8c:	2304      	movs	r3, #4
 8004d8e:	77fb      	strb	r3, [r7, #31]
 8004d90:	e14a      	b.n	8005028 <UART_SetConfig+0x348>
 8004d92:	2308      	movs	r3, #8
 8004d94:	77fb      	strb	r3, [r7, #31]
 8004d96:	e147      	b.n	8005028 <UART_SetConfig+0x348>
 8004d98:	2310      	movs	r3, #16
 8004d9a:	77fb      	strb	r3, [r7, #31]
 8004d9c:	e144      	b.n	8005028 <UART_SetConfig+0x348>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a83      	ldr	r2, [pc, #524]	@ (8004fb0 <UART_SetConfig+0x2d0>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d132      	bne.n	8004e0e <UART_SetConfig+0x12e>
 8004da8:	4b80      	ldr	r3, [pc, #512]	@ (8004fac <UART_SetConfig+0x2cc>)
 8004daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	2b0c      	cmp	r3, #12
 8004db4:	d828      	bhi.n	8004e08 <UART_SetConfig+0x128>
 8004db6:	a201      	add	r2, pc, #4	@ (adr r2, 8004dbc <UART_SetConfig+0xdc>)
 8004db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbc:	08004df1 	.word	0x08004df1
 8004dc0:	08004e09 	.word	0x08004e09
 8004dc4:	08004e09 	.word	0x08004e09
 8004dc8:	08004e09 	.word	0x08004e09
 8004dcc:	08004dfd 	.word	0x08004dfd
 8004dd0:	08004e09 	.word	0x08004e09
 8004dd4:	08004e09 	.word	0x08004e09
 8004dd8:	08004e09 	.word	0x08004e09
 8004ddc:	08004df7 	.word	0x08004df7
 8004de0:	08004e09 	.word	0x08004e09
 8004de4:	08004e09 	.word	0x08004e09
 8004de8:	08004e09 	.word	0x08004e09
 8004dec:	08004e03 	.word	0x08004e03
 8004df0:	2300      	movs	r3, #0
 8004df2:	77fb      	strb	r3, [r7, #31]
 8004df4:	e118      	b.n	8005028 <UART_SetConfig+0x348>
 8004df6:	2302      	movs	r3, #2
 8004df8:	77fb      	strb	r3, [r7, #31]
 8004dfa:	e115      	b.n	8005028 <UART_SetConfig+0x348>
 8004dfc:	2304      	movs	r3, #4
 8004dfe:	77fb      	strb	r3, [r7, #31]
 8004e00:	e112      	b.n	8005028 <UART_SetConfig+0x348>
 8004e02:	2308      	movs	r3, #8
 8004e04:	77fb      	strb	r3, [r7, #31]
 8004e06:	e10f      	b.n	8005028 <UART_SetConfig+0x348>
 8004e08:	2310      	movs	r3, #16
 8004e0a:	77fb      	strb	r3, [r7, #31]
 8004e0c:	e10c      	b.n	8005028 <UART_SetConfig+0x348>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a68      	ldr	r2, [pc, #416]	@ (8004fb4 <UART_SetConfig+0x2d4>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d120      	bne.n	8004e5a <UART_SetConfig+0x17a>
 8004e18:	4b64      	ldr	r3, [pc, #400]	@ (8004fac <UART_SetConfig+0x2cc>)
 8004e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e22:	2b30      	cmp	r3, #48	@ 0x30
 8004e24:	d013      	beq.n	8004e4e <UART_SetConfig+0x16e>
 8004e26:	2b30      	cmp	r3, #48	@ 0x30
 8004e28:	d814      	bhi.n	8004e54 <UART_SetConfig+0x174>
 8004e2a:	2b20      	cmp	r3, #32
 8004e2c:	d009      	beq.n	8004e42 <UART_SetConfig+0x162>
 8004e2e:	2b20      	cmp	r3, #32
 8004e30:	d810      	bhi.n	8004e54 <UART_SetConfig+0x174>
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <UART_SetConfig+0x15c>
 8004e36:	2b10      	cmp	r3, #16
 8004e38:	d006      	beq.n	8004e48 <UART_SetConfig+0x168>
 8004e3a:	e00b      	b.n	8004e54 <UART_SetConfig+0x174>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	77fb      	strb	r3, [r7, #31]
 8004e40:	e0f2      	b.n	8005028 <UART_SetConfig+0x348>
 8004e42:	2302      	movs	r3, #2
 8004e44:	77fb      	strb	r3, [r7, #31]
 8004e46:	e0ef      	b.n	8005028 <UART_SetConfig+0x348>
 8004e48:	2304      	movs	r3, #4
 8004e4a:	77fb      	strb	r3, [r7, #31]
 8004e4c:	e0ec      	b.n	8005028 <UART_SetConfig+0x348>
 8004e4e:	2308      	movs	r3, #8
 8004e50:	77fb      	strb	r3, [r7, #31]
 8004e52:	e0e9      	b.n	8005028 <UART_SetConfig+0x348>
 8004e54:	2310      	movs	r3, #16
 8004e56:	77fb      	strb	r3, [r7, #31]
 8004e58:	e0e6      	b.n	8005028 <UART_SetConfig+0x348>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a56      	ldr	r2, [pc, #344]	@ (8004fb8 <UART_SetConfig+0x2d8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d120      	bne.n	8004ea6 <UART_SetConfig+0x1c6>
 8004e64:	4b51      	ldr	r3, [pc, #324]	@ (8004fac <UART_SetConfig+0x2cc>)
 8004e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e70:	d013      	beq.n	8004e9a <UART_SetConfig+0x1ba>
 8004e72:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e74:	d814      	bhi.n	8004ea0 <UART_SetConfig+0x1c0>
 8004e76:	2b80      	cmp	r3, #128	@ 0x80
 8004e78:	d009      	beq.n	8004e8e <UART_SetConfig+0x1ae>
 8004e7a:	2b80      	cmp	r3, #128	@ 0x80
 8004e7c:	d810      	bhi.n	8004ea0 <UART_SetConfig+0x1c0>
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <UART_SetConfig+0x1a8>
 8004e82:	2b40      	cmp	r3, #64	@ 0x40
 8004e84:	d006      	beq.n	8004e94 <UART_SetConfig+0x1b4>
 8004e86:	e00b      	b.n	8004ea0 <UART_SetConfig+0x1c0>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	77fb      	strb	r3, [r7, #31]
 8004e8c:	e0cc      	b.n	8005028 <UART_SetConfig+0x348>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	77fb      	strb	r3, [r7, #31]
 8004e92:	e0c9      	b.n	8005028 <UART_SetConfig+0x348>
 8004e94:	2304      	movs	r3, #4
 8004e96:	77fb      	strb	r3, [r7, #31]
 8004e98:	e0c6      	b.n	8005028 <UART_SetConfig+0x348>
 8004e9a:	2308      	movs	r3, #8
 8004e9c:	77fb      	strb	r3, [r7, #31]
 8004e9e:	e0c3      	b.n	8005028 <UART_SetConfig+0x348>
 8004ea0:	2310      	movs	r3, #16
 8004ea2:	77fb      	strb	r3, [r7, #31]
 8004ea4:	e0c0      	b.n	8005028 <UART_SetConfig+0x348>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a44      	ldr	r2, [pc, #272]	@ (8004fbc <UART_SetConfig+0x2dc>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d125      	bne.n	8004efc <UART_SetConfig+0x21c>
 8004eb0:	4b3e      	ldr	r3, [pc, #248]	@ (8004fac <UART_SetConfig+0x2cc>)
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ebe:	d017      	beq.n	8004ef0 <UART_SetConfig+0x210>
 8004ec0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ec4:	d817      	bhi.n	8004ef6 <UART_SetConfig+0x216>
 8004ec6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eca:	d00b      	beq.n	8004ee4 <UART_SetConfig+0x204>
 8004ecc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ed0:	d811      	bhi.n	8004ef6 <UART_SetConfig+0x216>
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <UART_SetConfig+0x1fe>
 8004ed6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eda:	d006      	beq.n	8004eea <UART_SetConfig+0x20a>
 8004edc:	e00b      	b.n	8004ef6 <UART_SetConfig+0x216>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	77fb      	strb	r3, [r7, #31]
 8004ee2:	e0a1      	b.n	8005028 <UART_SetConfig+0x348>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	77fb      	strb	r3, [r7, #31]
 8004ee8:	e09e      	b.n	8005028 <UART_SetConfig+0x348>
 8004eea:	2304      	movs	r3, #4
 8004eec:	77fb      	strb	r3, [r7, #31]
 8004eee:	e09b      	b.n	8005028 <UART_SetConfig+0x348>
 8004ef0:	2308      	movs	r3, #8
 8004ef2:	77fb      	strb	r3, [r7, #31]
 8004ef4:	e098      	b.n	8005028 <UART_SetConfig+0x348>
 8004ef6:	2310      	movs	r3, #16
 8004ef8:	77fb      	strb	r3, [r7, #31]
 8004efa:	e095      	b.n	8005028 <UART_SetConfig+0x348>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a2f      	ldr	r2, [pc, #188]	@ (8004fc0 <UART_SetConfig+0x2e0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d125      	bne.n	8004f52 <UART_SetConfig+0x272>
 8004f06:	4b29      	ldr	r3, [pc, #164]	@ (8004fac <UART_SetConfig+0x2cc>)
 8004f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f10:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f14:	d017      	beq.n	8004f46 <UART_SetConfig+0x266>
 8004f16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f1a:	d817      	bhi.n	8004f4c <UART_SetConfig+0x26c>
 8004f1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f20:	d00b      	beq.n	8004f3a <UART_SetConfig+0x25a>
 8004f22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f26:	d811      	bhi.n	8004f4c <UART_SetConfig+0x26c>
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <UART_SetConfig+0x254>
 8004f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f30:	d006      	beq.n	8004f40 <UART_SetConfig+0x260>
 8004f32:	e00b      	b.n	8004f4c <UART_SetConfig+0x26c>
 8004f34:	2301      	movs	r3, #1
 8004f36:	77fb      	strb	r3, [r7, #31]
 8004f38:	e076      	b.n	8005028 <UART_SetConfig+0x348>
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	77fb      	strb	r3, [r7, #31]
 8004f3e:	e073      	b.n	8005028 <UART_SetConfig+0x348>
 8004f40:	2304      	movs	r3, #4
 8004f42:	77fb      	strb	r3, [r7, #31]
 8004f44:	e070      	b.n	8005028 <UART_SetConfig+0x348>
 8004f46:	2308      	movs	r3, #8
 8004f48:	77fb      	strb	r3, [r7, #31]
 8004f4a:	e06d      	b.n	8005028 <UART_SetConfig+0x348>
 8004f4c:	2310      	movs	r3, #16
 8004f4e:	77fb      	strb	r3, [r7, #31]
 8004f50:	e06a      	b.n	8005028 <UART_SetConfig+0x348>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a1b      	ldr	r2, [pc, #108]	@ (8004fc4 <UART_SetConfig+0x2e4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d138      	bne.n	8004fce <UART_SetConfig+0x2ee>
 8004f5c:	4b13      	ldr	r3, [pc, #76]	@ (8004fac <UART_SetConfig+0x2cc>)
 8004f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f62:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004f66:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f6a:	d017      	beq.n	8004f9c <UART_SetConfig+0x2bc>
 8004f6c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f70:	d82a      	bhi.n	8004fc8 <UART_SetConfig+0x2e8>
 8004f72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f76:	d00b      	beq.n	8004f90 <UART_SetConfig+0x2b0>
 8004f78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f7c:	d824      	bhi.n	8004fc8 <UART_SetConfig+0x2e8>
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <UART_SetConfig+0x2aa>
 8004f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f86:	d006      	beq.n	8004f96 <UART_SetConfig+0x2b6>
 8004f88:	e01e      	b.n	8004fc8 <UART_SetConfig+0x2e8>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	77fb      	strb	r3, [r7, #31]
 8004f8e:	e04b      	b.n	8005028 <UART_SetConfig+0x348>
 8004f90:	2302      	movs	r3, #2
 8004f92:	77fb      	strb	r3, [r7, #31]
 8004f94:	e048      	b.n	8005028 <UART_SetConfig+0x348>
 8004f96:	2304      	movs	r3, #4
 8004f98:	77fb      	strb	r3, [r7, #31]
 8004f9a:	e045      	b.n	8005028 <UART_SetConfig+0x348>
 8004f9c:	2308      	movs	r3, #8
 8004f9e:	77fb      	strb	r3, [r7, #31]
 8004fa0:	e042      	b.n	8005028 <UART_SetConfig+0x348>
 8004fa2:	bf00      	nop
 8004fa4:	efff69f3 	.word	0xefff69f3
 8004fa8:	40011000 	.word	0x40011000
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	40004400 	.word	0x40004400
 8004fb4:	40004800 	.word	0x40004800
 8004fb8:	40004c00 	.word	0x40004c00
 8004fbc:	40005000 	.word	0x40005000
 8004fc0:	40011400 	.word	0x40011400
 8004fc4:	40007800 	.word	0x40007800
 8004fc8:	2310      	movs	r3, #16
 8004fca:	77fb      	strb	r3, [r7, #31]
 8004fcc:	e02c      	b.n	8005028 <UART_SetConfig+0x348>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a72      	ldr	r2, [pc, #456]	@ (800519c <UART_SetConfig+0x4bc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d125      	bne.n	8005024 <UART_SetConfig+0x344>
 8004fd8:	4b71      	ldr	r3, [pc, #452]	@ (80051a0 <UART_SetConfig+0x4c0>)
 8004fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fde:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004fe2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004fe6:	d017      	beq.n	8005018 <UART_SetConfig+0x338>
 8004fe8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004fec:	d817      	bhi.n	800501e <UART_SetConfig+0x33e>
 8004fee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ff2:	d00b      	beq.n	800500c <UART_SetConfig+0x32c>
 8004ff4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ff8:	d811      	bhi.n	800501e <UART_SetConfig+0x33e>
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <UART_SetConfig+0x326>
 8004ffe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005002:	d006      	beq.n	8005012 <UART_SetConfig+0x332>
 8005004:	e00b      	b.n	800501e <UART_SetConfig+0x33e>
 8005006:	2300      	movs	r3, #0
 8005008:	77fb      	strb	r3, [r7, #31]
 800500a:	e00d      	b.n	8005028 <UART_SetConfig+0x348>
 800500c:	2302      	movs	r3, #2
 800500e:	77fb      	strb	r3, [r7, #31]
 8005010:	e00a      	b.n	8005028 <UART_SetConfig+0x348>
 8005012:	2304      	movs	r3, #4
 8005014:	77fb      	strb	r3, [r7, #31]
 8005016:	e007      	b.n	8005028 <UART_SetConfig+0x348>
 8005018:	2308      	movs	r3, #8
 800501a:	77fb      	strb	r3, [r7, #31]
 800501c:	e004      	b.n	8005028 <UART_SetConfig+0x348>
 800501e:	2310      	movs	r3, #16
 8005020:	77fb      	strb	r3, [r7, #31]
 8005022:	e001      	b.n	8005028 <UART_SetConfig+0x348>
 8005024:	2310      	movs	r3, #16
 8005026:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005030:	d15b      	bne.n	80050ea <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005032:	7ffb      	ldrb	r3, [r7, #31]
 8005034:	2b08      	cmp	r3, #8
 8005036:	d828      	bhi.n	800508a <UART_SetConfig+0x3aa>
 8005038:	a201      	add	r2, pc, #4	@ (adr r2, 8005040 <UART_SetConfig+0x360>)
 800503a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503e:	bf00      	nop
 8005040:	08005065 	.word	0x08005065
 8005044:	0800506d 	.word	0x0800506d
 8005048:	08005075 	.word	0x08005075
 800504c:	0800508b 	.word	0x0800508b
 8005050:	0800507b 	.word	0x0800507b
 8005054:	0800508b 	.word	0x0800508b
 8005058:	0800508b 	.word	0x0800508b
 800505c:	0800508b 	.word	0x0800508b
 8005060:	08005083 	.word	0x08005083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005064:	f7ff f92a 	bl	80042bc <HAL_RCC_GetPCLK1Freq>
 8005068:	61b8      	str	r0, [r7, #24]
        break;
 800506a:	e013      	b.n	8005094 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800506c:	f7ff f93a 	bl	80042e4 <HAL_RCC_GetPCLK2Freq>
 8005070:	61b8      	str	r0, [r7, #24]
        break;
 8005072:	e00f      	b.n	8005094 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005074:	4b4b      	ldr	r3, [pc, #300]	@ (80051a4 <UART_SetConfig+0x4c4>)
 8005076:	61bb      	str	r3, [r7, #24]
        break;
 8005078:	e00c      	b.n	8005094 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800507a:	f7ff f84d 	bl	8004118 <HAL_RCC_GetSysClockFreq>
 800507e:	61b8      	str	r0, [r7, #24]
        break;
 8005080:	e008      	b.n	8005094 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005082:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005086:	61bb      	str	r3, [r7, #24]
        break;
 8005088:	e004      	b.n	8005094 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	77bb      	strb	r3, [r7, #30]
        break;
 8005092:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d074      	beq.n	8005184 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	005a      	lsls	r2, r3, #1
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	085b      	lsrs	r3, r3, #1
 80050a4:	441a      	add	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	2b0f      	cmp	r3, #15
 80050b4:	d916      	bls.n	80050e4 <UART_SetConfig+0x404>
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050bc:	d212      	bcs.n	80050e4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	f023 030f 	bic.w	r3, r3, #15
 80050c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	085b      	lsrs	r3, r3, #1
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	89fb      	ldrh	r3, [r7, #14]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	89fa      	ldrh	r2, [r7, #14]
 80050e0:	60da      	str	r2, [r3, #12]
 80050e2:	e04f      	b.n	8005184 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	77bb      	strb	r3, [r7, #30]
 80050e8:	e04c      	b.n	8005184 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050ea:	7ffb      	ldrb	r3, [r7, #31]
 80050ec:	2b08      	cmp	r3, #8
 80050ee:	d828      	bhi.n	8005142 <UART_SetConfig+0x462>
 80050f0:	a201      	add	r2, pc, #4	@ (adr r2, 80050f8 <UART_SetConfig+0x418>)
 80050f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f6:	bf00      	nop
 80050f8:	0800511d 	.word	0x0800511d
 80050fc:	08005125 	.word	0x08005125
 8005100:	0800512d 	.word	0x0800512d
 8005104:	08005143 	.word	0x08005143
 8005108:	08005133 	.word	0x08005133
 800510c:	08005143 	.word	0x08005143
 8005110:	08005143 	.word	0x08005143
 8005114:	08005143 	.word	0x08005143
 8005118:	0800513b 	.word	0x0800513b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800511c:	f7ff f8ce 	bl	80042bc <HAL_RCC_GetPCLK1Freq>
 8005120:	61b8      	str	r0, [r7, #24]
        break;
 8005122:	e013      	b.n	800514c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005124:	f7ff f8de 	bl	80042e4 <HAL_RCC_GetPCLK2Freq>
 8005128:	61b8      	str	r0, [r7, #24]
        break;
 800512a:	e00f      	b.n	800514c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800512c:	4b1d      	ldr	r3, [pc, #116]	@ (80051a4 <UART_SetConfig+0x4c4>)
 800512e:	61bb      	str	r3, [r7, #24]
        break;
 8005130:	e00c      	b.n	800514c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005132:	f7fe fff1 	bl	8004118 <HAL_RCC_GetSysClockFreq>
 8005136:	61b8      	str	r0, [r7, #24]
        break;
 8005138:	e008      	b.n	800514c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800513a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800513e:	61bb      	str	r3, [r7, #24]
        break;
 8005140:	e004      	b.n	800514c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	77bb      	strb	r3, [r7, #30]
        break;
 800514a:	bf00      	nop
    }

    if (pclk != 0U)
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d018      	beq.n	8005184 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	085a      	lsrs	r2, r3, #1
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	441a      	add	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	fbb2 f3f3 	udiv	r3, r2, r3
 8005164:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	2b0f      	cmp	r3, #15
 800516a:	d909      	bls.n	8005180 <UART_SetConfig+0x4a0>
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005172:	d205      	bcs.n	8005180 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	b29a      	uxth	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	60da      	str	r2, [r3, #12]
 800517e:	e001      	b.n	8005184 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005190:	7fbb      	ldrb	r3, [r7, #30]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3720      	adds	r7, #32
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	40007c00 	.word	0x40007c00
 80051a0:	40023800 	.word	0x40023800
 80051a4:	00f42400 	.word	0x00f42400

080051a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b4:	f003 0308 	and.w	r3, r3, #8
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00a      	beq.n	80051d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00a      	beq.n	8005216 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521a:	f003 0304 	and.w	r3, r3, #4
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523c:	f003 0310 	and.w	r3, r3, #16
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	d01a      	beq.n	80052be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052a6:	d10a      	bne.n	80052be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	605a      	str	r2, [r3, #4]
  }
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08c      	sub	sp, #48	@ 0x30
 80052f0:	af02      	add	r7, sp, #8
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052fc:	f7fc fa24 	bl	8001748 <HAL_GetTick>
 8005300:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0308 	and.w	r3, r3, #8
 800530c:	2b08      	cmp	r3, #8
 800530e:	d12e      	bne.n	800536e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005310:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005318:	2200      	movs	r2, #0
 800531a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f83b 	bl	800539a <UART_WaitOnFlagUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d021      	beq.n	800536e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	e853 3f00 	ldrex	r3, [r3]
 8005336:	60fb      	str	r3, [r7, #12]
   return(result);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800533e:	623b      	str	r3, [r7, #32]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	461a      	mov	r2, r3
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	61fb      	str	r3, [r7, #28]
 800534a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534c:	69b9      	ldr	r1, [r7, #24]
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	e841 2300 	strex	r3, r2, [r1]
 8005354:	617b      	str	r3, [r7, #20]
   return(result);
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e6      	bne.n	800532a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2220      	movs	r2, #32
 8005360:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e011      	b.n	8005392 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2220      	movs	r2, #32
 8005372:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2220      	movs	r2, #32
 8005378:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3728      	adds	r7, #40	@ 0x28
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b084      	sub	sp, #16
 800539e:	af00      	add	r7, sp, #0
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	603b      	str	r3, [r7, #0]
 80053a6:	4613      	mov	r3, r2
 80053a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053aa:	e04f      	b.n	800544c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b2:	d04b      	beq.n	800544c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b4:	f7fc f9c8 	bl	8001748 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d302      	bcc.n	80053ca <UART_WaitOnFlagUntilTimeout+0x30>
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e04e      	b.n	800546c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d037      	beq.n	800544c <UART_WaitOnFlagUntilTimeout+0xb2>
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2b80      	cmp	r3, #128	@ 0x80
 80053e0:	d034      	beq.n	800544c <UART_WaitOnFlagUntilTimeout+0xb2>
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b40      	cmp	r3, #64	@ 0x40
 80053e6:	d031      	beq.n	800544c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f003 0308 	and.w	r3, r3, #8
 80053f2:	2b08      	cmp	r3, #8
 80053f4:	d110      	bne.n	8005418 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2208      	movs	r2, #8
 80053fc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f838 	bl	8005474 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2208      	movs	r2, #8
 8005408:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e029      	b.n	800546c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005422:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005426:	d111      	bne.n	800544c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005430:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 f81e 	bl	8005474 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e00f      	b.n	800546c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	69da      	ldr	r2, [r3, #28]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	4013      	ands	r3, r2
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	429a      	cmp	r2, r3
 800545a:	bf0c      	ite	eq
 800545c:	2301      	moveq	r3, #1
 800545e:	2300      	movne	r3, #0
 8005460:	b2db      	uxtb	r3, r3
 8005462:	461a      	mov	r2, r3
 8005464:	79fb      	ldrb	r3, [r7, #7]
 8005466:	429a      	cmp	r2, r3
 8005468:	d0a0      	beq.n	80053ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005474:	b480      	push	{r7}
 8005476:	b095      	sub	sp, #84	@ 0x54
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005484:	e853 3f00 	ldrex	r3, [r3]
 8005488:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800548a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005490:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800549a:	643b      	str	r3, [r7, #64]	@ 0x40
 800549c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054a2:	e841 2300 	strex	r3, r2, [r1]
 80054a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1e6      	bne.n	800547c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3308      	adds	r3, #8
 80054b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	e853 3f00 	ldrex	r3, [r3]
 80054bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	f023 0301 	bic.w	r3, r3, #1
 80054c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3308      	adds	r3, #8
 80054cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054d6:	e841 2300 	strex	r3, r2, [r1]
 80054da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1e5      	bne.n	80054ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d118      	bne.n	800551c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	e853 3f00 	ldrex	r3, [r3]
 80054f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f023 0310 	bic.w	r3, r3, #16
 80054fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	461a      	mov	r2, r3
 8005506:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005508:	61bb      	str	r3, [r7, #24]
 800550a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550c:	6979      	ldr	r1, [r7, #20]
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	e841 2300 	strex	r3, r2, [r1]
 8005514:	613b      	str	r3, [r7, #16]
   return(result);
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1e6      	bne.n	80054ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005530:	bf00      	nop
 8005532:	3754      	adds	r7, #84	@ 0x54
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <atoi>:
 800553c:	220a      	movs	r2, #10
 800553e:	2100      	movs	r1, #0
 8005540:	f000 b87a 	b.w	8005638 <strtol>

08005544 <_strtol_l.constprop.0>:
 8005544:	2b24      	cmp	r3, #36	@ 0x24
 8005546:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800554a:	4686      	mov	lr, r0
 800554c:	4690      	mov	r8, r2
 800554e:	d801      	bhi.n	8005554 <_strtol_l.constprop.0+0x10>
 8005550:	2b01      	cmp	r3, #1
 8005552:	d106      	bne.n	8005562 <_strtol_l.constprop.0+0x1e>
 8005554:	f000 f894 	bl	8005680 <__errno>
 8005558:	2316      	movs	r3, #22
 800555a:	6003      	str	r3, [r0, #0]
 800555c:	2000      	movs	r0, #0
 800555e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005562:	4834      	ldr	r0, [pc, #208]	@ (8005634 <_strtol_l.constprop.0+0xf0>)
 8005564:	460d      	mov	r5, r1
 8005566:	462a      	mov	r2, r5
 8005568:	f815 4b01 	ldrb.w	r4, [r5], #1
 800556c:	5d06      	ldrb	r6, [r0, r4]
 800556e:	f016 0608 	ands.w	r6, r6, #8
 8005572:	d1f8      	bne.n	8005566 <_strtol_l.constprop.0+0x22>
 8005574:	2c2d      	cmp	r4, #45	@ 0x2d
 8005576:	d12d      	bne.n	80055d4 <_strtol_l.constprop.0+0x90>
 8005578:	782c      	ldrb	r4, [r5, #0]
 800557a:	2601      	movs	r6, #1
 800557c:	1c95      	adds	r5, r2, #2
 800557e:	f033 0210 	bics.w	r2, r3, #16
 8005582:	d109      	bne.n	8005598 <_strtol_l.constprop.0+0x54>
 8005584:	2c30      	cmp	r4, #48	@ 0x30
 8005586:	d12a      	bne.n	80055de <_strtol_l.constprop.0+0x9a>
 8005588:	782a      	ldrb	r2, [r5, #0]
 800558a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800558e:	2a58      	cmp	r2, #88	@ 0x58
 8005590:	d125      	bne.n	80055de <_strtol_l.constprop.0+0x9a>
 8005592:	786c      	ldrb	r4, [r5, #1]
 8005594:	2310      	movs	r3, #16
 8005596:	3502      	adds	r5, #2
 8005598:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800559c:	f10c 3cff 	add.w	ip, ip, #4294967295
 80055a0:	2200      	movs	r2, #0
 80055a2:	fbbc f9f3 	udiv	r9, ip, r3
 80055a6:	4610      	mov	r0, r2
 80055a8:	fb03 ca19 	mls	sl, r3, r9, ip
 80055ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80055b0:	2f09      	cmp	r7, #9
 80055b2:	d81b      	bhi.n	80055ec <_strtol_l.constprop.0+0xa8>
 80055b4:	463c      	mov	r4, r7
 80055b6:	42a3      	cmp	r3, r4
 80055b8:	dd27      	ble.n	800560a <_strtol_l.constprop.0+0xc6>
 80055ba:	1c57      	adds	r7, r2, #1
 80055bc:	d007      	beq.n	80055ce <_strtol_l.constprop.0+0x8a>
 80055be:	4581      	cmp	r9, r0
 80055c0:	d320      	bcc.n	8005604 <_strtol_l.constprop.0+0xc0>
 80055c2:	d101      	bne.n	80055c8 <_strtol_l.constprop.0+0x84>
 80055c4:	45a2      	cmp	sl, r4
 80055c6:	db1d      	blt.n	8005604 <_strtol_l.constprop.0+0xc0>
 80055c8:	fb00 4003 	mla	r0, r0, r3, r4
 80055cc:	2201      	movs	r2, #1
 80055ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80055d2:	e7eb      	b.n	80055ac <_strtol_l.constprop.0+0x68>
 80055d4:	2c2b      	cmp	r4, #43	@ 0x2b
 80055d6:	bf04      	itt	eq
 80055d8:	782c      	ldrbeq	r4, [r5, #0]
 80055da:	1c95      	addeq	r5, r2, #2
 80055dc:	e7cf      	b.n	800557e <_strtol_l.constprop.0+0x3a>
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1da      	bne.n	8005598 <_strtol_l.constprop.0+0x54>
 80055e2:	2c30      	cmp	r4, #48	@ 0x30
 80055e4:	bf0c      	ite	eq
 80055e6:	2308      	moveq	r3, #8
 80055e8:	230a      	movne	r3, #10
 80055ea:	e7d5      	b.n	8005598 <_strtol_l.constprop.0+0x54>
 80055ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80055f0:	2f19      	cmp	r7, #25
 80055f2:	d801      	bhi.n	80055f8 <_strtol_l.constprop.0+0xb4>
 80055f4:	3c37      	subs	r4, #55	@ 0x37
 80055f6:	e7de      	b.n	80055b6 <_strtol_l.constprop.0+0x72>
 80055f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80055fc:	2f19      	cmp	r7, #25
 80055fe:	d804      	bhi.n	800560a <_strtol_l.constprop.0+0xc6>
 8005600:	3c57      	subs	r4, #87	@ 0x57
 8005602:	e7d8      	b.n	80055b6 <_strtol_l.constprop.0+0x72>
 8005604:	f04f 32ff 	mov.w	r2, #4294967295
 8005608:	e7e1      	b.n	80055ce <_strtol_l.constprop.0+0x8a>
 800560a:	1c53      	adds	r3, r2, #1
 800560c:	d108      	bne.n	8005620 <_strtol_l.constprop.0+0xdc>
 800560e:	2322      	movs	r3, #34	@ 0x22
 8005610:	f8ce 3000 	str.w	r3, [lr]
 8005614:	4660      	mov	r0, ip
 8005616:	f1b8 0f00 	cmp.w	r8, #0
 800561a:	d0a0      	beq.n	800555e <_strtol_l.constprop.0+0x1a>
 800561c:	1e69      	subs	r1, r5, #1
 800561e:	e006      	b.n	800562e <_strtol_l.constprop.0+0xea>
 8005620:	b106      	cbz	r6, 8005624 <_strtol_l.constprop.0+0xe0>
 8005622:	4240      	negs	r0, r0
 8005624:	f1b8 0f00 	cmp.w	r8, #0
 8005628:	d099      	beq.n	800555e <_strtol_l.constprop.0+0x1a>
 800562a:	2a00      	cmp	r2, #0
 800562c:	d1f6      	bne.n	800561c <_strtol_l.constprop.0+0xd8>
 800562e:	f8c8 1000 	str.w	r1, [r8]
 8005632:	e794      	b.n	800555e <_strtol_l.constprop.0+0x1a>
 8005634:	080058a1 	.word	0x080058a1

08005638 <strtol>:
 8005638:	4613      	mov	r3, r2
 800563a:	460a      	mov	r2, r1
 800563c:	4601      	mov	r1, r0
 800563e:	4802      	ldr	r0, [pc, #8]	@ (8005648 <strtol+0x10>)
 8005640:	6800      	ldr	r0, [r0, #0]
 8005642:	f7ff bf7f 	b.w	8005544 <_strtol_l.constprop.0>
 8005646:	bf00      	nop
 8005648:	20000020 	.word	0x20000020

0800564c <memset>:
 800564c:	4402      	add	r2, r0
 800564e:	4603      	mov	r3, r0
 8005650:	4293      	cmp	r3, r2
 8005652:	d100      	bne.n	8005656 <memset+0xa>
 8005654:	4770      	bx	lr
 8005656:	f803 1b01 	strb.w	r1, [r3], #1
 800565a:	e7f9      	b.n	8005650 <memset+0x4>

0800565c <strncmp>:
 800565c:	b510      	push	{r4, lr}
 800565e:	b16a      	cbz	r2, 800567c <strncmp+0x20>
 8005660:	3901      	subs	r1, #1
 8005662:	1884      	adds	r4, r0, r2
 8005664:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005668:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800566c:	429a      	cmp	r2, r3
 800566e:	d103      	bne.n	8005678 <strncmp+0x1c>
 8005670:	42a0      	cmp	r0, r4
 8005672:	d001      	beq.n	8005678 <strncmp+0x1c>
 8005674:	2a00      	cmp	r2, #0
 8005676:	d1f5      	bne.n	8005664 <strncmp+0x8>
 8005678:	1ad0      	subs	r0, r2, r3
 800567a:	bd10      	pop	{r4, pc}
 800567c:	4610      	mov	r0, r2
 800567e:	e7fc      	b.n	800567a <strncmp+0x1e>

08005680 <__errno>:
 8005680:	4b01      	ldr	r3, [pc, #4]	@ (8005688 <__errno+0x8>)
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	20000020 	.word	0x20000020

0800568c <__libc_init_array>:
 800568c:	b570      	push	{r4, r5, r6, lr}
 800568e:	4d0d      	ldr	r5, [pc, #52]	@ (80056c4 <__libc_init_array+0x38>)
 8005690:	4c0d      	ldr	r4, [pc, #52]	@ (80056c8 <__libc_init_array+0x3c>)
 8005692:	1b64      	subs	r4, r4, r5
 8005694:	10a4      	asrs	r4, r4, #2
 8005696:	2600      	movs	r6, #0
 8005698:	42a6      	cmp	r6, r4
 800569a:	d109      	bne.n	80056b0 <__libc_init_array+0x24>
 800569c:	4d0b      	ldr	r5, [pc, #44]	@ (80056cc <__libc_init_array+0x40>)
 800569e:	4c0c      	ldr	r4, [pc, #48]	@ (80056d0 <__libc_init_array+0x44>)
 80056a0:	f000 f818 	bl	80056d4 <_init>
 80056a4:	1b64      	subs	r4, r4, r5
 80056a6:	10a4      	asrs	r4, r4, #2
 80056a8:	2600      	movs	r6, #0
 80056aa:	42a6      	cmp	r6, r4
 80056ac:	d105      	bne.n	80056ba <__libc_init_array+0x2e>
 80056ae:	bd70      	pop	{r4, r5, r6, pc}
 80056b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b4:	4798      	blx	r3
 80056b6:	3601      	adds	r6, #1
 80056b8:	e7ee      	b.n	8005698 <__libc_init_array+0xc>
 80056ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80056be:	4798      	blx	r3
 80056c0:	3601      	adds	r6, #1
 80056c2:	e7f2      	b.n	80056aa <__libc_init_array+0x1e>
 80056c4:	080059ac 	.word	0x080059ac
 80056c8:	080059ac 	.word	0x080059ac
 80056cc:	080059ac 	.word	0x080059ac
 80056d0:	080059b0 	.word	0x080059b0

080056d4 <_init>:
 80056d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d6:	bf00      	nop
 80056d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056da:	bc08      	pop	{r3}
 80056dc:	469e      	mov	lr, r3
 80056de:	4770      	bx	lr

080056e0 <_fini>:
 80056e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e2:	bf00      	nop
 80056e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056e6:	bc08      	pop	{r3}
 80056e8:	469e      	mov	lr, r3
 80056ea:	4770      	bx	lr

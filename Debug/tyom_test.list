
tyom_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ce0  080001e0  080001e0  000011e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08003ec0  08003ec0  00004ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040c4  080040c4  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  080040c4  080040c4  000050c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040cc  080040cc  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040cc  080040cc  000050cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040d0  080040d0  000050d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080040d4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a4  20000060  08004134  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000704  08004134  00006704  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f68b  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ba  00000000  00000000  0001571b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  000179d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000956  00000000  00000000  000185e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b0c  00000000  00000000  00018f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001166b  00000000  00000000  0003ba4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d91c7  00000000  00000000  0004d0b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012627c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000338c  00000000  00000000  001262c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0012964c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003ea8 	.word	0x08003ea8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08003ea8 	.word	0x08003ea8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr

08000244 <__aeabi_uldivmod>:
 8000244:	b953      	cbnz	r3, 800025c <__aeabi_uldivmod+0x18>
 8000246:	b94a      	cbnz	r2, 800025c <__aeabi_uldivmod+0x18>
 8000248:	2900      	cmp	r1, #0
 800024a:	bf08      	it	eq
 800024c:	2800      	cmpeq	r0, #0
 800024e:	bf1c      	itt	ne
 8000250:	f04f 31ff 	movne.w	r1, #4294967295
 8000254:	f04f 30ff 	movne.w	r0, #4294967295
 8000258:	f000 b96a 	b.w	8000530 <__aeabi_idiv0>
 800025c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000260:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4770      	bx	lr

08000274 <__udivmoddi4>:
 8000274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000278:	9d08      	ldr	r5, [sp, #32]
 800027a:	460c      	mov	r4, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14e      	bne.n	800031e <__udivmoddi4+0xaa>
 8000280:	4694      	mov	ip, r2
 8000282:	458c      	cmp	ip, r1
 8000284:	4686      	mov	lr, r0
 8000286:	fab2 f282 	clz	r2, r2
 800028a:	d962      	bls.n	8000352 <__udivmoddi4+0xde>
 800028c:	b14a      	cbz	r2, 80002a2 <__udivmoddi4+0x2e>
 800028e:	f1c2 0320 	rsb	r3, r2, #32
 8000292:	4091      	lsls	r1, r2
 8000294:	fa20 f303 	lsr.w	r3, r0, r3
 8000298:	fa0c fc02 	lsl.w	ip, ip, r2
 800029c:	4319      	orrs	r1, r3
 800029e:	fa00 fe02 	lsl.w	lr, r0, r2
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f f68c 	uxth.w	r6, ip
 80002aa:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b2:	fb07 1114 	mls	r1, r7, r4, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb04 f106 	mul.w	r1, r4, r6
 80002be:	4299      	cmp	r1, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x64>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ca:	f080 8112 	bcs.w	80004f2 <__udivmoddi4+0x27e>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 810f 	bls.w	80004f2 <__udivmoddi4+0x27e>
 80002d4:	3c02      	subs	r4, #2
 80002d6:	4463      	add	r3, ip
 80002d8:	1a59      	subs	r1, r3, r1
 80002da:	fa1f f38e 	uxth.w	r3, lr
 80002de:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e2:	fb07 1110 	mls	r1, r7, r0, r1
 80002e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ea:	fb00 f606 	mul.w	r6, r0, r6
 80002ee:	429e      	cmp	r6, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x94>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fa:	f080 80fc 	bcs.w	80004f6 <__udivmoddi4+0x282>
 80002fe:	429e      	cmp	r6, r3
 8000300:	f240 80f9 	bls.w	80004f6 <__udivmoddi4+0x282>
 8000304:	4463      	add	r3, ip
 8000306:	3802      	subs	r0, #2
 8000308:	1b9b      	subs	r3, r3, r6
 800030a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030e:	2100      	movs	r1, #0
 8000310:	b11d      	cbz	r5, 800031a <__udivmoddi4+0xa6>
 8000312:	40d3      	lsrs	r3, r2
 8000314:	2200      	movs	r2, #0
 8000316:	e9c5 3200 	strd	r3, r2, [r5]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d905      	bls.n	800032e <__udivmoddi4+0xba>
 8000322:	b10d      	cbz	r5, 8000328 <__udivmoddi4+0xb4>
 8000324:	e9c5 0100 	strd	r0, r1, [r5]
 8000328:	2100      	movs	r1, #0
 800032a:	4608      	mov	r0, r1
 800032c:	e7f5      	b.n	800031a <__udivmoddi4+0xa6>
 800032e:	fab3 f183 	clz	r1, r3
 8000332:	2900      	cmp	r1, #0
 8000334:	d146      	bne.n	80003c4 <__udivmoddi4+0x150>
 8000336:	42a3      	cmp	r3, r4
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xcc>
 800033a:	4290      	cmp	r0, r2
 800033c:	f0c0 80f0 	bcc.w	8000520 <__udivmoddi4+0x2ac>
 8000340:	1a86      	subs	r6, r0, r2
 8000342:	eb64 0303 	sbc.w	r3, r4, r3
 8000346:	2001      	movs	r0, #1
 8000348:	2d00      	cmp	r5, #0
 800034a:	d0e6      	beq.n	800031a <__udivmoddi4+0xa6>
 800034c:	e9c5 6300 	strd	r6, r3, [r5]
 8000350:	e7e3      	b.n	800031a <__udivmoddi4+0xa6>
 8000352:	2a00      	cmp	r2, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x204>
 8000358:	eba1 040c 	sub.w	r4, r1, ip
 800035c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000360:	fa1f f78c 	uxth.w	r7, ip
 8000364:	2101      	movs	r1, #1
 8000366:	fbb4 f6f8 	udiv	r6, r4, r8
 800036a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036e:	fb08 4416 	mls	r4, r8, r6, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb07 f006 	mul.w	r0, r7, r6
 800037a:	4298      	cmp	r0, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x11c>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f106 34ff 	add.w	r4, r6, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x11a>
 8000388:	4298      	cmp	r0, r3
 800038a:	f200 80cd 	bhi.w	8000528 <__udivmoddi4+0x2b4>
 800038e:	4626      	mov	r6, r4
 8000390:	1a1c      	subs	r4, r3, r0
 8000392:	fa1f f38e 	uxth.w	r3, lr
 8000396:	fbb4 f0f8 	udiv	r0, r4, r8
 800039a:	fb08 4410 	mls	r4, r8, r0, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb00 f707 	mul.w	r7, r0, r7
 80003a6:	429f      	cmp	r7, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x148>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f100 34ff 	add.w	r4, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x146>
 80003b4:	429f      	cmp	r7, r3
 80003b6:	f200 80b0 	bhi.w	800051a <__udivmoddi4+0x2a6>
 80003ba:	4620      	mov	r0, r4
 80003bc:	1bdb      	subs	r3, r3, r7
 80003be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003c2:	e7a5      	b.n	8000310 <__udivmoddi4+0x9c>
 80003c4:	f1c1 0620 	rsb	r6, r1, #32
 80003c8:	408b      	lsls	r3, r1
 80003ca:	fa22 f706 	lsr.w	r7, r2, r6
 80003ce:	431f      	orrs	r7, r3
 80003d0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d4:	fa04 f301 	lsl.w	r3, r4, r1
 80003d8:	ea43 030c 	orr.w	r3, r3, ip
 80003dc:	40f4      	lsrs	r4, r6
 80003de:	fa00 f801 	lsl.w	r8, r0, r1
 80003e2:	0c38      	lsrs	r0, r7, #16
 80003e4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ec:	fa1f fc87 	uxth.w	ip, r7
 80003f0:	fb00 441e 	mls	r4, r0, lr, r4
 80003f4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f8:	fb0e f90c 	mul.w	r9, lr, ip
 80003fc:	45a1      	cmp	r9, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	d90a      	bls.n	800041a <__udivmoddi4+0x1a6>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f10e 3aff 	add.w	sl, lr, #4294967295
 800040a:	f080 8084 	bcs.w	8000516 <__udivmoddi4+0x2a2>
 800040e:	45a1      	cmp	r9, r4
 8000410:	f240 8081 	bls.w	8000516 <__udivmoddi4+0x2a2>
 8000414:	f1ae 0e02 	sub.w	lr, lr, #2
 8000418:	443c      	add	r4, r7
 800041a:	eba4 0409 	sub.w	r4, r4, r9
 800041e:	fa1f f983 	uxth.w	r9, r3
 8000422:	fbb4 f3f0 	udiv	r3, r4, r0
 8000426:	fb00 4413 	mls	r4, r0, r3, r4
 800042a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000432:	45a4      	cmp	ip, r4
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x1d2>
 8000436:	193c      	adds	r4, r7, r4
 8000438:	f103 30ff 	add.w	r0, r3, #4294967295
 800043c:	d267      	bcs.n	800050e <__udivmoddi4+0x29a>
 800043e:	45a4      	cmp	ip, r4
 8000440:	d965      	bls.n	800050e <__udivmoddi4+0x29a>
 8000442:	3b02      	subs	r3, #2
 8000444:	443c      	add	r4, r7
 8000446:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800044a:	fba0 9302 	umull	r9, r3, r0, r2
 800044e:	eba4 040c 	sub.w	r4, r4, ip
 8000452:	429c      	cmp	r4, r3
 8000454:	46ce      	mov	lr, r9
 8000456:	469c      	mov	ip, r3
 8000458:	d351      	bcc.n	80004fe <__udivmoddi4+0x28a>
 800045a:	d04e      	beq.n	80004fa <__udivmoddi4+0x286>
 800045c:	b155      	cbz	r5, 8000474 <__udivmoddi4+0x200>
 800045e:	ebb8 030e 	subs.w	r3, r8, lr
 8000462:	eb64 040c 	sbc.w	r4, r4, ip
 8000466:	fa04 f606 	lsl.w	r6, r4, r6
 800046a:	40cb      	lsrs	r3, r1
 800046c:	431e      	orrs	r6, r3
 800046e:	40cc      	lsrs	r4, r1
 8000470:	e9c5 6400 	strd	r6, r4, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	e750      	b.n	800031a <__udivmoddi4+0xa6>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f103 	lsr.w	r1, r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa24 f303 	lsr.w	r3, r4, r3
 8000488:	4094      	lsls	r4, r2
 800048a:	430c      	orrs	r4, r1
 800048c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000490:	fa00 fe02 	lsl.w	lr, r0, r2
 8000494:	fa1f f78c 	uxth.w	r7, ip
 8000498:	fbb3 f0f8 	udiv	r0, r3, r8
 800049c:	fb08 3110 	mls	r1, r8, r0, r3
 80004a0:	0c23      	lsrs	r3, r4, #16
 80004a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a6:	fb00 f107 	mul.w	r1, r0, r7
 80004aa:	4299      	cmp	r1, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x24c>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b6:	d22c      	bcs.n	8000512 <__udivmoddi4+0x29e>
 80004b8:	4299      	cmp	r1, r3
 80004ba:	d92a      	bls.n	8000512 <__udivmoddi4+0x29e>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1a5b      	subs	r3, r3, r1
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c8:	fb08 3311 	mls	r3, r8, r1, r3
 80004cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d0:	fb01 f307 	mul.w	r3, r1, r7
 80004d4:	42a3      	cmp	r3, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x276>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f101 36ff 	add.w	r6, r1, #4294967295
 80004e0:	d213      	bcs.n	800050a <__udivmoddi4+0x296>
 80004e2:	42a3      	cmp	r3, r4
 80004e4:	d911      	bls.n	800050a <__udivmoddi4+0x296>
 80004e6:	3902      	subs	r1, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	1ae4      	subs	r4, r4, r3
 80004ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004f0:	e739      	b.n	8000366 <__udivmoddi4+0xf2>
 80004f2:	4604      	mov	r4, r0
 80004f4:	e6f0      	b.n	80002d8 <__udivmoddi4+0x64>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e706      	b.n	8000308 <__udivmoddi4+0x94>
 80004fa:	45c8      	cmp	r8, r9
 80004fc:	d2ae      	bcs.n	800045c <__udivmoddi4+0x1e8>
 80004fe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000502:	eb63 0c07 	sbc.w	ip, r3, r7
 8000506:	3801      	subs	r0, #1
 8000508:	e7a8      	b.n	800045c <__udivmoddi4+0x1e8>
 800050a:	4631      	mov	r1, r6
 800050c:	e7ed      	b.n	80004ea <__udivmoddi4+0x276>
 800050e:	4603      	mov	r3, r0
 8000510:	e799      	b.n	8000446 <__udivmoddi4+0x1d2>
 8000512:	4630      	mov	r0, r6
 8000514:	e7d4      	b.n	80004c0 <__udivmoddi4+0x24c>
 8000516:	46d6      	mov	lr, sl
 8000518:	e77f      	b.n	800041a <__udivmoddi4+0x1a6>
 800051a:	4463      	add	r3, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e74d      	b.n	80003bc <__udivmoddi4+0x148>
 8000520:	4606      	mov	r6, r0
 8000522:	4623      	mov	r3, r4
 8000524:	4608      	mov	r0, r1
 8000526:	e70f      	b.n	8000348 <__udivmoddi4+0xd4>
 8000528:	3e02      	subs	r6, #2
 800052a:	4463      	add	r3, ip
 800052c:	e730      	b.n	8000390 <__udivmoddi4+0x11c>
 800052e:	bf00      	nop

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <cli_engine>:
// Created by Artyom on 3/17/2025.
//
#include "cli.h"
#include <string.h>

void cli_engine(UART_HandleTypeDef *huartx, message_handler_t handle) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]

  static uint8_t buf[UART_BUFFER_SIZE] = {0};
  static uint16_t pos = 0;

  if (HAL_OK == HAL_UART_Receive(huartx, buf + pos, 1, UART_RECEIVE_TIMEOUT)) {
 800053e:	4b1f      	ldr	r3, [pc, #124]	@ (80005bc <cli_engine+0x88>)
 8000540:	881b      	ldrh	r3, [r3, #0]
 8000542:	461a      	mov	r2, r3
 8000544:	4b1e      	ldr	r3, [pc, #120]	@ (80005c0 <cli_engine+0x8c>)
 8000546:	18d1      	adds	r1, r2, r3
 8000548:	2364      	movs	r3, #100	@ 0x64
 800054a:	2201      	movs	r2, #1
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f002 fee8 	bl	8003322 <HAL_UART_Receive>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d12c      	bne.n	80005b2 <cli_engine+0x7e>
    if (buf[pos] == '\r') {
 8000558:	4b18      	ldr	r3, [pc, #96]	@ (80005bc <cli_engine+0x88>)
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	461a      	mov	r2, r3
 800055e:	4b18      	ldr	r3, [pc, #96]	@ (80005c0 <cli_engine+0x8c>)
 8000560:	5c9b      	ldrb	r3, [r3, r2]
 8000562:	2b0d      	cmp	r3, #13
 8000564:	d115      	bne.n	8000592 <cli_engine+0x5e>
      buf[pos] = '\0';
 8000566:	4b15      	ldr	r3, [pc, #84]	@ (80005bc <cli_engine+0x88>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	461a      	mov	r2, r3
 800056c:	4b14      	ldr	r3, [pc, #80]	@ (80005c0 <cli_engine+0x8c>)
 800056e:	2100      	movs	r1, #0
 8000570:	5499      	strb	r1, [r3, r2]
      cli_putnl(huartx);
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f000 f84a 	bl	800060c <cli_putnl>
      handle((const char *)buf);
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	4811      	ldr	r0, [pc, #68]	@ (80005c0 <cli_engine+0x8c>)
 800057c:	4798      	blx	r3
      memset(buf, 0, UART_BUFFER_SIZE);
 800057e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000582:	2100      	movs	r1, #0
 8000584:	480e      	ldr	r0, [pc, #56]	@ (80005c0 <cli_engine+0x8c>)
 8000586:	f003 fc4b 	bl	8003e20 <memset>
      pos = 0;
 800058a:	4b0c      	ldr	r3, [pc, #48]	@ (80005bc <cli_engine+0x88>)
 800058c:	2200      	movs	r2, #0
 800058e:	801a      	strh	r2, [r3, #0]
    } else {
      HAL_UART_Transmit(huartx, buf + pos, 1, UART_TRANSMIT_TIMEOUT);
      ++pos;
    }
  }
}
 8000590:	e00f      	b.n	80005b2 <cli_engine+0x7e>
      HAL_UART_Transmit(huartx, buf + pos, 1, UART_TRANSMIT_TIMEOUT);
 8000592:	4b0a      	ldr	r3, [pc, #40]	@ (80005bc <cli_engine+0x88>)
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	461a      	mov	r2, r3
 8000598:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <cli_engine+0x8c>)
 800059a:	18d1      	adds	r1, r2, r3
 800059c:	2364      	movs	r3, #100	@ 0x64
 800059e:	2201      	movs	r2, #1
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f002 fe35 	bl	8003210 <HAL_UART_Transmit>
      ++pos;
 80005a6:	4b05      	ldr	r3, [pc, #20]	@ (80005bc <cli_engine+0x88>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	3301      	adds	r3, #1
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	4b03      	ldr	r3, [pc, #12]	@ (80005bc <cli_engine+0x88>)
 80005b0:	801a      	strh	r2, [r3, #0]
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	2000007c 	.word	0x2000007c
 80005c0:	20000080 	.word	0x20000080

080005c4 <cli_putsnl>:

void cli_putsnl(UART_HandleTypeDef *huartx, const char *s) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
  cli_puts(huartx, s);
 80005ce:	6839      	ldr	r1, [r7, #0]
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 f807 	bl	80005e4 <cli_puts>
  cli_putnl(huartx);
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f000 f818 	bl	800060c <cli_putnl>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <cli_puts>:

void cli_puts(UART_HandleTypeDef *huartx, const char *s) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(huartx, (const uint8_t *)s, strlen(s), UART_TRANSMIT_TIMEOUT);
 80005ee:	6838      	ldr	r0, [r7, #0]
 80005f0:	f7ff fe20 	bl	8000234 <strlen>
 80005f4:	4603      	mov	r3, r0
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	2364      	movs	r3, #100	@ 0x64
 80005fa:	6839      	ldr	r1, [r7, #0]
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f002 fe07 	bl	8003210 <HAL_UART_Transmit>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <cli_putnl>:

void cli_putnl(UART_HandleTypeDef *huartx) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(huartx, (const uint8_t *)"\r\n", 2, UART_TRANSMIT_TIMEOUT);
 8000614:	2364      	movs	r3, #100	@ 0x64
 8000616:	2202      	movs	r2, #2
 8000618:	4903      	ldr	r1, [pc, #12]	@ (8000628 <cli_putnl+0x1c>)
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f002 fdf8 	bl	8003210 <HAL_UART_Transmit>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	08003ec0 	.word	0x08003ec0

0800062c <set_led_config>:
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
    start = HAL_GetTick();
  }
}

void set_led_config(void) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
  uint8_t input = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	71fb      	strb	r3, [r7, #7]

  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000636:	2101      	movs	r1, #1
 8000638:	485e      	ldr	r0, [pc, #376]	@ (80007b4 <set_led_config+0x188>)
 800063a:	f001 fc61 	bl	8001f00 <HAL_GPIO_ReadPin>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	bf0c      	ite	eq
 8000644:	2301      	moveq	r3, #1
 8000646:	2300      	movne	r3, #0
 8000648:	b2db      	uxtb	r3, r3
 800064a:	b25a      	sxtb	r2, r3
 800064c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000650:	4313      	orrs	r3, r2
 8000652:	b25b      	sxtb	r3, r3
 8000654:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) << 1;
 8000656:	2102      	movs	r1, #2
 8000658:	4856      	ldr	r0, [pc, #344]	@ (80007b4 <set_led_config+0x188>)
 800065a:	f001 fc51 	bl	8001f00 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d101      	bne.n	8000668 <set_led_config+0x3c>
 8000664:	2302      	movs	r3, #2
 8000666:	e000      	b.n	800066a <set_led_config+0x3e>
 8000668:	2300      	movs	r3, #0
 800066a:	b25a      	sxtb	r2, r3
 800066c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000670:	4313      	orrs	r3, r2
 8000672:	b25b      	sxtb	r3, r3
 8000674:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) << 2;
 8000676:	2104      	movs	r1, #4
 8000678:	484e      	ldr	r0, [pc, #312]	@ (80007b4 <set_led_config+0x188>)
 800067a:	f001 fc41 	bl	8001f00 <HAL_GPIO_ReadPin>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d101      	bne.n	8000688 <set_led_config+0x5c>
 8000684:	2304      	movs	r3, #4
 8000686:	e000      	b.n	800068a <set_led_config+0x5e>
 8000688:	2300      	movs	r3, #0
 800068a:	b25a      	sxtb	r2, r3
 800068c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000690:	4313      	orrs	r3, r2
 8000692:	b25b      	sxtb	r3, r3
 8000694:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) << 3;
 8000696:	2108      	movs	r1, #8
 8000698:	4846      	ldr	r0, [pc, #280]	@ (80007b4 <set_led_config+0x188>)
 800069a:	f001 fc31 	bl	8001f00 <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d101      	bne.n	80006a8 <set_led_config+0x7c>
 80006a4:	2308      	movs	r3, #8
 80006a6:	e000      	b.n	80006aa <set_led_config+0x7e>
 80006a8:	2300      	movs	r3, #0
 80006aa:	b25a      	sxtb	r2, r3
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) << 4;
 80006b6:	2110      	movs	r1, #16
 80006b8:	483e      	ldr	r0, [pc, #248]	@ (80007b4 <set_led_config+0x188>)
 80006ba:	f001 fc21 	bl	8001f00 <HAL_GPIO_ReadPin>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d101      	bne.n	80006c8 <set_led_config+0x9c>
 80006c4:	2310      	movs	r3, #16
 80006c6:	e000      	b.n	80006ca <set_led_config+0x9e>
 80006c8:	2300      	movs	r3, #0
 80006ca:	b25a      	sxtb	r2, r3
 80006cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	b25b      	sxtb	r3, r3
 80006d4:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) << 5;
 80006d6:	2120      	movs	r1, #32
 80006d8:	4836      	ldr	r0, [pc, #216]	@ (80007b4 <set_led_config+0x188>)
 80006da:	f001 fc11 	bl	8001f00 <HAL_GPIO_ReadPin>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d101      	bne.n	80006e8 <set_led_config+0xbc>
 80006e4:	2320      	movs	r3, #32
 80006e6:	e000      	b.n	80006ea <set_led_config+0xbe>
 80006e8:	2300      	movs	r3, #0
 80006ea:	b25a      	sxtb	r2, r3
 80006ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) << 6;
 80006f6:	2140      	movs	r1, #64	@ 0x40
 80006f8:	482e      	ldr	r0, [pc, #184]	@ (80007b4 <set_led_config+0x188>)
 80006fa:	f001 fc01 	bl	8001f00 <HAL_GPIO_ReadPin>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d101      	bne.n	8000708 <set_led_config+0xdc>
 8000704:	2340      	movs	r3, #64	@ 0x40
 8000706:	e000      	b.n	800070a <set_led_config+0xde>
 8000708:	2300      	movs	r3, #0
 800070a:	b25a      	sxtb	r2, r3
 800070c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000710:	4313      	orrs	r3, r2
 8000712:	b25b      	sxtb	r3, r3
 8000714:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) << 7;
 8000716:	2180      	movs	r1, #128	@ 0x80
 8000718:	4826      	ldr	r0, [pc, #152]	@ (80007b4 <set_led_config+0x188>)
 800071a:	f001 fbf1 	bl	8001f00 <HAL_GPIO_ReadPin>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d101      	bne.n	8000728 <set_led_config+0xfc>
 8000724:	2380      	movs	r3, #128	@ 0x80
 8000726:	e000      	b.n	800072a <set_led_config+0xfe>
 8000728:	2300      	movs	r3, #0
 800072a:	b25a      	sxtb	r2, r3
 800072c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000730:	4313      	orrs	r3, r2
 8000732:	b25b      	sxtb	r3, r3
 8000734:	71fb      	strb	r3, [r7, #7]
    BLINK_50,
    BLINK_100,
    BLINK_1000,
  };

  switch (input) {
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	2b08      	cmp	r3, #8
 800073a:	dc2a      	bgt.n	8000792 <set_led_config+0x166>
 800073c:	2b02      	cmp	r3, #2
 800073e:	da1e      	bge.n	800077e <set_led_config+0x152>
 8000740:	2b00      	cmp	r3, #0
 8000742:	d002      	beq.n	800074a <set_led_config+0x11e>
 8000744:	2b01      	cmp	r3, #1
 8000746:	d00d      	beq.n	8000764 <set_led_config+0x138>
 8000748:	e023      	b.n	8000792 <set_led_config+0x166>
  case 0:
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800074a:	2201      	movs	r2, #1
 800074c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000750:	4819      	ldr	r0, [pc, #100]	@ (80007b8 <set_led_config+0x18c>)
 8000752:	f001 fbed 	bl	8001f30 <HAL_GPIO_WritePin>
    BLINK_FREQ = 0;
 8000756:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <set_led_config+0x190>)
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
    LED_MODE = LED_OFF;
 800075c:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <set_led_config+0x194>)
 800075e:	2201      	movs	r2, #1
 8000760:	601a      	str	r2, [r3, #0]
    break;
 8000762:	e023      	b.n	80007ac <set_led_config+0x180>
  case 1:
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800076a:	4813      	ldr	r0, [pc, #76]	@ (80007b8 <set_led_config+0x18c>)
 800076c:	f001 fbe0 	bl	8001f30 <HAL_GPIO_WritePin>
    BLINK_FREQ = 1;
 8000770:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <set_led_config+0x190>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
    LED_MODE = LED_OFF;
 8000776:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <set_led_config+0x194>)
 8000778:	2201      	movs	r2, #1
 800077a:	601a      	str	r2, [r3, #0]
    break;
 800077c:	e016      	b.n	80007ac <set_led_config+0x180>
  case 2 ... 8:
    LED_MODE = LED_ON;
 800077e:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <set_led_config+0x194>)
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
    BLINK_FREQ = fmap[input];
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	4a0f      	ldr	r2, [pc, #60]	@ (80007c4 <set_led_config+0x198>)
 8000788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800078c:	461a      	mov	r2, r3
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <set_led_config+0x190>)
 8000790:	601a      	str	r2, [r3, #0]
  default:
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000798:	4807      	ldr	r0, [pc, #28]	@ (80007b8 <set_led_config+0x18c>)
 800079a:	f001 fbc9 	bl	8001f30 <HAL_GPIO_WritePin>
    LED_MODE = LED_OFF;
 800079e:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <set_led_config+0x194>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	601a      	str	r2, [r3, #0]
    BLINK_FREQ = 0;
 80007a4:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <set_led_config+0x190>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
  }
}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40020000 	.word	0x40020000
 80007b8:	40020400 	.word	0x40020400
 80007bc:	20000000 	.word	0x20000000
 80007c0:	200005b8 	.word	0x200005b8
 80007c4:	08003f94 	.word	0x08003f94

080007c8 <parse_set_expr>:

static int32_t parse_set_expr(const char* s) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  if (!s) {
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d105      	bne.n	80007e2 <parse_set_expr+0x1a>
    return -1;
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
 80007da:	e02a      	b.n	8000832 <parse_set_expr+0x6a>
  }
  while (*s && !isdigit((const uint8_t)*s)) {
    ++s;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3301      	adds	r3, #1
 80007e0:	607b      	str	r3, [r7, #4]
  while (*s && !isdigit((const uint8_t)*s)) {
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d009      	beq.n	80007fe <parse_set_expr+0x36>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	3301      	adds	r3, #1
 80007f0:	4a12      	ldr	r2, [pc, #72]	@ (800083c <parse_set_expr+0x74>)
 80007f2:	4413      	add	r3, r2
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0ee      	beq.n	80007dc <parse_set_expr+0x14>
  }
  const int32_t res = atoi(s);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f003 fa86 	bl	8003d10 <atoi>
 8000804:	60f8      	str	r0, [r7, #12]
  while (isdigit((const uint8_t)*s)) {
 8000806:	e002      	b.n	800080e <parse_set_expr+0x46>
    ++s;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3301      	adds	r3, #1
 800080c:	607b      	str	r3, [r7, #4]
  while (isdigit((const uint8_t)*s)) {
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	3301      	adds	r3, #1
 8000814:	4a09      	ldr	r2, [pc, #36]	@ (800083c <parse_set_expr+0x74>)
 8000816:	4413      	add	r3, r2
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	2b00      	cmp	r3, #0
 8000820:	d1f2      	bne.n	8000808 <parse_set_expr+0x40>
  }
  return (*s == '\0') ? res : -1;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d101      	bne.n	800082e <parse_set_expr+0x66>
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	e001      	b.n	8000832 <parse_set_expr+0x6a>
 800082e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000832:	4618      	mov	r0, r3
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	08003fc0 	.word	0x08003fc0

08000840 <led_cli_handler>:


static void led_cli_handler(const char *message) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  if (!strcmp(message, "help")) {
 8000848:	493e      	ldr	r1, [pc, #248]	@ (8000944 <led_cli_handler+0x104>)
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff fce8 	bl	8000220 <strcmp>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d108      	bne.n	8000868 <led_cli_handler+0x28>
      cli_putsnl(&huart1, "led <on/off>");
 8000856:	493c      	ldr	r1, [pc, #240]	@ (8000948 <led_cli_handler+0x108>)
 8000858:	483c      	ldr	r0, [pc, #240]	@ (800094c <led_cli_handler+0x10c>)
 800085a:	f7ff feb3 	bl	80005c4 <cli_putsnl>
      cli_putsnl(&huart1, "led mode <get/set/reset>");
 800085e:	493c      	ldr	r1, [pc, #240]	@ (8000950 <led_cli_handler+0x110>)
 8000860:	483a      	ldr	r0, [pc, #232]	@ (800094c <led_cli_handler+0x10c>)
 8000862:	f7ff feaf 	bl	80005c4 <cli_putsnl>
    cli_putsnl(&huart1, static_itoa(BLINK_FREQ));
  }
  else {
    cli_putsnl(&huart1, "error: command not found");
  }
}
 8000866:	e069      	b.n	800093c <led_cli_handler+0xfc>
  else if (!strcmp(message, "led on")) {
 8000868:	493a      	ldr	r1, [pc, #232]	@ (8000954 <led_cli_handler+0x114>)
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff fcd8 	bl	8000220 <strcmp>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10d      	bne.n	8000892 <led_cli_handler+0x52>
    LED_MODE = LED_ON;
 8000876:	4b38      	ldr	r3, [pc, #224]	@ (8000958 <led_cli_handler+0x118>)
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000882:	4836      	ldr	r0, [pc, #216]	@ (800095c <led_cli_handler+0x11c>)
 8000884:	f001 fb54 	bl	8001f30 <HAL_GPIO_WritePin>
    cli_putsnl(&huart1, "OK!");
 8000888:	4935      	ldr	r1, [pc, #212]	@ (8000960 <led_cli_handler+0x120>)
 800088a:	4830      	ldr	r0, [pc, #192]	@ (800094c <led_cli_handler+0x10c>)
 800088c:	f7ff fe9a 	bl	80005c4 <cli_putsnl>
}
 8000890:	e054      	b.n	800093c <led_cli_handler+0xfc>
  else if (!strcmp(message, "led off")) {
 8000892:	4934      	ldr	r1, [pc, #208]	@ (8000964 <led_cli_handler+0x124>)
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f7ff fcc3 	bl	8000220 <strcmp>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d10d      	bne.n	80008bc <led_cli_handler+0x7c>
    LED_MODE = LED_OFF;
 80008a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000958 <led_cli_handler+0x118>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80008a6:	2201      	movs	r2, #1
 80008a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008ac:	482b      	ldr	r0, [pc, #172]	@ (800095c <led_cli_handler+0x11c>)
 80008ae:	f001 fb3f 	bl	8001f30 <HAL_GPIO_WritePin>
    cli_putsnl(&huart1, "OK!");
 80008b2:	492b      	ldr	r1, [pc, #172]	@ (8000960 <led_cli_handler+0x120>)
 80008b4:	4825      	ldr	r0, [pc, #148]	@ (800094c <led_cli_handler+0x10c>)
 80008b6:	f7ff fe85 	bl	80005c4 <cli_putsnl>
}
 80008ba:	e03f      	b.n	800093c <led_cli_handler+0xfc>
  else if (!strncmp(message, "led mode set ", strlen("led mode set "))) {
 80008bc:	220d      	movs	r2, #13
 80008be:	492a      	ldr	r1, [pc, #168]	@ (8000968 <led_cli_handler+0x128>)
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f003 fab5 	bl	8003e30 <strncmp>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d10f      	bne.n	80008ec <led_cli_handler+0xac>
    const int32_t freq = parse_set_expr(message);
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff7b 	bl	80007c8 <parse_set_expr>
 80008d2:	60f8      	str	r0, [r7, #12]
    if (-1 != freq) {
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008da:	d002      	beq.n	80008e2 <led_cli_handler+0xa2>
      BLINK_FREQ = freq;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	4a23      	ldr	r2, [pc, #140]	@ (800096c <led_cli_handler+0x12c>)
 80008e0:	6013      	str	r3, [r2, #0]
    cli_putsnl(&huart1, "OK!");
 80008e2:	491f      	ldr	r1, [pc, #124]	@ (8000960 <led_cli_handler+0x120>)
 80008e4:	4819      	ldr	r0, [pc, #100]	@ (800094c <led_cli_handler+0x10c>)
 80008e6:	f7ff fe6d 	bl	80005c4 <cli_putsnl>
}
 80008ea:	e027      	b.n	800093c <led_cli_handler+0xfc>
  else if (!strcmp(message, "led mode reset")) {
 80008ec:	4920      	ldr	r1, [pc, #128]	@ (8000970 <led_cli_handler+0x130>)
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff fc96 	bl	8000220 <strcmp>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d106      	bne.n	8000908 <led_cli_handler+0xc8>
    set_led_config();
 80008fa:	f7ff fe97 	bl	800062c <set_led_config>
    cli_putsnl(&huart1, "led mode is now configured by physical pins");
 80008fe:	491d      	ldr	r1, [pc, #116]	@ (8000974 <led_cli_handler+0x134>)
 8000900:	4812      	ldr	r0, [pc, #72]	@ (800094c <led_cli_handler+0x10c>)
 8000902:	f7ff fe5f 	bl	80005c4 <cli_putsnl>
}
 8000906:	e019      	b.n	800093c <led_cli_handler+0xfc>
  else if (!strcmp(message, "led mode get")) {
 8000908:	491b      	ldr	r1, [pc, #108]	@ (8000978 <led_cli_handler+0x138>)
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff fc88 	bl	8000220 <strcmp>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d10e      	bne.n	8000934 <led_cli_handler+0xf4>
    cli_puts(&huart1, "led mode is: ");
 8000916:	4919      	ldr	r1, [pc, #100]	@ (800097c <led_cli_handler+0x13c>)
 8000918:	480c      	ldr	r0, [pc, #48]	@ (800094c <led_cli_handler+0x10c>)
 800091a:	f7ff fe63 	bl	80005e4 <cli_puts>
    cli_putsnl(&huart1, static_itoa(BLINK_FREQ));
 800091e:	4b13      	ldr	r3, [pc, #76]	@ (800096c <led_cli_handler+0x12c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f000 fc02 	bl	800112c <static_itoa>
 8000928:	4603      	mov	r3, r0
 800092a:	4619      	mov	r1, r3
 800092c:	4807      	ldr	r0, [pc, #28]	@ (800094c <led_cli_handler+0x10c>)
 800092e:	f7ff fe49 	bl	80005c4 <cli_putsnl>
}
 8000932:	e003      	b.n	800093c <led_cli_handler+0xfc>
    cli_putsnl(&huart1, "error: command not found");
 8000934:	4912      	ldr	r1, [pc, #72]	@ (8000980 <led_cli_handler+0x140>)
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <led_cli_handler+0x10c>)
 8000938:	f7ff fe44 	bl	80005c4 <cli_putsnl>
}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	08003ec4 	.word	0x08003ec4
 8000948:	08003ecc 	.word	0x08003ecc
 800094c:	20000530 	.word	0x20000530
 8000950:	08003edc 	.word	0x08003edc
 8000954:	08003ef8 	.word	0x08003ef8
 8000958:	200005b8 	.word	0x200005b8
 800095c:	40020400 	.word	0x40020400
 8000960:	08003f00 	.word	0x08003f00
 8000964:	08003f04 	.word	0x08003f04
 8000968:	08003f0c 	.word	0x08003f0c
 800096c:	20000000 	.word	0x20000000
 8000970:	08003f1c 	.word	0x08003f1c
 8000974:	08003f2c 	.word	0x08003f2c
 8000978:	08003f58 	.word	0x08003f58
 800097c:	08003f68 	.word	0x08003f68
 8000980:	08003f78 	.word	0x08003f78

08000984 <led_cli>:

void led_cli() {
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  cli_engine(&huart1, led_cli_handler);
 8000988:	4902      	ldr	r1, [pc, #8]	@ (8000994 <led_cli+0x10>)
 800098a:	4803      	ldr	r0, [pc, #12]	@ (8000998 <led_cli+0x14>)
 800098c:	f7ff fdd2 	bl	8000534 <cli_engine>
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	08000841 	.word	0x08000841
 8000998:	20000530 	.word	0x20000530

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009a0:	f000 f9f0 	bl	8000d84 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a4:	f000 fc45 	bl	8001232 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a8:	f000 f80e 	bl	80009c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ac:	f000 f954 	bl	8000c58 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009b0:	f000 f8e2 	bl	8000b78 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80009b4:	f000 f920 	bl	8000bf8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80009b8:	f000 f862 	bl	8000a80 <MX_ADC1_Init>
  MX_DAC_Init();
 80009bc:	f000 f8b2 	bl	8000b24 <MX_DAC_Init>
//  set_led_config();

  while (1)
  {
//    blink_led(BLINK_FREQ);
    led_cli();
 80009c0:	f7ff ffe0 	bl	8000984 <led_cli>
 80009c4:	e7fc      	b.n	80009c0 <main+0x24>
	...

080009c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b094      	sub	sp, #80	@ 0x50
 80009cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ce:	f107 0320 	add.w	r3, r7, #32
 80009d2:	2230      	movs	r2, #48	@ 0x30
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f003 fa22 	bl	8003e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ec:	4b22      	ldr	r3, [pc, #136]	@ (8000a78 <SystemClock_Config+0xb0>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f0:	4a21      	ldr	r2, [pc, #132]	@ (8000a78 <SystemClock_Config+0xb0>)
 80009f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a78 <SystemClock_Config+0xb0>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a04:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <SystemClock_Config+0xb4>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a7c <SystemClock_Config+0xb4>)
 8000a0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <SystemClock_Config+0xb4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a20:	2302      	movs	r3, #2
 8000a22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a24:	2301      	movs	r3, #1
 8000a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a28:	2310      	movs	r3, #16
 8000a2a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a30:	f107 0320 	add.w	r3, r7, #32
 8000a34:	4618      	mov	r0, r3
 8000a36:	f001 fbc9 	bl	80021cc <HAL_RCC_OscConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000a40:	f000 f9cc 	bl	8000ddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a44:	230f      	movs	r3, #15
 8000a46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 fe58 	bl	8002714 <HAL_RCC_ClockConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a6a:	f000 f9b7 	bl	8000ddc <Error_Handler>
  }
}
 8000a6e:	bf00      	nop
 8000a70:	3750      	adds	r7, #80	@ 0x50
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40007000 	.word	0x40007000

08000a80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a86:	463b      	mov	r3, r7
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a92:	4b21      	ldr	r3, [pc, #132]	@ (8000b18 <MX_ADC1_Init+0x98>)
 8000a94:	4a21      	ldr	r2, [pc, #132]	@ (8000b1c <MX_ADC1_Init+0x9c>)
 8000a96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a98:	4b1f      	ldr	r3, [pc, #124]	@ (8000b18 <MX_ADC1_Init+0x98>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000b18 <MX_ADC1_Init+0x98>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b18 <MX_ADC1_Init+0x98>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8000b18 <MX_ADC1_Init+0x98>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ab0:	4b19      	ldr	r3, [pc, #100]	@ (8000b18 <MX_ADC1_Init+0x98>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	@ (8000b18 <MX_ADC1_Init+0x98>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000abe:	4b16      	ldr	r3, [pc, #88]	@ (8000b18 <MX_ADC1_Init+0x98>)
 8000ac0:	4a17      	ldr	r2, [pc, #92]	@ (8000b20 <MX_ADC1_Init+0xa0>)
 8000ac2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	@ (8000b18 <MX_ADC1_Init+0x98>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000aca:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <MX_ADC1_Init+0x98>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <MX_ADC1_Init+0x98>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <MX_ADC1_Init+0x98>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ade:	480e      	ldr	r0, [pc, #56]	@ (8000b18 <MX_ADC1_Init+0x98>)
 8000ae0:	f000 fc04 	bl	80012ec <HAL_ADC_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000aea:	f000 f977 	bl	8000ddc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000aee:	230a      	movs	r3, #10
 8000af0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af2:	2301      	movs	r3, #1
 8000af4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afa:	463b      	mov	r3, r7
 8000afc:	4619      	mov	r1, r3
 8000afe:	4806      	ldr	r0, [pc, #24]	@ (8000b18 <MX_ADC1_Init+0x98>)
 8000b00:	f000 fc38 	bl	8001374 <HAL_ADC_ConfigChannel>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000b0a:	f000 f967 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000480 	.word	0x20000480
 8000b1c:	40012000 	.word	0x40012000
 8000b20:	0f000001 	.word	0x0f000001

08000b24 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000b32:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <MX_DAC_Init+0x4c>)
 8000b34:	4a0f      	ldr	r2, [pc, #60]	@ (8000b74 <MX_DAC_Init+0x50>)
 8000b36:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000b38:	480d      	ldr	r0, [pc, #52]	@ (8000b70 <MX_DAC_Init+0x4c>)
 8000b3a:	f000 ffc9 	bl	8001ad0 <HAL_DAC_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000b44:	f000 f94a 	bl	8000ddc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b50:	463b      	mov	r3, r7
 8000b52:	2200      	movs	r2, #0
 8000b54:	4619      	mov	r1, r3
 8000b56:	4806      	ldr	r0, [pc, #24]	@ (8000b70 <MX_DAC_Init+0x4c>)
 8000b58:	f000 ffdc 	bl	8001b14 <HAL_DAC_ConfigChannel>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000b62:	f000 f93b 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200004c8 	.word	0x200004c8
 8000b74:	40007400 	.word	0x40007400

08000b78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bec <MX_I2C1_Init+0x74>)
 8000b7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000bf0 <MX_I2C1_Init+0x78>)
 8000b80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000b82:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <MX_I2C1_Init+0x74>)
 8000b84:	4a1b      	ldr	r2, [pc, #108]	@ (8000bf4 <MX_I2C1_Init+0x7c>)
 8000b86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b88:	4b18      	ldr	r3, [pc, #96]	@ (8000bec <MX_I2C1_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <MX_I2C1_Init+0x74>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b94:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <MX_I2C1_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <MX_I2C1_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <MX_I2C1_Init+0x74>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <MX_I2C1_Init+0x74>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <MX_I2C1_Init+0x74>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bb2:	480e      	ldr	r0, [pc, #56]	@ (8000bec <MX_I2C1_Init+0x74>)
 8000bb4:	f001 f9d6 	bl	8001f64 <HAL_I2C_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bbe:	f000 f90d 	bl	8000ddc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4809      	ldr	r0, [pc, #36]	@ (8000bec <MX_I2C1_Init+0x74>)
 8000bc6:	f001 fa69 	bl	800209c <HAL_I2CEx_ConfigAnalogFilter>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bd0:	f000 f904 	bl	8000ddc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4805      	ldr	r0, [pc, #20]	@ (8000bec <MX_I2C1_Init+0x74>)
 8000bd8:	f001 faab 	bl	8002132 <HAL_I2CEx_ConfigDigitalFilter>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000be2:	f000 f8fb 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200004dc 	.word	0x200004dc
 8000bf0:	40005400 	.word	0x40005400
 8000bf4:	00303d5b 	.word	0x00303d5b

08000bf8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <MX_USART1_UART_Init+0x58>)
 8000bfe:	4a15      	ldr	r2, [pc, #84]	@ (8000c54 <MX_USART1_UART_Init+0x5c>)
 8000c00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c02:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <MX_USART1_UART_Init+0x58>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0a:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <MX_USART1_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <MX_USART1_UART_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <MX_USART1_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <MX_USART1_UART_Init+0x58>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <MX_USART1_UART_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c28:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <MX_USART1_UART_Init+0x58>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <MX_USART1_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <MX_USART1_UART_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <MX_USART1_UART_Init+0x58>)
 8000c3c:	f002 fa9a 	bl	8003174 <HAL_UART_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c46:	f000 f8c9 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000530 	.word	0x20000530
 8000c54:	40011000 	.word	0x40011000

08000c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	@ 0x28
 8000c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c6e:	4b41      	ldr	r3, [pc, #260]	@ (8000d74 <MX_GPIO_Init+0x11c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a40      	ldr	r2, [pc, #256]	@ (8000d74 <MX_GPIO_Init+0x11c>)
 8000c74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d74 <MX_GPIO_Init+0x11c>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	4b3b      	ldr	r3, [pc, #236]	@ (8000d74 <MX_GPIO_Init+0x11c>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a3a      	ldr	r2, [pc, #232]	@ (8000d74 <MX_GPIO_Init+0x11c>)
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b38      	ldr	r3, [pc, #224]	@ (8000d74 <MX_GPIO_Init+0x11c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f003 0304 	and.w	r3, r3, #4
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	4b35      	ldr	r3, [pc, #212]	@ (8000d74 <MX_GPIO_Init+0x11c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	4a34      	ldr	r2, [pc, #208]	@ (8000d74 <MX_GPIO_Init+0x11c>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000caa:	4b32      	ldr	r3, [pc, #200]	@ (8000d74 <MX_GPIO_Init+0x11c>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	4b2f      	ldr	r3, [pc, #188]	@ (8000d74 <MX_GPIO_Init+0x11c>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a2e      	ldr	r2, [pc, #184]	@ (8000d74 <MX_GPIO_Init+0x11c>)
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d74 <MX_GPIO_Init+0x11c>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	210c      	movs	r1, #12
 8000cd2:	4829      	ldr	r0, [pc, #164]	@ (8000d78 <MX_GPIO_Init+0x120>)
 8000cd4:	f001 f92c 	bl	8001f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_ACT_LED_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 8000cde:	4827      	ldr	r0, [pc, #156]	@ (8000d7c <MX_GPIO_Init+0x124>)
 8000ce0:	f001 f926 	bl	8001f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ce4:	230c      	movs	r3, #12
 8000ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	481f      	ldr	r0, [pc, #124]	@ (8000d78 <MX_GPIO_Init+0x120>)
 8000cfc:	f000 ff64 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8000d00:	23ee      	movs	r3, #238	@ 0xee
 8000d02:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	481b      	ldr	r0, [pc, #108]	@ (8000d80 <MX_GPIO_Init+0x128>)
 8000d14:	f000 ff58 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACT_LED_Pin */
  GPIO_InitStruct.Pin = MCU_ACT_LED_Pin;
 8000d18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_ACT_LED_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4812      	ldr	r0, [pc, #72]	@ (8000d7c <MX_GPIO_Init+0x124>)
 8000d32:	f000 ff49 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480b      	ldr	r0, [pc, #44]	@ (8000d78 <MX_GPIO_Init+0x120>)
 8000d4c:	f000 ff3c 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d50:	2310      	movs	r3, #16
 8000d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <MX_GPIO_Init+0x124>)
 8000d68:	f000 ff2e 	bl	8001bc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d6c:	bf00      	nop
 8000d6e:	3728      	adds	r7, #40	@ 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020800 	.word	0x40020800
 8000d7c:	40020400 	.word	0x40020400
 8000d80:	40020000 	.word	0x40020000

08000d84 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d96:	f000 fe23 	bl	80019e0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000da6:	231f      	movs	r3, #31
 8000da8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000daa:	2387      	movs	r3, #135	@ 0x87
 8000dac:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000db2:	2300      	movs	r3, #0
 8000db4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000db6:	2301      	movs	r3, #1
 8000db8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 fe41 	bl	8001a50 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000dce:	2004      	movs	r0, #4
 8000dd0:	f000 fe1e 	bl	8001a10 <HAL_MPU_Enable>

}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de0:	b672      	cpsid	i
}
 8000de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <Error_Handler+0x8>

08000de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	4b0f      	ldr	r3, [pc, #60]	@ (8000e2c <HAL_MspInit+0x44>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	4a0e      	ldr	r2, [pc, #56]	@ (8000e2c <HAL_MspInit+0x44>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000e2c <HAL_MspInit+0x44>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e06:	4b09      	ldr	r3, [pc, #36]	@ (8000e2c <HAL_MspInit+0x44>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0a:	4a08      	ldr	r2, [pc, #32]	@ (8000e2c <HAL_MspInit+0x44>)
 8000e0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e12:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <HAL_MspInit+0x44>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800

08000e30 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	@ 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a15      	ldr	r2, [pc, #84]	@ (8000ea4 <HAL_ADC_MspInit+0x74>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d123      	bne.n	8000e9a <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e52:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <HAL_ADC_MspInit+0x78>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e56:	4a14      	ldr	r2, [pc, #80]	@ (8000ea8 <HAL_ADC_MspInit+0x78>)
 8000e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <HAL_ADC_MspInit+0x78>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <HAL_ADC_MspInit+0x78>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea8 <HAL_ADC_MspInit+0x78>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <HAL_ADC_MspInit+0x78>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e82:	2301      	movs	r3, #1
 8000e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e86:	2303      	movs	r3, #3
 8000e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	@ (8000eac <HAL_ADC_MspInit+0x7c>)
 8000e96:	f000 fe97 	bl	8001bc8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	@ 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40012000 	.word	0x40012000
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020800 	.word	0x40020800

08000eb0 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	@ 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a15      	ldr	r2, [pc, #84]	@ (8000f24 <HAL_DAC_MspInit+0x74>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d123      	bne.n	8000f1a <HAL_DAC_MspInit+0x6a>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000ed2:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <HAL_DAC_MspInit+0x78>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed6:	4a14      	ldr	r2, [pc, #80]	@ (8000f28 <HAL_DAC_MspInit+0x78>)
 8000ed8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000edc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ede:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <HAL_DAC_MspInit+0x78>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <HAL_DAC_MspInit+0x78>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	4a0e      	ldr	r2, [pc, #56]	@ (8000f28 <HAL_DAC_MspInit+0x78>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <HAL_DAC_MspInit+0x78>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f02:	2310      	movs	r3, #16
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f06:	2303      	movs	r3, #3
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <HAL_DAC_MspInit+0x7c>)
 8000f16:	f000 fe57 	bl	8001bc8 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8000f1a:	bf00      	nop
 8000f1c:	3728      	adds	r7, #40	@ 0x28
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40007400 	.word	0x40007400
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020000 	.word	0x40020000

08000f30 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b0aa      	sub	sp, #168	@ 0xa8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2280      	movs	r2, #128	@ 0x80
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f002 ff65 	bl	8003e20 <memset>
  if(hi2c->Instance==I2C1)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a21      	ldr	r2, [pc, #132]	@ (8000fe0 <HAL_I2C_MspInit+0xb0>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d13b      	bne.n	8000fd8 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f60:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f64:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 fdb6 	bl	8002ae0 <HAL_RCCEx_PeriphCLKConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f7a:	f7ff ff2f 	bl	8000ddc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <HAL_I2C_MspInit+0xb4>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a18      	ldr	r2, [pc, #96]	@ (8000fe4 <HAL_I2C_MspInit+0xb4>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <HAL_I2C_MspInit+0xb4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f96:	23c0      	movs	r3, #192	@ 0xc0
 8000f98:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f9c:	2312      	movs	r3, #18
 8000f9e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000fb8:	4619      	mov	r1, r3
 8000fba:	480b      	ldr	r0, [pc, #44]	@ (8000fe8 <HAL_I2C_MspInit+0xb8>)
 8000fbc:	f000 fe04 	bl	8001bc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fc0:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <HAL_I2C_MspInit+0xb4>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc4:	4a07      	ldr	r2, [pc, #28]	@ (8000fe4 <HAL_I2C_MspInit+0xb4>)
 8000fc6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fcc:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <HAL_I2C_MspInit+0xb4>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000fd8:	bf00      	nop
 8000fda:	37a8      	adds	r7, #168	@ 0xa8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40005400 	.word	0x40005400
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020400 	.word	0x40020400

08000fec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b0aa      	sub	sp, #168	@ 0xa8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2280      	movs	r2, #128	@ 0x80
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f002 ff07 	bl	8003e20 <memset>
  if(huart->Instance==USART1)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a21      	ldr	r2, [pc, #132]	@ (800109c <HAL_UART_MspInit+0xb0>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d13b      	bne.n	8001094 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800101c:	2340      	movs	r3, #64	@ 0x40
 800101e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001020:	2300      	movs	r3, #0
 8001022:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4618      	mov	r0, r3
 800102a:	f001 fd59 	bl	8002ae0 <HAL_RCCEx_PeriphCLKConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001034:	f7ff fed2 	bl	8000ddc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001038:	4b19      	ldr	r3, [pc, #100]	@ (80010a0 <HAL_UART_MspInit+0xb4>)
 800103a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103c:	4a18      	ldr	r2, [pc, #96]	@ (80010a0 <HAL_UART_MspInit+0xb4>)
 800103e:	f043 0310 	orr.w	r3, r3, #16
 8001042:	6453      	str	r3, [r2, #68]	@ 0x44
 8001044:	4b16      	ldr	r3, [pc, #88]	@ (80010a0 <HAL_UART_MspInit+0xb4>)
 8001046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001048:	f003 0310 	and.w	r3, r3, #16
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <HAL_UART_MspInit+0xb4>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001054:	4a12      	ldr	r2, [pc, #72]	@ (80010a0 <HAL_UART_MspInit+0xb4>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6313      	str	r3, [r2, #48]	@ 0x30
 800105c:	4b10      	ldr	r3, [pc, #64]	@ (80010a0 <HAL_UART_MspInit+0xb4>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001068:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800106c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001082:	2307      	movs	r3, #7
 8001084:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001088:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800108c:	4619      	mov	r1, r3
 800108e:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <HAL_UART_MspInit+0xb8>)
 8001090:	f000 fd9a 	bl	8001bc8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001094:	bf00      	nop
 8001096:	37a8      	adds	r7, #168	@ 0xa8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40011000 	.word	0x40011000
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020000 	.word	0x40020000

080010a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <NMI_Handler+0x4>

080010b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <HardFault_Handler+0x4>

080010b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <MemManage_Handler+0x4>

080010c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <BusFault_Handler+0x4>

080010c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <UsageFault_Handler+0x4>

080010d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fe:	f000 f8d5 	bl	80012ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <SystemInit+0x20>)
 800110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001112:	4a05      	ldr	r2, [pc, #20]	@ (8001128 <SystemInit+0x20>)
 8001114:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001118:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <static_itoa>:
  if (HAL_OK == HAL_UART_Receive(&huart1, &rxbuf, 1, 10)) {
    HAL_UART_Transmit(&huart1, &rxbuf, 1, 10);
  }
}

const char *static_itoa(uint32_t n) {
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  static char res[UINT32_MAX_DIGITS + 1] = {0};
  uint8_t i = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	73fb      	strb	r3, [r7, #15]

  while (n > 9) {
 8001138:	e018      	b.n	800116c <static_itoa+0x40>
    res[i] = '0' + (n % 10);
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	4b26      	ldr	r3, [pc, #152]	@ (80011d8 <static_itoa+0xac>)
 800113e:	fba3 2301 	umull	r2, r3, r3, r1
 8001142:	08da      	lsrs	r2, r3, #3
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	1aca      	subs	r2, r1, r3
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	3230      	adds	r2, #48	@ 0x30
 8001154:	b2d1      	uxtb	r1, r2
 8001156:	4a21      	ldr	r2, [pc, #132]	@ (80011dc <static_itoa+0xb0>)
 8001158:	54d1      	strb	r1, [r2, r3]
    n /= 10;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a1e      	ldr	r2, [pc, #120]	@ (80011d8 <static_itoa+0xac>)
 800115e:	fba2 2303 	umull	r2, r3, r2, r3
 8001162:	08db      	lsrs	r3, r3, #3
 8001164:	607b      	str	r3, [r7, #4]
    ++i;
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	3301      	adds	r3, #1
 800116a:	73fb      	strb	r3, [r7, #15]
  while (n > 9) {
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b09      	cmp	r3, #9
 8001170:	d8e3      	bhi.n	800113a <static_itoa+0xe>
  }
  res[i] = '0' + n;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	3230      	adds	r2, #48	@ 0x30
 800117a:	b2d1      	uxtb	r1, r2
 800117c:	4a17      	ldr	r2, [pc, #92]	@ (80011dc <static_itoa+0xb0>)
 800117e:	54d1      	strb	r1, [r2, r3]
  res[i + 1] = '\0';
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	3301      	adds	r3, #1
 8001184:	4a15      	ldr	r2, [pc, #84]	@ (80011dc <static_itoa+0xb0>)
 8001186:	2100      	movs	r1, #0
 8001188:	54d1      	strb	r1, [r2, r3]

  for (int8_t j = 0; j < i; ++j, --i) {
 800118a:	2300      	movs	r3, #0
 800118c:	73bb      	strb	r3, [r7, #14]
 800118e:	e016      	b.n	80011be <static_itoa+0x92>
    const char t = res[j];
 8001190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001194:	4a11      	ldr	r2, [pc, #68]	@ (80011dc <static_itoa+0xb0>)
 8001196:	5cd3      	ldrb	r3, [r2, r3]
 8001198:	737b      	strb	r3, [r7, #13]
    res[j] = res[i];
 800119a:	7bfa      	ldrb	r2, [r7, #15]
 800119c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011a0:	490e      	ldr	r1, [pc, #56]	@ (80011dc <static_itoa+0xb0>)
 80011a2:	5c89      	ldrb	r1, [r1, r2]
 80011a4:	4a0d      	ldr	r2, [pc, #52]	@ (80011dc <static_itoa+0xb0>)
 80011a6:	54d1      	strb	r1, [r2, r3]
    res[i] = t;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	490c      	ldr	r1, [pc, #48]	@ (80011dc <static_itoa+0xb0>)
 80011ac:	7b7a      	ldrb	r2, [r7, #13]
 80011ae:	54ca      	strb	r2, [r1, r3]
  for (int8_t j = 0; j < i; ++j, --i) {
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	3301      	adds	r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	73bb      	strb	r3, [r7, #14]
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	dbe3      	blt.n	8001190 <static_itoa+0x64>
  }

  return res;
 80011c8:	4b04      	ldr	r3, [pc, #16]	@ (80011dc <static_itoa+0xb0>)
 80011ca:	4618      	mov	r0, r3
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	cccccccd 	.word	0xcccccccd
 80011dc:	200005bc 	.word	0x200005bc

080011e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001218 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 80011e4:	f7ff ff90 	bl	8001108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011e8:	480c      	ldr	r0, [pc, #48]	@ (800121c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ea:	490d      	ldr	r1, [pc, #52]	@ (8001220 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001224 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f0:	e002      	b.n	80011f8 <LoopCopyDataInit>

080011f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f6:	3304      	adds	r3, #4

080011f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011fc:	d3f9      	bcc.n	80011f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001228 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001200:	4c0a      	ldr	r4, [pc, #40]	@ (800122c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001204:	e001      	b.n	800120a <LoopFillZerobss>

08001206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001208:	3204      	adds	r2, #4

0800120a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800120c:	d3fb      	bcc.n	8001206 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800120e:	f002 fe27 	bl	8003e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001212:	f7ff fbc3 	bl	800099c <main>
  bx  lr    
 8001216:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001218:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800121c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001220:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001224:	080040d4 	.word	0x080040d4
  ldr r2, =_sbss
 8001228:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800122c:	20000704 	.word	0x20000704

08001230 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001230:	e7fe      	b.n	8001230 <ADC_IRQHandler>

08001232 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001236:	2003      	movs	r0, #3
 8001238:	f000 fb9e 	bl	8001978 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123c:	200f      	movs	r0, #15
 800123e:	f000 f805 	bl	800124c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001242:	f7ff fdd1 	bl	8000de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001254:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <HAL_InitTick+0x54>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <HAL_InitTick+0x58>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001262:	fbb3 f3f1 	udiv	r3, r3, r1
 8001266:	fbb2 f3f3 	udiv	r3, r2, r3
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fbab 	bl	80019c6 <HAL_SYSTICK_Config>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e00e      	b.n	8001298 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b0f      	cmp	r3, #15
 800127e:	d80a      	bhi.n	8001296 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001280:	2200      	movs	r2, #0
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	f04f 30ff 	mov.w	r0, #4294967295
 8001288:	f000 fb81 	bl	800198e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800128c:	4a06      	ldr	r2, [pc, #24]	@ (80012a8 <HAL_InitTick+0x5c>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	e000      	b.n	8001298 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000004 	.word	0x20000004
 80012a4:	2000000c 	.word	0x2000000c
 80012a8:	20000008 	.word	0x20000008

080012ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <HAL_IncTick+0x20>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <HAL_IncTick+0x24>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	4a04      	ldr	r2, [pc, #16]	@ (80012d0 <HAL_IncTick+0x24>)
 80012be:	6013      	str	r3, [r2, #0]
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	2000000c 	.word	0x2000000c
 80012d0:	200005c8 	.word	0x200005c8

080012d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return uwTick;
 80012d8:	4b03      	ldr	r3, [pc, #12]	@ (80012e8 <HAL_GetTick+0x14>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	200005c8 	.word	0x200005c8

080012ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f4:	2300      	movs	r3, #0
 80012f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e031      	b.n	8001366 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001306:	2b00      	cmp	r3, #0
 8001308:	d109      	bne.n	800131e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fd90 	bl	8000e30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	f003 0310 	and.w	r3, r3, #16
 8001326:	2b00      	cmp	r3, #0
 8001328:	d116      	bne.n	8001358 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800132e:	4b10      	ldr	r3, [pc, #64]	@ (8001370 <HAL_ADC_Init+0x84>)
 8001330:	4013      	ands	r3, r2
 8001332:	f043 0202 	orr.w	r2, r3, #2
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 f970 	bl	8001620 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	f023 0303 	bic.w	r3, r3, #3
 800134e:	f043 0201 	orr.w	r2, r3, #1
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	641a      	str	r2, [r3, #64]	@ 0x40
 8001356:	e001      	b.n	800135c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001364:	7bfb      	ldrb	r3, [r7, #15]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	ffffeefd 	.word	0xffffeefd

08001374 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001388:	2b01      	cmp	r3, #1
 800138a:	d101      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x1c>
 800138c:	2302      	movs	r3, #2
 800138e:	e136      	b.n	80015fe <HAL_ADC_ConfigChannel+0x28a>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b09      	cmp	r3, #9
 800139e:	d93a      	bls.n	8001416 <HAL_ADC_ConfigChannel+0xa2>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80013a8:	d035      	beq.n	8001416 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68d9      	ldr	r1, [r3, #12]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	3b1e      	subs	r3, #30
 80013c0:	2207      	movs	r2, #7
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	400a      	ands	r2, r1
 80013ce:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a8d      	ldr	r2, [pc, #564]	@ (800160c <HAL_ADC_ConfigChannel+0x298>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d10a      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68d9      	ldr	r1, [r3, #12]
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	061a      	lsls	r2, r3, #24
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013ee:	e035      	b.n	800145c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68d9      	ldr	r1, [r3, #12]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	4618      	mov	r0, r3
 8001402:	4603      	mov	r3, r0
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4403      	add	r3, r0
 8001408:	3b1e      	subs	r3, #30
 800140a:	409a      	lsls	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001414:	e022      	b.n	800145c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6919      	ldr	r1, [r3, #16]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	b29b      	uxth	r3, r3
 8001422:	461a      	mov	r2, r3
 8001424:	4613      	mov	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4413      	add	r3, r2
 800142a:	2207      	movs	r2, #7
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43da      	mvns	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	400a      	ands	r2, r1
 8001438:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6919      	ldr	r1, [r3, #16]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	b29b      	uxth	r3, r3
 800144a:	4618      	mov	r0, r3
 800144c:	4603      	mov	r3, r0
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4403      	add	r3, r0
 8001452:	409a      	lsls	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b06      	cmp	r3, #6
 8001462:	d824      	bhi.n	80014ae <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	3b05      	subs	r3, #5
 8001476:	221f      	movs	r2, #31
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43da      	mvns	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	400a      	ands	r2, r1
 8001484:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	b29b      	uxth	r3, r3
 8001492:	4618      	mov	r0, r3
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	3b05      	subs	r3, #5
 80014a0:	fa00 f203 	lsl.w	r2, r0, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80014ac:	e04c      	b.n	8001548 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b0c      	cmp	r3, #12
 80014b4:	d824      	bhi.n	8001500 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	3b23      	subs	r3, #35	@ 0x23
 80014c8:	221f      	movs	r2, #31
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	400a      	ands	r2, r1
 80014d6:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	4618      	mov	r0, r3
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	3b23      	subs	r3, #35	@ 0x23
 80014f2:	fa00 f203 	lsl.w	r2, r0, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80014fe:	e023      	b.n	8001548 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	3b41      	subs	r3, #65	@ 0x41
 8001512:	221f      	movs	r2, #31
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43da      	mvns	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	400a      	ands	r2, r1
 8001520:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	b29b      	uxth	r3, r3
 800152e:	4618      	mov	r0, r3
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	3b41      	subs	r3, #65	@ 0x41
 800153c:	fa00 f203 	lsl.w	r2, r0, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a30      	ldr	r2, [pc, #192]	@ (8001610 <HAL_ADC_ConfigChannel+0x29c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d10a      	bne.n	8001568 <HAL_ADC_ConfigChannel+0x1f4>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800155a:	d105      	bne.n	8001568 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800155c:	4b2d      	ldr	r3, [pc, #180]	@ (8001614 <HAL_ADC_ConfigChannel+0x2a0>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	4a2c      	ldr	r2, [pc, #176]	@ (8001614 <HAL_ADC_ConfigChannel+0x2a0>)
 8001562:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001566:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a28      	ldr	r2, [pc, #160]	@ (8001610 <HAL_ADC_ConfigChannel+0x29c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d10f      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x21e>
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b12      	cmp	r3, #18
 8001578:	d10b      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800157a:	4b26      	ldr	r3, [pc, #152]	@ (8001614 <HAL_ADC_ConfigChannel+0x2a0>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	4a25      	ldr	r2, [pc, #148]	@ (8001614 <HAL_ADC_ConfigChannel+0x2a0>)
 8001580:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001584:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001586:	4b23      	ldr	r3, [pc, #140]	@ (8001614 <HAL_ADC_ConfigChannel+0x2a0>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	4a22      	ldr	r2, [pc, #136]	@ (8001614 <HAL_ADC_ConfigChannel+0x2a0>)
 800158c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001590:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1e      	ldr	r2, [pc, #120]	@ (8001610 <HAL_ADC_ConfigChannel+0x29c>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d12b      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x280>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a1a      	ldr	r2, [pc, #104]	@ (800160c <HAL_ADC_ConfigChannel+0x298>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d003      	beq.n	80015ae <HAL_ADC_ConfigChannel+0x23a>
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b11      	cmp	r3, #17
 80015ac:	d122      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80015ae:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <HAL_ADC_ConfigChannel+0x2a0>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	4a18      	ldr	r2, [pc, #96]	@ (8001614 <HAL_ADC_ConfigChannel+0x2a0>)
 80015b4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80015b8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80015ba:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <HAL_ADC_ConfigChannel+0x2a0>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	4a15      	ldr	r2, [pc, #84]	@ (8001614 <HAL_ADC_ConfigChannel+0x2a0>)
 80015c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015c4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a10      	ldr	r2, [pc, #64]	@ (800160c <HAL_ADC_ConfigChannel+0x298>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d111      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80015d0:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <HAL_ADC_ConfigChannel+0x2a4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a11      	ldr	r2, [pc, #68]	@ (800161c <HAL_ADC_ConfigChannel+0x2a8>)
 80015d6:	fba2 2303 	umull	r2, r3, r2, r3
 80015da:	0c9a      	lsrs	r2, r3, #18
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80015e6:	e002      	b.n	80015ee <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f9      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	10000012 	.word	0x10000012
 8001610:	40012000 	.word	0x40012000
 8001614:	40012300 	.word	0x40012300
 8001618:	20000004 	.word	0x20000004
 800161c:	431bde83 	.word	0x431bde83

08001620 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001628:	4b78      	ldr	r3, [pc, #480]	@ (800180c <ADC_Init+0x1ec>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	4a77      	ldr	r2, [pc, #476]	@ (800180c <ADC_Init+0x1ec>)
 800162e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001632:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001634:	4b75      	ldr	r3, [pc, #468]	@ (800180c <ADC_Init+0x1ec>)
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	4973      	ldr	r1, [pc, #460]	@ (800180c <ADC_Init+0x1ec>)
 800163e:	4313      	orrs	r3, r2
 8001640:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001650:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6859      	ldr	r1, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	021a      	lsls	r2, r3, #8
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001674:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6859      	ldr	r1, [r3, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001696:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6899      	ldr	r1, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ae:	4a58      	ldr	r2, [pc, #352]	@ (8001810 <ADC_Init+0x1f0>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d022      	beq.n	80016fa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6899      	ldr	r1, [r3, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6899      	ldr	r1, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	e00f      	b.n	800171a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001708:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001718:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0202 	bic.w	r2, r2, #2
 8001728:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6899      	ldr	r1, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	005a      	lsls	r2, r3, #1
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d01b      	beq.n	8001780 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001756:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001766:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6859      	ldr	r1, [r3, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001772:	3b01      	subs	r3, #1
 8001774:	035a      	lsls	r2, r3, #13
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	e007      	b.n	8001790 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800178e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800179e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	051a      	lsls	r2, r3, #20
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80017c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6899      	ldr	r1, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017d2:	025a      	lsls	r2, r3, #9
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6899      	ldr	r1, [r3, #8]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	029a      	lsls	r2, r3, #10
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	609a      	str	r2, [r3, #8]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	40012300 	.word	0x40012300
 8001810:	0f000001 	.word	0x0f000001

08001814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001824:	4b0b      	ldr	r3, [pc, #44]	@ (8001854 <__NVIC_SetPriorityGrouping+0x40>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001830:	4013      	ands	r3, r2
 8001832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 800183e:	4313      	orrs	r3, r2
 8001840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001842:	4a04      	ldr	r2, [pc, #16]	@ (8001854 <__NVIC_SetPriorityGrouping+0x40>)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	60d3      	str	r3, [r2, #12]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00
 8001858:	05fa0000 	.word	0x05fa0000

0800185c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001860:	4b04      	ldr	r3, [pc, #16]	@ (8001874 <__NVIC_GetPriorityGrouping+0x18>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	f003 0307 	and.w	r3, r3, #7
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	6039      	str	r1, [r7, #0]
 8001882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001888:	2b00      	cmp	r3, #0
 800188a:	db0a      	blt.n	80018a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	b2da      	uxtb	r2, r3
 8001890:	490c      	ldr	r1, [pc, #48]	@ (80018c4 <__NVIC_SetPriority+0x4c>)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	0112      	lsls	r2, r2, #4
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	440b      	add	r3, r1
 800189c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a0:	e00a      	b.n	80018b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4908      	ldr	r1, [pc, #32]	@ (80018c8 <__NVIC_SetPriority+0x50>)
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	3b04      	subs	r3, #4
 80018b0:	0112      	lsls	r2, r2, #4
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	440b      	add	r3, r1
 80018b6:	761a      	strb	r2, [r3, #24]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000e100 	.word	0xe000e100
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b089      	sub	sp, #36	@ 0x24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f1c3 0307 	rsb	r3, r3, #7
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	bf28      	it	cs
 80018ea:	2304      	movcs	r3, #4
 80018ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3304      	adds	r3, #4
 80018f2:	2b06      	cmp	r3, #6
 80018f4:	d902      	bls.n	80018fc <NVIC_EncodePriority+0x30>
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3b03      	subs	r3, #3
 80018fa:	e000      	b.n	80018fe <NVIC_EncodePriority+0x32>
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	f04f 32ff 	mov.w	r2, #4294967295
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43da      	mvns	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	401a      	ands	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001914:	f04f 31ff 	mov.w	r1, #4294967295
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	fa01 f303 	lsl.w	r3, r1, r3
 800191e:	43d9      	mvns	r1, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	4313      	orrs	r3, r2
         );
}
 8001926:	4618      	mov	r0, r3
 8001928:	3724      	adds	r7, #36	@ 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001944:	d301      	bcc.n	800194a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001946:	2301      	movs	r3, #1
 8001948:	e00f      	b.n	800196a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194a:	4a0a      	ldr	r2, [pc, #40]	@ (8001974 <SysTick_Config+0x40>)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3b01      	subs	r3, #1
 8001950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001952:	210f      	movs	r1, #15
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	f7ff ff8e 	bl	8001878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800195c:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <SysTick_Config+0x40>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001962:	4b04      	ldr	r3, [pc, #16]	@ (8001974 <SysTick_Config+0x40>)
 8001964:	2207      	movs	r2, #7
 8001966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	e000e010 	.word	0xe000e010

08001978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ff47 	bl	8001814 <__NVIC_SetPriorityGrouping>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
 800199a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a0:	f7ff ff5c 	bl	800185c <__NVIC_GetPriorityGrouping>
 80019a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	6978      	ldr	r0, [r7, #20]
 80019ac:	f7ff ff8e 	bl	80018cc <NVIC_EncodePriority>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff5d 	bl	8001878 <__NVIC_SetPriority>
}
 80019be:	bf00      	nop
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffb0 	bl	8001934 <SysTick_Config>
 80019d4:	4603      	mov	r3, r0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80019e4:	f3bf 8f5f 	dmb	sy
}
 80019e8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80019ea:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <HAL_MPU_Disable+0x28>)
 80019ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ee:	4a06      	ldr	r2, [pc, #24]	@ (8001a08 <HAL_MPU_Disable+0x28>)
 80019f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019f4:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80019f6:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <HAL_MPU_Disable+0x2c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	605a      	str	r2, [r3, #4]
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00
 8001a0c:	e000ed90 	.word	0xe000ed90

08001a10 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001a18:	4a0b      	ldr	r2, [pc, #44]	@ (8001a48 <HAL_MPU_Enable+0x38>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001a22:	4b0a      	ldr	r3, [pc, #40]	@ (8001a4c <HAL_MPU_Enable+0x3c>)
 8001a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a26:	4a09      	ldr	r2, [pc, #36]	@ (8001a4c <HAL_MPU_Enable+0x3c>)
 8001a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a2c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001a2e:	f3bf 8f4f 	dsb	sy
}
 8001a32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a34:	f3bf 8f6f 	isb	sy
}
 8001a38:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000ed90 	.word	0xe000ed90
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	785a      	ldrb	r2, [r3, #1]
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001acc <HAL_MPU_ConfigRegion+0x7c>)
 8001a5e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001a60:	4b1a      	ldr	r3, [pc, #104]	@ (8001acc <HAL_MPU_ConfigRegion+0x7c>)
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	4a19      	ldr	r2, [pc, #100]	@ (8001acc <HAL_MPU_ConfigRegion+0x7c>)
 8001a66:	f023 0301 	bic.w	r3, r3, #1
 8001a6a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001a6c:	4a17      	ldr	r2, [pc, #92]	@ (8001acc <HAL_MPU_ConfigRegion+0x7c>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	7b1b      	ldrb	r3, [r3, #12]
 8001a78:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	7adb      	ldrb	r3, [r3, #11]
 8001a7e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7a9b      	ldrb	r3, [r3, #10]
 8001a86:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	7b5b      	ldrb	r3, [r3, #13]
 8001a8e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	7b9b      	ldrb	r3, [r3, #14]
 8001a96:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	7bdb      	ldrb	r3, [r3, #15]
 8001a9e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001aa0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7a5b      	ldrb	r3, [r3, #9]
 8001aa6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001aa8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	7a1b      	ldrb	r3, [r3, #8]
 8001aae:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ab0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	7812      	ldrb	r2, [r2, #0]
 8001ab6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ab8:	4a04      	ldr	r2, [pc, #16]	@ (8001acc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001aba:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001abc:	6113      	str	r3, [r2, #16]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000ed90 	.word	0xe000ed90

08001ad0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e014      	b.n	8001b0c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	791b      	ldrb	r3, [r3, #4]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d105      	bne.n	8001af8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff f9dc 	bl	8000eb0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2202      	movs	r2, #2
 8001afc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	@ 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <HAL_DAC_ConfigChannel+0x1c>
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e042      	b.n	8001bba <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	795b      	ldrb	r3, [r3, #5]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_DAC_ConfigChannel+0x2c>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e03c      	b.n	8001bba <HAL_DAC_ConfigChannel+0xa6>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2201      	movs	r2, #1
 8001b44:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2202      	movs	r2, #2
 8001b4a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0310 	and.w	r3, r3, #16
 8001b5a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6819      	ldr	r1, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	22c0      	movs	r2, #192	@ 0xc0
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43da      	mvns	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	400a      	ands	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001bb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3724      	adds	r7, #36	@ 0x24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	@ 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
 8001be6:	e169      	b.n	8001ebc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001be8:	2201      	movs	r2, #1
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	f040 8158 	bne.w	8001eb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d005      	beq.n	8001c1e <HAL_GPIO_Init+0x56>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d130      	bne.n	8001c80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	2203      	movs	r2, #3
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c54:	2201      	movs	r2, #1
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	f003 0201 	and.w	r2, r3, #1
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d017      	beq.n	8001cbc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	2203      	movs	r2, #3
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d123      	bne.n	8001d10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	08da      	lsrs	r2, r3, #3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3208      	adds	r2, #8
 8001cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	220f      	movs	r2, #15
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	691a      	ldr	r2, [r3, #16]
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	08da      	lsrs	r2, r3, #3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3208      	adds	r2, #8
 8001d0a:	69b9      	ldr	r1, [r7, #24]
 8001d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0203 	and.w	r2, r3, #3
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 80b2 	beq.w	8001eb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d52:	4b60      	ldr	r3, [pc, #384]	@ (8001ed4 <HAL_GPIO_Init+0x30c>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d56:	4a5f      	ldr	r2, [pc, #380]	@ (8001ed4 <HAL_GPIO_Init+0x30c>)
 8001d58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d5e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ed4 <HAL_GPIO_Init+0x30c>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d6a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ed8 <HAL_GPIO_Init+0x310>)
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	089b      	lsrs	r3, r3, #2
 8001d70:	3302      	adds	r3, #2
 8001d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	220f      	movs	r2, #15
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a52      	ldr	r2, [pc, #328]	@ (8001edc <HAL_GPIO_Init+0x314>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d02b      	beq.n	8001dee <HAL_GPIO_Init+0x226>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a51      	ldr	r2, [pc, #324]	@ (8001ee0 <HAL_GPIO_Init+0x318>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d025      	beq.n	8001dea <HAL_GPIO_Init+0x222>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a50      	ldr	r2, [pc, #320]	@ (8001ee4 <HAL_GPIO_Init+0x31c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d01f      	beq.n	8001de6 <HAL_GPIO_Init+0x21e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4f      	ldr	r2, [pc, #316]	@ (8001ee8 <HAL_GPIO_Init+0x320>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d019      	beq.n	8001de2 <HAL_GPIO_Init+0x21a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a4e      	ldr	r2, [pc, #312]	@ (8001eec <HAL_GPIO_Init+0x324>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d013      	beq.n	8001dde <HAL_GPIO_Init+0x216>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a4d      	ldr	r2, [pc, #308]	@ (8001ef0 <HAL_GPIO_Init+0x328>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d00d      	beq.n	8001dda <HAL_GPIO_Init+0x212>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a4c      	ldr	r2, [pc, #304]	@ (8001ef4 <HAL_GPIO_Init+0x32c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d007      	beq.n	8001dd6 <HAL_GPIO_Init+0x20e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a4b      	ldr	r2, [pc, #300]	@ (8001ef8 <HAL_GPIO_Init+0x330>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d101      	bne.n	8001dd2 <HAL_GPIO_Init+0x20a>
 8001dce:	2307      	movs	r3, #7
 8001dd0:	e00e      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001dd2:	2308      	movs	r3, #8
 8001dd4:	e00c      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001dd6:	2306      	movs	r3, #6
 8001dd8:	e00a      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001dda:	2305      	movs	r3, #5
 8001ddc:	e008      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001dde:	2304      	movs	r3, #4
 8001de0:	e006      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001de2:	2303      	movs	r3, #3
 8001de4:	e004      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e002      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001dee:	2300      	movs	r3, #0
 8001df0:	69fa      	ldr	r2, [r7, #28]
 8001df2:	f002 0203 	and.w	r2, r2, #3
 8001df6:	0092      	lsls	r2, r2, #2
 8001df8:	4093      	lsls	r3, r2
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e00:	4935      	ldr	r1, [pc, #212]	@ (8001ed8 <HAL_GPIO_Init+0x310>)
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	3302      	adds	r3, #2
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001efc <HAL_GPIO_Init+0x334>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e32:	4a32      	ldr	r2, [pc, #200]	@ (8001efc <HAL_GPIO_Init+0x334>)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e38:	4b30      	ldr	r3, [pc, #192]	@ (8001efc <HAL_GPIO_Init+0x334>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e5c:	4a27      	ldr	r2, [pc, #156]	@ (8001efc <HAL_GPIO_Init+0x334>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e62:	4b26      	ldr	r3, [pc, #152]	@ (8001efc <HAL_GPIO_Init+0x334>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e86:	4a1d      	ldr	r2, [pc, #116]	@ (8001efc <HAL_GPIO_Init+0x334>)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <HAL_GPIO_Init+0x334>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb0:	4a12      	ldr	r2, [pc, #72]	@ (8001efc <HAL_GPIO_Init+0x334>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	61fb      	str	r3, [r7, #28]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	2b0f      	cmp	r3, #15
 8001ec0:	f67f ae92 	bls.w	8001be8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	3724      	adds	r7, #36	@ 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40013800 	.word	0x40013800
 8001edc:	40020000 	.word	0x40020000
 8001ee0:	40020400 	.word	0x40020400
 8001ee4:	40020800 	.word	0x40020800
 8001ee8:	40020c00 	.word	0x40020c00
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40021400 	.word	0x40021400
 8001ef4:	40021800 	.word	0x40021800
 8001ef8:	40021c00 	.word	0x40021c00
 8001efc:	40013c00 	.word	0x40013c00

08001f00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	887b      	ldrh	r3, [r7, #2]
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d002      	beq.n	8001f1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
 8001f1c:	e001      	b.n	8001f22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	807b      	strh	r3, [r7, #2]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f40:	787b      	ldrb	r3, [r7, #1]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f46:	887a      	ldrh	r2, [r7, #2]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f4c:	e003      	b.n	8001f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f4e:	887b      	ldrh	r3, [r7, #2]
 8001f50:	041a      	lsls	r2, r3, #16
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	619a      	str	r2, [r3, #24]
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e08b      	b.n	800208e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d106      	bne.n	8001f90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7fe ffd0 	bl	8000f30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2224      	movs	r2, #36	@ 0x24
 8001f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d107      	bne.n	8001fde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	e006      	b.n	8001fec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001fea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d108      	bne.n	8002006 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	e007      	b.n	8002016 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002014:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6859      	ldr	r1, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b1d      	ldr	r3, [pc, #116]	@ (8002098 <HAL_I2C_Init+0x134>)
 8002022:	430b      	orrs	r3, r1
 8002024:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002034:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691a      	ldr	r2, [r3, #16]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69d9      	ldr	r1, [r3, #28]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1a      	ldr	r2, [r3, #32]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 0201 	orr.w	r2, r2, #1
 800206e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2220      	movs	r2, #32
 800207a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	02008000 	.word	0x02008000

0800209c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b20      	cmp	r3, #32
 80020b0:	d138      	bne.n	8002124 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020bc:	2302      	movs	r3, #2
 80020be:	e032      	b.n	8002126 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2224      	movs	r2, #36	@ 0x24
 80020cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0201 	bic.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80020ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6819      	ldr	r1, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0201 	orr.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	e000      	b.n	8002126 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002124:	2302      	movs	r3, #2
  }
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002132:	b480      	push	{r7}
 8002134:	b085      	sub	sp, #20
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b20      	cmp	r3, #32
 8002146:	d139      	bne.n	80021bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002152:	2302      	movs	r3, #2
 8002154:	e033      	b.n	80021be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2224      	movs	r2, #36	@ 0x24
 8002162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0201 	bic.w	r2, r2, #1
 8002174:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002184:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	021b      	lsls	r3, r3, #8
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4313      	orrs	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0201 	orr.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2220      	movs	r2, #32
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	e000      	b.n	80021be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021bc:	2302      	movs	r3, #2
  }
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80021d4:	2300      	movs	r3, #0
 80021d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e291      	b.n	8002706 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 8087 	beq.w	80022fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021f0:	4b96      	ldr	r3, [pc, #600]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d00c      	beq.n	8002216 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021fc:	4b93      	ldr	r3, [pc, #588]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 030c 	and.w	r3, r3, #12
 8002204:	2b08      	cmp	r3, #8
 8002206:	d112      	bne.n	800222e <HAL_RCC_OscConfig+0x62>
 8002208:	4b90      	ldr	r3, [pc, #576]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002210:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002214:	d10b      	bne.n	800222e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002216:	4b8d      	ldr	r3, [pc, #564]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d06c      	beq.n	80022fc <HAL_RCC_OscConfig+0x130>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d168      	bne.n	80022fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e26b      	b.n	8002706 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002236:	d106      	bne.n	8002246 <HAL_RCC_OscConfig+0x7a>
 8002238:	4b84      	ldr	r3, [pc, #528]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a83      	ldr	r2, [pc, #524]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 800223e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	e02e      	b.n	80022a4 <HAL_RCC_OscConfig+0xd8>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10c      	bne.n	8002268 <HAL_RCC_OscConfig+0x9c>
 800224e:	4b7f      	ldr	r3, [pc, #508]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a7e      	ldr	r2, [pc, #504]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 8002254:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b7c      	ldr	r3, [pc, #496]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a7b      	ldr	r2, [pc, #492]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 8002260:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	e01d      	b.n	80022a4 <HAL_RCC_OscConfig+0xd8>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002270:	d10c      	bne.n	800228c <HAL_RCC_OscConfig+0xc0>
 8002272:	4b76      	ldr	r3, [pc, #472]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a75      	ldr	r2, [pc, #468]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 8002278:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	4b73      	ldr	r3, [pc, #460]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a72      	ldr	r2, [pc, #456]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 8002284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	e00b      	b.n	80022a4 <HAL_RCC_OscConfig+0xd8>
 800228c:	4b6f      	ldr	r3, [pc, #444]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a6e      	ldr	r2, [pc, #440]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 8002292:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	4b6c      	ldr	r3, [pc, #432]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a6b      	ldr	r2, [pc, #428]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 800229e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d013      	beq.n	80022d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7ff f812 	bl	80012d4 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b4:	f7ff f80e 	bl	80012d4 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b64      	cmp	r3, #100	@ 0x64
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e21f      	b.n	8002706 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c6:	4b61      	ldr	r3, [pc, #388]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0xe8>
 80022d2:	e014      	b.n	80022fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7fe fffe 	bl	80012d4 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022dc:	f7fe fffa 	bl	80012d4 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	@ 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e20b      	b.n	8002706 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ee:	4b57      	ldr	r3, [pc, #348]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x110>
 80022fa:	e000      	b.n	80022fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d069      	beq.n	80023de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800230a:	4b50      	ldr	r3, [pc, #320]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00b      	beq.n	800232e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002316:	4b4d      	ldr	r3, [pc, #308]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b08      	cmp	r3, #8
 8002320:	d11c      	bne.n	800235c <HAL_RCC_OscConfig+0x190>
 8002322:	4b4a      	ldr	r3, [pc, #296]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d116      	bne.n	800235c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232e:	4b47      	ldr	r3, [pc, #284]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <HAL_RCC_OscConfig+0x17a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d001      	beq.n	8002346 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e1df      	b.n	8002706 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002346:	4b41      	ldr	r3, [pc, #260]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	493d      	ldr	r1, [pc, #244]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235a:	e040      	b.n	80023de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d023      	beq.n	80023ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002364:	4b39      	ldr	r3, [pc, #228]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a38      	ldr	r2, [pc, #224]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7fe ffb0 	bl	80012d4 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002378:	f7fe ffac 	bl	80012d4 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e1bd      	b.n	8002706 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238a:	4b30      	ldr	r3, [pc, #192]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002396:	4b2d      	ldr	r3, [pc, #180]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4929      	ldr	r1, [pc, #164]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]
 80023aa:	e018      	b.n	80023de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ac:	4b27      	ldr	r3, [pc, #156]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a26      	ldr	r2, [pc, #152]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 80023b2:	f023 0301 	bic.w	r3, r3, #1
 80023b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe ff8c 	bl	80012d4 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c0:	f7fe ff88 	bl	80012d4 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e199      	b.n	8002706 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d2:	4b1e      	ldr	r3, [pc, #120]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d038      	beq.n	800245c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d019      	beq.n	8002426 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f2:	4b16      	ldr	r3, [pc, #88]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 80023f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023f6:	4a15      	ldr	r2, [pc, #84]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fe:	f7fe ff69 	bl	80012d4 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002406:	f7fe ff65 	bl	80012d4 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e176      	b.n	8002706 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002418:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 800241a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x23a>
 8002424:	e01a      	b.n	800245c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002426:	4b09      	ldr	r3, [pc, #36]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 8002428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800242a:	4a08      	ldr	r2, [pc, #32]	@ (800244c <HAL_RCC_OscConfig+0x280>)
 800242c:	f023 0301 	bic.w	r3, r3, #1
 8002430:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002432:	f7fe ff4f 	bl	80012d4 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002438:	e00a      	b.n	8002450 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800243a:	f7fe ff4b 	bl	80012d4 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d903      	bls.n	8002450 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e15c      	b.n	8002706 <HAL_RCC_OscConfig+0x53a>
 800244c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002450:	4b91      	ldr	r3, [pc, #580]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 8002452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1ee      	bne.n	800243a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80a4 	beq.w	80025b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246a:	4b8b      	ldr	r3, [pc, #556]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10d      	bne.n	8002492 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	4b88      	ldr	r3, [pc, #544]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	4a87      	ldr	r2, [pc, #540]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 800247c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002480:	6413      	str	r3, [r2, #64]	@ 0x40
 8002482:	4b85      	ldr	r3, [pc, #532]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800248e:	2301      	movs	r3, #1
 8002490:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002492:	4b82      	ldr	r3, [pc, #520]	@ (800269c <HAL_RCC_OscConfig+0x4d0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d118      	bne.n	80024d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800249e:	4b7f      	ldr	r3, [pc, #508]	@ (800269c <HAL_RCC_OscConfig+0x4d0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a7e      	ldr	r2, [pc, #504]	@ (800269c <HAL_RCC_OscConfig+0x4d0>)
 80024a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024aa:	f7fe ff13 	bl	80012d4 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b2:	f7fe ff0f 	bl	80012d4 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b64      	cmp	r3, #100	@ 0x64
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e120      	b.n	8002706 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c4:	4b75      	ldr	r3, [pc, #468]	@ (800269c <HAL_RCC_OscConfig+0x4d0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d106      	bne.n	80024e6 <HAL_RCC_OscConfig+0x31a>
 80024d8:	4b6f      	ldr	r3, [pc, #444]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024dc:	4a6e      	ldr	r2, [pc, #440]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80024e4:	e02d      	b.n	8002542 <HAL_RCC_OscConfig+0x376>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0x33c>
 80024ee:	4b6a      	ldr	r3, [pc, #424]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 80024f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f2:	4a69      	ldr	r2, [pc, #420]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 80024f4:	f023 0301 	bic.w	r3, r3, #1
 80024f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80024fa:	4b67      	ldr	r3, [pc, #412]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024fe:	4a66      	ldr	r2, [pc, #408]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 8002500:	f023 0304 	bic.w	r3, r3, #4
 8002504:	6713      	str	r3, [r2, #112]	@ 0x70
 8002506:	e01c      	b.n	8002542 <HAL_RCC_OscConfig+0x376>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2b05      	cmp	r3, #5
 800250e:	d10c      	bne.n	800252a <HAL_RCC_OscConfig+0x35e>
 8002510:	4b61      	ldr	r3, [pc, #388]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 8002512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002514:	4a60      	ldr	r2, [pc, #384]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 8002516:	f043 0304 	orr.w	r3, r3, #4
 800251a:	6713      	str	r3, [r2, #112]	@ 0x70
 800251c:	4b5e      	ldr	r3, [pc, #376]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 800251e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002520:	4a5d      	ldr	r2, [pc, #372]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6713      	str	r3, [r2, #112]	@ 0x70
 8002528:	e00b      	b.n	8002542 <HAL_RCC_OscConfig+0x376>
 800252a:	4b5b      	ldr	r3, [pc, #364]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800252e:	4a5a      	ldr	r2, [pc, #360]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	6713      	str	r3, [r2, #112]	@ 0x70
 8002536:	4b58      	ldr	r3, [pc, #352]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800253a:	4a57      	ldr	r2, [pc, #348]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 800253c:	f023 0304 	bic.w	r3, r3, #4
 8002540:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d015      	beq.n	8002576 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254a:	f7fe fec3 	bl	80012d4 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002550:	e00a      	b.n	8002568 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002552:	f7fe febf 	bl	80012d4 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002560:	4293      	cmp	r3, r2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e0ce      	b.n	8002706 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002568:	4b4b      	ldr	r3, [pc, #300]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 800256a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0ee      	beq.n	8002552 <HAL_RCC_OscConfig+0x386>
 8002574:	e014      	b.n	80025a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002576:	f7fe fead 	bl	80012d4 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257c:	e00a      	b.n	8002594 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257e:	f7fe fea9 	bl	80012d4 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	f241 3288 	movw	r2, #5000	@ 0x1388
 800258c:	4293      	cmp	r3, r2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e0b8      	b.n	8002706 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002594:	4b40      	ldr	r3, [pc, #256]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 8002596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1ee      	bne.n	800257e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d105      	bne.n	80025b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	4a3b      	ldr	r2, [pc, #236]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 80025ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 80a4 	beq.w	8002704 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025bc:	4b36      	ldr	r3, [pc, #216]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d06b      	beq.n	80026a0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d149      	bne.n	8002664 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d0:	4b31      	ldr	r3, [pc, #196]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a30      	ldr	r2, [pc, #192]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 80025d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025dc:	f7fe fe7a 	bl	80012d4 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e4:	f7fe fe76 	bl	80012d4 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e087      	b.n	8002706 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f6:	4b28      	ldr	r3, [pc, #160]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69da      	ldr	r2, [r3, #28]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002610:	019b      	lsls	r3, r3, #6
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002618:	085b      	lsrs	r3, r3, #1
 800261a:	3b01      	subs	r3, #1
 800261c:	041b      	lsls	r3, r3, #16
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002624:	061b      	lsls	r3, r3, #24
 8002626:	4313      	orrs	r3, r2
 8002628:	4a1b      	ldr	r2, [pc, #108]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 800262a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800262e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002630:	4b19      	ldr	r3, [pc, #100]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a18      	ldr	r2, [pc, #96]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 8002636:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800263a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7fe fe4a 	bl	80012d4 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002644:	f7fe fe46 	bl	80012d4 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e057      	b.n	8002706 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002656:	4b10      	ldr	r3, [pc, #64]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x478>
 8002662:	e04f      	b.n	8002704 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002664:	4b0c      	ldr	r3, [pc, #48]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0b      	ldr	r2, [pc, #44]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 800266a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800266e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002670:	f7fe fe30 	bl	80012d4 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002678:	f7fe fe2c 	bl	80012d4 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e03d      	b.n	8002706 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268a:	4b03      	ldr	r3, [pc, #12]	@ (8002698 <HAL_RCC_OscConfig+0x4cc>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x4ac>
 8002696:	e035      	b.n	8002704 <HAL_RCC_OscConfig+0x538>
 8002698:	40023800 	.word	0x40023800
 800269c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80026a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002710 <HAL_RCC_OscConfig+0x544>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d028      	beq.n	8002700 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d121      	bne.n	8002700 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d11a      	bne.n	8002700 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026d0:	4013      	ands	r3, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d8:	4293      	cmp	r3, r2
 80026da:	d111      	bne.n	8002700 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e6:	085b      	lsrs	r3, r3, #1
 80026e8:	3b01      	subs	r3, #1
 80026ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d107      	bne.n	8002700 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800

08002714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0d0      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800272c:	4b6a      	ldr	r3, [pc, #424]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 030f 	and.w	r3, r3, #15
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d910      	bls.n	800275c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273a:	4b67      	ldr	r3, [pc, #412]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 020f 	bic.w	r2, r3, #15
 8002742:	4965      	ldr	r1, [pc, #404]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800274a:	4b63      	ldr	r3, [pc, #396]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d001      	beq.n	800275c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0b8      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d020      	beq.n	80027aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002774:	4b59      	ldr	r3, [pc, #356]	@ (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	4a58      	ldr	r2, [pc, #352]	@ (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 800277a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800277e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800278c:	4b53      	ldr	r3, [pc, #332]	@ (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	4a52      	ldr	r2, [pc, #328]	@ (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 8002792:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002796:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002798:	4b50      	ldr	r3, [pc, #320]	@ (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	494d      	ldr	r1, [pc, #308]	@ (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d040      	beq.n	8002838 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d107      	bne.n	80027ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027be:	4b47      	ldr	r3, [pc, #284]	@ (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d115      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e07f      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d107      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d6:	4b41      	ldr	r3, [pc, #260]	@ (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e073      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e6:	4b3d      	ldr	r3, [pc, #244]	@ (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e06b      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f6:	4b39      	ldr	r3, [pc, #228]	@ (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f023 0203 	bic.w	r2, r3, #3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	4936      	ldr	r1, [pc, #216]	@ (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 8002804:	4313      	orrs	r3, r2
 8002806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002808:	f7fe fd64 	bl	80012d4 <HAL_GetTick>
 800280c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280e:	e00a      	b.n	8002826 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002810:	f7fe fd60 	bl	80012d4 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e053      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002826:	4b2d      	ldr	r3, [pc, #180]	@ (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 020c 	and.w	r2, r3, #12
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	429a      	cmp	r2, r3
 8002836:	d1eb      	bne.n	8002810 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002838:	4b27      	ldr	r3, [pc, #156]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 030f 	and.w	r3, r3, #15
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d210      	bcs.n	8002868 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002846:	4b24      	ldr	r3, [pc, #144]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 020f 	bic.w	r2, r3, #15
 800284e:	4922      	ldr	r1, [pc, #136]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	4313      	orrs	r3, r2
 8002854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002856:	4b20      	ldr	r3, [pc, #128]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d001      	beq.n	8002868 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e032      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002874:	4b19      	ldr	r3, [pc, #100]	@ (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4916      	ldr	r1, [pc, #88]	@ (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 8002882:	4313      	orrs	r3, r2
 8002884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d009      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002892:	4b12      	ldr	r3, [pc, #72]	@ (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	490e      	ldr	r1, [pc, #56]	@ (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028a6:	f000 f821 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 80028aa:	4602      	mov	r2, r0
 80028ac:	4b0b      	ldr	r3, [pc, #44]	@ (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	490a      	ldr	r1, [pc, #40]	@ (80028e0 <HAL_RCC_ClockConfig+0x1cc>)
 80028b8:	5ccb      	ldrb	r3, [r1, r3]
 80028ba:	fa22 f303 	lsr.w	r3, r2, r3
 80028be:	4a09      	ldr	r2, [pc, #36]	@ (80028e4 <HAL_RCC_ClockConfig+0x1d0>)
 80028c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028c2:	4b09      	ldr	r3, [pc, #36]	@ (80028e8 <HAL_RCC_ClockConfig+0x1d4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe fcc0 	bl	800124c <HAL_InitTick>

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40023c00 	.word	0x40023c00
 80028dc:	40023800 	.word	0x40023800
 80028e0:	08003fa8 	.word	0x08003fa8
 80028e4:	20000004 	.word	0x20000004
 80028e8:	20000008 	.word	0x20000008

080028ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028f0:	b090      	sub	sp, #64	@ 0x40
 80028f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80028f8:	2300      	movs	r3, #0
 80028fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028fc:	2300      	movs	r3, #0
 80028fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002904:	4b59      	ldr	r3, [pc, #356]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b08      	cmp	r3, #8
 800290e:	d00d      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0x40>
 8002910:	2b08      	cmp	r3, #8
 8002912:	f200 80a1 	bhi.w	8002a58 <HAL_RCC_GetSysClockFreq+0x16c>
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <HAL_RCC_GetSysClockFreq+0x34>
 800291a:	2b04      	cmp	r3, #4
 800291c:	d003      	beq.n	8002926 <HAL_RCC_GetSysClockFreq+0x3a>
 800291e:	e09b      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002920:	4b53      	ldr	r3, [pc, #332]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x184>)
 8002922:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002924:	e09b      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002926:	4b53      	ldr	r3, [pc, #332]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8002928:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800292a:	e098      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800292c:	4b4f      	ldr	r3, [pc, #316]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x180>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002934:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002936:	4b4d      	ldr	r3, [pc, #308]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d028      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002942:	4b4a      	ldr	r3, [pc, #296]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	099b      	lsrs	r3, r3, #6
 8002948:	2200      	movs	r2, #0
 800294a:	623b      	str	r3, [r7, #32]
 800294c:	627a      	str	r2, [r7, #36]	@ 0x24
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002954:	2100      	movs	r1, #0
 8002956:	4b47      	ldr	r3, [pc, #284]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8002958:	fb03 f201 	mul.w	r2, r3, r1
 800295c:	2300      	movs	r3, #0
 800295e:	fb00 f303 	mul.w	r3, r0, r3
 8002962:	4413      	add	r3, r2
 8002964:	4a43      	ldr	r2, [pc, #268]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8002966:	fba0 1202 	umull	r1, r2, r0, r2
 800296a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800296c:	460a      	mov	r2, r1
 800296e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002970:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002972:	4413      	add	r3, r2
 8002974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002978:	2200      	movs	r2, #0
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	61fa      	str	r2, [r7, #28]
 800297e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002982:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002986:	f7fd fc5d 	bl	8000244 <__aeabi_uldivmod>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4613      	mov	r3, r2
 8002990:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002992:	e053      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002994:	4b35      	ldr	r3, [pc, #212]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	099b      	lsrs	r3, r3, #6
 800299a:	2200      	movs	r2, #0
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	617a      	str	r2, [r7, #20]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029a6:	f04f 0b00 	mov.w	fp, #0
 80029aa:	4652      	mov	r2, sl
 80029ac:	465b      	mov	r3, fp
 80029ae:	f04f 0000 	mov.w	r0, #0
 80029b2:	f04f 0100 	mov.w	r1, #0
 80029b6:	0159      	lsls	r1, r3, #5
 80029b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029bc:	0150      	lsls	r0, r2, #5
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	ebb2 080a 	subs.w	r8, r2, sl
 80029c6:	eb63 090b 	sbc.w	r9, r3, fp
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029de:	ebb2 0408 	subs.w	r4, r2, r8
 80029e2:	eb63 0509 	sbc.w	r5, r3, r9
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	00eb      	lsls	r3, r5, #3
 80029f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029f4:	00e2      	lsls	r2, r4, #3
 80029f6:	4614      	mov	r4, r2
 80029f8:	461d      	mov	r5, r3
 80029fa:	eb14 030a 	adds.w	r3, r4, sl
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	eb45 030b 	adc.w	r3, r5, fp
 8002a04:	607b      	str	r3, [r7, #4]
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a12:	4629      	mov	r1, r5
 8002a14:	028b      	lsls	r3, r1, #10
 8002a16:	4621      	mov	r1, r4
 8002a18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a1c:	4621      	mov	r1, r4
 8002a1e:	028a      	lsls	r2, r1, #10
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a26:	2200      	movs	r2, #0
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	60fa      	str	r2, [r7, #12]
 8002a2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a30:	f7fd fc08 	bl	8000244 <__aeabi_uldivmod>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4613      	mov	r3, r2
 8002a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	0c1b      	lsrs	r3, r3, #16
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	3301      	adds	r3, #1
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002a4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a54:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a56:	e002      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a58:	4b05      	ldr	r3, [pc, #20]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3740      	adds	r7, #64	@ 0x40
 8002a64:	46bd      	mov	sp, r7
 8002a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	00f42400 	.word	0x00f42400
 8002a74:	017d7840 	.word	0x017d7840

08002a78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a7c:	4b03      	ldr	r3, [pc, #12]	@ (8002a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	20000004 	.word	0x20000004

08002a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a94:	f7ff fff0 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b05      	ldr	r3, [pc, #20]	@ (8002ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	0a9b      	lsrs	r3, r3, #10
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	4903      	ldr	r1, [pc, #12]	@ (8002ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa6:	5ccb      	ldrb	r3, [r1, r3]
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	08003fb8 	.word	0x08003fb8

08002ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002abc:	f7ff ffdc 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b05      	ldr	r3, [pc, #20]	@ (8002ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	0b5b      	lsrs	r3, r3, #13
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4903      	ldr	r1, [pc, #12]	@ (8002adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	08003fb8 	.word	0x08003fb8

08002ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d012      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b04:	4b65      	ldr	r3, [pc, #404]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	4a64      	ldr	r2, [pc, #400]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b0a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002b0e:	6093      	str	r3, [r2, #8]
 8002b10:	4b62      	ldr	r3, [pc, #392]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b18:	4960      	ldr	r1, [pc, #384]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8002b26:	2301      	movs	r3, #1
 8002b28:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d017      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b36:	4b59      	ldr	r3, [pc, #356]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b3c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b44:	4955      	ldr	r1, [pc, #340]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b54:	d101      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8002b56:	2301      	movs	r3, #1
 8002b58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8002b62:	2301      	movs	r3, #1
 8002b64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d017      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b72:	4b4a      	ldr	r3, [pc, #296]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b78:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b80:	4946      	ldr	r1, [pc, #280]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b90:	d101      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8002b92:	2301      	movs	r3, #1
 8002b94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0320 	and.w	r3, r3, #32
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 808b 	beq.w	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bb0:	4b3a      	ldr	r3, [pc, #232]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	4a39      	ldr	r2, [pc, #228]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bba:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bbc:	4b37      	ldr	r3, [pc, #220]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bc8:	4b35      	ldr	r3, [pc, #212]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a34      	ldr	r2, [pc, #208]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002bce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd4:	f7fe fb7e 	bl	80012d4 <HAL_GetTick>
 8002bd8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bdc:	f7fe fb7a 	bl	80012d4 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b64      	cmp	r3, #100	@ 0x64
 8002be8:	d901      	bls.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e2bc      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bee:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f0      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bfa:	4b28      	ldr	r3, [pc, #160]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c02:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d035      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d02e      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c18:	4b20      	ldr	r3, [pc, #128]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c20:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c22:	4b1e      	ldr	r3, [pc, #120]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c26:	4a1d      	ldr	r2, [pc, #116]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c2c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c32:	4a1a      	ldr	r2, [pc, #104]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002c34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c38:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c3a:	4a18      	ldr	r2, [pc, #96]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c40:	4b16      	ldr	r3, [pc, #88]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d114      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7fe fb42 	bl	80012d4 <HAL_GetTick>
 8002c50:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c52:	e00a      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c54:	f7fe fb3e 	bl	80012d4 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e27e      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0ee      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c82:	d111      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8002c84:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002c90:	4b04      	ldr	r3, [pc, #16]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c92:	400b      	ands	r3, r1
 8002c94:	4901      	ldr	r1, [pc, #4]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	608b      	str	r3, [r1, #8]
 8002c9a:	e00b      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40007000 	.word	0x40007000
 8002ca4:	0ffffcff 	.word	0x0ffffcff
 8002ca8:	4ba4      	ldr	r3, [pc, #656]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4aa3      	ldr	r2, [pc, #652]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002cae:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002cb2:	6093      	str	r3, [r2, #8]
 8002cb4:	4ba1      	ldr	r3, [pc, #644]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002cb6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc0:	499e      	ldr	r1, [pc, #632]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d010      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cd2:	4b9a      	ldr	r3, [pc, #616]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cd8:	4a98      	ldr	r2, [pc, #608]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002cda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cde:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002ce2:	4b96      	ldr	r3, [pc, #600]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ce4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cec:	4993      	ldr	r1, [pc, #588]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d00:	4b8e      	ldr	r3, [pc, #568]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d06:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0e:	498b      	ldr	r1, [pc, #556]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d22:	4b86      	ldr	r3, [pc, #536]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d28:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d30:	4982      	ldr	r1, [pc, #520]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d44:	4b7d      	ldr	r3, [pc, #500]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d52:	497a      	ldr	r1, [pc, #488]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d66:	4b75      	ldr	r3, [pc, #468]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6c:	f023 0203 	bic.w	r2, r3, #3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d74:	4971      	ldr	r1, [pc, #452]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d88:	4b6c      	ldr	r3, [pc, #432]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8e:	f023 020c 	bic.w	r2, r3, #12
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	4969      	ldr	r1, [pc, #420]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002daa:	4b64      	ldr	r3, [pc, #400]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db8:	4960      	ldr	r1, [pc, #384]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dcc:	4b5b      	ldr	r3, [pc, #364]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dda:	4958      	ldr	r1, [pc, #352]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dee:	4b53      	ldr	r3, [pc, #332]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dfc:	494f      	ldr	r1, [pc, #316]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00a      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e10:	4b4a      	ldr	r3, [pc, #296]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e16:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e1e:	4947      	ldr	r1, [pc, #284]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e32:	4b42      	ldr	r3, [pc, #264]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e38:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e40:	493e      	ldr	r1, [pc, #248]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e54:	4b39      	ldr	r3, [pc, #228]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e5a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e62:	4936      	ldr	r1, [pc, #216]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d011      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e76:	4b31      	ldr	r3, [pc, #196]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e7c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e84:	492d      	ldr	r1, [pc, #180]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e94:	d101      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8002e96:	2301      	movs	r3, #1
 8002e98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ea6:	4b25      	ldr	r3, [pc, #148]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eac:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eb4:	4921      	ldr	r1, [pc, #132]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00a      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ece:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ed6:	4919      	ldr	r1, [pc, #100]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002eea:	4b14      	ldr	r3, [pc, #80]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ef8:	4910      	ldr	r1, [pc, #64]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d006      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 809d 	beq.w	800304e <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f14:	4b09      	ldr	r3, [pc, #36]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a08      	ldr	r2, [pc, #32]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002f1a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f20:	f7fe f9d8 	bl	80012d4 <HAL_GetTick>
 8002f24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f26:	e00b      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f28:	f7fe f9d4 	bl	80012d4 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b64      	cmp	r3, #100	@ 0x64
 8002f34:	d904      	bls.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e116      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f40:	4b8b      	ldr	r3, [pc, #556]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1ed      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d017      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d113      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f60:	4b83      	ldr	r3, [pc, #524]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f66:	0e1b      	lsrs	r3, r3, #24
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	019a      	lsls	r2, r3, #6
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	061b      	lsls	r3, r3, #24
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	071b      	lsls	r3, r3, #28
 8002f80:	497b      	ldr	r1, [pc, #492]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d004      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d024      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fb2:	d11f      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fb4:	4b6e      	ldr	r3, [pc, #440]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fba:	0f1b      	lsrs	r3, r3, #28
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	019a      	lsls	r2, r3, #6
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	061b      	lsls	r3, r3, #24
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	071b      	lsls	r3, r3, #28
 8002fd4:	4966      	ldr	r1, [pc, #408]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002fdc:	4b64      	ldr	r3, [pc, #400]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fe2:	f023 021f 	bic.w	r2, r3, #31
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	4960      	ldr	r1, [pc, #384]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00d      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	019a      	lsls	r2, r3, #6
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	061b      	lsls	r3, r3, #24
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	071b      	lsls	r3, r3, #28
 8003014:	4956      	ldr	r1, [pc, #344]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800301c:	4b54      	ldr	r3, [pc, #336]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a53      	ldr	r2, [pc, #332]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003022:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003026:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003028:	f7fe f954 	bl	80012d4 <HAL_GetTick>
 800302c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003030:	f7fe f950 	bl	80012d4 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b64      	cmp	r3, #100	@ 0x64
 800303c:	d901      	bls.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e092      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003042:	4b4b      	ldr	r3, [pc, #300]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	2b01      	cmp	r3, #1
 8003052:	f040 8088 	bne.w	8003166 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003056:	4b46      	ldr	r3, [pc, #280]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a45      	ldr	r2, [pc, #276]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800305c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003060:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003062:	f7fe f937 	bl	80012d4 <HAL_GetTick>
 8003066:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003068:	e008      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800306a:	f7fe f933 	bl	80012d4 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b64      	cmp	r3, #100	@ 0x64
 8003076:	d901      	bls.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e075      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800307c:	4b3c      	ldr	r3, [pc, #240]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003084:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003088:	d0ef      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800309a:	2b00      	cmp	r3, #0
 800309c:	d009      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d024      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d120      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030b2:	4b2f      	ldr	r3, [pc, #188]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b8:	0c1b      	lsrs	r3, r3, #16
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	019a      	lsls	r2, r3, #6
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	041b      	lsls	r3, r3, #16
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	061b      	lsls	r3, r3, #24
 80030d2:	4927      	ldr	r1, [pc, #156]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80030da:	4b25      	ldr	r3, [pc, #148]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80030dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030e0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	4920      	ldr	r1, [pc, #128]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d018      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003104:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003108:	d113      	bne.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800310a:	4b19      	ldr	r3, [pc, #100]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800310c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003110:	0e1b      	lsrs	r3, r3, #24
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	019a      	lsls	r2, r3, #6
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	041b      	lsls	r3, r3, #16
 8003124:	431a      	orrs	r2, r3
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	061b      	lsls	r3, r3, #24
 800312a:	4911      	ldr	r1, [pc, #68]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003132:	4b0f      	ldr	r3, [pc, #60]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a0e      	ldr	r2, [pc, #56]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800313c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800313e:	f7fe f8c9 	bl	80012d4 <HAL_GetTick>
 8003142:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003144:	e008      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003146:	f7fe f8c5 	bl	80012d4 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b64      	cmp	r3, #100	@ 0x64
 8003152:	d901      	bls.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e007      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003158:	4b05      	ldr	r3, [pc, #20]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003160:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003164:	d1ef      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3720      	adds	r7, #32
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40023800 	.word	0x40023800

08003174 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e040      	b.n	8003208 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800318a:	2b00      	cmp	r3, #0
 800318c:	d106      	bne.n	800319c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7fd ff28 	bl	8000fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2224      	movs	r2, #36	@ 0x24
 80031a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0201 	bic.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fbde 	bl	800397c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f977 	bl	80034b4 <UART_SetConfig>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e01b      	b.n	8003208 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fc5d 	bl	8003ac0 <UART_CheckIdleState>
 8003206:	4603      	mov	r3, r0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	@ 0x28
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	4613      	mov	r3, r2
 800321e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003224:	2b20      	cmp	r3, #32
 8003226:	d177      	bne.n	8003318 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <HAL_UART_Transmit+0x24>
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e070      	b.n	800331a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2221      	movs	r2, #33	@ 0x21
 8003244:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003246:	f7fe f845 	bl	80012d4 <HAL_GetTick>
 800324a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	88fa      	ldrh	r2, [r7, #6]
 8003250:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	88fa      	ldrh	r2, [r7, #6]
 8003258:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003264:	d108      	bne.n	8003278 <HAL_UART_Transmit+0x68>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d104      	bne.n	8003278 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	e003      	b.n	8003280 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800327c:	2300      	movs	r3, #0
 800327e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003280:	e02f      	b.n	80032e2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2200      	movs	r2, #0
 800328a:	2180      	movs	r1, #128	@ 0x80
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 fc6e 	bl	8003b6e <UART_WaitOnFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d004      	beq.n	80032a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e03b      	b.n	800331a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10b      	bne.n	80032c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	3302      	adds	r3, #2
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	e007      	b.n	80032d0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	781a      	ldrb	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3301      	adds	r3, #1
 80032ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1c9      	bne.n	8003282 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2200      	movs	r2, #0
 80032f6:	2140      	movs	r1, #64	@ 0x40
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 fc38 	bl	8003b6e <UART_WaitOnFlagUntilTimeout>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d004      	beq.n	800330e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e005      	b.n	800331a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	e000      	b.n	800331a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003318:	2302      	movs	r3, #2
  }
}
 800331a:	4618      	mov	r0, r3
 800331c:	3720      	adds	r7, #32
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b08a      	sub	sp, #40	@ 0x28
 8003326:	af02      	add	r7, sp, #8
 8003328:	60f8      	str	r0, [r7, #12]
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	603b      	str	r3, [r7, #0]
 800332e:	4613      	mov	r3, r2
 8003330:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003338:	2b20      	cmp	r3, #32
 800333a:	f040 80b5 	bne.w	80034a8 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <HAL_UART_Receive+0x28>
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e0ad      	b.n	80034aa <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2222      	movs	r2, #34	@ 0x22
 800335a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003364:	f7fd ffb6 	bl	80012d4 <HAL_GetTick>
 8003368:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	88fa      	ldrh	r2, [r7, #6]
 800336e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	88fa      	ldrh	r2, [r7, #6]
 8003376:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003382:	d10e      	bne.n	80033a2 <HAL_UART_Receive+0x80>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d105      	bne.n	8003398 <HAL_UART_Receive+0x76>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003392:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003396:	e02d      	b.n	80033f4 <HAL_UART_Receive+0xd2>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	22ff      	movs	r2, #255	@ 0xff
 800339c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80033a0:	e028      	b.n	80033f4 <HAL_UART_Receive+0xd2>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10d      	bne.n	80033c6 <HAL_UART_Receive+0xa4>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d104      	bne.n	80033bc <HAL_UART_Receive+0x9a>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	22ff      	movs	r2, #255	@ 0xff
 80033b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80033ba:	e01b      	b.n	80033f4 <HAL_UART_Receive+0xd2>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	227f      	movs	r2, #127	@ 0x7f
 80033c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80033c4:	e016      	b.n	80033f4 <HAL_UART_Receive+0xd2>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033ce:	d10d      	bne.n	80033ec <HAL_UART_Receive+0xca>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d104      	bne.n	80033e2 <HAL_UART_Receive+0xc0>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	227f      	movs	r2, #127	@ 0x7f
 80033dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80033e0:	e008      	b.n	80033f4 <HAL_UART_Receive+0xd2>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	223f      	movs	r2, #63	@ 0x3f
 80033e6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80033ea:	e003      	b.n	80033f4 <HAL_UART_Receive+0xd2>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80033fa:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003404:	d108      	bne.n	8003418 <HAL_UART_Receive+0xf6>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d104      	bne.n	8003418 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	61bb      	str	r3, [r7, #24]
 8003416:	e003      	b.n	8003420 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800341c:	2300      	movs	r3, #0
 800341e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003420:	e036      	b.n	8003490 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2200      	movs	r2, #0
 800342a:	2120      	movs	r1, #32
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 fb9e 	bl	8003b6e <UART_WaitOnFlagUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e032      	b.n	80034aa <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10c      	bne.n	8003464 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003450:	b29a      	uxth	r2, r3
 8003452:	8a7b      	ldrh	r3, [r7, #18]
 8003454:	4013      	ands	r3, r2
 8003456:	b29a      	uxth	r2, r3
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	3302      	adds	r3, #2
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	e00c      	b.n	800347e <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346a:	b2da      	uxtb	r2, r3
 800346c:	8a7b      	ldrh	r3, [r7, #18]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	4013      	ands	r3, r2
 8003472:	b2da      	uxtb	r2, r3
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	3301      	adds	r3, #1
 800347c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003484:	b29b      	uxth	r3, r3
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1c2      	bne.n	8003422 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	e000      	b.n	80034aa <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80034a8:	2302      	movs	r3, #2
  }
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3720      	adds	r7, #32
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	4ba6      	ldr	r3, [pc, #664]	@ (8003778 <UART_SetConfig+0x2c4>)
 80034e0:	4013      	ands	r3, r2
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6812      	ldr	r2, [r2, #0]
 80034e6:	6979      	ldr	r1, [r7, #20]
 80034e8:	430b      	orrs	r3, r1
 80034ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	4313      	orrs	r3, r2
 8003510:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	430a      	orrs	r2, r1
 8003524:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a94      	ldr	r2, [pc, #592]	@ (800377c <UART_SetConfig+0x2c8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d120      	bne.n	8003572 <UART_SetConfig+0xbe>
 8003530:	4b93      	ldr	r3, [pc, #588]	@ (8003780 <UART_SetConfig+0x2cc>)
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	2b03      	cmp	r3, #3
 800353c:	d816      	bhi.n	800356c <UART_SetConfig+0xb8>
 800353e:	a201      	add	r2, pc, #4	@ (adr r2, 8003544 <UART_SetConfig+0x90>)
 8003540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003544:	08003555 	.word	0x08003555
 8003548:	08003561 	.word	0x08003561
 800354c:	0800355b 	.word	0x0800355b
 8003550:	08003567 	.word	0x08003567
 8003554:	2301      	movs	r3, #1
 8003556:	77fb      	strb	r3, [r7, #31]
 8003558:	e150      	b.n	80037fc <UART_SetConfig+0x348>
 800355a:	2302      	movs	r3, #2
 800355c:	77fb      	strb	r3, [r7, #31]
 800355e:	e14d      	b.n	80037fc <UART_SetConfig+0x348>
 8003560:	2304      	movs	r3, #4
 8003562:	77fb      	strb	r3, [r7, #31]
 8003564:	e14a      	b.n	80037fc <UART_SetConfig+0x348>
 8003566:	2308      	movs	r3, #8
 8003568:	77fb      	strb	r3, [r7, #31]
 800356a:	e147      	b.n	80037fc <UART_SetConfig+0x348>
 800356c:	2310      	movs	r3, #16
 800356e:	77fb      	strb	r3, [r7, #31]
 8003570:	e144      	b.n	80037fc <UART_SetConfig+0x348>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a83      	ldr	r2, [pc, #524]	@ (8003784 <UART_SetConfig+0x2d0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d132      	bne.n	80035e2 <UART_SetConfig+0x12e>
 800357c:	4b80      	ldr	r3, [pc, #512]	@ (8003780 <UART_SetConfig+0x2cc>)
 800357e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b0c      	cmp	r3, #12
 8003588:	d828      	bhi.n	80035dc <UART_SetConfig+0x128>
 800358a:	a201      	add	r2, pc, #4	@ (adr r2, 8003590 <UART_SetConfig+0xdc>)
 800358c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003590:	080035c5 	.word	0x080035c5
 8003594:	080035dd 	.word	0x080035dd
 8003598:	080035dd 	.word	0x080035dd
 800359c:	080035dd 	.word	0x080035dd
 80035a0:	080035d1 	.word	0x080035d1
 80035a4:	080035dd 	.word	0x080035dd
 80035a8:	080035dd 	.word	0x080035dd
 80035ac:	080035dd 	.word	0x080035dd
 80035b0:	080035cb 	.word	0x080035cb
 80035b4:	080035dd 	.word	0x080035dd
 80035b8:	080035dd 	.word	0x080035dd
 80035bc:	080035dd 	.word	0x080035dd
 80035c0:	080035d7 	.word	0x080035d7
 80035c4:	2300      	movs	r3, #0
 80035c6:	77fb      	strb	r3, [r7, #31]
 80035c8:	e118      	b.n	80037fc <UART_SetConfig+0x348>
 80035ca:	2302      	movs	r3, #2
 80035cc:	77fb      	strb	r3, [r7, #31]
 80035ce:	e115      	b.n	80037fc <UART_SetConfig+0x348>
 80035d0:	2304      	movs	r3, #4
 80035d2:	77fb      	strb	r3, [r7, #31]
 80035d4:	e112      	b.n	80037fc <UART_SetConfig+0x348>
 80035d6:	2308      	movs	r3, #8
 80035d8:	77fb      	strb	r3, [r7, #31]
 80035da:	e10f      	b.n	80037fc <UART_SetConfig+0x348>
 80035dc:	2310      	movs	r3, #16
 80035de:	77fb      	strb	r3, [r7, #31]
 80035e0:	e10c      	b.n	80037fc <UART_SetConfig+0x348>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a68      	ldr	r2, [pc, #416]	@ (8003788 <UART_SetConfig+0x2d4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d120      	bne.n	800362e <UART_SetConfig+0x17a>
 80035ec:	4b64      	ldr	r3, [pc, #400]	@ (8003780 <UART_SetConfig+0x2cc>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80035f6:	2b30      	cmp	r3, #48	@ 0x30
 80035f8:	d013      	beq.n	8003622 <UART_SetConfig+0x16e>
 80035fa:	2b30      	cmp	r3, #48	@ 0x30
 80035fc:	d814      	bhi.n	8003628 <UART_SetConfig+0x174>
 80035fe:	2b20      	cmp	r3, #32
 8003600:	d009      	beq.n	8003616 <UART_SetConfig+0x162>
 8003602:	2b20      	cmp	r3, #32
 8003604:	d810      	bhi.n	8003628 <UART_SetConfig+0x174>
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <UART_SetConfig+0x15c>
 800360a:	2b10      	cmp	r3, #16
 800360c:	d006      	beq.n	800361c <UART_SetConfig+0x168>
 800360e:	e00b      	b.n	8003628 <UART_SetConfig+0x174>
 8003610:	2300      	movs	r3, #0
 8003612:	77fb      	strb	r3, [r7, #31]
 8003614:	e0f2      	b.n	80037fc <UART_SetConfig+0x348>
 8003616:	2302      	movs	r3, #2
 8003618:	77fb      	strb	r3, [r7, #31]
 800361a:	e0ef      	b.n	80037fc <UART_SetConfig+0x348>
 800361c:	2304      	movs	r3, #4
 800361e:	77fb      	strb	r3, [r7, #31]
 8003620:	e0ec      	b.n	80037fc <UART_SetConfig+0x348>
 8003622:	2308      	movs	r3, #8
 8003624:	77fb      	strb	r3, [r7, #31]
 8003626:	e0e9      	b.n	80037fc <UART_SetConfig+0x348>
 8003628:	2310      	movs	r3, #16
 800362a:	77fb      	strb	r3, [r7, #31]
 800362c:	e0e6      	b.n	80037fc <UART_SetConfig+0x348>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a56      	ldr	r2, [pc, #344]	@ (800378c <UART_SetConfig+0x2d8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d120      	bne.n	800367a <UART_SetConfig+0x1c6>
 8003638:	4b51      	ldr	r3, [pc, #324]	@ (8003780 <UART_SetConfig+0x2cc>)
 800363a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003642:	2bc0      	cmp	r3, #192	@ 0xc0
 8003644:	d013      	beq.n	800366e <UART_SetConfig+0x1ba>
 8003646:	2bc0      	cmp	r3, #192	@ 0xc0
 8003648:	d814      	bhi.n	8003674 <UART_SetConfig+0x1c0>
 800364a:	2b80      	cmp	r3, #128	@ 0x80
 800364c:	d009      	beq.n	8003662 <UART_SetConfig+0x1ae>
 800364e:	2b80      	cmp	r3, #128	@ 0x80
 8003650:	d810      	bhi.n	8003674 <UART_SetConfig+0x1c0>
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <UART_SetConfig+0x1a8>
 8003656:	2b40      	cmp	r3, #64	@ 0x40
 8003658:	d006      	beq.n	8003668 <UART_SetConfig+0x1b4>
 800365a:	e00b      	b.n	8003674 <UART_SetConfig+0x1c0>
 800365c:	2300      	movs	r3, #0
 800365e:	77fb      	strb	r3, [r7, #31]
 8003660:	e0cc      	b.n	80037fc <UART_SetConfig+0x348>
 8003662:	2302      	movs	r3, #2
 8003664:	77fb      	strb	r3, [r7, #31]
 8003666:	e0c9      	b.n	80037fc <UART_SetConfig+0x348>
 8003668:	2304      	movs	r3, #4
 800366a:	77fb      	strb	r3, [r7, #31]
 800366c:	e0c6      	b.n	80037fc <UART_SetConfig+0x348>
 800366e:	2308      	movs	r3, #8
 8003670:	77fb      	strb	r3, [r7, #31]
 8003672:	e0c3      	b.n	80037fc <UART_SetConfig+0x348>
 8003674:	2310      	movs	r3, #16
 8003676:	77fb      	strb	r3, [r7, #31]
 8003678:	e0c0      	b.n	80037fc <UART_SetConfig+0x348>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a44      	ldr	r2, [pc, #272]	@ (8003790 <UART_SetConfig+0x2dc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d125      	bne.n	80036d0 <UART_SetConfig+0x21c>
 8003684:	4b3e      	ldr	r3, [pc, #248]	@ (8003780 <UART_SetConfig+0x2cc>)
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800368a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800368e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003692:	d017      	beq.n	80036c4 <UART_SetConfig+0x210>
 8003694:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003698:	d817      	bhi.n	80036ca <UART_SetConfig+0x216>
 800369a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800369e:	d00b      	beq.n	80036b8 <UART_SetConfig+0x204>
 80036a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036a4:	d811      	bhi.n	80036ca <UART_SetConfig+0x216>
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <UART_SetConfig+0x1fe>
 80036aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036ae:	d006      	beq.n	80036be <UART_SetConfig+0x20a>
 80036b0:	e00b      	b.n	80036ca <UART_SetConfig+0x216>
 80036b2:	2300      	movs	r3, #0
 80036b4:	77fb      	strb	r3, [r7, #31]
 80036b6:	e0a1      	b.n	80037fc <UART_SetConfig+0x348>
 80036b8:	2302      	movs	r3, #2
 80036ba:	77fb      	strb	r3, [r7, #31]
 80036bc:	e09e      	b.n	80037fc <UART_SetConfig+0x348>
 80036be:	2304      	movs	r3, #4
 80036c0:	77fb      	strb	r3, [r7, #31]
 80036c2:	e09b      	b.n	80037fc <UART_SetConfig+0x348>
 80036c4:	2308      	movs	r3, #8
 80036c6:	77fb      	strb	r3, [r7, #31]
 80036c8:	e098      	b.n	80037fc <UART_SetConfig+0x348>
 80036ca:	2310      	movs	r3, #16
 80036cc:	77fb      	strb	r3, [r7, #31]
 80036ce:	e095      	b.n	80037fc <UART_SetConfig+0x348>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a2f      	ldr	r2, [pc, #188]	@ (8003794 <UART_SetConfig+0x2e0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d125      	bne.n	8003726 <UART_SetConfig+0x272>
 80036da:	4b29      	ldr	r3, [pc, #164]	@ (8003780 <UART_SetConfig+0x2cc>)
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80036e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036e8:	d017      	beq.n	800371a <UART_SetConfig+0x266>
 80036ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036ee:	d817      	bhi.n	8003720 <UART_SetConfig+0x26c>
 80036f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036f4:	d00b      	beq.n	800370e <UART_SetConfig+0x25a>
 80036f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036fa:	d811      	bhi.n	8003720 <UART_SetConfig+0x26c>
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <UART_SetConfig+0x254>
 8003700:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003704:	d006      	beq.n	8003714 <UART_SetConfig+0x260>
 8003706:	e00b      	b.n	8003720 <UART_SetConfig+0x26c>
 8003708:	2301      	movs	r3, #1
 800370a:	77fb      	strb	r3, [r7, #31]
 800370c:	e076      	b.n	80037fc <UART_SetConfig+0x348>
 800370e:	2302      	movs	r3, #2
 8003710:	77fb      	strb	r3, [r7, #31]
 8003712:	e073      	b.n	80037fc <UART_SetConfig+0x348>
 8003714:	2304      	movs	r3, #4
 8003716:	77fb      	strb	r3, [r7, #31]
 8003718:	e070      	b.n	80037fc <UART_SetConfig+0x348>
 800371a:	2308      	movs	r3, #8
 800371c:	77fb      	strb	r3, [r7, #31]
 800371e:	e06d      	b.n	80037fc <UART_SetConfig+0x348>
 8003720:	2310      	movs	r3, #16
 8003722:	77fb      	strb	r3, [r7, #31]
 8003724:	e06a      	b.n	80037fc <UART_SetConfig+0x348>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a1b      	ldr	r2, [pc, #108]	@ (8003798 <UART_SetConfig+0x2e4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d138      	bne.n	80037a2 <UART_SetConfig+0x2ee>
 8003730:	4b13      	ldr	r3, [pc, #76]	@ (8003780 <UART_SetConfig+0x2cc>)
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003736:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800373a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800373e:	d017      	beq.n	8003770 <UART_SetConfig+0x2bc>
 8003740:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003744:	d82a      	bhi.n	800379c <UART_SetConfig+0x2e8>
 8003746:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800374a:	d00b      	beq.n	8003764 <UART_SetConfig+0x2b0>
 800374c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003750:	d824      	bhi.n	800379c <UART_SetConfig+0x2e8>
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <UART_SetConfig+0x2aa>
 8003756:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800375a:	d006      	beq.n	800376a <UART_SetConfig+0x2b6>
 800375c:	e01e      	b.n	800379c <UART_SetConfig+0x2e8>
 800375e:	2300      	movs	r3, #0
 8003760:	77fb      	strb	r3, [r7, #31]
 8003762:	e04b      	b.n	80037fc <UART_SetConfig+0x348>
 8003764:	2302      	movs	r3, #2
 8003766:	77fb      	strb	r3, [r7, #31]
 8003768:	e048      	b.n	80037fc <UART_SetConfig+0x348>
 800376a:	2304      	movs	r3, #4
 800376c:	77fb      	strb	r3, [r7, #31]
 800376e:	e045      	b.n	80037fc <UART_SetConfig+0x348>
 8003770:	2308      	movs	r3, #8
 8003772:	77fb      	strb	r3, [r7, #31]
 8003774:	e042      	b.n	80037fc <UART_SetConfig+0x348>
 8003776:	bf00      	nop
 8003778:	efff69f3 	.word	0xefff69f3
 800377c:	40011000 	.word	0x40011000
 8003780:	40023800 	.word	0x40023800
 8003784:	40004400 	.word	0x40004400
 8003788:	40004800 	.word	0x40004800
 800378c:	40004c00 	.word	0x40004c00
 8003790:	40005000 	.word	0x40005000
 8003794:	40011400 	.word	0x40011400
 8003798:	40007800 	.word	0x40007800
 800379c:	2310      	movs	r3, #16
 800379e:	77fb      	strb	r3, [r7, #31]
 80037a0:	e02c      	b.n	80037fc <UART_SetConfig+0x348>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a72      	ldr	r2, [pc, #456]	@ (8003970 <UART_SetConfig+0x4bc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d125      	bne.n	80037f8 <UART_SetConfig+0x344>
 80037ac:	4b71      	ldr	r3, [pc, #452]	@ (8003974 <UART_SetConfig+0x4c0>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80037b6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80037ba:	d017      	beq.n	80037ec <UART_SetConfig+0x338>
 80037bc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80037c0:	d817      	bhi.n	80037f2 <UART_SetConfig+0x33e>
 80037c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037c6:	d00b      	beq.n	80037e0 <UART_SetConfig+0x32c>
 80037c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037cc:	d811      	bhi.n	80037f2 <UART_SetConfig+0x33e>
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <UART_SetConfig+0x326>
 80037d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037d6:	d006      	beq.n	80037e6 <UART_SetConfig+0x332>
 80037d8:	e00b      	b.n	80037f2 <UART_SetConfig+0x33e>
 80037da:	2300      	movs	r3, #0
 80037dc:	77fb      	strb	r3, [r7, #31]
 80037de:	e00d      	b.n	80037fc <UART_SetConfig+0x348>
 80037e0:	2302      	movs	r3, #2
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e00a      	b.n	80037fc <UART_SetConfig+0x348>
 80037e6:	2304      	movs	r3, #4
 80037e8:	77fb      	strb	r3, [r7, #31]
 80037ea:	e007      	b.n	80037fc <UART_SetConfig+0x348>
 80037ec:	2308      	movs	r3, #8
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e004      	b.n	80037fc <UART_SetConfig+0x348>
 80037f2:	2310      	movs	r3, #16
 80037f4:	77fb      	strb	r3, [r7, #31]
 80037f6:	e001      	b.n	80037fc <UART_SetConfig+0x348>
 80037f8:	2310      	movs	r3, #16
 80037fa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003804:	d15b      	bne.n	80038be <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003806:	7ffb      	ldrb	r3, [r7, #31]
 8003808:	2b08      	cmp	r3, #8
 800380a:	d828      	bhi.n	800385e <UART_SetConfig+0x3aa>
 800380c:	a201      	add	r2, pc, #4	@ (adr r2, 8003814 <UART_SetConfig+0x360>)
 800380e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003812:	bf00      	nop
 8003814:	08003839 	.word	0x08003839
 8003818:	08003841 	.word	0x08003841
 800381c:	08003849 	.word	0x08003849
 8003820:	0800385f 	.word	0x0800385f
 8003824:	0800384f 	.word	0x0800384f
 8003828:	0800385f 	.word	0x0800385f
 800382c:	0800385f 	.word	0x0800385f
 8003830:	0800385f 	.word	0x0800385f
 8003834:	08003857 	.word	0x08003857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003838:	f7ff f92a 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 800383c:	61b8      	str	r0, [r7, #24]
        break;
 800383e:	e013      	b.n	8003868 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003840:	f7ff f93a 	bl	8002ab8 <HAL_RCC_GetPCLK2Freq>
 8003844:	61b8      	str	r0, [r7, #24]
        break;
 8003846:	e00f      	b.n	8003868 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003848:	4b4b      	ldr	r3, [pc, #300]	@ (8003978 <UART_SetConfig+0x4c4>)
 800384a:	61bb      	str	r3, [r7, #24]
        break;
 800384c:	e00c      	b.n	8003868 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800384e:	f7ff f84d 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 8003852:	61b8      	str	r0, [r7, #24]
        break;
 8003854:	e008      	b.n	8003868 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003856:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800385a:	61bb      	str	r3, [r7, #24]
        break;
 800385c:	e004      	b.n	8003868 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800385e:	2300      	movs	r3, #0
 8003860:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	77bb      	strb	r3, [r7, #30]
        break;
 8003866:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d074      	beq.n	8003958 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	005a      	lsls	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	085b      	lsrs	r3, r3, #1
 8003878:	441a      	add	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003882:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b0f      	cmp	r3, #15
 8003888:	d916      	bls.n	80038b8 <UART_SetConfig+0x404>
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003890:	d212      	bcs.n	80038b8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	b29b      	uxth	r3, r3
 8003896:	f023 030f 	bic.w	r3, r3, #15
 800389a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	085b      	lsrs	r3, r3, #1
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	89fb      	ldrh	r3, [r7, #14]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	89fa      	ldrh	r2, [r7, #14]
 80038b4:	60da      	str	r2, [r3, #12]
 80038b6:	e04f      	b.n	8003958 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	77bb      	strb	r3, [r7, #30]
 80038bc:	e04c      	b.n	8003958 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038be:	7ffb      	ldrb	r3, [r7, #31]
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d828      	bhi.n	8003916 <UART_SetConfig+0x462>
 80038c4:	a201      	add	r2, pc, #4	@ (adr r2, 80038cc <UART_SetConfig+0x418>)
 80038c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ca:	bf00      	nop
 80038cc:	080038f1 	.word	0x080038f1
 80038d0:	080038f9 	.word	0x080038f9
 80038d4:	08003901 	.word	0x08003901
 80038d8:	08003917 	.word	0x08003917
 80038dc:	08003907 	.word	0x08003907
 80038e0:	08003917 	.word	0x08003917
 80038e4:	08003917 	.word	0x08003917
 80038e8:	08003917 	.word	0x08003917
 80038ec:	0800390f 	.word	0x0800390f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038f0:	f7ff f8ce 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 80038f4:	61b8      	str	r0, [r7, #24]
        break;
 80038f6:	e013      	b.n	8003920 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038f8:	f7ff f8de 	bl	8002ab8 <HAL_RCC_GetPCLK2Freq>
 80038fc:	61b8      	str	r0, [r7, #24]
        break;
 80038fe:	e00f      	b.n	8003920 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003900:	4b1d      	ldr	r3, [pc, #116]	@ (8003978 <UART_SetConfig+0x4c4>)
 8003902:	61bb      	str	r3, [r7, #24]
        break;
 8003904:	e00c      	b.n	8003920 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003906:	f7fe fff1 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 800390a:	61b8      	str	r0, [r7, #24]
        break;
 800390c:	e008      	b.n	8003920 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800390e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003912:	61bb      	str	r3, [r7, #24]
        break;
 8003914:	e004      	b.n	8003920 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003916:	2300      	movs	r3, #0
 8003918:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	77bb      	strb	r3, [r7, #30]
        break;
 800391e:	bf00      	nop
    }

    if (pclk != 0U)
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d018      	beq.n	8003958 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	085a      	lsrs	r2, r3, #1
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	441a      	add	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	fbb2 f3f3 	udiv	r3, r2, r3
 8003938:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	2b0f      	cmp	r3, #15
 800393e:	d909      	bls.n	8003954 <UART_SetConfig+0x4a0>
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003946:	d205      	bcs.n	8003954 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	b29a      	uxth	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60da      	str	r2, [r3, #12]
 8003952:	e001      	b.n	8003958 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003964:	7fbb      	ldrb	r3, [r7, #30]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3720      	adds	r7, #32
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40007c00 	.word	0x40007c00
 8003974:	40023800 	.word	0x40023800
 8003978:	00f42400 	.word	0x00f42400

0800397c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a10:	f003 0310 	and.w	r3, r3, #16
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d01a      	beq.n	8003a92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a7a:	d10a      	bne.n	8003a92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	605a      	str	r2, [r3, #4]
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08c      	sub	sp, #48	@ 0x30
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ad0:	f7fd fc00 	bl	80012d4 <HAL_GetTick>
 8003ad4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d12e      	bne.n	8003b42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ae4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aec:	2200      	movs	r2, #0
 8003aee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f83b 	bl	8003b6e <UART_WaitOnFlagUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d021      	beq.n	8003b42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	e853 3f00 	ldrex	r3, [r3]
 8003b0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b12:	623b      	str	r3, [r7, #32]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b20:	69b9      	ldr	r1, [r7, #24]
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	e841 2300 	strex	r3, r2, [r1]
 8003b28:	617b      	str	r3, [r7, #20]
   return(result);
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1e6      	bne.n	8003afe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e011      	b.n	8003b66 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3728      	adds	r7, #40	@ 0x28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	603b      	str	r3, [r7, #0]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b7e:	e04f      	b.n	8003c20 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b86:	d04b      	beq.n	8003c20 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b88:	f7fd fba4 	bl	80012d4 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d302      	bcc.n	8003b9e <UART_WaitOnFlagUntilTimeout+0x30>
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e04e      	b.n	8003c40 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d037      	beq.n	8003c20 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b80      	cmp	r3, #128	@ 0x80
 8003bb4:	d034      	beq.n	8003c20 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b40      	cmp	r3, #64	@ 0x40
 8003bba:	d031      	beq.n	8003c20 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d110      	bne.n	8003bec <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2208      	movs	r2, #8
 8003bd0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 f838 	bl	8003c48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2208      	movs	r2, #8
 8003bdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e029      	b.n	8003c40 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bf6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bfa:	d111      	bne.n	8003c20 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c04:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 f81e 	bl	8003c48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e00f      	b.n	8003c40 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69da      	ldr	r2, [r3, #28]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	bf0c      	ite	eq
 8003c30:	2301      	moveq	r3, #1
 8003c32:	2300      	movne	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	79fb      	ldrb	r3, [r7, #7]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d0a0      	beq.n	8003b80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b095      	sub	sp, #84	@ 0x54
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c58:	e853 3f00 	ldrex	r3, [r3]
 8003c5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c70:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c76:	e841 2300 	strex	r3, r2, [r1]
 8003c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e6      	bne.n	8003c50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3308      	adds	r3, #8
 8003c88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f023 0301 	bic.w	r3, r3, #1
 8003c98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3308      	adds	r3, #8
 8003ca0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ca2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ca8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003caa:	e841 2300 	strex	r3, r2, [r1]
 8003cae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1e5      	bne.n	8003c82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d118      	bne.n	8003cf0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	e853 3f00 	ldrex	r3, [r3]
 8003cca:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f023 0310 	bic.w	r3, r3, #16
 8003cd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	6979      	ldr	r1, [r7, #20]
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e6      	bne.n	8003cbe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003d04:	bf00      	nop
 8003d06:	3754      	adds	r7, #84	@ 0x54
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <atoi>:
 8003d10:	220a      	movs	r2, #10
 8003d12:	2100      	movs	r1, #0
 8003d14:	f000 b87a 	b.w	8003e0c <strtol>

08003d18 <_strtol_l.constprop.0>:
 8003d18:	2b24      	cmp	r3, #36	@ 0x24
 8003d1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d1e:	4686      	mov	lr, r0
 8003d20:	4690      	mov	r8, r2
 8003d22:	d801      	bhi.n	8003d28 <_strtol_l.constprop.0+0x10>
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d106      	bne.n	8003d36 <_strtol_l.constprop.0+0x1e>
 8003d28:	f000 f894 	bl	8003e54 <__errno>
 8003d2c:	2316      	movs	r3, #22
 8003d2e:	6003      	str	r3, [r0, #0]
 8003d30:	2000      	movs	r0, #0
 8003d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d36:	4834      	ldr	r0, [pc, #208]	@ (8003e08 <_strtol_l.constprop.0+0xf0>)
 8003d38:	460d      	mov	r5, r1
 8003d3a:	462a      	mov	r2, r5
 8003d3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d40:	5d06      	ldrb	r6, [r0, r4]
 8003d42:	f016 0608 	ands.w	r6, r6, #8
 8003d46:	d1f8      	bne.n	8003d3a <_strtol_l.constprop.0+0x22>
 8003d48:	2c2d      	cmp	r4, #45	@ 0x2d
 8003d4a:	d12d      	bne.n	8003da8 <_strtol_l.constprop.0+0x90>
 8003d4c:	782c      	ldrb	r4, [r5, #0]
 8003d4e:	2601      	movs	r6, #1
 8003d50:	1c95      	adds	r5, r2, #2
 8003d52:	f033 0210 	bics.w	r2, r3, #16
 8003d56:	d109      	bne.n	8003d6c <_strtol_l.constprop.0+0x54>
 8003d58:	2c30      	cmp	r4, #48	@ 0x30
 8003d5a:	d12a      	bne.n	8003db2 <_strtol_l.constprop.0+0x9a>
 8003d5c:	782a      	ldrb	r2, [r5, #0]
 8003d5e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003d62:	2a58      	cmp	r2, #88	@ 0x58
 8003d64:	d125      	bne.n	8003db2 <_strtol_l.constprop.0+0x9a>
 8003d66:	786c      	ldrb	r4, [r5, #1]
 8003d68:	2310      	movs	r3, #16
 8003d6a:	3502      	adds	r5, #2
 8003d6c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003d70:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003d74:	2200      	movs	r2, #0
 8003d76:	fbbc f9f3 	udiv	r9, ip, r3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	fb03 ca19 	mls	sl, r3, r9, ip
 8003d80:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003d84:	2f09      	cmp	r7, #9
 8003d86:	d81b      	bhi.n	8003dc0 <_strtol_l.constprop.0+0xa8>
 8003d88:	463c      	mov	r4, r7
 8003d8a:	42a3      	cmp	r3, r4
 8003d8c:	dd27      	ble.n	8003dde <_strtol_l.constprop.0+0xc6>
 8003d8e:	1c57      	adds	r7, r2, #1
 8003d90:	d007      	beq.n	8003da2 <_strtol_l.constprop.0+0x8a>
 8003d92:	4581      	cmp	r9, r0
 8003d94:	d320      	bcc.n	8003dd8 <_strtol_l.constprop.0+0xc0>
 8003d96:	d101      	bne.n	8003d9c <_strtol_l.constprop.0+0x84>
 8003d98:	45a2      	cmp	sl, r4
 8003d9a:	db1d      	blt.n	8003dd8 <_strtol_l.constprop.0+0xc0>
 8003d9c:	fb00 4003 	mla	r0, r0, r3, r4
 8003da0:	2201      	movs	r2, #1
 8003da2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003da6:	e7eb      	b.n	8003d80 <_strtol_l.constprop.0+0x68>
 8003da8:	2c2b      	cmp	r4, #43	@ 0x2b
 8003daa:	bf04      	itt	eq
 8003dac:	782c      	ldrbeq	r4, [r5, #0]
 8003dae:	1c95      	addeq	r5, r2, #2
 8003db0:	e7cf      	b.n	8003d52 <_strtol_l.constprop.0+0x3a>
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1da      	bne.n	8003d6c <_strtol_l.constprop.0+0x54>
 8003db6:	2c30      	cmp	r4, #48	@ 0x30
 8003db8:	bf0c      	ite	eq
 8003dba:	2308      	moveq	r3, #8
 8003dbc:	230a      	movne	r3, #10
 8003dbe:	e7d5      	b.n	8003d6c <_strtol_l.constprop.0+0x54>
 8003dc0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003dc4:	2f19      	cmp	r7, #25
 8003dc6:	d801      	bhi.n	8003dcc <_strtol_l.constprop.0+0xb4>
 8003dc8:	3c37      	subs	r4, #55	@ 0x37
 8003dca:	e7de      	b.n	8003d8a <_strtol_l.constprop.0+0x72>
 8003dcc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003dd0:	2f19      	cmp	r7, #25
 8003dd2:	d804      	bhi.n	8003dde <_strtol_l.constprop.0+0xc6>
 8003dd4:	3c57      	subs	r4, #87	@ 0x57
 8003dd6:	e7d8      	b.n	8003d8a <_strtol_l.constprop.0+0x72>
 8003dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ddc:	e7e1      	b.n	8003da2 <_strtol_l.constprop.0+0x8a>
 8003dde:	1c53      	adds	r3, r2, #1
 8003de0:	d108      	bne.n	8003df4 <_strtol_l.constprop.0+0xdc>
 8003de2:	2322      	movs	r3, #34	@ 0x22
 8003de4:	f8ce 3000 	str.w	r3, [lr]
 8003de8:	4660      	mov	r0, ip
 8003dea:	f1b8 0f00 	cmp.w	r8, #0
 8003dee:	d0a0      	beq.n	8003d32 <_strtol_l.constprop.0+0x1a>
 8003df0:	1e69      	subs	r1, r5, #1
 8003df2:	e006      	b.n	8003e02 <_strtol_l.constprop.0+0xea>
 8003df4:	b106      	cbz	r6, 8003df8 <_strtol_l.constprop.0+0xe0>
 8003df6:	4240      	negs	r0, r0
 8003df8:	f1b8 0f00 	cmp.w	r8, #0
 8003dfc:	d099      	beq.n	8003d32 <_strtol_l.constprop.0+0x1a>
 8003dfe:	2a00      	cmp	r2, #0
 8003e00:	d1f6      	bne.n	8003df0 <_strtol_l.constprop.0+0xd8>
 8003e02:	f8c8 1000 	str.w	r1, [r8]
 8003e06:	e794      	b.n	8003d32 <_strtol_l.constprop.0+0x1a>
 8003e08:	08003fc1 	.word	0x08003fc1

08003e0c <strtol>:
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	460a      	mov	r2, r1
 8003e10:	4601      	mov	r1, r0
 8003e12:	4802      	ldr	r0, [pc, #8]	@ (8003e1c <strtol+0x10>)
 8003e14:	6800      	ldr	r0, [r0, #0]
 8003e16:	f7ff bf7f 	b.w	8003d18 <_strtol_l.constprop.0>
 8003e1a:	bf00      	nop
 8003e1c:	20000010 	.word	0x20000010

08003e20 <memset>:
 8003e20:	4402      	add	r2, r0
 8003e22:	4603      	mov	r3, r0
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d100      	bne.n	8003e2a <memset+0xa>
 8003e28:	4770      	bx	lr
 8003e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e2e:	e7f9      	b.n	8003e24 <memset+0x4>

08003e30 <strncmp>:
 8003e30:	b510      	push	{r4, lr}
 8003e32:	b16a      	cbz	r2, 8003e50 <strncmp+0x20>
 8003e34:	3901      	subs	r1, #1
 8003e36:	1884      	adds	r4, r0, r2
 8003e38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e3c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d103      	bne.n	8003e4c <strncmp+0x1c>
 8003e44:	42a0      	cmp	r0, r4
 8003e46:	d001      	beq.n	8003e4c <strncmp+0x1c>
 8003e48:	2a00      	cmp	r2, #0
 8003e4a:	d1f5      	bne.n	8003e38 <strncmp+0x8>
 8003e4c:	1ad0      	subs	r0, r2, r3
 8003e4e:	bd10      	pop	{r4, pc}
 8003e50:	4610      	mov	r0, r2
 8003e52:	e7fc      	b.n	8003e4e <strncmp+0x1e>

08003e54 <__errno>:
 8003e54:	4b01      	ldr	r3, [pc, #4]	@ (8003e5c <__errno+0x8>)
 8003e56:	6818      	ldr	r0, [r3, #0]
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	20000010 	.word	0x20000010

08003e60 <__libc_init_array>:
 8003e60:	b570      	push	{r4, r5, r6, lr}
 8003e62:	4d0d      	ldr	r5, [pc, #52]	@ (8003e98 <__libc_init_array+0x38>)
 8003e64:	4c0d      	ldr	r4, [pc, #52]	@ (8003e9c <__libc_init_array+0x3c>)
 8003e66:	1b64      	subs	r4, r4, r5
 8003e68:	10a4      	asrs	r4, r4, #2
 8003e6a:	2600      	movs	r6, #0
 8003e6c:	42a6      	cmp	r6, r4
 8003e6e:	d109      	bne.n	8003e84 <__libc_init_array+0x24>
 8003e70:	4d0b      	ldr	r5, [pc, #44]	@ (8003ea0 <__libc_init_array+0x40>)
 8003e72:	4c0c      	ldr	r4, [pc, #48]	@ (8003ea4 <__libc_init_array+0x44>)
 8003e74:	f000 f818 	bl	8003ea8 <_init>
 8003e78:	1b64      	subs	r4, r4, r5
 8003e7a:	10a4      	asrs	r4, r4, #2
 8003e7c:	2600      	movs	r6, #0
 8003e7e:	42a6      	cmp	r6, r4
 8003e80:	d105      	bne.n	8003e8e <__libc_init_array+0x2e>
 8003e82:	bd70      	pop	{r4, r5, r6, pc}
 8003e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e88:	4798      	blx	r3
 8003e8a:	3601      	adds	r6, #1
 8003e8c:	e7ee      	b.n	8003e6c <__libc_init_array+0xc>
 8003e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e92:	4798      	blx	r3
 8003e94:	3601      	adds	r6, #1
 8003e96:	e7f2      	b.n	8003e7e <__libc_init_array+0x1e>
 8003e98:	080040cc 	.word	0x080040cc
 8003e9c:	080040cc 	.word	0x080040cc
 8003ea0:	080040cc 	.word	0x080040cc
 8003ea4:	080040d0 	.word	0x080040d0

08003ea8 <_init>:
 8003ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eaa:	bf00      	nop
 8003eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eae:	bc08      	pop	{r3}
 8003eb0:	469e      	mov	lr, r3
 8003eb2:	4770      	bx	lr

08003eb4 <_fini>:
 8003eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb6:	bf00      	nop
 8003eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eba:	bc08      	pop	{r3}
 8003ebc:	469e      	mov	lr, r3
 8003ebe:	4770      	bx	lr


PCI100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065f0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  080067d0  080067d0  000077d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a48  08006a48  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a48  08006a48  00007a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a50  08006a50  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a50  08006a50  00007a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a54  08006a54  00007a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006a58  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  2000006c  08006ac4  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  08006ac4  000083d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140f9  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000325f  00000000  00000000  0001c195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  0001f3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aee  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025083  00000000  00000000  00020d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016700  00000000  00000000  00045db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbddb  00000000  00000000  0005c4b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138294  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042f0  00000000  00000000  001382d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0013c5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080067b8 	.word	0x080067b8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	080067b8 	.word	0x080067b8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <bsp_run>:
#include <errno.h>
#include "../cmd/cmd.h"
#include "../led/led.h"
#include "../dac/dac.h"

void bsp_run(bsp_t * const bsp) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	cli_process(bsp->engine);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f919 	bl	8000824 <cli_process>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <make_bsp>:

uint8_t make_bsp(bsp_t * const bsp, struct cli_engine_s * const engine) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
	  bsp_cmd_add(bsp, "led", &exec_led);
 8000606:	4a0b      	ldr	r2, [pc, #44]	@ (8000634 <make_bsp+0x38>)
 8000608:	490b      	ldr	r1, [pc, #44]	@ (8000638 <make_bsp+0x3c>)
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 f81a 	bl	8000644 <bsp_cmd_add>
	  bsp_cmd_add(bsp, "dac", &exec_dac);
 8000610:	4a0a      	ldr	r2, [pc, #40]	@ (800063c <make_bsp+0x40>)
 8000612:	490b      	ldr	r1, [pc, #44]	@ (8000640 <make_bsp+0x44>)
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 f815 	bl	8000644 <bsp_cmd_add>

	  bsp->engine = engine;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	683a      	ldr	r2, [r7, #0]
 800061e:	601a      	str	r2, [r3, #0]
	  bsp->engine->bsp = bsp;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

	  return 0;
 800062a:	2300      	movs	r3, #0
}
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	08000b49 	.word	0x08000b49
 8000638:	080067d0 	.word	0x080067d0
 800063c:	08000b31 	.word	0x08000b31
 8000640:	080067d4 	.word	0x080067d4

08000644 <bsp_cmd_add>:

uint8_t bsp_cmd_add(bsp_t * const bsp, const char *name, exec_t exec) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
	if (!bsp || !name || !exec) {
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d005      	beq.n	8000662 <bsp_cmd_add+0x1e>
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d002      	beq.n	8000662 <bsp_cmd_add+0x1e>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d101      	bne.n	8000666 <bsp_cmd_add+0x22>
		return EINVAL;
 8000662:	2316      	movs	r3, #22
 8000664:	e038      	b.n	80006d8 <bsp_cmd_add+0x94>
	}

	if (bsp->cmds_length == BSP_MAX_CMDS || name > TOKEN_MAX_LENGTH) {
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800066c:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 8000670:	2b80      	cmp	r3, #128	@ 0x80
 8000672:	d002      	beq.n	800067a <bsp_cmd_add+0x36>
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	2b20      	cmp	r3, #32
 8000678:	d901      	bls.n	800067e <bsp_cmd_add+0x3a>
		return EINVAL;
 800067a:	2316      	movs	r3, #22
 800067c:	e02c      	b.n	80006d8 <bsp_cmd_add+0x94>
	}

	strcpy(bsp->cmds[bsp->cmds_length].name, name);
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000684:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 8000688:	461a      	mov	r2, r3
 800068a:	4613      	mov	r3, r2
 800068c:	00db      	lsls	r3, r3, #3
 800068e:	4413      	add	r3, r2
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	4413      	add	r3, r2
 8000696:	3304      	adds	r3, #4
 8000698:	68b9      	ldr	r1, [r7, #8]
 800069a:	4618      	mov	r0, r3
 800069c:	f005 fa65 	bl	8005b6a <strcpy>

	bsp->cmds[bsp->cmds_length].exec = exec;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80006a6:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 80006aa:	4619      	mov	r1, r3
 80006ac:	68fa      	ldr	r2, [r7, #12]
 80006ae:	460b      	mov	r3, r1
 80006b0:	00db      	lsls	r3, r3, #3
 80006b2:	440b      	add	r3, r1
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	4413      	add	r3, r2
 80006b8:	3324      	adds	r3, #36	@ 0x24
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	601a      	str	r2, [r3, #0]

	bsp->cmds_length += 1;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80006c4:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 80006c8:	3301      	adds	r3, #1
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80006d2:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204

	return 0;
 80006d6:	2300      	movs	r3, #0
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <bsp_cmd_get>:


exec_t bsp_cmd_get(bsp_t * const bsp, const char *name) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
	if (!bsp || !name) {
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d002      	beq.n	80006f6 <bsp_cmd_get+0x16>
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d101      	bne.n	80006fa <bsp_cmd_get+0x1a>
		return EINVAL;
 80006f6:	2316      	movs	r3, #22
 80006f8:	e027      	b.n	800074a <bsp_cmd_get+0x6a>
	}

	for (uint8_t i = 0; i < bsp->cmds_length; ++i) {
 80006fa:	2300      	movs	r3, #0
 80006fc:	73fb      	strb	r3, [r7, #15]
 80006fe:	e01b      	b.n	8000738 <bsp_cmd_get+0x58>
		if (!strcmp(bsp->cmds[i].name, name)) {
 8000700:	7bfa      	ldrb	r2, [r7, #15]
 8000702:	4613      	mov	r3, r2
 8000704:	00db      	lsls	r3, r3, #3
 8000706:	4413      	add	r3, r2
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	3304      	adds	r3, #4
 8000710:	6839      	ldr	r1, [r7, #0]
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff fd84 	bl	8000220 <strcmp>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d109      	bne.n	8000732 <bsp_cmd_get+0x52>
			return bsp->cmds[i].exec;
 800071e:	7bfa      	ldrb	r2, [r7, #15]
 8000720:	6879      	ldr	r1, [r7, #4]
 8000722:	4613      	mov	r3, r2
 8000724:	00db      	lsls	r3, r3, #3
 8000726:	4413      	add	r3, r2
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	440b      	add	r3, r1
 800072c:	3324      	adds	r3, #36	@ 0x24
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	e00b      	b.n	800074a <bsp_cmd_get+0x6a>
	for (uint8_t i = 0; i < bsp->cmds_length; ++i) {
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	3301      	adds	r3, #1
 8000736:	73fb      	strb	r3, [r7, #15]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800073e:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 8000742:	7bfa      	ldrb	r2, [r7, #15]
 8000744:	429a      	cmp	r2, r3
 8000746:	d3db      	bcc.n	8000700 <bsp_cmd_get+0x20>
		}
	}

	return NULL;
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <make_cli_engine>:
//
#include "cli.h"
#include <string.h>
#include <ctype.h>

void make_cli_engine(cli_engine_t *engine, UART_HandleTypeDef *huartx) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
	engine ->huartx = huartx;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	605a      	str	r2, [r3, #4]
	engine->prompt_trigger = 1;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2201      	movs	r2, #1
 8000768:	701a      	strb	r2, [r3, #0]
	engine->pos = 0;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
	engine->bsp = NULL;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2200      	movs	r2, #0
 8000774:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
	memset(engine->buf, 0, ENGINE_BUFFER_SIZE);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	330c      	adds	r3, #12
 800077c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f005 f919 	bl	80059ba <memset>

	for (uint16_t i = 0; i < UINT8_MAX; ++i) {
 8000788:	2300      	movs	r3, #0
 800078a:	81fb      	strh	r3, [r7, #14]
 800078c:	e037      	b.n	80007fe <make_cli_engine+0xaa>
		if (isalnum(i) || i == ' ') {
 800078e:	89fb      	ldrh	r3, [r7, #14]
 8000790:	3301      	adds	r3, #1
 8000792:	4a1f      	ldr	r2, [pc, #124]	@ (8000810 <make_cli_engine+0xbc>)
 8000794:	4413      	add	r3, r2
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	f003 0307 	and.w	r3, r3, #7
 800079c:	2b00      	cmp	r3, #0
 800079e:	d102      	bne.n	80007a6 <make_cli_engine+0x52>
 80007a0:	89fb      	ldrh	r3, [r7, #14]
 80007a2:	2b20      	cmp	r3, #32
 80007a4:	d108      	bne.n	80007b8 <make_cli_engine+0x64>
			engine->handlers[i] = &handle_alnum;
 80007a6:	89fb      	ldrh	r3, [r7, #14]
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	4a18      	ldr	r2, [pc, #96]	@ (8000814 <make_cli_engine+0xc0>)
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	e01f      	b.n	80007f8 <make_cli_engine+0xa4>
		} else if (i == '\n') {
 80007b8:	89fb      	ldrh	r3, [r7, #14]
 80007ba:	2b0a      	cmp	r3, #10
 80007bc:	d108      	bne.n	80007d0 <make_cli_engine+0x7c>
			engine->handlers[i] = &handle_nl;
 80007be:	89fb      	ldrh	r3, [r7, #14]
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	4413      	add	r3, r2
 80007ca:	4a13      	ldr	r2, [pc, #76]	@ (8000818 <make_cli_engine+0xc4>)
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	e013      	b.n	80007f8 <make_cli_engine+0xa4>
		} else if (i == '\b') {
 80007d0:	89fb      	ldrh	r3, [r7, #14]
 80007d2:	2b08      	cmp	r3, #8
 80007d4:	d108      	bne.n	80007e8 <make_cli_engine+0x94>
			engine->handlers[i] = &handle_bs;
 80007d6:	89fb      	ldrh	r3, [r7, #14]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	4413      	add	r3, r2
 80007e2:	4a0e      	ldr	r2, [pc, #56]	@ (800081c <make_cli_engine+0xc8>)
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	e007      	b.n	80007f8 <make_cli_engine+0xa4>
		} else {
			engine->handlers[i] = &handle_no_op;
 80007e8:	89fb      	ldrh	r3, [r7, #14]
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	4413      	add	r3, r2
 80007f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000820 <make_cli_engine+0xcc>)
 80007f6:	605a      	str	r2, [r3, #4]
	for (uint16_t i = 0; i < UINT8_MAX; ++i) {
 80007f8:	89fb      	ldrh	r3, [r7, #14]
 80007fa:	3301      	adds	r3, #1
 80007fc:	81fb      	strh	r3, [r7, #14]
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	2bfe      	cmp	r3, #254	@ 0xfe
 8000802:	d9c4      	bls.n	800078e <make_cli_engine+0x3a>
		}
	}
}
 8000804:	bf00      	nop
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	08006864 	.word	0x08006864
 8000814:	08000a4b 	.word	0x08000a4b
 8000818:	080008f9 	.word	0x080008f9
 800081c:	080009d5 	.word	0x080009d5
 8000820:	08000a35 	.word	0x08000a35

08000824 <cli_process>:

void cli_process(cli_engine_t *engine) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

  if (engine->prompt_trigger) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d008      	beq.n	8000846 <cli_process+0x22>
	  engine->prompt_trigger = 0;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
	  cli_writeline(engine->huartx, PROMPT);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	4913      	ldr	r1, [pc, #76]	@ (800088c <cli_process+0x68>)
 8000840:	4618      	mov	r0, r3
 8000842:	f000 f825 	bl	8000890 <cli_writeline>
  }

  if (HAL_OK == HAL_UART_Receive(engine->huartx, engine->buf + engine->pos, 1, UART_RECEIVE_TIMEOUT)) {
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6858      	ldr	r0, [r3, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f103 020c 	add.w	r2, r3, #12
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	18d1      	adds	r1, r2, r3
 8000856:	2364      	movs	r3, #100	@ 0x64
 8000858:	2201      	movs	r2, #1
 800085a:	f004 fab2 	bl	8004dc2 <HAL_UART_Receive>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d10e      	bne.n	8000882 <cli_process+0x5e>
	  const uint8_t key = engine->buf[engine->pos];
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	4413      	add	r3, r2
 800086c:	7b1b      	ldrb	r3, [r3, #12]
 800086e:	73fb      	strb	r3, [r7, #15]

	  // handling each key
	  engine->handlers[key](engine);
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	4413      	add	r3, r2
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	4798      	blx	r3
  }
}
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	080067d8 	.word	0x080067d8

08000890 <cli_writeline>:

void cli_writeline(UART_HandleTypeDef *huartx, const char *s) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
  cli_puts(huartx, s);
 800089a:	6839      	ldr	r1, [r7, #0]
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f000 f807 	bl	80008b0 <cli_puts>
  cli_putnl(huartx);
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f000 f818 	bl	80008d8 <cli_putnl>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <cli_puts>:

void cli_puts(UART_HandleTypeDef *huartx, const char *s) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(huartx, (const uint8_t *)s, strlen(s), UART_TRANSMIT_TIMEOUT);
 80008ba:	6838      	ldr	r0, [r7, #0]
 80008bc:	f7ff fcba 	bl	8000234 <strlen>
 80008c0:	4603      	mov	r3, r0
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	2364      	movs	r3, #100	@ 0x64
 80008c6:	6839      	ldr	r1, [r7, #0]
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f004 f9f1 	bl	8004cb0 <HAL_UART_Transmit>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <cli_putnl>:

void cli_putnl(UART_HandleTypeDef *huartx) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(huartx, (const uint8_t *)"\r\n", 2, UART_TRANSMIT_TIMEOUT);
 80008e0:	2364      	movs	r3, #100	@ 0x64
 80008e2:	2202      	movs	r2, #2
 80008e4:	4903      	ldr	r1, [pc, #12]	@ (80008f4 <cli_putnl+0x1c>)
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f004 f9e2 	bl	8004cb0 <HAL_UART_Transmit>
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	080067e4 	.word	0x080067e4

080008f8 <handle_nl>:
#include "cli.h"
#include <errno.h>
#include <string.h>
#include "../cmd/cmd.h"

uint8_t handle_nl(cli_engine_t * const engine) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80008fe:	af00      	add	r7, sp, #0
 8000900:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000904:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000908:	6018      	str	r0, [r3, #0]
	 engine->buf[engine->pos] = '\0';
 800090a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800090e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 800091a:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 800091e:	6812      	ldr	r2, [r2, #0]
 8000920:	4413      	add	r3, r2
 8000922:	2200      	movs	r2, #0
 8000924:	731a      	strb	r2, [r3, #12]
	 cli_putnl(engine->huartx);
 8000926:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800092a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ffd0 	bl	80008d8 <cli_putnl>

	 cmd_t cmd;
	 if (ESRCH == make_cmd(&cmd, engine->bsp, (char *)engine->buf)) {
 8000938:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800093c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f8d3 1808 	ldr.w	r1, [r3, #2056]	@ 0x808
 8000946:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800094a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f103 020c 	add.w	r2, r3, #12
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	4618      	mov	r0, r3
 800095a:	f000 f8bd 	bl	8000ad8 <make_cmd>
 800095e:	4603      	mov	r3, r0
 8000960:	2b03      	cmp	r3, #3
 8000962:	d10a      	bne.n	800097a <handle_nl+0x82>
		 cli_writeline(engine->huartx, "error: command not found");
 8000964:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000968:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	4917      	ldr	r1, [pc, #92]	@ (80009d0 <handle_nl+0xd8>)
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff ff8c 	bl	8000890 <cli_writeline>
 8000978:	e009      	b.n	800098e <handle_nl+0x96>
	 } else {
		 cmd.exec(&cmd);
 800097a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800097e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000982:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000986:	f107 0208 	add.w	r2, r7, #8
 800098a:	4610      	mov	r0, r2
 800098c:	4798      	blx	r3
	 }


	 memset(engine->buf, 0, ENGINE_BUFFER_SIZE);
 800098e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000992:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	330c      	adds	r3, #12
 800099a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f005 f80a 	bl	80059ba <memset>
	 engine->pos = 0;
 80009a6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80009aa:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
	 engine->prompt_trigger = 1;
 80009b4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80009b8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2201      	movs	r2, #1
 80009c0:	701a      	strb	r2, [r3, #0]

	 return 0;
 80009c2:	2300      	movs	r3, #0
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	080067e8 	.word	0x080067e8

080009d4 <handle_bs>:

uint8_t handle_bs(cli_engine_t * const engine) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	if (0 == engine->pos) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d101      	bne.n	80009e8 <handle_bs+0x14>
		return EAGAIN;
 80009e4:	230b      	movs	r3, #11
 80009e6:	e01d      	b.n	8000a24 <handle_bs+0x50>
	}
	engine->buf[engine->pos] = '\0';
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	4413      	add	r3, r2
 80009f0:	2200      	movs	r2, #0
 80009f2:	731a      	strb	r2, [r3, #12]
	engine->pos -= 1;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	1e5a      	subs	r2, r3, #1
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	609a      	str	r2, [r3, #8]
	cli_writeline(engine->huartx, "\b");
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	490a      	ldr	r1, [pc, #40]	@ (8000a2c <handle_bs+0x58>)
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff43 	bl	8000890 <cli_writeline>
	cli_writeline(engine->huartx, " ");
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	4908      	ldr	r1, [pc, #32]	@ (8000a30 <handle_bs+0x5c>)
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ff3d 	bl	8000890 <cli_writeline>
	cli_writeline(engine->huartx, "\b");
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	4904      	ldr	r1, [pc, #16]	@ (8000a2c <handle_bs+0x58>)
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff37 	bl	8000890 <cli_writeline>

	return 0;
 8000a22:	2300      	movs	r3, #0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	08006804 	.word	0x08006804
 8000a30:	08006808 	.word	0x08006808

08000a34 <handle_no_op>:

uint8_t handle_no_op(cli_engine_t * const engine) {
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	return 0;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <handle_alnum>:

uint8_t handle_alnum(cli_engine_t * const engine) {
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
	if (engine->pos == ENGINE_BUFFER_SIZE - 1) {
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d10c      	bne.n	8000a78 <handle_alnum+0x2e>
		 memset(engine->buf, 0, ENGINE_BUFFER_SIZE);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	330c      	adds	r3, #12
 8000a62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a66:	2100      	movs	r1, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f004 ffa6 	bl	80059ba <memset>
		 engine->pos = 0;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
		 return EAGAIN;
 8000a74:	230b      	movs	r3, #11
 8000a76:	e011      	b.n	8000a9c <handle_alnum+0x52>
	}

	HAL_UART_Transmit(engine->huartx, engine->buf + engine->pos, 1, UART_TRANSMIT_TIMEOUT);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6858      	ldr	r0, [r3, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f103 020c 	add.w	r2, r3, #12
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	18d1      	adds	r1, r2, r3
 8000a88:	2364      	movs	r3, #100	@ 0x64
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f004 f910 	bl	8004cb0 <HAL_UART_Transmit>
	engine->pos += 1;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	1c5a      	adds	r2, r3, #1
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	609a      	str	r2, [r3, #8]

	return 0;
 8000a9a:	2300      	movs	r3, #0
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <bind_exec>:
#include "../led/led.h"
#include "../lexer/lexer.h"
#include <string.h>
#include <errno.h>

static uint8_t bind_exec(cmd_t * const cmd) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	exec_t e = bsp_cmd_get(cmd->bsp, cmd->name);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6a1b      	ldr	r3, [r3, #32]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fe13 	bl	80006e0 <bsp_cmd_get>
 8000aba:	60f8      	str	r0, [r7, #12]

	if (NULL == e) {
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d101      	bne.n	8000ac6 <bind_exec+0x22>
		return ESRCH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	e004      	b.n	8000ad0 <bind_exec+0x2c>
	}

	cmd->exec = e;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	68fa      	ldr	r2, [r7, #12]
 8000aca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

	return 0;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <make_cmd>:

/*
 * cmd - pointer to already allocated command structure
 * input - user input string
 * */
uint8_t make_cmd(cmd_t * const cmd, bsp_t * const bsp, char *input) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
	if (!cmd || !input) {
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d002      	beq.n	8000af0 <make_cmd+0x18>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d101      	bne.n	8000af4 <make_cmd+0x1c>
		return EINVAL;
 8000af0:	2316      	movs	r3, #22
 8000af2:	e019      	b.n	8000b28 <make_cmd+0x50>
	}

	memset(cmd, 0, sizeof(cmd_t));
 8000af4:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8000af8:	2100      	movs	r1, #0
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	f004 ff5d 	bl	80059ba <memset>

	cmd->bsp = bsp;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	621a      	str	r2, [r3, #32]

	const uint8_t parse_status = parse(cmd, input);
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	68f8      	ldr	r0, [r7, #12]
 8000b0a:	f000 f8f1 	bl	8000cf0 <parse>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	75fb      	strb	r3, [r7, #23]

	if (parse_status) {
 8000b12:	7dfb      	ldrb	r3, [r7, #23]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <make_cmd+0x44>
		return parse_status;
 8000b18:	7dfb      	ldrb	r3, [r7, #23]
 8000b1a:	e005      	b.n	8000b28 <make_cmd+0x50>
	}

	const uint8_t bind_exec_status = bind_exec(cmd);
 8000b1c:	68f8      	ldr	r0, [r7, #12]
 8000b1e:	f7ff ffc1 	bl	8000aa4 <bind_exec>
 8000b22:	4603      	mov	r3, r0
 8000b24:	75bb      	strb	r3, [r7, #22]

	return bind_exec_status;
 8000b26:	7dbb      	ldrb	r3, [r7, #22]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <exec_dac>:
#include <string.h>

extern UART_HandleTypeDef huart1;
extern DAC_HandleTypeDef hdac;

uint8_t exec_dac(cmd_t * const cmd) {
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	return 0;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
	...

08000b48 <exec_led>:

static uint32_t start = 0;



uint8_t exec_led(cmd_t * const cmd) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	cli_writeline(&huart1, "called led logic");
 8000b50:	4904      	ldr	r1, [pc, #16]	@ (8000b64 <exec_led+0x1c>)
 8000b52:	4805      	ldr	r0, [pc, #20]	@ (8000b68 <exec_led+0x20>)
 8000b54:	f7ff fe9c 	bl	8000890 <cli_writeline>
	return 0;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	0800680c 	.word	0x0800680c
 8000b68:	200001fc 	.word	0x200001fc

08000b6c <set_led_config>:
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
    start = HAL_GetTick();
  }
}

void set_led_config(void) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
  uint8_t input = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	71fb      	strb	r3, [r7, #7]

  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000b76:	2101      	movs	r1, #1
 8000b78:	4858      	ldr	r0, [pc, #352]	@ (8000cdc <set_led_config+0x170>)
 8000b7a:	f002 f915 	bl	8002da8 <HAL_GPIO_ReadPin>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	bf0c      	ite	eq
 8000b84:	2301      	moveq	r3, #1
 8000b86:	2300      	movne	r3, #0
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	b25a      	sxtb	r2, r3
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) << 1;
 8000b96:	2102      	movs	r1, #2
 8000b98:	4850      	ldr	r0, [pc, #320]	@ (8000cdc <set_led_config+0x170>)
 8000b9a:	f002 f905 	bl	8002da8 <HAL_GPIO_ReadPin>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <set_led_config+0x3c>
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	e000      	b.n	8000baa <set_led_config+0x3e>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	b25a      	sxtb	r2, r3
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	b25b      	sxtb	r3, r3
 8000bb4:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) << 2;
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	4848      	ldr	r0, [pc, #288]	@ (8000cdc <set_led_config+0x170>)
 8000bba:	f002 f8f5 	bl	8002da8 <HAL_GPIO_ReadPin>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d101      	bne.n	8000bc8 <set_led_config+0x5c>
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	e000      	b.n	8000bca <set_led_config+0x5e>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	b25a      	sxtb	r2, r3
 8000bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	b25b      	sxtb	r3, r3
 8000bd4:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) << 3;
 8000bd6:	2108      	movs	r1, #8
 8000bd8:	4840      	ldr	r0, [pc, #256]	@ (8000cdc <set_led_config+0x170>)
 8000bda:	f002 f8e5 	bl	8002da8 <HAL_GPIO_ReadPin>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d101      	bne.n	8000be8 <set_led_config+0x7c>
 8000be4:	2308      	movs	r3, #8
 8000be6:	e000      	b.n	8000bea <set_led_config+0x7e>
 8000be8:	2300      	movs	r3, #0
 8000bea:	b25a      	sxtb	r2, r3
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	b25b      	sxtb	r3, r3
 8000bf4:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) << 4;
 8000bf6:	2110      	movs	r1, #16
 8000bf8:	4838      	ldr	r0, [pc, #224]	@ (8000cdc <set_led_config+0x170>)
 8000bfa:	f002 f8d5 	bl	8002da8 <HAL_GPIO_ReadPin>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d101      	bne.n	8000c08 <set_led_config+0x9c>
 8000c04:	2310      	movs	r3, #16
 8000c06:	e000      	b.n	8000c0a <set_led_config+0x9e>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	b25a      	sxtb	r2, r3
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	b25b      	sxtb	r3, r3
 8000c14:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) << 5;
 8000c16:	2120      	movs	r1, #32
 8000c18:	4830      	ldr	r0, [pc, #192]	@ (8000cdc <set_led_config+0x170>)
 8000c1a:	f002 f8c5 	bl	8002da8 <HAL_GPIO_ReadPin>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d101      	bne.n	8000c28 <set_led_config+0xbc>
 8000c24:	2320      	movs	r3, #32
 8000c26:	e000      	b.n	8000c2a <set_led_config+0xbe>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	b25a      	sxtb	r2, r3
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) << 6;
 8000c36:	2140      	movs	r1, #64	@ 0x40
 8000c38:	4828      	ldr	r0, [pc, #160]	@ (8000cdc <set_led_config+0x170>)
 8000c3a:	f002 f8b5 	bl	8002da8 <HAL_GPIO_ReadPin>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d101      	bne.n	8000c48 <set_led_config+0xdc>
 8000c44:	2340      	movs	r3, #64	@ 0x40
 8000c46:	e000      	b.n	8000c4a <set_led_config+0xde>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	b25a      	sxtb	r2, r3
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	b25b      	sxtb	r3, r3
 8000c54:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) << 7;
 8000c56:	2180      	movs	r1, #128	@ 0x80
 8000c58:	4820      	ldr	r0, [pc, #128]	@ (8000cdc <set_led_config+0x170>)
 8000c5a:	f002 f8a5 	bl	8002da8 <HAL_GPIO_ReadPin>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d101      	bne.n	8000c68 <set_led_config+0xfc>
 8000c64:	2380      	movs	r3, #128	@ 0x80
 8000c66:	e000      	b.n	8000c6a <set_led_config+0xfe>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	b25a      	sxtb	r2, r3
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	b25b      	sxtb	r3, r3
 8000c74:	71fb      	strb	r3, [r7, #7]
    BLINK_50,
    BLINK_100,
    BLINK_1000,
  };

  switch (input) {
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	2b08      	cmp	r3, #8
 8000c7a:	dc2b      	bgt.n	8000cd4 <set_led_config+0x168>
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	da1e      	bge.n	8000cbe <set_led_config+0x152>
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d002      	beq.n	8000c8a <set_led_config+0x11e>
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d00d      	beq.n	8000ca4 <set_led_config+0x138>
    break;
  case 2 ... 8:
    BLINK_MODE = BLINK_ON;
    BLINK_FREQ = fmap[input];
  }
}
 8000c88:	e024      	b.n	8000cd4 <set_led_config+0x168>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c90:	4813      	ldr	r0, [pc, #76]	@ (8000ce0 <set_led_config+0x174>)
 8000c92:	f002 f8a1 	bl	8002dd8 <HAL_GPIO_WritePin>
    BLINK_FREQ = 0;
 8000c96:	4b13      	ldr	r3, [pc, #76]	@ (8000ce4 <set_led_config+0x178>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
    BLINK_MODE = BLINK_OFF;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <set_led_config+0x17c>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]
    break;
 8000ca2:	e017      	b.n	8000cd4 <set_led_config+0x168>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000caa:	480d      	ldr	r0, [pc, #52]	@ (8000ce0 <set_led_config+0x174>)
 8000cac:	f002 f894 	bl	8002dd8 <HAL_GPIO_WritePin>
    BLINK_FREQ = 1;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <set_led_config+0x178>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]
    BLINK_MODE = BLINK_ON;
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <set_led_config+0x17c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
    break;
 8000cbc:	e00a      	b.n	8000cd4 <set_led_config+0x168>
    BLINK_MODE = BLINK_ON;
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <set_led_config+0x17c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
    BLINK_FREQ = fmap[input];
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	4a09      	ldr	r2, [pc, #36]	@ (8000cec <set_led_config+0x180>)
 8000cc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b05      	ldr	r3, [pc, #20]	@ (8000ce4 <set_led_config+0x178>)
 8000cd0:	601a      	str	r2, [r3, #0]
}
 8000cd2:	e7ff      	b.n	8000cd4 <set_led_config+0x168>
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40020000 	.word	0x40020000
 8000ce0:	40020400 	.word	0x40020400
 8000ce4:	20000088 	.word	0x20000088
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	08006830 	.word	0x08006830

08000cf0 <parse>:
#include <errno.h>
#include <string.h>
#include "../cmd/cmd.h"


uint8_t parse(cmd_t * const cmd, char *input) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000cfc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000d00:	6018      	str	r0, [r3, #0]
 8000d02:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000d06:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8000d0a:	6019      	str	r1, [r3, #0]
	if (!cmd || !input) {
 8000d0c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000d10:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d006      	beq.n	8000d28 <parse+0x38>
 8000d1a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000d1e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d101      	bne.n	8000d2c <parse+0x3c>
		return EINVAL;
 8000d28:	2316      	movs	r3, #22
 8000d2a:	e050      	b.n	8000dce <parse+0xde>
	}

	char tokens[TOKEN_MAX_COUNT][TOKEN_MAX_LENGTH];
	memset(tokens, 0, TOKEN_MAX_COUNT * TOKEN_MAX_LENGTH);
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f004 fe3f 	bl	80059ba <memset>

	const uint8_t s = tokenize(tokens, input);
 8000d3c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000d40:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8000d44:	f107 020c 	add.w	r2, r7, #12
 8000d48:	6819      	ldr	r1, [r3, #0]
 8000d4a:	4610      	mov	r0, r2
 8000d4c:	f000 f844 	bl	8000dd8 <tokenize>
 8000d50:	4603      	mov	r3, r0
 8000d52:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e

	if (s) {
 8000d56:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d002      	beq.n	8000d64 <parse+0x74>
		return s;
 8000d5e:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8000d62:	e034      	b.n	8000dce <parse+0xde>
	}

	strcpy(cmd->name, tokens[0]);
 8000d64:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000d68:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f107 020c 	add.w	r2, r7, #12
 8000d72:	4611      	mov	r1, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f004 fef8 	bl	8005b6a <strcpy>

	for (uint8_t i = 1; tokens[i][0] != '\0'; ++i) {
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8000d80:	e019      	b.n	8000db6 <parse+0xc6>
		strcpy(cmd->args[i - 1], tokens[i]);
 8000d82:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8000d86:	3b01      	subs	r3, #1
 8000d88:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8000d8c:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 8000d90:	3301      	adds	r3, #1
 8000d92:	015b      	lsls	r3, r3, #5
 8000d94:	6812      	ldr	r2, [r2, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	1d18      	adds	r0, r3, #4
 8000d9a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8000d9e:	f107 020c 	add.w	r2, r7, #12
 8000da2:	015b      	lsls	r3, r3, #5
 8000da4:	4413      	add	r3, r2
 8000da6:	4619      	mov	r1, r3
 8000da8:	f004 fedf 	bl	8005b6a <strcpy>
	for (uint8_t i = 1; tokens[i][0] != '\0'; ++i) {
 8000dac:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8000db0:	3301      	adds	r3, #1
 8000db2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8000db6:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8000dba:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8000dbe:	f5a2 7201 	sub.w	r2, r2, #516	@ 0x204
 8000dc2:	015b      	lsls	r3, r3, #5
 8000dc4:	4413      	add	r3, r2
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1da      	bne.n	8000d82 <parse+0x92>
	}

	return 0;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <tokenize>:


uint8_t tokenize(char tokens[TOKEN_MAX_COUNT][TOKEN_MAX_LENGTH], char *input) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
	if (!tokens || !input) {
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d002      	beq.n	8000dee <tokenize+0x16>
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <tokenize+0x1a>
		return EINVAL;
 8000dee:	2316      	movs	r3, #22
 8000df0:	e01f      	b.n	8000e32 <tokenize+0x5a>
	}

	char *t = NULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
	uint8_t i = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	73fb      	strb	r3, [r7, #15]
	// tokenizing the user input
	while((t = strtok(input, WHITESPACE)) != NULL && i < TOKEN_MAX_COUNT) {
 8000dfa:	e009      	b.n	8000e10 <tokenize+0x38>
		strcpy(tokens[i++], t);
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	73fa      	strb	r2, [r7, #15]
 8000e02:	015b      	lsls	r3, r3, #5
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	4413      	add	r3, r2
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f004 fead 	bl	8005b6a <strcpy>
	while((t = strtok(input, WHITESPACE)) != NULL && i < TOKEN_MAX_COUNT) {
 8000e10:	490a      	ldr	r1, [pc, #40]	@ (8000e3c <tokenize+0x64>)
 8000e12:	6838      	ldr	r0, [r7, #0]
 8000e14:	f004 fdda 	bl	80059cc <strtok>
 8000e18:	60b8      	str	r0, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d002      	beq.n	8000e26 <tokenize+0x4e>
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	2b0f      	cmp	r3, #15
 8000e24:	d9ea      	bls.n	8000dfc <tokenize+0x24>
	}

	if (i >= TOKEN_MAX_COUNT - 1) {
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	2b0e      	cmp	r3, #14
 8000e2a:	d901      	bls.n	8000e30 <tokenize+0x58>
		return E2BIG;
 8000e2c:	2307      	movs	r3, #7
 8000e2e:	e000      	b.n	8000e32 <tokenize+0x5a>
	}

	return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	08006828 	.word	0x08006828

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	f5ad 5dd0 	sub.w	sp, sp, #6656	@ 0x1a00
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000e4a:	f000 fa49 	bl	80012e0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4e:	f000 fda8 	bl	80019a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e52:	f000 f837 	bl	8000ec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e56:	f000 f9a3 	bl	80011a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e5a:	f000 f97b 	bl	8001154 <MX_DMA_Init>
  MX_I2C1_Init();
 8000e5e:	f000 f909 	bl	8001074 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000e62:	f000 f947 	bl	80010f4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000e66:	f000 f889 	bl	8000f7c <MX_ADC1_Init>
  MX_DAC_Init();
 8000e6a:	f000 f8d9 	bl	8001020 <MX_DAC_Init>
  /* USER CODE BEGIN WHILE */

  // uint8_t TX_Buffer = 5;
  // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4811      	ldr	r0, [pc, #68]	@ (8000eb8 <main+0x78>)
 8000e72:	f001 fa33 	bl	80022dc <HAL_DAC_Start>
  set_led_config();
 8000e76:	f7ff fe79 	bl	8000b6c <set_led_config>

  cli_engine_t engine;
  make_cli_engine(&engine, &huart1);
 8000e7a:	f241 230c 	movw	r3, #4620	@ 0x120c
 8000e7e:	443b      	add	r3, r7
 8000e80:	490e      	ldr	r1, [pc, #56]	@ (8000ebc <main+0x7c>)
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fc66 	bl	8000754 <make_cli_engine>

  bsp_t bsp;

  make_bsp(&bsp, &engine);
 8000e88:	f241 220c 	movw	r2, #4620	@ 0x120c
 8000e8c:	443a      	add	r2, r7
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <main+0x80>)
 8000e90:	f503 53d0 	add.w	r3, r3, #6656	@ 0x1a00
 8000e94:	f103 0318 	add.w	r3, r3, #24
 8000e98:	443b      	add	r3, r7
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fbad 	bl	80005fc <make_bsp>

  while (1)
  {

	  bsp_run(&bsp);
 8000ea2:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <main+0x80>)
 8000ea4:	f503 53d0 	add.w	r3, r3, #6656	@ 0x1a00
 8000ea8:	f103 0318 	add.w	r3, r3, #24
 8000eac:	443b      	add	r3, r7
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fb96 	bl	80005e0 <bsp_run>
 8000eb4:	e7f5      	b.n	8000ea2 <main+0x62>
 8000eb6:	bf00      	nop
 8000eb8:	200000d4 	.word	0x200000d4
 8000ebc:	200001fc 	.word	0x200001fc
 8000ec0:	ffffe5ec 	.word	0xffffe5ec

08000ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b094      	sub	sp, #80	@ 0x50
 8000ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eca:	f107 0320 	add.w	r3, r7, #32
 8000ece:	2230      	movs	r2, #48	@ 0x30
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f004 fd71 	bl	80059ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee8:	4b22      	ldr	r3, [pc, #136]	@ (8000f74 <SystemClock_Config+0xb0>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eec:	4a21      	ldr	r2, [pc, #132]	@ (8000f74 <SystemClock_Config+0xb0>)
 8000eee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ef2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f74 <SystemClock_Config+0xb0>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f00:	4b1d      	ldr	r3, [pc, #116]	@ (8000f78 <SystemClock_Config+0xb4>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f08:	4a1b      	ldr	r2, [pc, #108]	@ (8000f78 <SystemClock_Config+0xb4>)
 8000f0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	4b19      	ldr	r3, [pc, #100]	@ (8000f78 <SystemClock_Config+0xb4>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f20:	2301      	movs	r3, #1
 8000f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f24:	2310      	movs	r3, #16
 8000f26:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2c:	f107 0320 	add.w	r3, r7, #32
 8000f30:	4618      	mov	r0, r3
 8000f32:	f002 fe9b 	bl	8003c6c <HAL_RCC_OscConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000f3c:	f000 f9fc 	bl	8001338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f40:	230f      	movs	r3, #15
 8000f42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f003 f92a 	bl	80041b4 <HAL_RCC_ClockConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f66:	f000 f9e7 	bl	8001338 <Error_Handler>
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3750      	adds	r7, #80	@ 0x50
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40007000 	.word	0x40007000

08000f7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f82:	463b      	mov	r3, r7
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000f90:	4a21      	ldr	r2, [pc, #132]	@ (8001018 <MX_ADC1_Init+0x9c>)
 8000f92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f94:	4b1f      	ldr	r3, [pc, #124]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fac:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fba:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000fbc:	4a17      	ldr	r2, [pc, #92]	@ (800101c <MX_ADC1_Init+0xa0>)
 8000fbe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc0:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fda:	480e      	ldr	r0, [pc, #56]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000fdc:	f000 fd3e 	bl	8001a5c <HAL_ADC_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fe6:	f000 f9a7 	bl	8001338 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fea:	230a      	movs	r3, #10
 8000fec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4806      	ldr	r0, [pc, #24]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000ffc:	f000 fd72 	bl	8001ae4 <HAL_ADC_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001006:	f000 f997 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	2000008c 	.word	0x2000008c
 8001018:	40012000 	.word	0x40012000
 800101c:	0f000001 	.word	0x0f000001

08001020 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001026:	463b      	mov	r3, r7
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800102e:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <MX_DAC_Init+0x4c>)
 8001030:	4a0f      	ldr	r2, [pc, #60]	@ (8001070 <MX_DAC_Init+0x50>)
 8001032:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001034:	480d      	ldr	r0, [pc, #52]	@ (800106c <MX_DAC_Init+0x4c>)
 8001036:	f001 f92f 	bl	8002298 <HAL_DAC_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001040:	f000 f97a 	bl	8001338 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001044:	2300      	movs	r3, #0
 8001046:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800104c:	463b      	mov	r3, r7
 800104e:	2200      	movs	r2, #0
 8001050:	4619      	mov	r1, r3
 8001052:	4806      	ldr	r0, [pc, #24]	@ (800106c <MX_DAC_Init+0x4c>)
 8001054:	f001 f999 	bl	800238a <HAL_DAC_ConfigChannel>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800105e:	f000 f96b 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200000d4 	.word	0x200000d4
 8001070:	40007400 	.word	0x40007400

08001074 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001078:	4b1b      	ldr	r3, [pc, #108]	@ (80010e8 <MX_I2C1_Init+0x74>)
 800107a:	4a1c      	ldr	r2, [pc, #112]	@ (80010ec <MX_I2C1_Init+0x78>)
 800107c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800107e:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <MX_I2C1_Init+0x74>)
 8001080:	4a1b      	ldr	r2, [pc, #108]	@ (80010f0 <MX_I2C1_Init+0x7c>)
 8001082:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001084:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <MX_I2C1_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800108a:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <MX_I2C1_Init+0x74>)
 800108c:	2201      	movs	r2, #1
 800108e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001090:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <MX_I2C1_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001096:	4b14      	ldr	r3, [pc, #80]	@ (80010e8 <MX_I2C1_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <MX_I2C1_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <MX_I2C1_Init+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <MX_I2C1_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ae:	480e      	ldr	r0, [pc, #56]	@ (80010e8 <MX_I2C1_Init+0x74>)
 80010b0:	f001 feac 	bl	8002e0c <HAL_I2C_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010ba:	f000 f93d 	bl	8001338 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010be:	2100      	movs	r1, #0
 80010c0:	4809      	ldr	r0, [pc, #36]	@ (80010e8 <MX_I2C1_Init+0x74>)
 80010c2:	f002 fd3c 	bl	8003b3e <HAL_I2CEx_ConfigAnalogFilter>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010cc:	f000 f934 	bl	8001338 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010d0:	2100      	movs	r1, #0
 80010d2:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <MX_I2C1_Init+0x74>)
 80010d4:	f002 fd7e 	bl	8003bd4 <HAL_I2CEx_ConfigDigitalFilter>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010de:	f000 f92b 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200000e8 	.word	0x200000e8
 80010ec:	40005400 	.word	0x40005400
 80010f0:	00303d5b 	.word	0x00303d5b

080010f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010f8:	4b14      	ldr	r3, [pc, #80]	@ (800114c <MX_USART1_UART_Init+0x58>)
 80010fa:	4a15      	ldr	r2, [pc, #84]	@ (8001150 <MX_USART1_UART_Init+0x5c>)
 80010fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010fe:	4b13      	ldr	r3, [pc, #76]	@ (800114c <MX_USART1_UART_Init+0x58>)
 8001100:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001104:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001106:	4b11      	ldr	r3, [pc, #68]	@ (800114c <MX_USART1_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <MX_USART1_UART_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <MX_USART1_UART_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <MX_USART1_UART_Init+0x58>)
 800111a:	220c      	movs	r2, #12
 800111c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111e:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <MX_USART1_UART_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001124:	4b09      	ldr	r3, [pc, #36]	@ (800114c <MX_USART1_UART_Init+0x58>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800112a:	4b08      	ldr	r3, [pc, #32]	@ (800114c <MX_USART1_UART_Init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <MX_USART1_UART_Init+0x58>)
 8001132:	2200      	movs	r2, #0
 8001134:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001136:	4805      	ldr	r0, [pc, #20]	@ (800114c <MX_USART1_UART_Init+0x58>)
 8001138:	f003 fd6c 	bl	8004c14 <HAL_UART_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001142:	f000 f8f9 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200001fc 	.word	0x200001fc
 8001150:	40011000 	.word	0x40011000

08001154 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800115a:	4b10      	ldr	r3, [pc, #64]	@ (800119c <MX_DMA_Init+0x48>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a0f      	ldr	r2, [pc, #60]	@ (800119c <MX_DMA_Init+0x48>)
 8001160:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <MX_DMA_Init+0x48>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	200b      	movs	r0, #11
 8001178:	f000 ffdf 	bl	800213a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800117c:	200b      	movs	r0, #11
 800117e:	f000 fff8 	bl	8002172 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	2011      	movs	r0, #17
 8001188:	f000 ffd7 	bl	800213a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800118c:	2011      	movs	r0, #17
 800118e:	f000 fff0 	bl	8002172 <HAL_NVIC_EnableIRQ>

}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800

080011a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	@ 0x28
 80011a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b6:	4b46      	ldr	r3, [pc, #280]	@ (80012d0 <MX_GPIO_Init+0x130>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a45      	ldr	r2, [pc, #276]	@ (80012d0 <MX_GPIO_Init+0x130>)
 80011bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b43      	ldr	r3, [pc, #268]	@ (80012d0 <MX_GPIO_Init+0x130>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	4b40      	ldr	r3, [pc, #256]	@ (80012d0 <MX_GPIO_Init+0x130>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a3f      	ldr	r2, [pc, #252]	@ (80012d0 <MX_GPIO_Init+0x130>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b3d      	ldr	r3, [pc, #244]	@ (80012d0 <MX_GPIO_Init+0x130>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b3a      	ldr	r3, [pc, #232]	@ (80012d0 <MX_GPIO_Init+0x130>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a39      	ldr	r2, [pc, #228]	@ (80012d0 <MX_GPIO_Init+0x130>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b37      	ldr	r3, [pc, #220]	@ (80012d0 <MX_GPIO_Init+0x130>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	4b34      	ldr	r3, [pc, #208]	@ (80012d0 <MX_GPIO_Init+0x130>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	4a33      	ldr	r2, [pc, #204]	@ (80012d0 <MX_GPIO_Init+0x130>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	6313      	str	r3, [r2, #48]	@ 0x30
 800120a:	4b31      	ldr	r3, [pc, #196]	@ (80012d0 <MX_GPIO_Init+0x130>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2104      	movs	r1, #4
 800121a:	482e      	ldr	r0, [pc, #184]	@ (80012d4 <MX_GPIO_Init+0x134>)
 800121c:	f001 fddc 	bl	8002dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_ACT_LED_GPIO_Port, MCU_ACT_LED_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001226:	482c      	ldr	r0, [pc, #176]	@ (80012d8 <MX_GPIO_Init+0x138>)
 8001228:	f001 fdd6 	bl	8002dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800122c:	2304      	movs	r3, #4
 800122e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001234:	2301      	movs	r3, #1
 8001236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4824      	ldr	r0, [pc, #144]	@ (80012d4 <MX_GPIO_Init+0x134>)
 8001244:	f001 fc14 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001248:	2308      	movs	r3, #8
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001250:	2301      	movs	r3, #1
 8001252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	481e      	ldr	r0, [pc, #120]	@ (80012d4 <MX_GPIO_Init+0x134>)
 800125c:	f001 fc08 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8001260:	23ee      	movs	r3, #238	@ 0xee
 8001262:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001268:	2301      	movs	r3, #1
 800126a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	481a      	ldr	r0, [pc, #104]	@ (80012dc <MX_GPIO_Init+0x13c>)
 8001274:	f001 fbfc 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACT_LED_Pin */
  GPIO_InitStruct.Pin = MCU_ACT_LED_Pin;
 8001278:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800127c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	2301      	movs	r3, #1
 8001280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001282:	2301      	movs	r3, #1
 8001284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_ACT_LED_GPIO_Port, &GPIO_InitStruct);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	4811      	ldr	r0, [pc, #68]	@ (80012d8 <MX_GPIO_Init+0x138>)
 8001292:	f001 fbed 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001296:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800129a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	480a      	ldr	r0, [pc, #40]	@ (80012d4 <MX_GPIO_Init+0x134>)
 80012ac:	f001 fbe0 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012b0:	2310      	movs	r3, #16
 80012b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	4805      	ldr	r0, [pc, #20]	@ (80012d8 <MX_GPIO_Init+0x138>)
 80012c4:	f001 fbd4 	bl	8002a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	@ 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40020000 	.word	0x40020000

080012e0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80012e6:	463b      	mov	r3, r7
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80012f2:	f000 ff59 	bl	80021a8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80012f6:	2301      	movs	r3, #1
 80012f8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001302:	231f      	movs	r3, #31
 8001304:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001306:	2387      	movs	r3, #135	@ 0x87
 8001308:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800130a:	2300      	movs	r3, #0
 800130c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800130e:	2300      	movs	r3, #0
 8001310:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001312:	2301      	movs	r3, #1
 8001314:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001316:	2301      	movs	r3, #1
 8001318:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001322:	463b      	mov	r3, r7
 8001324:	4618      	mov	r0, r3
 8001326:	f000 ff77 	bl	8002218 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800132a:	2004      	movs	r0, #4
 800132c:	f000 ff54 	bl	80021d8 <HAL_MPU_Enable>

}
 8001330:	bf00      	nop
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800133c:	b672      	cpsid	i
}
 800133e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <Error_Handler+0x8>

08001344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <HAL_MspInit+0x44>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	4a0e      	ldr	r2, [pc, #56]	@ (8001388 <HAL_MspInit+0x44>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001354:	6413      	str	r3, [r2, #64]	@ 0x40
 8001356:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <HAL_MspInit+0x44>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <HAL_MspInit+0x44>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001366:	4a08      	ldr	r2, [pc, #32]	@ (8001388 <HAL_MspInit+0x44>)
 8001368:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800136c:	6453      	str	r3, [r2, #68]	@ 0x44
 800136e:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <HAL_MspInit+0x44>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800

0800138c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	@ 0x28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a15      	ldr	r2, [pc, #84]	@ (8001400 <HAL_ADC_MspInit+0x74>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d123      	bne.n	80013f6 <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013ae:	4b15      	ldr	r3, [pc, #84]	@ (8001404 <HAL_ADC_MspInit+0x78>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b2:	4a14      	ldr	r2, [pc, #80]	@ (8001404 <HAL_ADC_MspInit+0x78>)
 80013b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ba:	4b12      	ldr	r3, [pc, #72]	@ (8001404 <HAL_ADC_MspInit+0x78>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <HAL_ADC_MspInit+0x78>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001404 <HAL_ADC_MspInit+0x78>)
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <HAL_ADC_MspInit+0x78>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013de:	2301      	movs	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e2:	2303      	movs	r3, #3
 80013e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	4805      	ldr	r0, [pc, #20]	@ (8001408 <HAL_ADC_MspInit+0x7c>)
 80013f2:	f001 fb3d 	bl	8002a70 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013f6:	bf00      	nop
 80013f8:	3728      	adds	r7, #40	@ 0x28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40012000 	.word	0x40012000
 8001404:	40023800 	.word	0x40023800
 8001408:	40020800 	.word	0x40020800

0800140c <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	@ 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a15      	ldr	r2, [pc, #84]	@ (8001480 <HAL_DAC_MspInit+0x74>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d123      	bne.n	8001476 <HAL_DAC_MspInit+0x6a>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800142e:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <HAL_DAC_MspInit+0x78>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	4a14      	ldr	r2, [pc, #80]	@ (8001484 <HAL_DAC_MspInit+0x78>)
 8001434:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001438:	6413      	str	r3, [r2, #64]	@ 0x40
 800143a:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <HAL_DAC_MspInit+0x78>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <HAL_DAC_MspInit+0x78>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	4a0e      	ldr	r2, [pc, #56]	@ (8001484 <HAL_DAC_MspInit+0x78>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6313      	str	r3, [r2, #48]	@ 0x30
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <HAL_DAC_MspInit+0x78>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800145e:	2310      	movs	r3, #16
 8001460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001462:	2303      	movs	r3, #3
 8001464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	@ (8001488 <HAL_DAC_MspInit+0x7c>)
 8001472:	f001 fafd 	bl	8002a70 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8001476:	bf00      	nop
 8001478:	3728      	adds	r7, #40	@ 0x28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40007400 	.word	0x40007400
 8001484:	40023800 	.word	0x40023800
 8001488:	40020000 	.word	0x40020000

0800148c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b0aa      	sub	sp, #168	@ 0xa8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	2280      	movs	r2, #128	@ 0x80
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f004 fa84 	bl	80059ba <memset>
  if(hi2c->Instance==I2C1)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a58      	ldr	r2, [pc, #352]	@ (8001618 <HAL_I2C_MspInit+0x18c>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	f040 80a8 	bne.w	800160e <HAL_I2C_MspInit+0x182>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014c2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4618      	mov	r0, r3
 80014ce:	f003 f857 	bl	8004580 <HAL_RCCEx_PeriphCLKConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80014d8:	f7ff ff2e 	bl	8001338 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014dc:	4b4f      	ldr	r3, [pc, #316]	@ (800161c <HAL_I2C_MspInit+0x190>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e0:	4a4e      	ldr	r2, [pc, #312]	@ (800161c <HAL_I2C_MspInit+0x190>)
 80014e2:	f043 0302 	orr.w	r3, r3, #2
 80014e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e8:	4b4c      	ldr	r3, [pc, #304]	@ (800161c <HAL_I2C_MspInit+0x190>)
 80014ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014f4:	23c0      	movs	r3, #192	@ 0xc0
 80014f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fa:	2312      	movs	r3, #18
 80014fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001500:	2301      	movs	r3, #1
 8001502:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800150c:	2304      	movs	r3, #4
 800150e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001512:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001516:	4619      	mov	r1, r3
 8001518:	4841      	ldr	r0, [pc, #260]	@ (8001620 <HAL_I2C_MspInit+0x194>)
 800151a:	f001 faa9 	bl	8002a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800151e:	4b3f      	ldr	r3, [pc, #252]	@ (800161c <HAL_I2C_MspInit+0x190>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	4a3e      	ldr	r2, [pc, #248]	@ (800161c <HAL_I2C_MspInit+0x190>)
 8001524:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001528:	6413      	str	r3, [r2, #64]	@ 0x40
 800152a:	4b3c      	ldr	r3, [pc, #240]	@ (800161c <HAL_I2C_MspInit+0x190>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001536:	4b3b      	ldr	r3, [pc, #236]	@ (8001624 <HAL_I2C_MspInit+0x198>)
 8001538:	4a3b      	ldr	r2, [pc, #236]	@ (8001628 <HAL_I2C_MspInit+0x19c>)
 800153a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800153c:	4b39      	ldr	r3, [pc, #228]	@ (8001624 <HAL_I2C_MspInit+0x198>)
 800153e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001542:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001544:	4b37      	ldr	r3, [pc, #220]	@ (8001624 <HAL_I2C_MspInit+0x198>)
 8001546:	2240      	movs	r2, #64	@ 0x40
 8001548:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800154a:	4b36      	ldr	r3, [pc, #216]	@ (8001624 <HAL_I2C_MspInit+0x198>)
 800154c:	2200      	movs	r2, #0
 800154e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001550:	4b34      	ldr	r3, [pc, #208]	@ (8001624 <HAL_I2C_MspInit+0x198>)
 8001552:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001556:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001558:	4b32      	ldr	r3, [pc, #200]	@ (8001624 <HAL_I2C_MspInit+0x198>)
 800155a:	2200      	movs	r2, #0
 800155c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800155e:	4b31      	ldr	r3, [pc, #196]	@ (8001624 <HAL_I2C_MspInit+0x198>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001564:	4b2f      	ldr	r3, [pc, #188]	@ (8001624 <HAL_I2C_MspInit+0x198>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800156a:	4b2e      	ldr	r3, [pc, #184]	@ (8001624 <HAL_I2C_MspInit+0x198>)
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001570:	4b2c      	ldr	r3, [pc, #176]	@ (8001624 <HAL_I2C_MspInit+0x198>)
 8001572:	2200      	movs	r2, #0
 8001574:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001576:	482b      	ldr	r0, [pc, #172]	@ (8001624 <HAL_I2C_MspInit+0x198>)
 8001578:	f000 ff60 	bl	800243c <HAL_DMA_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 8001582:	f7ff fed9 	bl	8001338 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a26      	ldr	r2, [pc, #152]	@ (8001624 <HAL_I2C_MspInit+0x198>)
 800158a:	639a      	str	r2, [r3, #56]	@ 0x38
 800158c:	4a25      	ldr	r2, [pc, #148]	@ (8001624 <HAL_I2C_MspInit+0x198>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001592:	4b26      	ldr	r3, [pc, #152]	@ (800162c <HAL_I2C_MspInit+0x1a0>)
 8001594:	4a26      	ldr	r2, [pc, #152]	@ (8001630 <HAL_I2C_MspInit+0x1a4>)
 8001596:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001598:	4b24      	ldr	r3, [pc, #144]	@ (800162c <HAL_I2C_MspInit+0x1a0>)
 800159a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800159e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a0:	4b22      	ldr	r3, [pc, #136]	@ (800162c <HAL_I2C_MspInit+0x1a0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a6:	4b21      	ldr	r3, [pc, #132]	@ (800162c <HAL_I2C_MspInit+0x1a0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015ac:	4b1f      	ldr	r3, [pc, #124]	@ (800162c <HAL_I2C_MspInit+0x1a0>)
 80015ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015b2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015b4:	4b1d      	ldr	r3, [pc, #116]	@ (800162c <HAL_I2C_MspInit+0x1a0>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015ba:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <HAL_I2C_MspInit+0x1a0>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80015c0:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <HAL_I2C_MspInit+0x1a0>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015c6:	4b19      	ldr	r3, [pc, #100]	@ (800162c <HAL_I2C_MspInit+0x1a0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015cc:	4b17      	ldr	r3, [pc, #92]	@ (800162c <HAL_I2C_MspInit+0x1a0>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80015d2:	4816      	ldr	r0, [pc, #88]	@ (800162c <HAL_I2C_MspInit+0x1a0>)
 80015d4:	f000 ff32 	bl	800243c <HAL_DMA_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_I2C_MspInit+0x156>
    {
      Error_Handler();
 80015de:	f7ff feab 	bl	8001338 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a11      	ldr	r2, [pc, #68]	@ (800162c <HAL_I2C_MspInit+0x1a0>)
 80015e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80015e8:	4a10      	ldr	r2, [pc, #64]	@ (800162c <HAL_I2C_MspInit+0x1a0>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	201f      	movs	r0, #31
 80015f4:	f000 fda1 	bl	800213a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80015f8:	201f      	movs	r0, #31
 80015fa:	f000 fdba 	bl	8002172 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2100      	movs	r1, #0
 8001602:	2020      	movs	r0, #32
 8001604:	f000 fd99 	bl	800213a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001608:	2020      	movs	r0, #32
 800160a:	f000 fdb2 	bl	8002172 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800160e:	bf00      	nop
 8001610:	37a8      	adds	r7, #168	@ 0xa8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40005400 	.word	0x40005400
 800161c:	40023800 	.word	0x40023800
 8001620:	40020400 	.word	0x40020400
 8001624:	2000013c 	.word	0x2000013c
 8001628:	400260a0 	.word	0x400260a0
 800162c:	2000019c 	.word	0x2000019c
 8001630:	40026010 	.word	0x40026010

08001634 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b0aa      	sub	sp, #168	@ 0xa8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2280      	movs	r2, #128	@ 0x80
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f004 f9b0 	bl	80059ba <memset>
  if(huart->Instance==USART1)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a21      	ldr	r2, [pc, #132]	@ (80016e4 <HAL_UART_MspInit+0xb0>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d13b      	bne.n	80016dc <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001664:	2340      	movs	r3, #64	@ 0x40
 8001666:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001668:	2300      	movs	r3, #0
 800166a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4618      	mov	r0, r3
 8001672:	f002 ff85 	bl	8004580 <HAL_RCCEx_PeriphCLKConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800167c:	f7ff fe5c 	bl	8001338 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001680:	4b19      	ldr	r3, [pc, #100]	@ (80016e8 <HAL_UART_MspInit+0xb4>)
 8001682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001684:	4a18      	ldr	r2, [pc, #96]	@ (80016e8 <HAL_UART_MspInit+0xb4>)
 8001686:	f043 0310 	orr.w	r3, r3, #16
 800168a:	6453      	str	r3, [r2, #68]	@ 0x44
 800168c:	4b16      	ldr	r3, [pc, #88]	@ (80016e8 <HAL_UART_MspInit+0xb4>)
 800168e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001690:	f003 0310 	and.w	r3, r3, #16
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001698:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <HAL_UART_MspInit+0xb4>)
 800169a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169c:	4a12      	ldr	r2, [pc, #72]	@ (80016e8 <HAL_UART_MspInit+0xb4>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a4:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <HAL_UART_MspInit+0xb4>)
 80016a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016b0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c4:	2303      	movs	r3, #3
 80016c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016ca:	2307      	movs	r3, #7
 80016cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80016d4:	4619      	mov	r1, r3
 80016d6:	4805      	ldr	r0, [pc, #20]	@ (80016ec <HAL_UART_MspInit+0xb8>)
 80016d8:	f001 f9ca 	bl	8002a70 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80016dc:	bf00      	nop
 80016de:	37a8      	adds	r7, #168	@ 0xa8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40011000 	.word	0x40011000
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020000 	.word	0x40020000

080016f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <NMI_Handler+0x4>

080016f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <HardFault_Handler+0x4>

08001700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <MemManage_Handler+0x4>

08001708 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <BusFault_Handler+0x4>

08001710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <UsageFault_Handler+0x4>

08001718 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001746:	f000 f969 	bl	8001a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001754:	4802      	ldr	r0, [pc, #8]	@ (8001760 <DMA1_Stream0_IRQHandler+0x10>)
 8001756:	f000 ff41 	bl	80025dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2000019c 	.word	0x2000019c

08001764 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001768:	4802      	ldr	r0, [pc, #8]	@ (8001774 <DMA1_Stream6_IRQHandler+0x10>)
 800176a:	f000 ff37 	bl	80025dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	2000013c 	.word	0x2000013c

08001778 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800177c:	4802      	ldr	r0, [pc, #8]	@ (8001788 <I2C1_EV_IRQHandler+0x10>)
 800177e:	f001 fbe1 	bl	8002f44 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200000e8 	.word	0x200000e8

0800178c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001790:	4802      	ldr	r0, [pc, #8]	@ (800179c <I2C1_ER_IRQHandler+0x10>)
 8001792:	f001 fbf1 	bl	8002f78 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200000e8 	.word	0x200000e8

080017a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return 1;
 80017a4:	2301      	movs	r3, #1
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <_kill>:

int _kill(int pid, int sig)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017ba:	f004 f9a9 	bl	8005b10 <__errno>
 80017be:	4603      	mov	r3, r0
 80017c0:	2216      	movs	r2, #22
 80017c2:	601a      	str	r2, [r3, #0]
  return -1;
 80017c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <_exit>:

void _exit (int status)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017d8:	f04f 31ff 	mov.w	r1, #4294967295
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ffe7 	bl	80017b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017e2:	bf00      	nop
 80017e4:	e7fd      	b.n	80017e2 <_exit+0x12>

080017e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	e00a      	b.n	800180e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017f8:	f3af 8000 	nop.w
 80017fc:	4601      	mov	r1, r0
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	60ba      	str	r2, [r7, #8]
 8001804:	b2ca      	uxtb	r2, r1
 8001806:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	3301      	adds	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	429a      	cmp	r2, r3
 8001814:	dbf0      	blt.n	80017f8 <_read+0x12>
  }

  return len;
 8001816:	687b      	ldr	r3, [r7, #4]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	e009      	b.n	8001846 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	1c5a      	adds	r2, r3, #1
 8001836:	60ba      	str	r2, [r7, #8]
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	3301      	adds	r3, #1
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	429a      	cmp	r2, r3
 800184c:	dbf1      	blt.n	8001832 <_write+0x12>
  }
  return len;
 800184e:	687b      	ldr	r3, [r7, #4]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <_close>:

int _close(int file)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001860:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001864:	4618      	mov	r0, r3
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001880:	605a      	str	r2, [r3, #4]
  return 0;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <_isatty>:

int _isatty(int file)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001898:	2301      	movs	r3, #1
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b085      	sub	sp, #20
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c8:	4a14      	ldr	r2, [pc, #80]	@ (800191c <_sbrk+0x5c>)
 80018ca:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <_sbrk+0x60>)
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d4:	4b13      	ldr	r3, [pc, #76]	@ (8001924 <_sbrk+0x64>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d102      	bne.n	80018e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018dc:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <_sbrk+0x64>)
 80018de:	4a12      	ldr	r2, [pc, #72]	@ (8001928 <_sbrk+0x68>)
 80018e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018e2:	4b10      	ldr	r3, [pc, #64]	@ (8001924 <_sbrk+0x64>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d207      	bcs.n	8001900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f0:	f004 f90e 	bl	8005b10 <__errno>
 80018f4:	4603      	mov	r3, r0
 80018f6:	220c      	movs	r2, #12
 80018f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295
 80018fe:	e009      	b.n	8001914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001900:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001906:	4b07      	ldr	r3, [pc, #28]	@ (8001924 <_sbrk+0x64>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	4a05      	ldr	r2, [pc, #20]	@ (8001924 <_sbrk+0x64>)
 8001910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001912:	68fb      	ldr	r3, [r7, #12]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20040000 	.word	0x20040000
 8001920:	00000400 	.word	0x00000400
 8001924:	20000284 	.word	0x20000284
 8001928:	200003d8 	.word	0x200003d8

0800192c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001930:	4b06      	ldr	r3, [pc, #24]	@ (800194c <SystemInit+0x20>)
 8001932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001936:	4a05      	ldr	r2, [pc, #20]	@ (800194c <SystemInit+0x20>)
 8001938:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800193c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001950:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001988 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8001954:	f7ff ffea 	bl	800192c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001958:	480c      	ldr	r0, [pc, #48]	@ (800198c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800195a:	490d      	ldr	r1, [pc, #52]	@ (8001990 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800195c:	4a0d      	ldr	r2, [pc, #52]	@ (8001994 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001960:	e002      	b.n	8001968 <LoopCopyDataInit>

08001962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001966:	3304      	adds	r3, #4

08001968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800196c:	d3f9      	bcc.n	8001962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196e:	4a0a      	ldr	r2, [pc, #40]	@ (8001998 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001970:	4c0a      	ldr	r4, [pc, #40]	@ (800199c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001974:	e001      	b.n	800197a <LoopFillZerobss>

08001976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001978:	3204      	adds	r2, #4

0800197a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800197c:	d3fb      	bcc.n	8001976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800197e:	f004 f8cd 	bl	8005b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001982:	f7ff fa5d 	bl	8000e40 <main>
  bx  lr    
 8001986:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001988:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800198c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001990:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001994:	08006a58 	.word	0x08006a58
  ldr r2, =_sbss
 8001998:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800199c:	200003d8 	.word	0x200003d8

080019a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019a0:	e7fe      	b.n	80019a0 <ADC_IRQHandler>

080019a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a6:	2003      	movs	r0, #3
 80019a8:	f000 fbbc 	bl	8002124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ac:	200f      	movs	r0, #15
 80019ae:	f000 f805 	bl	80019bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b2:	f7ff fcc7 	bl	8001344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c4:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <HAL_InitTick+0x54>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <HAL_InitTick+0x58>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4619      	mov	r1, r3
 80019ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 fbd7 	bl	800218e <HAL_SYSTICK_Config>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00e      	b.n	8001a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b0f      	cmp	r3, #15
 80019ee:	d80a      	bhi.n	8001a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f0:	2200      	movs	r2, #0
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	f000 fb9f 	bl	800213a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019fc:	4a06      	ldr	r2, [pc, #24]	@ (8001a18 <HAL_InitTick+0x5c>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e000      	b.n	8001a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000004 	.word	0x20000004
 8001a14:	2000000c 	.word	0x2000000c
 8001a18:	20000008 	.word	0x20000008

08001a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a20:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_IncTick+0x20>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <HAL_IncTick+0x24>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a04      	ldr	r2, [pc, #16]	@ (8001a40 <HAL_IncTick+0x24>)
 8001a2e:	6013      	str	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	2000000c 	.word	0x2000000c
 8001a40:	20000288 	.word	0x20000288

08001a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return uwTick;
 8001a48:	4b03      	ldr	r3, [pc, #12]	@ (8001a58 <HAL_GetTick+0x14>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000288 	.word	0x20000288

08001a5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a64:	2300      	movs	r3, #0
 8001a66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e031      	b.n	8001ad6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d109      	bne.n	8001a8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff fc86 	bl	800138c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d116      	bne.n	8001ac8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <HAL_ADC_Init+0x84>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	f043 0202 	orr.w	r2, r3, #2
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f970 	bl	8001d90 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	f023 0303 	bic.w	r3, r3, #3
 8001abe:	f043 0201 	orr.w	r2, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ac6:	e001      	b.n	8001acc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	ffffeefd 	.word	0xffffeefd

08001ae4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d101      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x1c>
 8001afc:	2302      	movs	r3, #2
 8001afe:	e136      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x28a>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b09      	cmp	r3, #9
 8001b0e:	d93a      	bls.n	8001b86 <HAL_ADC_ConfigChannel+0xa2>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b18:	d035      	beq.n	8001b86 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68d9      	ldr	r1, [r3, #12]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	461a      	mov	r2, r3
 8001b28:	4613      	mov	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3b1e      	subs	r3, #30
 8001b30:	2207      	movs	r2, #7
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	400a      	ands	r2, r1
 8001b3e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a8d      	ldr	r2, [pc, #564]	@ (8001d7c <HAL_ADC_ConfigChannel+0x298>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d10a      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68d9      	ldr	r1, [r3, #12]
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	061a      	lsls	r2, r3, #24
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b5e:	e035      	b.n	8001bcc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68d9      	ldr	r1, [r3, #12]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	4618      	mov	r0, r3
 8001b72:	4603      	mov	r3, r0
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4403      	add	r3, r0
 8001b78:	3b1e      	subs	r3, #30
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b84:	e022      	b.n	8001bcc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6919      	ldr	r1, [r3, #16]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	461a      	mov	r2, r3
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	2207      	movs	r2, #7
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43da      	mvns	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	400a      	ands	r2, r1
 8001ba8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6919      	ldr	r1, [r3, #16]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4403      	add	r3, r0
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b06      	cmp	r3, #6
 8001bd2:	d824      	bhi.n	8001c1e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	3b05      	subs	r3, #5
 8001be6:	221f      	movs	r2, #31
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43da      	mvns	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	400a      	ands	r2, r1
 8001bf4:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3b05      	subs	r3, #5
 8001c10:	fa00 f203 	lsl.w	r2, r0, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c1c:	e04c      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b0c      	cmp	r3, #12
 8001c24:	d824      	bhi.n	8001c70 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	3b23      	subs	r3, #35	@ 0x23
 8001c38:	221f      	movs	r2, #31
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	400a      	ands	r2, r1
 8001c46:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	4618      	mov	r0, r3
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	3b23      	subs	r3, #35	@ 0x23
 8001c62:	fa00 f203 	lsl.w	r2, r0, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c6e:	e023      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	3b41      	subs	r3, #65	@ 0x41
 8001c82:	221f      	movs	r2, #31
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43da      	mvns	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	400a      	ands	r2, r1
 8001c90:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	3b41      	subs	r3, #65	@ 0x41
 8001cac:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a30      	ldr	r2, [pc, #192]	@ (8001d80 <HAL_ADC_ConfigChannel+0x29c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d10a      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x1f4>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001cca:	d105      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8001d84 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	4a2c      	ldr	r2, [pc, #176]	@ (8001d84 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cd2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001cd6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a28      	ldr	r2, [pc, #160]	@ (8001d80 <HAL_ADC_ConfigChannel+0x29c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d10f      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x21e>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b12      	cmp	r3, #18
 8001ce8:	d10b      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001cea:	4b26      	ldr	r3, [pc, #152]	@ (8001d84 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	4a25      	ldr	r2, [pc, #148]	@ (8001d84 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cf0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001cf4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001cf6:	4b23      	ldr	r3, [pc, #140]	@ (8001d84 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4a22      	ldr	r2, [pc, #136]	@ (8001d84 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cfc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d00:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a1e      	ldr	r2, [pc, #120]	@ (8001d80 <HAL_ADC_ConfigChannel+0x29c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d12b      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x280>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a1a      	ldr	r2, [pc, #104]	@ (8001d7c <HAL_ADC_ConfigChannel+0x298>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d003      	beq.n	8001d1e <HAL_ADC_ConfigChannel+0x23a>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b11      	cmp	r3, #17
 8001d1c:	d122      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001d1e:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	4a18      	ldr	r2, [pc, #96]	@ (8001d84 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d24:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001d28:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001d2a:	4b16      	ldr	r3, [pc, #88]	@ (8001d84 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	4a15      	ldr	r2, [pc, #84]	@ (8001d84 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d34:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a10      	ldr	r2, [pc, #64]	@ (8001d7c <HAL_ADC_ConfigChannel+0x298>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d111      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001d40:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <HAL_ADC_ConfigChannel+0x2a4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a11      	ldr	r2, [pc, #68]	@ (8001d8c <HAL_ADC_ConfigChannel+0x2a8>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	0c9a      	lsrs	r2, r3, #18
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001d56:	e002      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f9      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	10000012 	.word	0x10000012
 8001d80:	40012000 	.word	0x40012000
 8001d84:	40012300 	.word	0x40012300
 8001d88:	20000004 	.word	0x20000004
 8001d8c:	431bde83 	.word	0x431bde83

08001d90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001d98:	4b78      	ldr	r3, [pc, #480]	@ (8001f7c <ADC_Init+0x1ec>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	4a77      	ldr	r2, [pc, #476]	@ (8001f7c <ADC_Init+0x1ec>)
 8001d9e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001da2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001da4:	4b75      	ldr	r3, [pc, #468]	@ (8001f7c <ADC_Init+0x1ec>)
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4973      	ldr	r1, [pc, #460]	@ (8001f7c <ADC_Init+0x1ec>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6859      	ldr	r1, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	021a      	lsls	r2, r3, #8
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001de4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6859      	ldr	r1, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6899      	ldr	r1, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1e:	4a58      	ldr	r2, [pc, #352]	@ (8001f80 <ADC_Init+0x1f0>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d022      	beq.n	8001e6a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6899      	ldr	r1, [r3, #8]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6899      	ldr	r1, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	e00f      	b.n	8001e8a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0202 	bic.w	r2, r2, #2
 8001e98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6899      	ldr	r1, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	005a      	lsls	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d01b      	beq.n	8001ef0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ec6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001ed6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6859      	ldr	r1, [r3, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	035a      	lsls	r2, r3, #13
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	e007      	b.n	8001f00 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001efe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	051a      	lsls	r2, r3, #20
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6899      	ldr	r1, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f42:	025a      	lsls	r2, r3, #9
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6899      	ldr	r1, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	029a      	lsls	r2, r3, #10
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	609a      	str	r2, [r3, #8]
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	40012300 	.word	0x40012300
 8001f80:	0f000001 	.word	0x0f000001

08001f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f94:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <__NVIC_SetPriorityGrouping+0x40>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fac:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb2:	4a04      	ldr	r2, [pc, #16]	@ (8001fc4 <__NVIC_SetPriorityGrouping+0x40>)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	60d3      	str	r3, [r2, #12]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000ed00 	.word	0xe000ed00
 8001fc8:	05fa0000 	.word	0x05fa0000

08001fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd0:	4b04      	ldr	r3, [pc, #16]	@ (8001fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	f003 0307 	and.w	r3, r3, #7
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	db0b      	blt.n	8002012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	f003 021f 	and.w	r2, r3, #31
 8002000:	4907      	ldr	r1, [pc, #28]	@ (8002020 <__NVIC_EnableIRQ+0x38>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	2001      	movs	r0, #1
 800200a:	fa00 f202 	lsl.w	r2, r0, r2
 800200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000e100 	.word	0xe000e100

08002024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	6039      	str	r1, [r7, #0]
 800202e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	2b00      	cmp	r3, #0
 8002036:	db0a      	blt.n	800204e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	b2da      	uxtb	r2, r3
 800203c:	490c      	ldr	r1, [pc, #48]	@ (8002070 <__NVIC_SetPriority+0x4c>)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	0112      	lsls	r2, r2, #4
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	440b      	add	r3, r1
 8002048:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800204c:	e00a      	b.n	8002064 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	b2da      	uxtb	r2, r3
 8002052:	4908      	ldr	r1, [pc, #32]	@ (8002074 <__NVIC_SetPriority+0x50>)
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	3b04      	subs	r3, #4
 800205c:	0112      	lsls	r2, r2, #4
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	440b      	add	r3, r1
 8002062:	761a      	strb	r2, [r3, #24]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000e100 	.word	0xe000e100
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	@ 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f1c3 0307 	rsb	r3, r3, #7
 8002092:	2b04      	cmp	r3, #4
 8002094:	bf28      	it	cs
 8002096:	2304      	movcs	r3, #4
 8002098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3304      	adds	r3, #4
 800209e:	2b06      	cmp	r3, #6
 80020a0:	d902      	bls.n	80020a8 <NVIC_EncodePriority+0x30>
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3b03      	subs	r3, #3
 80020a6:	e000      	b.n	80020aa <NVIC_EncodePriority+0x32>
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	f04f 32ff 	mov.w	r2, #4294967295
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43da      	mvns	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	401a      	ands	r2, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c0:	f04f 31ff 	mov.w	r1, #4294967295
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ca:	43d9      	mvns	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	4313      	orrs	r3, r2
         );
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3724      	adds	r7, #36	@ 0x24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020f0:	d301      	bcc.n	80020f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f2:	2301      	movs	r3, #1
 80020f4:	e00f      	b.n	8002116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002120 <SysTick_Config+0x40>)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020fe:	210f      	movs	r1, #15
 8002100:	f04f 30ff 	mov.w	r0, #4294967295
 8002104:	f7ff ff8e 	bl	8002024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002108:	4b05      	ldr	r3, [pc, #20]	@ (8002120 <SysTick_Config+0x40>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210e:	4b04      	ldr	r3, [pc, #16]	@ (8002120 <SysTick_Config+0x40>)
 8002110:	2207      	movs	r2, #7
 8002112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	e000e010 	.word	0xe000e010

08002124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff ff29 	bl	8001f84 <__NVIC_SetPriorityGrouping>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800213a:	b580      	push	{r7, lr}
 800213c:	b086      	sub	sp, #24
 800213e:	af00      	add	r7, sp, #0
 8002140:	4603      	mov	r3, r0
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
 8002146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800214c:	f7ff ff3e 	bl	8001fcc <__NVIC_GetPriorityGrouping>
 8002150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	6978      	ldr	r0, [r7, #20]
 8002158:	f7ff ff8e 	bl	8002078 <NVIC_EncodePriority>
 800215c:	4602      	mov	r2, r0
 800215e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff5d 	bl	8002024 <__NVIC_SetPriority>
}
 800216a:	bf00      	nop
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	4603      	mov	r3, r0
 800217a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff31 	bl	8001fe8 <__NVIC_EnableIRQ>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff ffa2 	bl	80020e0 <SysTick_Config>
 800219c:	4603      	mov	r3, r0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80021ac:	f3bf 8f5f 	dmb	sy
}
 80021b0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80021b2:	4b07      	ldr	r3, [pc, #28]	@ (80021d0 <HAL_MPU_Disable+0x28>)
 80021b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b6:	4a06      	ldr	r2, [pc, #24]	@ (80021d0 <HAL_MPU_Disable+0x28>)
 80021b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021bc:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80021be:	4b05      	ldr	r3, [pc, #20]	@ (80021d4 <HAL_MPU_Disable+0x2c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	605a      	str	r2, [r3, #4]
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000ed00 	.word	0xe000ed00
 80021d4:	e000ed90 	.word	0xe000ed90

080021d8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80021e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002210 <HAL_MPU_Enable+0x38>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80021ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002214 <HAL_MPU_Enable+0x3c>)
 80021ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ee:	4a09      	ldr	r2, [pc, #36]	@ (8002214 <HAL_MPU_Enable+0x3c>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021f4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80021f6:	f3bf 8f4f 	dsb	sy
}
 80021fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021fc:	f3bf 8f6f 	isb	sy
}
 8002200:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	e000ed90 	.word	0xe000ed90
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	785a      	ldrb	r2, [r3, #1]
 8002224:	4b1b      	ldr	r3, [pc, #108]	@ (8002294 <HAL_MPU_ConfigRegion+0x7c>)
 8002226:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002228:	4b1a      	ldr	r3, [pc, #104]	@ (8002294 <HAL_MPU_ConfigRegion+0x7c>)
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	4a19      	ldr	r2, [pc, #100]	@ (8002294 <HAL_MPU_ConfigRegion+0x7c>)
 800222e:	f023 0301 	bic.w	r3, r3, #1
 8002232:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002234:	4a17      	ldr	r2, [pc, #92]	@ (8002294 <HAL_MPU_ConfigRegion+0x7c>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	7b1b      	ldrb	r3, [r3, #12]
 8002240:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	7adb      	ldrb	r3, [r3, #11]
 8002246:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002248:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7a9b      	ldrb	r3, [r3, #10]
 800224e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002250:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	7b5b      	ldrb	r3, [r3, #13]
 8002256:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002258:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	7b9b      	ldrb	r3, [r3, #14]
 800225e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002260:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	7bdb      	ldrb	r3, [r3, #15]
 8002266:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002268:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7a5b      	ldrb	r3, [r3, #9]
 800226e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002270:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	7a1b      	ldrb	r3, [r3, #8]
 8002276:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002278:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	7812      	ldrb	r2, [r2, #0]
 800227e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002280:	4a04      	ldr	r2, [pc, #16]	@ (8002294 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002282:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002284:	6113      	str	r3, [r2, #16]
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000ed90 	.word	0xe000ed90

08002298 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e014      	b.n	80022d4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	791b      	ldrb	r3, [r3, #4]
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d105      	bne.n	80022c0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff f8a6 	bl	800140c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e046      	b.n	800237e <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	795b      	ldrb	r3, [r3, #5]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_DAC_Start+0x20>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e040      	b.n	800237e <HAL_DAC_Start+0xa2>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2202      	movs	r2, #2
 8002306:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6819      	ldr	r1, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	2201      	movs	r2, #1
 8002316:	409a      	lsls	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10f      	bne.n	8002346 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002330:	2b3c      	cmp	r3, #60	@ 0x3c
 8002332:	d11d      	bne.n	8002370 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0201 	orr.w	r2, r2, #1
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	e014      	b.n	8002370 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	f003 0310 	and.w	r3, r3, #16
 8002356:	213c      	movs	r1, #60	@ 0x3c
 8002358:	fa01 f303 	lsl.w	r3, r1, r3
 800235c:	429a      	cmp	r2, r3
 800235e:	d107      	bne.n	8002370 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0202 	orr.w	r2, r2, #2
 800236e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800238a:	b480      	push	{r7}
 800238c:	b089      	sub	sp, #36	@ 0x24
 800238e:	af00      	add	r7, sp, #0
 8002390:	60f8      	str	r0, [r7, #12]
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <HAL_DAC_ConfigChannel+0x1c>
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e042      	b.n	8002430 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	795b      	ldrb	r3, [r3, #5]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_DAC_ConfigChannel+0x2c>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e03c      	b.n	8002430 <HAL_DAC_ConfigChannel+0xa6>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2202      	movs	r2, #2
 80023c0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6819      	ldr	r1, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	22c0      	movs	r2, #192	@ 0xc0
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43da      	mvns	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	400a      	ands	r2, r1
 8002420:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2201      	movs	r2, #1
 8002426:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800242e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3724      	adds	r7, #36	@ 0x24
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002448:	f7ff fafc 	bl	8001a44 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e099      	b.n	800258c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0201 	bic.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002478:	e00f      	b.n	800249a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800247a:	f7ff fae3 	bl	8001a44 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b05      	cmp	r3, #5
 8002486:	d908      	bls.n	800249a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2220      	movs	r2, #32
 800248c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2203      	movs	r2, #3
 8002492:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e078      	b.n	800258c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1e8      	bne.n	800247a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	4b38      	ldr	r3, [pc, #224]	@ (8002594 <HAL_DMA_Init+0x158>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d107      	bne.n	8002504 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fc:	4313      	orrs	r3, r2
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	4313      	orrs	r3, r2
 8002502:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f023 0307 	bic.w	r3, r3, #7
 800251a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	4313      	orrs	r3, r2
 8002524:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252a:	2b04      	cmp	r3, #4
 800252c:	d117      	bne.n	800255e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4313      	orrs	r3, r2
 8002536:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00e      	beq.n	800255e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 fa19 	bl	8002978 <DMA_CheckFifoParam>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2240      	movs	r2, #64	@ 0x40
 8002550:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800255a:	2301      	movs	r3, #1
 800255c:	e016      	b.n	800258c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f9d0 	bl	800290c <DMA_CalcBaseAndBitshift>
 800256c:	4603      	mov	r3, r0
 800256e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002574:	223f      	movs	r2, #63	@ 0x3f
 8002576:	409a      	lsls	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	e010803f 	.word	0xe010803f

08002598 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d004      	beq.n	80025b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2280      	movs	r2, #128	@ 0x80
 80025b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e00c      	b.n	80025d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2205      	movs	r2, #5
 80025ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0201 	bic.w	r2, r2, #1
 80025cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80025e8:	4b8e      	ldr	r3, [pc, #568]	@ (8002824 <HAL_DMA_IRQHandler+0x248>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a8e      	ldr	r2, [pc, #568]	@ (8002828 <HAL_DMA_IRQHandler+0x24c>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	0a9b      	lsrs	r3, r3, #10
 80025f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002606:	2208      	movs	r2, #8
 8002608:	409a      	lsls	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4013      	ands	r3, r2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d01a      	beq.n	8002648 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d013      	beq.n	8002648 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0204 	bic.w	r2, r2, #4
 800262e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002634:	2208      	movs	r2, #8
 8002636:	409a      	lsls	r2, r3
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002640:	f043 0201 	orr.w	r2, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264c:	2201      	movs	r2, #1
 800264e:	409a      	lsls	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4013      	ands	r3, r2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d012      	beq.n	800267e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00b      	beq.n	800267e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800266a:	2201      	movs	r2, #1
 800266c:	409a      	lsls	r2, r3
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002676:	f043 0202 	orr.w	r2, r3, #2
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002682:	2204      	movs	r2, #4
 8002684:	409a      	lsls	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4013      	ands	r3, r2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d012      	beq.n	80026b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00b      	beq.n	80026b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a0:	2204      	movs	r2, #4
 80026a2:	409a      	lsls	r2, r3
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ac:	f043 0204 	orr.w	r2, r3, #4
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b8:	2210      	movs	r2, #16
 80026ba:	409a      	lsls	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4013      	ands	r3, r2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d043      	beq.n	800274c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d03c      	beq.n	800274c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d6:	2210      	movs	r2, #16
 80026d8:	409a      	lsls	r2, r3
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d018      	beq.n	800271e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d108      	bne.n	800270c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d024      	beq.n	800274c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	4798      	blx	r3
 800270a:	e01f      	b.n	800274c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002710:	2b00      	cmp	r3, #0
 8002712:	d01b      	beq.n	800274c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	4798      	blx	r3
 800271c:	e016      	b.n	800274c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d107      	bne.n	800273c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0208 	bic.w	r2, r2, #8
 800273a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002750:	2220      	movs	r2, #32
 8002752:	409a      	lsls	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 808f 	beq.w	800287c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0310 	and.w	r3, r3, #16
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 8087 	beq.w	800287c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002772:	2220      	movs	r2, #32
 8002774:	409a      	lsls	r2, r3
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b05      	cmp	r3, #5
 8002784:	d136      	bne.n	80027f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0216 	bic.w	r2, r2, #22
 8002794:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d103      	bne.n	80027b6 <HAL_DMA_IRQHandler+0x1da>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d007      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0208 	bic.w	r2, r2, #8
 80027c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ca:	223f      	movs	r2, #63	@ 0x3f
 80027cc:	409a      	lsls	r2, r3
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d07e      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	4798      	blx	r3
        }
        return;
 80027f2:	e079      	b.n	80028e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d01d      	beq.n	800283e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10d      	bne.n	800282c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002814:	2b00      	cmp	r3, #0
 8002816:	d031      	beq.n	800287c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	4798      	blx	r3
 8002820:	e02c      	b.n	800287c <HAL_DMA_IRQHandler+0x2a0>
 8002822:	bf00      	nop
 8002824:	20000004 	.word	0x20000004
 8002828:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002830:	2b00      	cmp	r3, #0
 8002832:	d023      	beq.n	800287c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	4798      	blx	r3
 800283c:	e01e      	b.n	800287c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10f      	bne.n	800286c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0210 	bic.w	r2, r2, #16
 800285a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002880:	2b00      	cmp	r3, #0
 8002882:	d032      	beq.n	80028ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d022      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2205      	movs	r2, #5
 8002894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0201 	bic.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	3301      	adds	r3, #1
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d307      	bcc.n	80028c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f2      	bne.n	80028a8 <HAL_DMA_IRQHandler+0x2cc>
 80028c2:	e000      	b.n	80028c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d005      	beq.n	80028ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	4798      	blx	r3
 80028e6:	e000      	b.n	80028ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80028e8:	bf00      	nop
    }
  }
}
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028fe:	b2db      	uxtb	r3, r3
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	3b10      	subs	r3, #16
 800291c:	4a13      	ldr	r2, [pc, #76]	@ (800296c <DMA_CalcBaseAndBitshift+0x60>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	091b      	lsrs	r3, r3, #4
 8002924:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002926:	4a12      	ldr	r2, [pc, #72]	@ (8002970 <DMA_CalcBaseAndBitshift+0x64>)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2b03      	cmp	r3, #3
 8002938:	d908      	bls.n	800294c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	4b0c      	ldr	r3, [pc, #48]	@ (8002974 <DMA_CalcBaseAndBitshift+0x68>)
 8002942:	4013      	ands	r3, r2
 8002944:	1d1a      	adds	r2, r3, #4
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	659a      	str	r2, [r3, #88]	@ 0x58
 800294a:	e006      	b.n	800295a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	4b08      	ldr	r3, [pc, #32]	@ (8002974 <DMA_CalcBaseAndBitshift+0x68>)
 8002954:	4013      	ands	r3, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	aaaaaaab 	.word	0xaaaaaaab
 8002970:	0800685c 	.word	0x0800685c
 8002974:	fffffc00 	.word	0xfffffc00

08002978 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002988:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d11f      	bne.n	80029d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d856      	bhi.n	8002a46 <DMA_CheckFifoParam+0xce>
 8002998:	a201      	add	r2, pc, #4	@ (adr r2, 80029a0 <DMA_CheckFifoParam+0x28>)
 800299a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299e:	bf00      	nop
 80029a0:	080029b1 	.word	0x080029b1
 80029a4:	080029c3 	.word	0x080029c3
 80029a8:	080029b1 	.word	0x080029b1
 80029ac:	08002a47 	.word	0x08002a47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d046      	beq.n	8002a4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c0:	e043      	b.n	8002a4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029ca:	d140      	bne.n	8002a4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d0:	e03d      	b.n	8002a4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029da:	d121      	bne.n	8002a20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d837      	bhi.n	8002a52 <DMA_CheckFifoParam+0xda>
 80029e2:	a201      	add	r2, pc, #4	@ (adr r2, 80029e8 <DMA_CheckFifoParam+0x70>)
 80029e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e8:	080029f9 	.word	0x080029f9
 80029ec:	080029ff 	.word	0x080029ff
 80029f0:	080029f9 	.word	0x080029f9
 80029f4:	08002a11 	.word	0x08002a11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
      break;
 80029fc:	e030      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d025      	beq.n	8002a56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a0e:	e022      	b.n	8002a56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a14:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a18:	d11f      	bne.n	8002a5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a1e:	e01c      	b.n	8002a5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d903      	bls.n	8002a2e <DMA_CheckFifoParam+0xb6>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d003      	beq.n	8002a34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a2c:	e018      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	73fb      	strb	r3, [r7, #15]
      break;
 8002a32:	e015      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00e      	beq.n	8002a5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
      break;
 8002a44:	e00b      	b.n	8002a5e <DMA_CheckFifoParam+0xe6>
      break;
 8002a46:	bf00      	nop
 8002a48:	e00a      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a4a:	bf00      	nop
 8002a4c:	e008      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a4e:	bf00      	nop
 8002a50:	e006      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a52:	bf00      	nop
 8002a54:	e004      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a56:	bf00      	nop
 8002a58:	e002      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a5a:	bf00      	nop
 8002a5c:	e000      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a5e:	bf00      	nop
    }
  } 
  
  return status; 
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop

08002a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b089      	sub	sp, #36	@ 0x24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
 8002a8e:	e169      	b.n	8002d64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a90:	2201      	movs	r2, #1
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	f040 8158 	bne.w	8002d5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d005      	beq.n	8002ac6 <HAL_GPIO_Init+0x56>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d130      	bne.n	8002b28 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002afc:	2201      	movs	r2, #1
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f003 0201 	and.w	r2, r3, #1
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d017      	beq.n	8002b64 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2203      	movs	r2, #3
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d123      	bne.n	8002bb8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	08da      	lsrs	r2, r3, #3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3208      	adds	r2, #8
 8002b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	220f      	movs	r2, #15
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	08da      	lsrs	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3208      	adds	r2, #8
 8002bb2:	69b9      	ldr	r1, [r7, #24]
 8002bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 0203 	and.w	r2, r3, #3
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80b2 	beq.w	8002d5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bfa:	4b60      	ldr	r3, [pc, #384]	@ (8002d7c <HAL_GPIO_Init+0x30c>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfe:	4a5f      	ldr	r2, [pc, #380]	@ (8002d7c <HAL_GPIO_Init+0x30c>)
 8002c00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c04:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c06:	4b5d      	ldr	r3, [pc, #372]	@ (8002d7c <HAL_GPIO_Init+0x30c>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c12:	4a5b      	ldr	r2, [pc, #364]	@ (8002d80 <HAL_GPIO_Init+0x310>)
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	089b      	lsrs	r3, r3, #2
 8002c18:	3302      	adds	r3, #2
 8002c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	220f      	movs	r2, #15
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a52      	ldr	r2, [pc, #328]	@ (8002d84 <HAL_GPIO_Init+0x314>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d02b      	beq.n	8002c96 <HAL_GPIO_Init+0x226>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a51      	ldr	r2, [pc, #324]	@ (8002d88 <HAL_GPIO_Init+0x318>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d025      	beq.n	8002c92 <HAL_GPIO_Init+0x222>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a50      	ldr	r2, [pc, #320]	@ (8002d8c <HAL_GPIO_Init+0x31c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d01f      	beq.n	8002c8e <HAL_GPIO_Init+0x21e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a4f      	ldr	r2, [pc, #316]	@ (8002d90 <HAL_GPIO_Init+0x320>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d019      	beq.n	8002c8a <HAL_GPIO_Init+0x21a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a4e      	ldr	r2, [pc, #312]	@ (8002d94 <HAL_GPIO_Init+0x324>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d013      	beq.n	8002c86 <HAL_GPIO_Init+0x216>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a4d      	ldr	r2, [pc, #308]	@ (8002d98 <HAL_GPIO_Init+0x328>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00d      	beq.n	8002c82 <HAL_GPIO_Init+0x212>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a4c      	ldr	r2, [pc, #304]	@ (8002d9c <HAL_GPIO_Init+0x32c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d007      	beq.n	8002c7e <HAL_GPIO_Init+0x20e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a4b      	ldr	r2, [pc, #300]	@ (8002da0 <HAL_GPIO_Init+0x330>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d101      	bne.n	8002c7a <HAL_GPIO_Init+0x20a>
 8002c76:	2307      	movs	r3, #7
 8002c78:	e00e      	b.n	8002c98 <HAL_GPIO_Init+0x228>
 8002c7a:	2308      	movs	r3, #8
 8002c7c:	e00c      	b.n	8002c98 <HAL_GPIO_Init+0x228>
 8002c7e:	2306      	movs	r3, #6
 8002c80:	e00a      	b.n	8002c98 <HAL_GPIO_Init+0x228>
 8002c82:	2305      	movs	r3, #5
 8002c84:	e008      	b.n	8002c98 <HAL_GPIO_Init+0x228>
 8002c86:	2304      	movs	r3, #4
 8002c88:	e006      	b.n	8002c98 <HAL_GPIO_Init+0x228>
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e004      	b.n	8002c98 <HAL_GPIO_Init+0x228>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e002      	b.n	8002c98 <HAL_GPIO_Init+0x228>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <HAL_GPIO_Init+0x228>
 8002c96:	2300      	movs	r3, #0
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	f002 0203 	and.w	r2, r2, #3
 8002c9e:	0092      	lsls	r2, r2, #2
 8002ca0:	4093      	lsls	r3, r2
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ca8:	4935      	ldr	r1, [pc, #212]	@ (8002d80 <HAL_GPIO_Init+0x310>)
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	089b      	lsrs	r3, r3, #2
 8002cae:	3302      	adds	r3, #2
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8002da4 <HAL_GPIO_Init+0x334>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cda:	4a32      	ldr	r2, [pc, #200]	@ (8002da4 <HAL_GPIO_Init+0x334>)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ce0:	4b30      	ldr	r3, [pc, #192]	@ (8002da4 <HAL_GPIO_Init+0x334>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d04:	4a27      	ldr	r2, [pc, #156]	@ (8002da4 <HAL_GPIO_Init+0x334>)
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d0a:	4b26      	ldr	r3, [pc, #152]	@ (8002da4 <HAL_GPIO_Init+0x334>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4013      	ands	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002da4 <HAL_GPIO_Init+0x334>)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d34:	4b1b      	ldr	r3, [pc, #108]	@ (8002da4 <HAL_GPIO_Init+0x334>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d58:	4a12      	ldr	r2, [pc, #72]	@ (8002da4 <HAL_GPIO_Init+0x334>)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	3301      	adds	r3, #1
 8002d62:	61fb      	str	r3, [r7, #28]
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	2b0f      	cmp	r3, #15
 8002d68:	f67f ae92 	bls.w	8002a90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d6c:	bf00      	nop
 8002d6e:	bf00      	nop
 8002d70:	3724      	adds	r7, #36	@ 0x24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	40013800 	.word	0x40013800
 8002d84:	40020000 	.word	0x40020000
 8002d88:	40020400 	.word	0x40020400
 8002d8c:	40020800 	.word	0x40020800
 8002d90:	40020c00 	.word	0x40020c00
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40021400 	.word	0x40021400
 8002d9c:	40021800 	.word	0x40021800
 8002da0:	40021c00 	.word	0x40021c00
 8002da4:	40013c00 	.word	0x40013c00

08002da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	887b      	ldrh	r3, [r7, #2]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
 8002dc4:	e001      	b.n	8002dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	807b      	strh	r3, [r7, #2]
 8002de4:	4613      	mov	r3, r2
 8002de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002de8:	787b      	ldrb	r3, [r7, #1]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dee:	887a      	ldrh	r2, [r7, #2]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002df4:	e003      	b.n	8002dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002df6:	887b      	ldrh	r3, [r7, #2]
 8002df8:	041a      	lsls	r2, r3, #16
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	619a      	str	r2, [r3, #24]
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
	...

08002e0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e08b      	b.n	8002f36 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d106      	bne.n	8002e38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7fe fb2a 	bl	800148c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2224      	movs	r2, #36	@ 0x24
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0201 	bic.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d107      	bne.n	8002e86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	e006      	b.n	8002e94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002e92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d108      	bne.n	8002eae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	e007      	b.n	8002ebe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ebc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6859      	ldr	r1, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f40 <HAL_I2C_Init+0x134>)
 8002eca:	430b      	orrs	r3, r1
 8002ecc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002edc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691a      	ldr	r2, [r3, #16]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69d9      	ldr	r1, [r3, #28]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1a      	ldr	r2, [r3, #32]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0201 	orr.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	02008000 	.word	0x02008000

08002f44 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	68f9      	ldr	r1, [r7, #12]
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	4798      	blx	r3
  }
}
 8002f70:	bf00      	nop
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00f      	beq.n	8002fba <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa8:	f043 0201 	orr.w	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fb8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00f      	beq.n	8002fe4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd2:	f043 0208 	orr.w	r2, r3, #8
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fe2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00f      	beq.n	800300e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00a      	beq.n	800300e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffc:	f043 0202 	orr.w	r2, r3, #2
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800300c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003012:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f003 030b 	and.w	r3, r3, #11
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800301e:	68f9      	ldr	r1, [r7, #12]
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fbd5 	bl	80037d0 <I2C_ITError>
  }
}
 8003026:	bf00      	nop
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	460b      	mov	r3, r1
 8003060:	70fb      	strb	r3, [r7, #3]
 8003062:	4613      	mov	r3, r2
 8003064:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b086      	sub	sp, #24
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030be:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d101      	bne.n	80030d2 <I2C_Slave_ISR_IT+0x24>
 80030ce:	2302      	movs	r3, #2
 80030d0:	e0e2      	b.n	8003298 <I2C_Slave_ISR_IT+0x1ea>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d009      	beq.n	80030f8 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d004      	beq.n	80030f8 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80030ee:	6939      	ldr	r1, [r7, #16]
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f9b5 	bl	8003460 <I2C_ITSlaveCplt>
 80030f6:	e0ca      	b.n	800328e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d04b      	beq.n	800319a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003108:	2b00      	cmp	r3, #0
 800310a:	d046      	beq.n	800319a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d128      	bne.n	8003168 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b28      	cmp	r3, #40	@ 0x28
 8003120:	d108      	bne.n	8003134 <I2C_Slave_ISR_IT+0x86>
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003128:	d104      	bne.n	8003134 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800312a:	6939      	ldr	r1, [r7, #16]
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 fafb 	bl	8003728 <I2C_ITListenCplt>
 8003132:	e031      	b.n	8003198 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b29      	cmp	r3, #41	@ 0x29
 800313e:	d10e      	bne.n	800315e <I2C_Slave_ISR_IT+0xb0>
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003146:	d00a      	beq.n	800315e <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2210      	movs	r2, #16
 800314e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 fc54 	bl	80039fe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f926 	bl	80033a8 <I2C_ITSlaveSeqCplt>
 800315c:	e01c      	b.n	8003198 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2210      	movs	r2, #16
 8003164:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003166:	e08f      	b.n	8003288 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2210      	movs	r2, #16
 800316e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003174:	f043 0204 	orr.w	r2, r3, #4
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <I2C_Slave_ISR_IT+0xdc>
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003188:	d17e      	bne.n	8003288 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318e:	4619      	mov	r1, r3
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 fb1d 	bl	80037d0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003196:	e077      	b.n	8003288 <I2C_Slave_ISR_IT+0x1da>
 8003198:	e076      	b.n	8003288 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d02f      	beq.n	8003204 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d02a      	beq.n	8003204 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d018      	beq.n	80031ea <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d14b      	bne.n	800328c <I2C_Slave_ISR_IT+0x1de>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031fa:	d047      	beq.n	800328c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 f8d3 	bl	80033a8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003202:	e043      	b.n	800328c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d009      	beq.n	8003222 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003214:	2b00      	cmp	r3, #0
 8003216:	d004      	beq.n	8003222 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003218:	6939      	ldr	r1, [r7, #16]
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f840 	bl	80032a0 <I2C_ITAddrCplt>
 8003220:	e035      	b.n	800328e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d030      	beq.n	800328e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003232:	2b00      	cmp	r3, #0
 8003234:	d02b      	beq.n	800328e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d018      	beq.n	8003272 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003244:	781a      	ldrb	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003270:	e00d      	b.n	800328e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003278:	d002      	beq.n	8003280 <I2C_Slave_ISR_IT+0x1d2>
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d106      	bne.n	800328e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f891 	bl	80033a8 <I2C_ITSlaveSeqCplt>
 8003286:	e002      	b.n	800328e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003288:	bf00      	nop
 800328a:	e000      	b.n	800328e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800328c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80032b6:	2b28      	cmp	r3, #40	@ 0x28
 80032b8:	d16a      	bne.n	8003390 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	0c1b      	lsrs	r3, r3, #16
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	0c1b      	lsrs	r3, r3, #16
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80032d8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032e6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80032f4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d138      	bne.n	8003370 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80032fe:	897b      	ldrh	r3, [r7, #10]
 8003300:	09db      	lsrs	r3, r3, #7
 8003302:	b29a      	uxth	r2, r3
 8003304:	89bb      	ldrh	r3, [r7, #12]
 8003306:	4053      	eors	r3, r2
 8003308:	b29b      	uxth	r3, r3
 800330a:	f003 0306 	and.w	r3, r3, #6
 800330e:	2b00      	cmp	r3, #0
 8003310:	d11c      	bne.n	800334c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003312:	897b      	ldrh	r3, [r7, #10]
 8003314:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003324:	2b02      	cmp	r3, #2
 8003326:	d13b      	bne.n	80033a0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2208      	movs	r2, #8
 8003334:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800333e:	89ba      	ldrh	r2, [r7, #12]
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	4619      	mov	r1, r3
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff fe86 	bl	8003056 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800334a:	e029      	b.n	80033a0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800334c:	893b      	ldrh	r3, [r7, #8]
 800334e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003350:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 fb94 	bl	8003a82 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003362:	89ba      	ldrh	r2, [r7, #12]
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	4619      	mov	r1, r3
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7ff fe74 	bl	8003056 <HAL_I2C_AddrCallback>
}
 800336e:	e017      	b.n	80033a0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003370:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 fb84 	bl	8003a82 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003382:	89ba      	ldrh	r2, [r7, #12]
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	4619      	mov	r1, r3
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff fe64 	bl	8003056 <HAL_I2C_AddrCallback>
}
 800338e:	e007      	b.n	80033a0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2208      	movs	r2, #8
 8003396:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80033a0:	bf00      	nop
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d008      	beq.n	80033dc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	e00c      	b.n	80033f6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d007      	beq.n	80033f6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033f4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b29      	cmp	r3, #41	@ 0x29
 8003400:	d112      	bne.n	8003428 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2228      	movs	r2, #40	@ 0x28
 8003406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2221      	movs	r2, #33	@ 0x21
 800340e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003410:	2101      	movs	r1, #1
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fb35 	bl	8003a82 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff fe04 	bl	800302e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003426:	e017      	b.n	8003458 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b2a      	cmp	r3, #42	@ 0x2a
 8003432:	d111      	bne.n	8003458 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2228      	movs	r2, #40	@ 0x28
 8003438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2222      	movs	r2, #34	@ 0x22
 8003440:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003442:	2102      	movs	r1, #2
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 fb1c 	bl	8003a82 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff fdf5 	bl	8003042 <HAL_I2C_SlaveRxCpltCallback>
}
 8003458:	bf00      	nop
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003482:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2220      	movs	r2, #32
 800348a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800348c:	7afb      	ldrb	r3, [r7, #11]
 800348e:	2b21      	cmp	r3, #33	@ 0x21
 8003490:	d002      	beq.n	8003498 <I2C_ITSlaveCplt+0x38>
 8003492:	7afb      	ldrb	r3, [r7, #11]
 8003494:	2b29      	cmp	r3, #41	@ 0x29
 8003496:	d108      	bne.n	80034aa <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003498:	f248 0101 	movw	r1, #32769	@ 0x8001
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 faf0 	bl	8003a82 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2221      	movs	r2, #33	@ 0x21
 80034a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80034a8:	e019      	b.n	80034de <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80034aa:	7afb      	ldrb	r3, [r7, #11]
 80034ac:	2b22      	cmp	r3, #34	@ 0x22
 80034ae:	d002      	beq.n	80034b6 <I2C_ITSlaveCplt+0x56>
 80034b0:	7afb      	ldrb	r3, [r7, #11]
 80034b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80034b4:	d108      	bne.n	80034c8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80034b6:	f248 0102 	movw	r1, #32770	@ 0x8002
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fae1 	bl	8003a82 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2222      	movs	r2, #34	@ 0x22
 80034c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80034c6:	e00a      	b.n	80034de <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80034c8:	7afb      	ldrb	r3, [r7, #11]
 80034ca:	2b28      	cmp	r3, #40	@ 0x28
 80034cc:	d107      	bne.n	80034de <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80034ce:	f248 0103 	movw	r1, #32771	@ 0x8003
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fad5 	bl	8003a82 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034ec:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6859      	ldr	r1, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4b89      	ldr	r3, [pc, #548]	@ (8003720 <I2C_ITSlaveCplt+0x2c0>)
 80034fa:	400b      	ands	r3, r1
 80034fc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fa7d 	bl	80039fe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d013      	beq.n	8003536 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800351c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003522:	2b00      	cmp	r3, #0
 8003524:	d01f      	beq.n	8003566 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	b29a      	uxth	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003534:	e017      	b.n	8003566 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d012      	beq.n	8003566 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800354e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003554:	2b00      	cmp	r3, #0
 8003556:	d006      	beq.n	8003566 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	b29a      	uxth	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d020      	beq.n	80035b2 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f023 0304 	bic.w	r3, r3, #4
 8003576:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00c      	beq.n	80035b2 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359c:	3b01      	subs	r3, #1
 800359e:	b29a      	uxth	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	3b01      	subs	r3, #1
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c0:	f043 0204 	orr.w	r2, r3, #4
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d049      	beq.n	8003666 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d044      	beq.n	8003666 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d128      	bne.n	8003638 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b28      	cmp	r3, #40	@ 0x28
 80035f0:	d108      	bne.n	8003604 <I2C_ITSlaveCplt+0x1a4>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035f8:	d104      	bne.n	8003604 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80035fa:	6979      	ldr	r1, [r7, #20]
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f893 	bl	8003728 <I2C_ITListenCplt>
 8003602:	e030      	b.n	8003666 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b29      	cmp	r3, #41	@ 0x29
 800360e:	d10e      	bne.n	800362e <I2C_ITSlaveCplt+0x1ce>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003616:	d00a      	beq.n	800362e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2210      	movs	r2, #16
 800361e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f9ec 	bl	80039fe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff febe 	bl	80033a8 <I2C_ITSlaveSeqCplt>
 800362c:	e01b      	b.n	8003666 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2210      	movs	r2, #16
 8003634:	61da      	str	r2, [r3, #28]
 8003636:	e016      	b.n	8003666 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2210      	movs	r2, #16
 800363e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003644:	f043 0204 	orr.w	r2, r3, #4
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <I2C_ITSlaveCplt+0x1fa>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003658:	d105      	bne.n	8003666 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365e:	4619      	mov	r1, r3
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f8b5 	bl	80037d0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003680:	4619      	mov	r1, r3
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f8a4 	bl	80037d0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b28      	cmp	r3, #40	@ 0x28
 8003692:	d141      	bne.n	8003718 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003694:	6979      	ldr	r1, [r7, #20]
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f846 	bl	8003728 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800369c:	e03c      	b.n	8003718 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80036a6:	d014      	beq.n	80036d2 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7ff fe7d 	bl	80033a8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003724 <I2C_ITSlaveCplt+0x2c4>)
 80036b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff fcd1 	bl	8003072 <HAL_I2C_ListenCpltCallback>
}
 80036d0:	e022      	b.n	8003718 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b22      	cmp	r3, #34	@ 0x22
 80036dc:	d10e      	bne.n	80036fc <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff fca4 	bl	8003042 <HAL_I2C_SlaveRxCpltCallback>
}
 80036fa:	e00d      	b.n	8003718 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff fc8b 	bl	800302e <HAL_I2C_SlaveTxCpltCallback>
}
 8003718:	bf00      	nop
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	fe00e800 	.word	0xfe00e800
 8003724:	ffff0000 	.word	0xffff0000

08003728 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a25      	ldr	r2, [pc, #148]	@ (80037cc <I2C_ITListenCplt+0xa4>)
 8003736:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2220      	movs	r2, #32
 8003742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	f003 0304 	and.w	r3, r3, #4
 800375a:	2b00      	cmp	r3, #0
 800375c:	d022      	beq.n	80037a4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377a:	2b00      	cmp	r3, #0
 800377c:	d012      	beq.n	80037a4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003782:	3b01      	subs	r3, #1
 8003784:	b29a      	uxth	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379c:	f043 0204 	orr.w	r2, r3, #4
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80037a4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f96a 	bl	8003a82 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2210      	movs	r2, #16
 80037b4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff fc57 	bl	8003072 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80037c4:	bf00      	nop
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	ffff0000 	.word	0xffff0000

080037d0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037e0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a6d      	ldr	r2, [pc, #436]	@ (80039a4 <I2C_ITError+0x1d4>)
 80037ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003802:	7bfb      	ldrb	r3, [r7, #15]
 8003804:	2b28      	cmp	r3, #40	@ 0x28
 8003806:	d005      	beq.n	8003814 <I2C_ITError+0x44>
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	2b29      	cmp	r3, #41	@ 0x29
 800380c:	d002      	beq.n	8003814 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	2b2a      	cmp	r3, #42	@ 0x2a
 8003812:	d10b      	bne.n	800382c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003814:	2103      	movs	r1, #3
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f933 	bl	8003a82 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2228      	movs	r2, #40	@ 0x28
 8003820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a60      	ldr	r2, [pc, #384]	@ (80039a8 <I2C_ITError+0x1d8>)
 8003828:	635a      	str	r2, [r3, #52]	@ 0x34
 800382a:	e030      	b.n	800388e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800382c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f926 	bl	8003a82 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f8e1 	bl	80039fe <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b60      	cmp	r3, #96	@ 0x60
 8003846:	d01f      	beq.n	8003888 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b20      	cmp	r3, #32
 800385c:	d114      	bne.n	8003888 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	f003 0310 	and.w	r3, r3, #16
 8003868:	2b10      	cmp	r3, #16
 800386a:	d109      	bne.n	8003880 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2210      	movs	r2, #16
 8003872:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003878:	f043 0204 	orr.w	r2, r3, #4
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2220      	movs	r2, #32
 8003886:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003892:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003898:	2b00      	cmp	r3, #0
 800389a:	d039      	beq.n	8003910 <I2C_ITError+0x140>
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b11      	cmp	r3, #17
 80038a0:	d002      	beq.n	80038a8 <I2C_ITError+0xd8>
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b21      	cmp	r3, #33	@ 0x21
 80038a6:	d133      	bne.n	8003910 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038b6:	d107      	bne.n	80038c8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80038c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff f80f 	bl	80028f0 <HAL_DMA_GetState>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d017      	beq.n	8003908 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038dc:	4a33      	ldr	r2, [pc, #204]	@ (80039ac <I2C_ITError+0x1dc>)
 80038de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fe fe53 	bl	8002598 <HAL_DMA_Abort_IT>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d04d      	beq.n	8003994 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003902:	4610      	mov	r0, r2
 8003904:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003906:	e045      	b.n	8003994 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f851 	bl	80039b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800390e:	e041      	b.n	8003994 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003914:	2b00      	cmp	r3, #0
 8003916:	d039      	beq.n	800398c <I2C_ITError+0x1bc>
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b12      	cmp	r3, #18
 800391c:	d002      	beq.n	8003924 <I2C_ITError+0x154>
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b22      	cmp	r3, #34	@ 0x22
 8003922:	d133      	bne.n	800398c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800392e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003932:	d107      	bne.n	8003944 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003942:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003948:	4618      	mov	r0, r3
 800394a:	f7fe ffd1 	bl	80028f0 <HAL_DMA_GetState>
 800394e:	4603      	mov	r3, r0
 8003950:	2b01      	cmp	r3, #1
 8003952:	d017      	beq.n	8003984 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003958:	4a14      	ldr	r2, [pc, #80]	@ (80039ac <I2C_ITError+0x1dc>)
 800395a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003968:	4618      	mov	r0, r3
 800396a:	f7fe fe15 	bl	8002598 <HAL_DMA_Abort_IT>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d011      	beq.n	8003998 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800397e:	4610      	mov	r0, r2
 8003980:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003982:	e009      	b.n	8003998 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f813 	bl	80039b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800398a:	e005      	b.n	8003998 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f80f 	bl	80039b0 <I2C_TreatErrorCallback>
  }
}
 8003992:	e002      	b.n	800399a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003994:	bf00      	nop
 8003996:	e000      	b.n	800399a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003998:	bf00      	nop
}
 800399a:	bf00      	nop
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	ffff0000 	.word	0xffff0000
 80039a8:	080030af 	.word	0x080030af
 80039ac:	08003a47 	.word	0x08003a47

080039b0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b60      	cmp	r3, #96	@ 0x60
 80039c2:	d10e      	bne.n	80039e2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff fb5d 	bl	800309a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80039e0:	e009      	b.n	80039f6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff fb48 	bl	8003086 <HAL_I2C_ErrorCallback>
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d103      	bne.n	8003a1c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d007      	beq.n	8003a3a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	699a      	ldr	r2, [r3, #24]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0201 	orr.w	r2, r2, #1
 8003a38:	619a      	str	r2, [r3, #24]
  }
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a60:	2200      	movs	r2, #0
 8003a62:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a70:	2200      	movs	r2, #0
 8003a72:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f7ff ff9b 	bl	80039b0 <I2C_TreatErrorCallback>
}
 8003a7a:	bf00      	nop
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b085      	sub	sp, #20
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003a92:	887b      	ldrh	r3, [r7, #2]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00f      	beq.n	8003abc <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003aa2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ab0:	2b28      	cmp	r3, #40	@ 0x28
 8003ab2:	d003      	beq.n	8003abc <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003aba:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003abc:	887b      	ldrh	r3, [r7, #2]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00f      	beq.n	8003ae6 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003acc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ada:	2b28      	cmp	r3, #40	@ 0x28
 8003adc:	d003      	beq.n	8003ae6 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003ae4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003ae6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	da03      	bge.n	8003af6 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003af4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003af6:	887b      	ldrh	r3, [r7, #2]
 8003af8:	2b10      	cmp	r3, #16
 8003afa:	d103      	bne.n	8003b04 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003b02:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b04:	887b      	ldrh	r3, [r7, #2]
 8003b06:	2b20      	cmp	r3, #32
 8003b08:	d103      	bne.n	8003b12 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f043 0320 	orr.w	r3, r3, #32
 8003b10:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b12:	887b      	ldrh	r3, [r7, #2]
 8003b14:	2b40      	cmp	r3, #64	@ 0x40
 8003b16:	d103      	bne.n	8003b20 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6819      	ldr	r1, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	43da      	mvns	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	400a      	ands	r2, r1
 8003b30:	601a      	str	r2, [r3, #0]
}
 8003b32:	bf00      	nop
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b20      	cmp	r3, #32
 8003b52:	d138      	bne.n	8003bc6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e032      	b.n	8003bc8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2224      	movs	r2, #36	@ 0x24
 8003b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0201 	bic.w	r2, r2, #1
 8003b80:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b90:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6819      	ldr	r1, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 0201 	orr.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e000      	b.n	8003bc8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bc6:	2302      	movs	r3, #2
  }
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b20      	cmp	r3, #32
 8003be8:	d139      	bne.n	8003c5e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e033      	b.n	8003c60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2224      	movs	r2, #36	@ 0x24
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0201 	bic.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c26:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	021b      	lsls	r3, r3, #8
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0201 	orr.w	r2, r2, #1
 8003c48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	e000      	b.n	8003c60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c5e:	2302      	movs	r3, #2
  }
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c74:	2300      	movs	r3, #0
 8003c76:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e291      	b.n	80041a6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 8087 	beq.w	8003d9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c90:	4b96      	ldr	r3, [pc, #600]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 030c 	and.w	r3, r3, #12
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d00c      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c9c:	4b93      	ldr	r3, [pc, #588]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 030c 	and.w	r3, r3, #12
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d112      	bne.n	8003cce <HAL_RCC_OscConfig+0x62>
 8003ca8:	4b90      	ldr	r3, [pc, #576]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cb4:	d10b      	bne.n	8003cce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb6:	4b8d      	ldr	r3, [pc, #564]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d06c      	beq.n	8003d9c <HAL_RCC_OscConfig+0x130>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d168      	bne.n	8003d9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e26b      	b.n	80041a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cd6:	d106      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x7a>
 8003cd8:	4b84      	ldr	r3, [pc, #528]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a83      	ldr	r2, [pc, #524]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	e02e      	b.n	8003d44 <HAL_RCC_OscConfig+0xd8>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10c      	bne.n	8003d08 <HAL_RCC_OscConfig+0x9c>
 8003cee:	4b7f      	ldr	r3, [pc, #508]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a7e      	ldr	r2, [pc, #504]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003cf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	4b7c      	ldr	r3, [pc, #496]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a7b      	ldr	r2, [pc, #492]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003d00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	e01d      	b.n	8003d44 <HAL_RCC_OscConfig+0xd8>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d10:	d10c      	bne.n	8003d2c <HAL_RCC_OscConfig+0xc0>
 8003d12:	4b76      	ldr	r3, [pc, #472]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a75      	ldr	r2, [pc, #468]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	4b73      	ldr	r3, [pc, #460]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a72      	ldr	r2, [pc, #456]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	e00b      	b.n	8003d44 <HAL_RCC_OscConfig+0xd8>
 8003d2c:	4b6f      	ldr	r3, [pc, #444]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a6e      	ldr	r2, [pc, #440]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	4b6c      	ldr	r3, [pc, #432]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a6b      	ldr	r2, [pc, #428]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d013      	beq.n	8003d74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fd fe7a 	bl	8001a44 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d54:	f7fd fe76 	bl	8001a44 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b64      	cmp	r3, #100	@ 0x64
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e21f      	b.n	80041a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d66:	4b61      	ldr	r3, [pc, #388]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0xe8>
 8003d72:	e014      	b.n	8003d9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d74:	f7fd fe66 	bl	8001a44 <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d7c:	f7fd fe62 	bl	8001a44 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b64      	cmp	r3, #100	@ 0x64
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e20b      	b.n	80041a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8e:	4b57      	ldr	r3, [pc, #348]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1f0      	bne.n	8003d7c <HAL_RCC_OscConfig+0x110>
 8003d9a:	e000      	b.n	8003d9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d069      	beq.n	8003e7e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003daa:	4b50      	ldr	r3, [pc, #320]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 030c 	and.w	r3, r3, #12
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00b      	beq.n	8003dce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003db6:	4b4d      	ldr	r3, [pc, #308]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 030c 	and.w	r3, r3, #12
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d11c      	bne.n	8003dfc <HAL_RCC_OscConfig+0x190>
 8003dc2:	4b4a      	ldr	r3, [pc, #296]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d116      	bne.n	8003dfc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dce:	4b47      	ldr	r3, [pc, #284]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d005      	beq.n	8003de6 <HAL_RCC_OscConfig+0x17a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d001      	beq.n	8003de6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e1df      	b.n	80041a6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de6:	4b41      	ldr	r3, [pc, #260]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	493d      	ldr	r1, [pc, #244]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dfa:	e040      	b.n	8003e7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d023      	beq.n	8003e4c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e04:	4b39      	ldr	r3, [pc, #228]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a38      	ldr	r2, [pc, #224]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e10:	f7fd fe18 	bl	8001a44 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e18:	f7fd fe14 	bl	8001a44 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e1bd      	b.n	80041a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e2a:	4b30      	ldr	r3, [pc, #192]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f0      	beq.n	8003e18 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e36:	4b2d      	ldr	r3, [pc, #180]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4929      	ldr	r1, [pc, #164]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]
 8003e4a:	e018      	b.n	8003e7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e4c:	4b27      	ldr	r3, [pc, #156]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a26      	ldr	r2, [pc, #152]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003e52:	f023 0301 	bic.w	r3, r3, #1
 8003e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fd fdf4 	bl	8001a44 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e60:	f7fd fdf0 	bl	8001a44 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e199      	b.n	80041a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e72:	4b1e      	ldr	r3, [pc, #120]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1f0      	bne.n	8003e60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d038      	beq.n	8003efc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d019      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e92:	4b16      	ldr	r3, [pc, #88]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e96:	4a15      	ldr	r2, [pc, #84]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9e:	f7fd fdd1 	bl	8001a44 <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ea6:	f7fd fdcd 	bl	8001a44 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e176      	b.n	80041a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0f0      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x23a>
 8003ec4:	e01a      	b.n	8003efc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ec6:	4b09      	ldr	r3, [pc, #36]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003ec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eca:	4a08      	ldr	r2, [pc, #32]	@ (8003eec <HAL_RCC_OscConfig+0x280>)
 8003ecc:	f023 0301 	bic.w	r3, r3, #1
 8003ed0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed2:	f7fd fdb7 	bl	8001a44 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed8:	e00a      	b.n	8003ef0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eda:	f7fd fdb3 	bl	8001a44 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d903      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e15c      	b.n	80041a6 <HAL_RCC_OscConfig+0x53a>
 8003eec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef0:	4b91      	ldr	r3, [pc, #580]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8003ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1ee      	bne.n	8003eda <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 80a4 	beq.w	8004052 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f0a:	4b8b      	ldr	r3, [pc, #556]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10d      	bne.n	8003f32 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f16:	4b88      	ldr	r3, [pc, #544]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	4a87      	ldr	r2, [pc, #540]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8003f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f22:	4b85      	ldr	r3, [pc, #532]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f2a:	60bb      	str	r3, [r7, #8]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f32:	4b82      	ldr	r3, [pc, #520]	@ (800413c <HAL_RCC_OscConfig+0x4d0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d118      	bne.n	8003f70 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f3e:	4b7f      	ldr	r3, [pc, #508]	@ (800413c <HAL_RCC_OscConfig+0x4d0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a7e      	ldr	r2, [pc, #504]	@ (800413c <HAL_RCC_OscConfig+0x4d0>)
 8003f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f4a:	f7fd fd7b 	bl	8001a44 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f52:	f7fd fd77 	bl	8001a44 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b64      	cmp	r3, #100	@ 0x64
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e120      	b.n	80041a6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f64:	4b75      	ldr	r3, [pc, #468]	@ (800413c <HAL_RCC_OscConfig+0x4d0>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d106      	bne.n	8003f86 <HAL_RCC_OscConfig+0x31a>
 8003f78:	4b6f      	ldr	r3, [pc, #444]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8003f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7c:	4a6e      	ldr	r2, [pc, #440]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f84:	e02d      	b.n	8003fe2 <HAL_RCC_OscConfig+0x376>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10c      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x33c>
 8003f8e:	4b6a      	ldr	r3, [pc, #424]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f92:	4a69      	ldr	r2, [pc, #420]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f9a:	4b67      	ldr	r3, [pc, #412]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9e:	4a66      	ldr	r2, [pc, #408]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8003fa0:	f023 0304 	bic.w	r3, r3, #4
 8003fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fa6:	e01c      	b.n	8003fe2 <HAL_RCC_OscConfig+0x376>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b05      	cmp	r3, #5
 8003fae:	d10c      	bne.n	8003fca <HAL_RCC_OscConfig+0x35e>
 8003fb0:	4b61      	ldr	r3, [pc, #388]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb4:	4a60      	ldr	r2, [pc, #384]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8003fb6:	f043 0304 	orr.w	r3, r3, #4
 8003fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fbc:	4b5e      	ldr	r3, [pc, #376]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8003fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc0:	4a5d      	ldr	r2, [pc, #372]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8003fc2:	f043 0301 	orr.w	r3, r3, #1
 8003fc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fc8:	e00b      	b.n	8003fe2 <HAL_RCC_OscConfig+0x376>
 8003fca:	4b5b      	ldr	r3, [pc, #364]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8003fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fce:	4a5a      	ldr	r2, [pc, #360]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8003fd0:	f023 0301 	bic.w	r3, r3, #1
 8003fd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fd6:	4b58      	ldr	r3, [pc, #352]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8003fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fda:	4a57      	ldr	r2, [pc, #348]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8003fdc:	f023 0304 	bic.w	r3, r3, #4
 8003fe0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d015      	beq.n	8004016 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fea:	f7fd fd2b 	bl	8001a44 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff0:	e00a      	b.n	8004008 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff2:	f7fd fd27 	bl	8001a44 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004000:	4293      	cmp	r3, r2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e0ce      	b.n	80041a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004008:	4b4b      	ldr	r3, [pc, #300]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 800400a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0ee      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x386>
 8004014:	e014      	b.n	8004040 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004016:	f7fd fd15 	bl	8001a44 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800401c:	e00a      	b.n	8004034 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401e:	f7fd fd11 	bl	8001a44 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800402c:	4293      	cmp	r3, r2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e0b8      	b.n	80041a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004034:	4b40      	ldr	r3, [pc, #256]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8004036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1ee      	bne.n	800401e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004040:	7dfb      	ldrb	r3, [r7, #23]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d105      	bne.n	8004052 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004046:	4b3c      	ldr	r3, [pc, #240]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404a:	4a3b      	ldr	r2, [pc, #236]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 800404c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004050:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 80a4 	beq.w	80041a4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800405c:	4b36      	ldr	r3, [pc, #216]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 030c 	and.w	r3, r3, #12
 8004064:	2b08      	cmp	r3, #8
 8004066:	d06b      	beq.n	8004140 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	2b02      	cmp	r3, #2
 800406e:	d149      	bne.n	8004104 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004070:	4b31      	ldr	r3, [pc, #196]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a30      	ldr	r2, [pc, #192]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8004076:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800407a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407c:	f7fd fce2 	bl	8001a44 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004084:	f7fd fcde 	bl	8001a44 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e087      	b.n	80041a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004096:	4b28      	ldr	r3, [pc, #160]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69da      	ldr	r2, [r3, #28]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	019b      	lsls	r3, r3, #6
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b8:	085b      	lsrs	r3, r3, #1
 80040ba:	3b01      	subs	r3, #1
 80040bc:	041b      	lsls	r3, r3, #16
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c4:	061b      	lsls	r3, r3, #24
 80040c6:	4313      	orrs	r3, r2
 80040c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 80040ca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80040ce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040d0:	4b19      	ldr	r3, [pc, #100]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a18      	ldr	r2, [pc, #96]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 80040d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040dc:	f7fd fcb2 	bl	8001a44 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e4:	f7fd fcae 	bl	8001a44 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e057      	b.n	80041a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f6:	4b10      	ldr	r3, [pc, #64]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0f0      	beq.n	80040e4 <HAL_RCC_OscConfig+0x478>
 8004102:	e04f      	b.n	80041a4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004104:	4b0c      	ldr	r3, [pc, #48]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a0b      	ldr	r2, [pc, #44]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 800410a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800410e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004110:	f7fd fc98 	bl	8001a44 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004118:	f7fd fc94 	bl	8001a44 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e03d      	b.n	80041a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800412a:	4b03      	ldr	r3, [pc, #12]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0x4ac>
 8004136:	e035      	b.n	80041a4 <HAL_RCC_OscConfig+0x538>
 8004138:	40023800 	.word	0x40023800
 800413c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004140:	4b1b      	ldr	r3, [pc, #108]	@ (80041b0 <HAL_RCC_OscConfig+0x544>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d028      	beq.n	80041a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004158:	429a      	cmp	r2, r3
 800415a:	d121      	bne.n	80041a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d11a      	bne.n	80041a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004170:	4013      	ands	r3, r2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004176:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004178:	4293      	cmp	r3, r2
 800417a:	d111      	bne.n	80041a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004186:	085b      	lsrs	r3, r3, #1
 8004188:	3b01      	subs	r3, #1
 800418a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800418c:	429a      	cmp	r2, r3
 800418e:	d107      	bne.n	80041a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e000      	b.n	80041a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40023800 	.word	0x40023800

080041b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e0d0      	b.n	800436e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041cc:	4b6a      	ldr	r3, [pc, #424]	@ (8004378 <HAL_RCC_ClockConfig+0x1c4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 030f 	and.w	r3, r3, #15
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d910      	bls.n	80041fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041da:	4b67      	ldr	r3, [pc, #412]	@ (8004378 <HAL_RCC_ClockConfig+0x1c4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f023 020f 	bic.w	r2, r3, #15
 80041e2:	4965      	ldr	r1, [pc, #404]	@ (8004378 <HAL_RCC_ClockConfig+0x1c4>)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ea:	4b63      	ldr	r3, [pc, #396]	@ (8004378 <HAL_RCC_ClockConfig+0x1c4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d001      	beq.n	80041fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e0b8      	b.n	800436e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d020      	beq.n	800424a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004214:	4b59      	ldr	r3, [pc, #356]	@ (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	4a58      	ldr	r2, [pc, #352]	@ (800437c <HAL_RCC_ClockConfig+0x1c8>)
 800421a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800421e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800422c:	4b53      	ldr	r3, [pc, #332]	@ (800437c <HAL_RCC_ClockConfig+0x1c8>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	4a52      	ldr	r2, [pc, #328]	@ (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004232:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004236:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004238:	4b50      	ldr	r3, [pc, #320]	@ (800437c <HAL_RCC_ClockConfig+0x1c8>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	494d      	ldr	r1, [pc, #308]	@ (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d040      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d107      	bne.n	800426e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425e:	4b47      	ldr	r3, [pc, #284]	@ (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d115      	bne.n	8004296 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e07f      	b.n	800436e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d107      	bne.n	8004286 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004276:	4b41      	ldr	r3, [pc, #260]	@ (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e073      	b.n	800436e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004286:	4b3d      	ldr	r3, [pc, #244]	@ (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e06b      	b.n	800436e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004296:	4b39      	ldr	r3, [pc, #228]	@ (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f023 0203 	bic.w	r2, r3, #3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	4936      	ldr	r1, [pc, #216]	@ (800437c <HAL_RCC_ClockConfig+0x1c8>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042a8:	f7fd fbcc 	bl	8001a44 <HAL_GetTick>
 80042ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b0:	f7fd fbc8 	bl	8001a44 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e053      	b.n	800436e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c6:	4b2d      	ldr	r3, [pc, #180]	@ (800437c <HAL_RCC_ClockConfig+0x1c8>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 020c 	and.w	r2, r3, #12
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d1eb      	bne.n	80042b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042d8:	4b27      	ldr	r3, [pc, #156]	@ (8004378 <HAL_RCC_ClockConfig+0x1c4>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 030f 	and.w	r3, r3, #15
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d210      	bcs.n	8004308 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e6:	4b24      	ldr	r3, [pc, #144]	@ (8004378 <HAL_RCC_ClockConfig+0x1c4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f023 020f 	bic.w	r2, r3, #15
 80042ee:	4922      	ldr	r1, [pc, #136]	@ (8004378 <HAL_RCC_ClockConfig+0x1c4>)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f6:	4b20      	ldr	r3, [pc, #128]	@ (8004378 <HAL_RCC_ClockConfig+0x1c4>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d001      	beq.n	8004308 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e032      	b.n	800436e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d008      	beq.n	8004326 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004314:	4b19      	ldr	r3, [pc, #100]	@ (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4916      	ldr	r1, [pc, #88]	@ (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004322:	4313      	orrs	r3, r2
 8004324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004332:	4b12      	ldr	r3, [pc, #72]	@ (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	490e      	ldr	r1, [pc, #56]	@ (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004342:	4313      	orrs	r3, r2
 8004344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004346:	f000 f821 	bl	800438c <HAL_RCC_GetSysClockFreq>
 800434a:	4602      	mov	r2, r0
 800434c:	4b0b      	ldr	r3, [pc, #44]	@ (800437c <HAL_RCC_ClockConfig+0x1c8>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	091b      	lsrs	r3, r3, #4
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	490a      	ldr	r1, [pc, #40]	@ (8004380 <HAL_RCC_ClockConfig+0x1cc>)
 8004358:	5ccb      	ldrb	r3, [r1, r3]
 800435a:	fa22 f303 	lsr.w	r3, r2, r3
 800435e:	4a09      	ldr	r2, [pc, #36]	@ (8004384 <HAL_RCC_ClockConfig+0x1d0>)
 8004360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004362:	4b09      	ldr	r3, [pc, #36]	@ (8004388 <HAL_RCC_ClockConfig+0x1d4>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f7fd fb28 	bl	80019bc <HAL_InitTick>

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40023c00 	.word	0x40023c00
 800437c:	40023800 	.word	0x40023800
 8004380:	08006844 	.word	0x08006844
 8004384:	20000004 	.word	0x20000004
 8004388:	20000008 	.word	0x20000008

0800438c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800438c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004390:	b090      	sub	sp, #64	@ 0x40
 8004392:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004394:	2300      	movs	r3, #0
 8004396:	637b      	str	r3, [r7, #52]	@ 0x34
 8004398:	2300      	movs	r3, #0
 800439a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800439c:	2300      	movs	r3, #0
 800439e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80043a0:	2300      	movs	r3, #0
 80043a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043a4:	4b59      	ldr	r3, [pc, #356]	@ (800450c <HAL_RCC_GetSysClockFreq+0x180>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 030c 	and.w	r3, r3, #12
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d00d      	beq.n	80043cc <HAL_RCC_GetSysClockFreq+0x40>
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	f200 80a1 	bhi.w	80044f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <HAL_RCC_GetSysClockFreq+0x34>
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d003      	beq.n	80043c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80043be:	e09b      	b.n	80044f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043c0:	4b53      	ldr	r3, [pc, #332]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x184>)
 80043c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043c4:	e09b      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043c6:	4b53      	ldr	r3, [pc, #332]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x188>)
 80043c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043ca:	e098      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043cc:	4b4f      	ldr	r3, [pc, #316]	@ (800450c <HAL_RCC_GetSysClockFreq+0x180>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043d6:	4b4d      	ldr	r3, [pc, #308]	@ (800450c <HAL_RCC_GetSysClockFreq+0x180>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d028      	beq.n	8004434 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043e2:	4b4a      	ldr	r3, [pc, #296]	@ (800450c <HAL_RCC_GetSysClockFreq+0x180>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	099b      	lsrs	r3, r3, #6
 80043e8:	2200      	movs	r2, #0
 80043ea:	623b      	str	r3, [r7, #32]
 80043ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80043f4:	2100      	movs	r1, #0
 80043f6:	4b47      	ldr	r3, [pc, #284]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x188>)
 80043f8:	fb03 f201 	mul.w	r2, r3, r1
 80043fc:	2300      	movs	r3, #0
 80043fe:	fb00 f303 	mul.w	r3, r0, r3
 8004402:	4413      	add	r3, r2
 8004404:	4a43      	ldr	r2, [pc, #268]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x188>)
 8004406:	fba0 1202 	umull	r1, r2, r0, r2
 800440a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800440c:	460a      	mov	r2, r1
 800440e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004412:	4413      	add	r3, r2
 8004414:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004418:	2200      	movs	r2, #0
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	61fa      	str	r2, [r7, #28]
 800441e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004422:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004426:	f7fb ff63 	bl	80002f0 <__aeabi_uldivmod>
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	4613      	mov	r3, r2
 8004430:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004432:	e053      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004434:	4b35      	ldr	r3, [pc, #212]	@ (800450c <HAL_RCC_GetSysClockFreq+0x180>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	099b      	lsrs	r3, r3, #6
 800443a:	2200      	movs	r2, #0
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	617a      	str	r2, [r7, #20]
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004446:	f04f 0b00 	mov.w	fp, #0
 800444a:	4652      	mov	r2, sl
 800444c:	465b      	mov	r3, fp
 800444e:	f04f 0000 	mov.w	r0, #0
 8004452:	f04f 0100 	mov.w	r1, #0
 8004456:	0159      	lsls	r1, r3, #5
 8004458:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800445c:	0150      	lsls	r0, r2, #5
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	ebb2 080a 	subs.w	r8, r2, sl
 8004466:	eb63 090b 	sbc.w	r9, r3, fp
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004476:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800447a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800447e:	ebb2 0408 	subs.w	r4, r2, r8
 8004482:	eb63 0509 	sbc.w	r5, r3, r9
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	f04f 0300 	mov.w	r3, #0
 800448e:	00eb      	lsls	r3, r5, #3
 8004490:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004494:	00e2      	lsls	r2, r4, #3
 8004496:	4614      	mov	r4, r2
 8004498:	461d      	mov	r5, r3
 800449a:	eb14 030a 	adds.w	r3, r4, sl
 800449e:	603b      	str	r3, [r7, #0]
 80044a0:	eb45 030b 	adc.w	r3, r5, fp
 80044a4:	607b      	str	r3, [r7, #4]
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044b2:	4629      	mov	r1, r5
 80044b4:	028b      	lsls	r3, r1, #10
 80044b6:	4621      	mov	r1, r4
 80044b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044bc:	4621      	mov	r1, r4
 80044be:	028a      	lsls	r2, r1, #10
 80044c0:	4610      	mov	r0, r2
 80044c2:	4619      	mov	r1, r3
 80044c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044c6:	2200      	movs	r2, #0
 80044c8:	60bb      	str	r3, [r7, #8]
 80044ca:	60fa      	str	r2, [r7, #12]
 80044cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044d0:	f7fb ff0e 	bl	80002f0 <__aeabi_uldivmod>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	4613      	mov	r3, r2
 80044da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80044dc:	4b0b      	ldr	r3, [pc, #44]	@ (800450c <HAL_RCC_GetSysClockFreq+0x180>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	0c1b      	lsrs	r3, r3, #16
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	3301      	adds	r3, #1
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80044ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80044ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044f6:	e002      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044f8:	4b05      	ldr	r3, [pc, #20]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x184>)
 80044fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004500:	4618      	mov	r0, r3
 8004502:	3740      	adds	r7, #64	@ 0x40
 8004504:	46bd      	mov	sp, r7
 8004506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800450a:	bf00      	nop
 800450c:	40023800 	.word	0x40023800
 8004510:	00f42400 	.word	0x00f42400
 8004514:	017d7840 	.word	0x017d7840

08004518 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800451c:	4b03      	ldr	r3, [pc, #12]	@ (800452c <HAL_RCC_GetHCLKFreq+0x14>)
 800451e:	681b      	ldr	r3, [r3, #0]
}
 8004520:	4618      	mov	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	20000004 	.word	0x20000004

08004530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004534:	f7ff fff0 	bl	8004518 <HAL_RCC_GetHCLKFreq>
 8004538:	4602      	mov	r2, r0
 800453a:	4b05      	ldr	r3, [pc, #20]	@ (8004550 <HAL_RCC_GetPCLK1Freq+0x20>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	0a9b      	lsrs	r3, r3, #10
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	4903      	ldr	r1, [pc, #12]	@ (8004554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004546:	5ccb      	ldrb	r3, [r1, r3]
 8004548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800454c:	4618      	mov	r0, r3
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40023800 	.word	0x40023800
 8004554:	08006854 	.word	0x08006854

08004558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800455c:	f7ff ffdc 	bl	8004518 <HAL_RCC_GetHCLKFreq>
 8004560:	4602      	mov	r2, r0
 8004562:	4b05      	ldr	r3, [pc, #20]	@ (8004578 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	0b5b      	lsrs	r3, r3, #13
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	4903      	ldr	r1, [pc, #12]	@ (800457c <HAL_RCC_GetPCLK2Freq+0x24>)
 800456e:	5ccb      	ldrb	r3, [r1, r3]
 8004570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004574:	4618      	mov	r0, r3
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40023800 	.word	0x40023800
 800457c:	08006854 	.word	0x08006854

08004580 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004588:	2300      	movs	r3, #0
 800458a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800458c:	2300      	movs	r3, #0
 800458e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8004590:	2300      	movs	r3, #0
 8004592:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004594:	2300      	movs	r3, #0
 8004596:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d012      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045a4:	4b65      	ldr	r3, [pc, #404]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	4a64      	ldr	r2, [pc, #400]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045aa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80045ae:	6093      	str	r3, [r2, #8]
 80045b0:	4b62      	ldr	r3, [pc, #392]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b8:	4960      	ldr	r1, [pc, #384]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80045c6:	2301      	movs	r3, #1
 80045c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d017      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045d6:	4b59      	ldr	r3, [pc, #356]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045dc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e4:	4955      	ldr	r1, [pc, #340]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045f4:	d101      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80045f6:	2301      	movs	r3, #1
 80045f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8004602:	2301      	movs	r3, #1
 8004604:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d017      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004612:	4b4a      	ldr	r3, [pc, #296]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004614:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004618:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004620:	4946      	ldr	r1, [pc, #280]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004630:	d101      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8004632:	2301      	movs	r3, #1
 8004634:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800463e:	2301      	movs	r3, #1
 8004640:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0320 	and.w	r3, r3, #32
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 808b 	beq.w	8004766 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004650:	4b3a      	ldr	r3, [pc, #232]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004654:	4a39      	ldr	r2, [pc, #228]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800465a:	6413      	str	r3, [r2, #64]	@ 0x40
 800465c:	4b37      	ldr	r3, [pc, #220]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800465e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004668:	4b35      	ldr	r3, [pc, #212]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a34      	ldr	r2, [pc, #208]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800466e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004672:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004674:	f7fd f9e6 	bl	8001a44 <HAL_GetTick>
 8004678:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800467a:	e008      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800467c:	f7fd f9e2 	bl	8001a44 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b64      	cmp	r3, #100	@ 0x64
 8004688:	d901      	bls.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e2bc      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800468e:	4b2c      	ldr	r3, [pc, #176]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0f0      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800469a:	4b28      	ldr	r3, [pc, #160]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800469e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d035      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d02e      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046b8:	4b20      	ldr	r3, [pc, #128]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046c2:	4b1e      	ldr	r3, [pc, #120]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c6:	4a1d      	ldr	r2, [pc, #116]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046cc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046ce:	4b1b      	ldr	r3, [pc, #108]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d2:	4a1a      	ldr	r2, [pc, #104]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046d8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80046da:	4a18      	ldr	r2, [pc, #96]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046e0:	4b16      	ldr	r3, [pc, #88]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d114      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ec:	f7fd f9aa 	bl	8001a44 <HAL_GetTick>
 80046f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f2:	e00a      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046f4:	f7fd f9a6 	bl	8001a44 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004702:	4293      	cmp	r3, r2
 8004704:	d901      	bls.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e27e      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470a:	4b0c      	ldr	r3, [pc, #48]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800470c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0ee      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800471e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004722:	d111      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8004724:	4b05      	ldr	r3, [pc, #20]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004730:	4b04      	ldr	r3, [pc, #16]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004732:	400b      	ands	r3, r1
 8004734:	4901      	ldr	r1, [pc, #4]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004736:	4313      	orrs	r3, r2
 8004738:	608b      	str	r3, [r1, #8]
 800473a:	e00b      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800473c:	40023800 	.word	0x40023800
 8004740:	40007000 	.word	0x40007000
 8004744:	0ffffcff 	.word	0x0ffffcff
 8004748:	4ba4      	ldr	r3, [pc, #656]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	4aa3      	ldr	r2, [pc, #652]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800474e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004752:	6093      	str	r3, [r2, #8]
 8004754:	4ba1      	ldr	r3, [pc, #644]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004756:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004760:	499e      	ldr	r1, [pc, #632]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004762:	4313      	orrs	r3, r2
 8004764:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	2b00      	cmp	r3, #0
 8004770:	d010      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004772:	4b9a      	ldr	r3, [pc, #616]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004774:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004778:	4a98      	ldr	r2, [pc, #608]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800477a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800477e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004782:	4b96      	ldr	r3, [pc, #600]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004784:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478c:	4993      	ldr	r1, [pc, #588]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047a0:	4b8e      	ldr	r3, [pc, #568]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80047a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ae:	498b      	ldr	r1, [pc, #556]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047c2:	4b86      	ldr	r3, [pc, #536]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80047c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047d0:	4982      	ldr	r1, [pc, #520]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047e4:	4b7d      	ldr	r3, [pc, #500]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80047e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047f2:	497a      	ldr	r1, [pc, #488]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004806:	4b75      	ldr	r3, [pc, #468]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800480c:	f023 0203 	bic.w	r2, r3, #3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004814:	4971      	ldr	r1, [pc, #452]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004828:	4b6c      	ldr	r3, [pc, #432]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800482e:	f023 020c 	bic.w	r2, r3, #12
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004836:	4969      	ldr	r1, [pc, #420]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800484a:	4b64      	ldr	r3, [pc, #400]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800484c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004850:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004858:	4960      	ldr	r1, [pc, #384]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00a      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800486c:	4b5b      	ldr	r3, [pc, #364]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004872:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800487a:	4958      	ldr	r1, [pc, #352]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800488e:	4b53      	ldr	r3, [pc, #332]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004894:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800489c:	494f      	ldr	r1, [pc, #316]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80048b0:	4b4a      	ldr	r3, [pc, #296]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048be:	4947      	ldr	r1, [pc, #284]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80048d2:	4b42      	ldr	r3, [pc, #264]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e0:	493e      	ldr	r1, [pc, #248]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80048f4:	4b39      	ldr	r3, [pc, #228]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004902:	4936      	ldr	r1, [pc, #216]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004904:	4313      	orrs	r3, r2
 8004906:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d011      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004916:	4b31      	ldr	r3, [pc, #196]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004924:	492d      	ldr	r1, [pc, #180]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004930:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004934:	d101      	bne.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8004936:	2301      	movs	r3, #1
 8004938:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004946:	4b25      	ldr	r3, [pc, #148]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004954:	4921      	ldr	r1, [pc, #132]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004968:	4b1c      	ldr	r3, [pc, #112]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004976:	4919      	ldr	r1, [pc, #100]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800498a:	4b14      	ldr	r3, [pc, #80]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004990:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004998:	4910      	ldr	r1, [pc, #64]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d006      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 809d 	beq.w	8004aee <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049b4:	4b09      	ldr	r3, [pc, #36]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a08      	ldr	r2, [pc, #32]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80049be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c0:	f7fd f840 	bl	8001a44 <HAL_GetTick>
 80049c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049c6:	e00b      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049c8:	f7fd f83c 	bl	8001a44 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b64      	cmp	r3, #100	@ 0x64
 80049d4:	d904      	bls.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e116      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80049da:	bf00      	nop
 80049dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049e0:	4b8b      	ldr	r3, [pc, #556]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1ed      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d017      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d113      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a00:	4b83      	ldr	r3, [pc, #524]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a06:	0e1b      	lsrs	r3, r3, #24
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	019a      	lsls	r2, r3, #6
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	061b      	lsls	r3, r3, #24
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	071b      	lsls	r3, r3, #28
 8004a20:	497b      	ldr	r1, [pc, #492]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d004      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a3c:	d00a      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d024      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a52:	d11f      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a54:	4b6e      	ldr	r3, [pc, #440]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a5a:	0f1b      	lsrs	r3, r3, #28
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	019a      	lsls	r2, r3, #6
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	061b      	lsls	r3, r3, #24
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	071b      	lsls	r3, r3, #28
 8004a74:	4966      	ldr	r1, [pc, #408]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a7c:	4b64      	ldr	r3, [pc, #400]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a82:	f023 021f 	bic.w	r2, r3, #31
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	4960      	ldr	r1, [pc, #384]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00d      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	019a      	lsls	r2, r3, #6
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	061b      	lsls	r3, r3, #24
 8004aac:	431a      	orrs	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	071b      	lsls	r3, r3, #28
 8004ab4:	4956      	ldr	r1, [pc, #344]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004abc:	4b54      	ldr	r3, [pc, #336]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a53      	ldr	r2, [pc, #332]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004ac2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ac6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ac8:	f7fc ffbc 	bl	8001a44 <HAL_GetTick>
 8004acc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ad0:	f7fc ffb8 	bl	8001a44 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b64      	cmp	r3, #100	@ 0x64
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e092      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ae2:	4b4b      	ldr	r3, [pc, #300]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0f0      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	f040 8088 	bne.w	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004af6:	4b46      	ldr	r3, [pc, #280]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a45      	ldr	r2, [pc, #276]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004afc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b02:	f7fc ff9f 	bl	8001a44 <HAL_GetTick>
 8004b06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b08:	e008      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b0a:	f7fc ff9b 	bl	8001a44 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b64      	cmp	r3, #100	@ 0x64
 8004b16:	d901      	bls.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e075      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b1c:	4b3c      	ldr	r3, [pc, #240]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b28:	d0ef      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d009      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d024      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d120      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b52:	4b2f      	ldr	r3, [pc, #188]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b58:	0c1b      	lsrs	r3, r3, #16
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	019a      	lsls	r2, r3, #6
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	041b      	lsls	r3, r3, #16
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	061b      	lsls	r3, r3, #24
 8004b72:	4927      	ldr	r1, [pc, #156]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b7a:	4b25      	ldr	r3, [pc, #148]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b80:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	021b      	lsls	r3, r3, #8
 8004b8c:	4920      	ldr	r1, [pc, #128]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d018      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ba4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ba8:	d113      	bne.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004baa:	4b19      	ldr	r3, [pc, #100]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb0:	0e1b      	lsrs	r3, r3, #24
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	019a      	lsls	r2, r3, #6
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	041b      	lsls	r3, r3, #16
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	061b      	lsls	r3, r3, #24
 8004bca:	4911      	ldr	r1, [pc, #68]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a0e      	ldr	r2, [pc, #56]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bde:	f7fc ff31 	bl	8001a44 <HAL_GetTick>
 8004be2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004be6:	f7fc ff2d 	bl	8001a44 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b64      	cmp	r3, #100	@ 0x64
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e007      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bf8:	4b05      	ldr	r3, [pc, #20]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c04:	d1ef      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3720      	adds	r7, #32
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40023800 	.word	0x40023800

08004c14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e040      	b.n	8004ca8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fc fcfc 	bl	8001634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2224      	movs	r2, #36	@ 0x24
 8004c40:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0201 	bic.w	r2, r2, #1
 8004c50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fbde 	bl	800541c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f977 	bl	8004f54 <UART_SetConfig>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e01b      	b.n	8004ca8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689a      	ldr	r2, [r3, #8]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fc5d 	bl	8005560 <UART_CheckIdleState>
 8004ca6:	4603      	mov	r3, r0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08a      	sub	sp, #40	@ 0x28
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	d177      	bne.n	8004db8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <HAL_UART_Transmit+0x24>
 8004cce:	88fb      	ldrh	r3, [r7, #6]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e070      	b.n	8004dba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2221      	movs	r2, #33	@ 0x21
 8004ce4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ce6:	f7fc fead 	bl	8001a44 <HAL_GetTick>
 8004cea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	88fa      	ldrh	r2, [r7, #6]
 8004cf0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	88fa      	ldrh	r2, [r7, #6]
 8004cf8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d04:	d108      	bne.n	8004d18 <HAL_UART_Transmit+0x68>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d104      	bne.n	8004d18 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	61bb      	str	r3, [r7, #24]
 8004d16:	e003      	b.n	8004d20 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d20:	e02f      	b.n	8004d82 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2180      	movs	r1, #128	@ 0x80
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 fc6e 	bl	800560e <UART_WaitOnFlagUntilTimeout>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d004      	beq.n	8004d42 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e03b      	b.n	8004dba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10b      	bne.n	8004d60 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d56:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	3302      	adds	r3, #2
 8004d5c:	61bb      	str	r3, [r7, #24]
 8004d5e:	e007      	b.n	8004d70 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	781a      	ldrb	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1c9      	bne.n	8004d22 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2200      	movs	r2, #0
 8004d96:	2140      	movs	r1, #64	@ 0x40
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 fc38 	bl	800560e <UART_WaitOnFlagUntilTimeout>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d004      	beq.n	8004dae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2220      	movs	r2, #32
 8004da8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e005      	b.n	8004dba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2220      	movs	r2, #32
 8004db2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	e000      	b.n	8004dba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004db8:	2302      	movs	r3, #2
  }
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3720      	adds	r7, #32
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b08a      	sub	sp, #40	@ 0x28
 8004dc6:	af02      	add	r7, sp, #8
 8004dc8:	60f8      	str	r0, [r7, #12]
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	603b      	str	r3, [r7, #0]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dd8:	2b20      	cmp	r3, #32
 8004dda:	f040 80b5 	bne.w	8004f48 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <HAL_UART_Receive+0x28>
 8004de4:	88fb      	ldrh	r3, [r7, #6]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e0ad      	b.n	8004f4a <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2222      	movs	r2, #34	@ 0x22
 8004dfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e04:	f7fc fe1e 	bl	8001a44 <HAL_GetTick>
 8004e08:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	88fa      	ldrh	r2, [r7, #6]
 8004e0e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	88fa      	ldrh	r2, [r7, #6]
 8004e16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e22:	d10e      	bne.n	8004e42 <HAL_UART_Receive+0x80>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d105      	bne.n	8004e38 <HAL_UART_Receive+0x76>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004e32:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e36:	e02d      	b.n	8004e94 <HAL_UART_Receive+0xd2>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	22ff      	movs	r2, #255	@ 0xff
 8004e3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e40:	e028      	b.n	8004e94 <HAL_UART_Receive+0xd2>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10d      	bne.n	8004e66 <HAL_UART_Receive+0xa4>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d104      	bne.n	8004e5c <HAL_UART_Receive+0x9a>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	22ff      	movs	r2, #255	@ 0xff
 8004e56:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e5a:	e01b      	b.n	8004e94 <HAL_UART_Receive+0xd2>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	227f      	movs	r2, #127	@ 0x7f
 8004e60:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e64:	e016      	b.n	8004e94 <HAL_UART_Receive+0xd2>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e6e:	d10d      	bne.n	8004e8c <HAL_UART_Receive+0xca>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d104      	bne.n	8004e82 <HAL_UART_Receive+0xc0>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	227f      	movs	r2, #127	@ 0x7f
 8004e7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e80:	e008      	b.n	8004e94 <HAL_UART_Receive+0xd2>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	223f      	movs	r2, #63	@ 0x3f
 8004e86:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e8a:	e003      	b.n	8004e94 <HAL_UART_Receive+0xd2>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004e9a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ea4:	d108      	bne.n	8004eb8 <HAL_UART_Receive+0xf6>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d104      	bne.n	8004eb8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	e003      	b.n	8004ec0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004ec0:	e036      	b.n	8004f30 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2120      	movs	r1, #32
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 fb9e 	bl	800560e <UART_WaitOnFlagUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e032      	b.n	8004f4a <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10c      	bne.n	8004f04 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	8a7b      	ldrh	r3, [r7, #18]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	3302      	adds	r3, #2
 8004f00:	61bb      	str	r3, [r7, #24]
 8004f02:	e00c      	b.n	8004f1e <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	8a7b      	ldrh	r3, [r7, #18]
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	4013      	ands	r3, r2
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1c2      	bne.n	8004ec2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004f44:	2300      	movs	r3, #0
 8004f46:	e000      	b.n	8004f4a <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004f48:	2302      	movs	r3, #2
  }
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3720      	adds	r7, #32
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	4ba6      	ldr	r3, [pc, #664]	@ (8005218 <UART_SetConfig+0x2c4>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	6812      	ldr	r2, [r2, #0]
 8004f86:	6979      	ldr	r1, [r7, #20]
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a94      	ldr	r2, [pc, #592]	@ (800521c <UART_SetConfig+0x2c8>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d120      	bne.n	8005012 <UART_SetConfig+0xbe>
 8004fd0:	4b93      	ldr	r3, [pc, #588]	@ (8005220 <UART_SetConfig+0x2cc>)
 8004fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d816      	bhi.n	800500c <UART_SetConfig+0xb8>
 8004fde:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe4 <UART_SetConfig+0x90>)
 8004fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe4:	08004ff5 	.word	0x08004ff5
 8004fe8:	08005001 	.word	0x08005001
 8004fec:	08004ffb 	.word	0x08004ffb
 8004ff0:	08005007 	.word	0x08005007
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	77fb      	strb	r3, [r7, #31]
 8004ff8:	e150      	b.n	800529c <UART_SetConfig+0x348>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	77fb      	strb	r3, [r7, #31]
 8004ffe:	e14d      	b.n	800529c <UART_SetConfig+0x348>
 8005000:	2304      	movs	r3, #4
 8005002:	77fb      	strb	r3, [r7, #31]
 8005004:	e14a      	b.n	800529c <UART_SetConfig+0x348>
 8005006:	2308      	movs	r3, #8
 8005008:	77fb      	strb	r3, [r7, #31]
 800500a:	e147      	b.n	800529c <UART_SetConfig+0x348>
 800500c:	2310      	movs	r3, #16
 800500e:	77fb      	strb	r3, [r7, #31]
 8005010:	e144      	b.n	800529c <UART_SetConfig+0x348>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a83      	ldr	r2, [pc, #524]	@ (8005224 <UART_SetConfig+0x2d0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d132      	bne.n	8005082 <UART_SetConfig+0x12e>
 800501c:	4b80      	ldr	r3, [pc, #512]	@ (8005220 <UART_SetConfig+0x2cc>)
 800501e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005022:	f003 030c 	and.w	r3, r3, #12
 8005026:	2b0c      	cmp	r3, #12
 8005028:	d828      	bhi.n	800507c <UART_SetConfig+0x128>
 800502a:	a201      	add	r2, pc, #4	@ (adr r2, 8005030 <UART_SetConfig+0xdc>)
 800502c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005030:	08005065 	.word	0x08005065
 8005034:	0800507d 	.word	0x0800507d
 8005038:	0800507d 	.word	0x0800507d
 800503c:	0800507d 	.word	0x0800507d
 8005040:	08005071 	.word	0x08005071
 8005044:	0800507d 	.word	0x0800507d
 8005048:	0800507d 	.word	0x0800507d
 800504c:	0800507d 	.word	0x0800507d
 8005050:	0800506b 	.word	0x0800506b
 8005054:	0800507d 	.word	0x0800507d
 8005058:	0800507d 	.word	0x0800507d
 800505c:	0800507d 	.word	0x0800507d
 8005060:	08005077 	.word	0x08005077
 8005064:	2300      	movs	r3, #0
 8005066:	77fb      	strb	r3, [r7, #31]
 8005068:	e118      	b.n	800529c <UART_SetConfig+0x348>
 800506a:	2302      	movs	r3, #2
 800506c:	77fb      	strb	r3, [r7, #31]
 800506e:	e115      	b.n	800529c <UART_SetConfig+0x348>
 8005070:	2304      	movs	r3, #4
 8005072:	77fb      	strb	r3, [r7, #31]
 8005074:	e112      	b.n	800529c <UART_SetConfig+0x348>
 8005076:	2308      	movs	r3, #8
 8005078:	77fb      	strb	r3, [r7, #31]
 800507a:	e10f      	b.n	800529c <UART_SetConfig+0x348>
 800507c:	2310      	movs	r3, #16
 800507e:	77fb      	strb	r3, [r7, #31]
 8005080:	e10c      	b.n	800529c <UART_SetConfig+0x348>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a68      	ldr	r2, [pc, #416]	@ (8005228 <UART_SetConfig+0x2d4>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d120      	bne.n	80050ce <UART_SetConfig+0x17a>
 800508c:	4b64      	ldr	r3, [pc, #400]	@ (8005220 <UART_SetConfig+0x2cc>)
 800508e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005092:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005096:	2b30      	cmp	r3, #48	@ 0x30
 8005098:	d013      	beq.n	80050c2 <UART_SetConfig+0x16e>
 800509a:	2b30      	cmp	r3, #48	@ 0x30
 800509c:	d814      	bhi.n	80050c8 <UART_SetConfig+0x174>
 800509e:	2b20      	cmp	r3, #32
 80050a0:	d009      	beq.n	80050b6 <UART_SetConfig+0x162>
 80050a2:	2b20      	cmp	r3, #32
 80050a4:	d810      	bhi.n	80050c8 <UART_SetConfig+0x174>
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d002      	beq.n	80050b0 <UART_SetConfig+0x15c>
 80050aa:	2b10      	cmp	r3, #16
 80050ac:	d006      	beq.n	80050bc <UART_SetConfig+0x168>
 80050ae:	e00b      	b.n	80050c8 <UART_SetConfig+0x174>
 80050b0:	2300      	movs	r3, #0
 80050b2:	77fb      	strb	r3, [r7, #31]
 80050b4:	e0f2      	b.n	800529c <UART_SetConfig+0x348>
 80050b6:	2302      	movs	r3, #2
 80050b8:	77fb      	strb	r3, [r7, #31]
 80050ba:	e0ef      	b.n	800529c <UART_SetConfig+0x348>
 80050bc:	2304      	movs	r3, #4
 80050be:	77fb      	strb	r3, [r7, #31]
 80050c0:	e0ec      	b.n	800529c <UART_SetConfig+0x348>
 80050c2:	2308      	movs	r3, #8
 80050c4:	77fb      	strb	r3, [r7, #31]
 80050c6:	e0e9      	b.n	800529c <UART_SetConfig+0x348>
 80050c8:	2310      	movs	r3, #16
 80050ca:	77fb      	strb	r3, [r7, #31]
 80050cc:	e0e6      	b.n	800529c <UART_SetConfig+0x348>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a56      	ldr	r2, [pc, #344]	@ (800522c <UART_SetConfig+0x2d8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d120      	bne.n	800511a <UART_SetConfig+0x1c6>
 80050d8:	4b51      	ldr	r3, [pc, #324]	@ (8005220 <UART_SetConfig+0x2cc>)
 80050da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80050e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80050e4:	d013      	beq.n	800510e <UART_SetConfig+0x1ba>
 80050e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80050e8:	d814      	bhi.n	8005114 <UART_SetConfig+0x1c0>
 80050ea:	2b80      	cmp	r3, #128	@ 0x80
 80050ec:	d009      	beq.n	8005102 <UART_SetConfig+0x1ae>
 80050ee:	2b80      	cmp	r3, #128	@ 0x80
 80050f0:	d810      	bhi.n	8005114 <UART_SetConfig+0x1c0>
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <UART_SetConfig+0x1a8>
 80050f6:	2b40      	cmp	r3, #64	@ 0x40
 80050f8:	d006      	beq.n	8005108 <UART_SetConfig+0x1b4>
 80050fa:	e00b      	b.n	8005114 <UART_SetConfig+0x1c0>
 80050fc:	2300      	movs	r3, #0
 80050fe:	77fb      	strb	r3, [r7, #31]
 8005100:	e0cc      	b.n	800529c <UART_SetConfig+0x348>
 8005102:	2302      	movs	r3, #2
 8005104:	77fb      	strb	r3, [r7, #31]
 8005106:	e0c9      	b.n	800529c <UART_SetConfig+0x348>
 8005108:	2304      	movs	r3, #4
 800510a:	77fb      	strb	r3, [r7, #31]
 800510c:	e0c6      	b.n	800529c <UART_SetConfig+0x348>
 800510e:	2308      	movs	r3, #8
 8005110:	77fb      	strb	r3, [r7, #31]
 8005112:	e0c3      	b.n	800529c <UART_SetConfig+0x348>
 8005114:	2310      	movs	r3, #16
 8005116:	77fb      	strb	r3, [r7, #31]
 8005118:	e0c0      	b.n	800529c <UART_SetConfig+0x348>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a44      	ldr	r2, [pc, #272]	@ (8005230 <UART_SetConfig+0x2dc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d125      	bne.n	8005170 <UART_SetConfig+0x21c>
 8005124:	4b3e      	ldr	r3, [pc, #248]	@ (8005220 <UART_SetConfig+0x2cc>)
 8005126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800512a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800512e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005132:	d017      	beq.n	8005164 <UART_SetConfig+0x210>
 8005134:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005138:	d817      	bhi.n	800516a <UART_SetConfig+0x216>
 800513a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800513e:	d00b      	beq.n	8005158 <UART_SetConfig+0x204>
 8005140:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005144:	d811      	bhi.n	800516a <UART_SetConfig+0x216>
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <UART_SetConfig+0x1fe>
 800514a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800514e:	d006      	beq.n	800515e <UART_SetConfig+0x20a>
 8005150:	e00b      	b.n	800516a <UART_SetConfig+0x216>
 8005152:	2300      	movs	r3, #0
 8005154:	77fb      	strb	r3, [r7, #31]
 8005156:	e0a1      	b.n	800529c <UART_SetConfig+0x348>
 8005158:	2302      	movs	r3, #2
 800515a:	77fb      	strb	r3, [r7, #31]
 800515c:	e09e      	b.n	800529c <UART_SetConfig+0x348>
 800515e:	2304      	movs	r3, #4
 8005160:	77fb      	strb	r3, [r7, #31]
 8005162:	e09b      	b.n	800529c <UART_SetConfig+0x348>
 8005164:	2308      	movs	r3, #8
 8005166:	77fb      	strb	r3, [r7, #31]
 8005168:	e098      	b.n	800529c <UART_SetConfig+0x348>
 800516a:	2310      	movs	r3, #16
 800516c:	77fb      	strb	r3, [r7, #31]
 800516e:	e095      	b.n	800529c <UART_SetConfig+0x348>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a2f      	ldr	r2, [pc, #188]	@ (8005234 <UART_SetConfig+0x2e0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d125      	bne.n	80051c6 <UART_SetConfig+0x272>
 800517a:	4b29      	ldr	r3, [pc, #164]	@ (8005220 <UART_SetConfig+0x2cc>)
 800517c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005180:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005184:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005188:	d017      	beq.n	80051ba <UART_SetConfig+0x266>
 800518a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800518e:	d817      	bhi.n	80051c0 <UART_SetConfig+0x26c>
 8005190:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005194:	d00b      	beq.n	80051ae <UART_SetConfig+0x25a>
 8005196:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800519a:	d811      	bhi.n	80051c0 <UART_SetConfig+0x26c>
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <UART_SetConfig+0x254>
 80051a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051a4:	d006      	beq.n	80051b4 <UART_SetConfig+0x260>
 80051a6:	e00b      	b.n	80051c0 <UART_SetConfig+0x26c>
 80051a8:	2301      	movs	r3, #1
 80051aa:	77fb      	strb	r3, [r7, #31]
 80051ac:	e076      	b.n	800529c <UART_SetConfig+0x348>
 80051ae:	2302      	movs	r3, #2
 80051b0:	77fb      	strb	r3, [r7, #31]
 80051b2:	e073      	b.n	800529c <UART_SetConfig+0x348>
 80051b4:	2304      	movs	r3, #4
 80051b6:	77fb      	strb	r3, [r7, #31]
 80051b8:	e070      	b.n	800529c <UART_SetConfig+0x348>
 80051ba:	2308      	movs	r3, #8
 80051bc:	77fb      	strb	r3, [r7, #31]
 80051be:	e06d      	b.n	800529c <UART_SetConfig+0x348>
 80051c0:	2310      	movs	r3, #16
 80051c2:	77fb      	strb	r3, [r7, #31]
 80051c4:	e06a      	b.n	800529c <UART_SetConfig+0x348>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a1b      	ldr	r2, [pc, #108]	@ (8005238 <UART_SetConfig+0x2e4>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d138      	bne.n	8005242 <UART_SetConfig+0x2ee>
 80051d0:	4b13      	ldr	r3, [pc, #76]	@ (8005220 <UART_SetConfig+0x2cc>)
 80051d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80051da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051de:	d017      	beq.n	8005210 <UART_SetConfig+0x2bc>
 80051e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051e4:	d82a      	bhi.n	800523c <UART_SetConfig+0x2e8>
 80051e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051ea:	d00b      	beq.n	8005204 <UART_SetConfig+0x2b0>
 80051ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051f0:	d824      	bhi.n	800523c <UART_SetConfig+0x2e8>
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <UART_SetConfig+0x2aa>
 80051f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051fa:	d006      	beq.n	800520a <UART_SetConfig+0x2b6>
 80051fc:	e01e      	b.n	800523c <UART_SetConfig+0x2e8>
 80051fe:	2300      	movs	r3, #0
 8005200:	77fb      	strb	r3, [r7, #31]
 8005202:	e04b      	b.n	800529c <UART_SetConfig+0x348>
 8005204:	2302      	movs	r3, #2
 8005206:	77fb      	strb	r3, [r7, #31]
 8005208:	e048      	b.n	800529c <UART_SetConfig+0x348>
 800520a:	2304      	movs	r3, #4
 800520c:	77fb      	strb	r3, [r7, #31]
 800520e:	e045      	b.n	800529c <UART_SetConfig+0x348>
 8005210:	2308      	movs	r3, #8
 8005212:	77fb      	strb	r3, [r7, #31]
 8005214:	e042      	b.n	800529c <UART_SetConfig+0x348>
 8005216:	bf00      	nop
 8005218:	efff69f3 	.word	0xefff69f3
 800521c:	40011000 	.word	0x40011000
 8005220:	40023800 	.word	0x40023800
 8005224:	40004400 	.word	0x40004400
 8005228:	40004800 	.word	0x40004800
 800522c:	40004c00 	.word	0x40004c00
 8005230:	40005000 	.word	0x40005000
 8005234:	40011400 	.word	0x40011400
 8005238:	40007800 	.word	0x40007800
 800523c:	2310      	movs	r3, #16
 800523e:	77fb      	strb	r3, [r7, #31]
 8005240:	e02c      	b.n	800529c <UART_SetConfig+0x348>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a72      	ldr	r2, [pc, #456]	@ (8005410 <UART_SetConfig+0x4bc>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d125      	bne.n	8005298 <UART_SetConfig+0x344>
 800524c:	4b71      	ldr	r3, [pc, #452]	@ (8005414 <UART_SetConfig+0x4c0>)
 800524e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005252:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005256:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800525a:	d017      	beq.n	800528c <UART_SetConfig+0x338>
 800525c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005260:	d817      	bhi.n	8005292 <UART_SetConfig+0x33e>
 8005262:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005266:	d00b      	beq.n	8005280 <UART_SetConfig+0x32c>
 8005268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800526c:	d811      	bhi.n	8005292 <UART_SetConfig+0x33e>
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <UART_SetConfig+0x326>
 8005272:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005276:	d006      	beq.n	8005286 <UART_SetConfig+0x332>
 8005278:	e00b      	b.n	8005292 <UART_SetConfig+0x33e>
 800527a:	2300      	movs	r3, #0
 800527c:	77fb      	strb	r3, [r7, #31]
 800527e:	e00d      	b.n	800529c <UART_SetConfig+0x348>
 8005280:	2302      	movs	r3, #2
 8005282:	77fb      	strb	r3, [r7, #31]
 8005284:	e00a      	b.n	800529c <UART_SetConfig+0x348>
 8005286:	2304      	movs	r3, #4
 8005288:	77fb      	strb	r3, [r7, #31]
 800528a:	e007      	b.n	800529c <UART_SetConfig+0x348>
 800528c:	2308      	movs	r3, #8
 800528e:	77fb      	strb	r3, [r7, #31]
 8005290:	e004      	b.n	800529c <UART_SetConfig+0x348>
 8005292:	2310      	movs	r3, #16
 8005294:	77fb      	strb	r3, [r7, #31]
 8005296:	e001      	b.n	800529c <UART_SetConfig+0x348>
 8005298:	2310      	movs	r3, #16
 800529a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052a4:	d15b      	bne.n	800535e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80052a6:	7ffb      	ldrb	r3, [r7, #31]
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d828      	bhi.n	80052fe <UART_SetConfig+0x3aa>
 80052ac:	a201      	add	r2, pc, #4	@ (adr r2, 80052b4 <UART_SetConfig+0x360>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	080052d9 	.word	0x080052d9
 80052b8:	080052e1 	.word	0x080052e1
 80052bc:	080052e9 	.word	0x080052e9
 80052c0:	080052ff 	.word	0x080052ff
 80052c4:	080052ef 	.word	0x080052ef
 80052c8:	080052ff 	.word	0x080052ff
 80052cc:	080052ff 	.word	0x080052ff
 80052d0:	080052ff 	.word	0x080052ff
 80052d4:	080052f7 	.word	0x080052f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052d8:	f7ff f92a 	bl	8004530 <HAL_RCC_GetPCLK1Freq>
 80052dc:	61b8      	str	r0, [r7, #24]
        break;
 80052de:	e013      	b.n	8005308 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052e0:	f7ff f93a 	bl	8004558 <HAL_RCC_GetPCLK2Freq>
 80052e4:	61b8      	str	r0, [r7, #24]
        break;
 80052e6:	e00f      	b.n	8005308 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e8:	4b4b      	ldr	r3, [pc, #300]	@ (8005418 <UART_SetConfig+0x4c4>)
 80052ea:	61bb      	str	r3, [r7, #24]
        break;
 80052ec:	e00c      	b.n	8005308 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ee:	f7ff f84d 	bl	800438c <HAL_RCC_GetSysClockFreq>
 80052f2:	61b8      	str	r0, [r7, #24]
        break;
 80052f4:	e008      	b.n	8005308 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052fa:	61bb      	str	r3, [r7, #24]
        break;
 80052fc:	e004      	b.n	8005308 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	77bb      	strb	r3, [r7, #30]
        break;
 8005306:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d074      	beq.n	80053f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	005a      	lsls	r2, r3, #1
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	085b      	lsrs	r3, r3, #1
 8005318:	441a      	add	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005322:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	2b0f      	cmp	r3, #15
 8005328:	d916      	bls.n	8005358 <UART_SetConfig+0x404>
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005330:	d212      	bcs.n	8005358 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	b29b      	uxth	r3, r3
 8005336:	f023 030f 	bic.w	r3, r3, #15
 800533a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	085b      	lsrs	r3, r3, #1
 8005340:	b29b      	uxth	r3, r3
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	b29a      	uxth	r2, r3
 8005348:	89fb      	ldrh	r3, [r7, #14]
 800534a:	4313      	orrs	r3, r2
 800534c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	89fa      	ldrh	r2, [r7, #14]
 8005354:	60da      	str	r2, [r3, #12]
 8005356:	e04f      	b.n	80053f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	77bb      	strb	r3, [r7, #30]
 800535c:	e04c      	b.n	80053f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800535e:	7ffb      	ldrb	r3, [r7, #31]
 8005360:	2b08      	cmp	r3, #8
 8005362:	d828      	bhi.n	80053b6 <UART_SetConfig+0x462>
 8005364:	a201      	add	r2, pc, #4	@ (adr r2, 800536c <UART_SetConfig+0x418>)
 8005366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536a:	bf00      	nop
 800536c:	08005391 	.word	0x08005391
 8005370:	08005399 	.word	0x08005399
 8005374:	080053a1 	.word	0x080053a1
 8005378:	080053b7 	.word	0x080053b7
 800537c:	080053a7 	.word	0x080053a7
 8005380:	080053b7 	.word	0x080053b7
 8005384:	080053b7 	.word	0x080053b7
 8005388:	080053b7 	.word	0x080053b7
 800538c:	080053af 	.word	0x080053af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005390:	f7ff f8ce 	bl	8004530 <HAL_RCC_GetPCLK1Freq>
 8005394:	61b8      	str	r0, [r7, #24]
        break;
 8005396:	e013      	b.n	80053c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005398:	f7ff f8de 	bl	8004558 <HAL_RCC_GetPCLK2Freq>
 800539c:	61b8      	str	r0, [r7, #24]
        break;
 800539e:	e00f      	b.n	80053c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005418 <UART_SetConfig+0x4c4>)
 80053a2:	61bb      	str	r3, [r7, #24]
        break;
 80053a4:	e00c      	b.n	80053c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053a6:	f7fe fff1 	bl	800438c <HAL_RCC_GetSysClockFreq>
 80053aa:	61b8      	str	r0, [r7, #24]
        break;
 80053ac:	e008      	b.n	80053c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053b2:	61bb      	str	r3, [r7, #24]
        break;
 80053b4:	e004      	b.n	80053c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	77bb      	strb	r3, [r7, #30]
        break;
 80053be:	bf00      	nop
    }

    if (pclk != 0U)
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d018      	beq.n	80053f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	085a      	lsrs	r2, r3, #1
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	441a      	add	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	2b0f      	cmp	r3, #15
 80053de:	d909      	bls.n	80053f4 <UART_SetConfig+0x4a0>
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053e6:	d205      	bcs.n	80053f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	60da      	str	r2, [r3, #12]
 80053f2:	e001      	b.n	80053f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005404:	7fbb      	ldrb	r3, [r7, #30]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3720      	adds	r7, #32
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40007c00 	.word	0x40007c00
 8005414:	40023800 	.word	0x40023800
 8005418:	00f42400 	.word	0x00f42400

0800541c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005428:	f003 0308 	and.w	r3, r3, #8
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d01a      	beq.n	8005532 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005516:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800551a:	d10a      	bne.n	8005532 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	605a      	str	r2, [r3, #4]
  }
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08c      	sub	sp, #48	@ 0x30
 8005564:	af02      	add	r7, sp, #8
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005570:	f7fc fa68 	bl	8001a44 <HAL_GetTick>
 8005574:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0308 	and.w	r3, r3, #8
 8005580:	2b08      	cmp	r3, #8
 8005582:	d12e      	bne.n	80055e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005584:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558c:	2200      	movs	r2, #0
 800558e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f83b 	bl	800560e <UART_WaitOnFlagUntilTimeout>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d021      	beq.n	80055e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	e853 3f00 	ldrex	r3, [r3]
 80055aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055b2:	623b      	str	r3, [r7, #32]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	461a      	mov	r2, r3
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	61fb      	str	r3, [r7, #28]
 80055be:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c0:	69b9      	ldr	r1, [r7, #24]
 80055c2:	69fa      	ldr	r2, [r7, #28]
 80055c4:	e841 2300 	strex	r3, r2, [r1]
 80055c8:	617b      	str	r3, [r7, #20]
   return(result);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1e6      	bne.n	800559e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2220      	movs	r2, #32
 80055d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e011      	b.n	8005606 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2220      	movs	r2, #32
 80055e6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3728      	adds	r7, #40	@ 0x28
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	60f8      	str	r0, [r7, #12]
 8005616:	60b9      	str	r1, [r7, #8]
 8005618:	603b      	str	r3, [r7, #0]
 800561a:	4613      	mov	r3, r2
 800561c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800561e:	e04f      	b.n	80056c0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005626:	d04b      	beq.n	80056c0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005628:	f7fc fa0c 	bl	8001a44 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	429a      	cmp	r2, r3
 8005636:	d302      	bcc.n	800563e <UART_WaitOnFlagUntilTimeout+0x30>
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e04e      	b.n	80056e0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0304 	and.w	r3, r3, #4
 800564c:	2b00      	cmp	r3, #0
 800564e:	d037      	beq.n	80056c0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b80      	cmp	r3, #128	@ 0x80
 8005654:	d034      	beq.n	80056c0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2b40      	cmp	r3, #64	@ 0x40
 800565a:	d031      	beq.n	80056c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b08      	cmp	r3, #8
 8005668:	d110      	bne.n	800568c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2208      	movs	r2, #8
 8005670:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f000 f838 	bl	80056e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2208      	movs	r2, #8
 800567c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e029      	b.n	80056e0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005696:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800569a:	d111      	bne.n	80056c0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f000 f81e 	bl	80056e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2220      	movs	r2, #32
 80056b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e00f      	b.n	80056e0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	69da      	ldr	r2, [r3, #28]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	4013      	ands	r3, r2
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	bf0c      	ite	eq
 80056d0:	2301      	moveq	r3, #1
 80056d2:	2300      	movne	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	461a      	mov	r2, r3
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d0a0      	beq.n	8005620 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b095      	sub	sp, #84	@ 0x54
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005700:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005704:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800570e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005710:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005714:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800571c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e6      	bne.n	80056f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	3308      	adds	r3, #8
 8005728:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	61fb      	str	r3, [r7, #28]
   return(result);
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	f023 0301 	bic.w	r3, r3, #1
 8005738:	64bb      	str	r3, [r7, #72]	@ 0x48
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3308      	adds	r3, #8
 8005740:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005742:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005744:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005746:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005748:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800574a:	e841 2300 	strex	r3, r2, [r1]
 800574e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1e5      	bne.n	8005722 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800575a:	2b01      	cmp	r3, #1
 800575c:	d118      	bne.n	8005790 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	e853 3f00 	ldrex	r3, [r3]
 800576a:	60bb      	str	r3, [r7, #8]
   return(result);
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f023 0310 	bic.w	r3, r3, #16
 8005772:	647b      	str	r3, [r7, #68]	@ 0x44
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	461a      	mov	r2, r3
 800577a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800577c:	61bb      	str	r3, [r7, #24]
 800577e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005780:	6979      	ldr	r1, [r7, #20]
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	e841 2300 	strex	r3, r2, [r1]
 8005788:	613b      	str	r3, [r7, #16]
   return(result);
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1e6      	bne.n	800575e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2220      	movs	r2, #32
 8005794:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80057a4:	bf00      	nop
 80057a6:	3754      	adds	r7, #84	@ 0x54
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <std>:
 80057b0:	2300      	movs	r3, #0
 80057b2:	b510      	push	{r4, lr}
 80057b4:	4604      	mov	r4, r0
 80057b6:	e9c0 3300 	strd	r3, r3, [r0]
 80057ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057be:	6083      	str	r3, [r0, #8]
 80057c0:	8181      	strh	r1, [r0, #12]
 80057c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80057c4:	81c2      	strh	r2, [r0, #14]
 80057c6:	6183      	str	r3, [r0, #24]
 80057c8:	4619      	mov	r1, r3
 80057ca:	2208      	movs	r2, #8
 80057cc:	305c      	adds	r0, #92	@ 0x5c
 80057ce:	f000 f8f4 	bl	80059ba <memset>
 80057d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005808 <std+0x58>)
 80057d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80057d6:	4b0d      	ldr	r3, [pc, #52]	@ (800580c <std+0x5c>)
 80057d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057da:	4b0d      	ldr	r3, [pc, #52]	@ (8005810 <std+0x60>)
 80057dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057de:	4b0d      	ldr	r3, [pc, #52]	@ (8005814 <std+0x64>)
 80057e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80057e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005818 <std+0x68>)
 80057e4:	6224      	str	r4, [r4, #32]
 80057e6:	429c      	cmp	r4, r3
 80057e8:	d006      	beq.n	80057f8 <std+0x48>
 80057ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057ee:	4294      	cmp	r4, r2
 80057f0:	d002      	beq.n	80057f8 <std+0x48>
 80057f2:	33d0      	adds	r3, #208	@ 0xd0
 80057f4:	429c      	cmp	r4, r3
 80057f6:	d105      	bne.n	8005804 <std+0x54>
 80057f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80057fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005800:	f000 b9b0 	b.w	8005b64 <__retarget_lock_init_recursive>
 8005804:	bd10      	pop	{r4, pc}
 8005806:	bf00      	nop
 8005808:	08005935 	.word	0x08005935
 800580c:	08005957 	.word	0x08005957
 8005810:	0800598f 	.word	0x0800598f
 8005814:	080059b3 	.word	0x080059b3
 8005818:	2000028c 	.word	0x2000028c

0800581c <stdio_exit_handler>:
 800581c:	4a02      	ldr	r2, [pc, #8]	@ (8005828 <stdio_exit_handler+0xc>)
 800581e:	4903      	ldr	r1, [pc, #12]	@ (800582c <stdio_exit_handler+0x10>)
 8005820:	4803      	ldr	r0, [pc, #12]	@ (8005830 <stdio_exit_handler+0x14>)
 8005822:	f000 b869 	b.w	80058f8 <_fwalk_sglue>
 8005826:	bf00      	nop
 8005828:	20000010 	.word	0x20000010
 800582c:	08005ec1 	.word	0x08005ec1
 8005830:	20000020 	.word	0x20000020

08005834 <cleanup_stdio>:
 8005834:	6841      	ldr	r1, [r0, #4]
 8005836:	4b0c      	ldr	r3, [pc, #48]	@ (8005868 <cleanup_stdio+0x34>)
 8005838:	4299      	cmp	r1, r3
 800583a:	b510      	push	{r4, lr}
 800583c:	4604      	mov	r4, r0
 800583e:	d001      	beq.n	8005844 <cleanup_stdio+0x10>
 8005840:	f000 fb3e 	bl	8005ec0 <_fflush_r>
 8005844:	68a1      	ldr	r1, [r4, #8]
 8005846:	4b09      	ldr	r3, [pc, #36]	@ (800586c <cleanup_stdio+0x38>)
 8005848:	4299      	cmp	r1, r3
 800584a:	d002      	beq.n	8005852 <cleanup_stdio+0x1e>
 800584c:	4620      	mov	r0, r4
 800584e:	f000 fb37 	bl	8005ec0 <_fflush_r>
 8005852:	68e1      	ldr	r1, [r4, #12]
 8005854:	4b06      	ldr	r3, [pc, #24]	@ (8005870 <cleanup_stdio+0x3c>)
 8005856:	4299      	cmp	r1, r3
 8005858:	d004      	beq.n	8005864 <cleanup_stdio+0x30>
 800585a:	4620      	mov	r0, r4
 800585c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005860:	f000 bb2e 	b.w	8005ec0 <_fflush_r>
 8005864:	bd10      	pop	{r4, pc}
 8005866:	bf00      	nop
 8005868:	2000028c 	.word	0x2000028c
 800586c:	200002f4 	.word	0x200002f4
 8005870:	2000035c 	.word	0x2000035c

08005874 <global_stdio_init.part.0>:
 8005874:	b510      	push	{r4, lr}
 8005876:	4b0b      	ldr	r3, [pc, #44]	@ (80058a4 <global_stdio_init.part.0+0x30>)
 8005878:	4c0b      	ldr	r4, [pc, #44]	@ (80058a8 <global_stdio_init.part.0+0x34>)
 800587a:	4a0c      	ldr	r2, [pc, #48]	@ (80058ac <global_stdio_init.part.0+0x38>)
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	4620      	mov	r0, r4
 8005880:	2200      	movs	r2, #0
 8005882:	2104      	movs	r1, #4
 8005884:	f7ff ff94 	bl	80057b0 <std>
 8005888:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800588c:	2201      	movs	r2, #1
 800588e:	2109      	movs	r1, #9
 8005890:	f7ff ff8e 	bl	80057b0 <std>
 8005894:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005898:	2202      	movs	r2, #2
 800589a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800589e:	2112      	movs	r1, #18
 80058a0:	f7ff bf86 	b.w	80057b0 <std>
 80058a4:	200003c4 	.word	0x200003c4
 80058a8:	2000028c 	.word	0x2000028c
 80058ac:	0800581d 	.word	0x0800581d

080058b0 <__sfp_lock_acquire>:
 80058b0:	4801      	ldr	r0, [pc, #4]	@ (80058b8 <__sfp_lock_acquire+0x8>)
 80058b2:	f000 b958 	b.w	8005b66 <__retarget_lock_acquire_recursive>
 80058b6:	bf00      	nop
 80058b8:	200003cd 	.word	0x200003cd

080058bc <__sfp_lock_release>:
 80058bc:	4801      	ldr	r0, [pc, #4]	@ (80058c4 <__sfp_lock_release+0x8>)
 80058be:	f000 b953 	b.w	8005b68 <__retarget_lock_release_recursive>
 80058c2:	bf00      	nop
 80058c4:	200003cd 	.word	0x200003cd

080058c8 <__sinit>:
 80058c8:	b510      	push	{r4, lr}
 80058ca:	4604      	mov	r4, r0
 80058cc:	f7ff fff0 	bl	80058b0 <__sfp_lock_acquire>
 80058d0:	6a23      	ldr	r3, [r4, #32]
 80058d2:	b11b      	cbz	r3, 80058dc <__sinit+0x14>
 80058d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058d8:	f7ff bff0 	b.w	80058bc <__sfp_lock_release>
 80058dc:	4b04      	ldr	r3, [pc, #16]	@ (80058f0 <__sinit+0x28>)
 80058de:	6223      	str	r3, [r4, #32]
 80058e0:	4b04      	ldr	r3, [pc, #16]	@ (80058f4 <__sinit+0x2c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1f5      	bne.n	80058d4 <__sinit+0xc>
 80058e8:	f7ff ffc4 	bl	8005874 <global_stdio_init.part.0>
 80058ec:	e7f2      	b.n	80058d4 <__sinit+0xc>
 80058ee:	bf00      	nop
 80058f0:	08005835 	.word	0x08005835
 80058f4:	200003c4 	.word	0x200003c4

080058f8 <_fwalk_sglue>:
 80058f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058fc:	4607      	mov	r7, r0
 80058fe:	4688      	mov	r8, r1
 8005900:	4614      	mov	r4, r2
 8005902:	2600      	movs	r6, #0
 8005904:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005908:	f1b9 0901 	subs.w	r9, r9, #1
 800590c:	d505      	bpl.n	800591a <_fwalk_sglue+0x22>
 800590e:	6824      	ldr	r4, [r4, #0]
 8005910:	2c00      	cmp	r4, #0
 8005912:	d1f7      	bne.n	8005904 <_fwalk_sglue+0xc>
 8005914:	4630      	mov	r0, r6
 8005916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800591a:	89ab      	ldrh	r3, [r5, #12]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d907      	bls.n	8005930 <_fwalk_sglue+0x38>
 8005920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005924:	3301      	adds	r3, #1
 8005926:	d003      	beq.n	8005930 <_fwalk_sglue+0x38>
 8005928:	4629      	mov	r1, r5
 800592a:	4638      	mov	r0, r7
 800592c:	47c0      	blx	r8
 800592e:	4306      	orrs	r6, r0
 8005930:	3568      	adds	r5, #104	@ 0x68
 8005932:	e7e9      	b.n	8005908 <_fwalk_sglue+0x10>

08005934 <__sread>:
 8005934:	b510      	push	{r4, lr}
 8005936:	460c      	mov	r4, r1
 8005938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800593c:	f000 f8c4 	bl	8005ac8 <_read_r>
 8005940:	2800      	cmp	r0, #0
 8005942:	bfab      	itete	ge
 8005944:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005946:	89a3      	ldrhlt	r3, [r4, #12]
 8005948:	181b      	addge	r3, r3, r0
 800594a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800594e:	bfac      	ite	ge
 8005950:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005952:	81a3      	strhlt	r3, [r4, #12]
 8005954:	bd10      	pop	{r4, pc}

08005956 <__swrite>:
 8005956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800595a:	461f      	mov	r7, r3
 800595c:	898b      	ldrh	r3, [r1, #12]
 800595e:	05db      	lsls	r3, r3, #23
 8005960:	4605      	mov	r5, r0
 8005962:	460c      	mov	r4, r1
 8005964:	4616      	mov	r6, r2
 8005966:	d505      	bpl.n	8005974 <__swrite+0x1e>
 8005968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800596c:	2302      	movs	r3, #2
 800596e:	2200      	movs	r2, #0
 8005970:	f000 f898 	bl	8005aa4 <_lseek_r>
 8005974:	89a3      	ldrh	r3, [r4, #12]
 8005976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800597a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800597e:	81a3      	strh	r3, [r4, #12]
 8005980:	4632      	mov	r2, r6
 8005982:	463b      	mov	r3, r7
 8005984:	4628      	mov	r0, r5
 8005986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800598a:	f000 b8af 	b.w	8005aec <_write_r>

0800598e <__sseek>:
 800598e:	b510      	push	{r4, lr}
 8005990:	460c      	mov	r4, r1
 8005992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005996:	f000 f885 	bl	8005aa4 <_lseek_r>
 800599a:	1c43      	adds	r3, r0, #1
 800599c:	89a3      	ldrh	r3, [r4, #12]
 800599e:	bf15      	itete	ne
 80059a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80059a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80059a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80059aa:	81a3      	strheq	r3, [r4, #12]
 80059ac:	bf18      	it	ne
 80059ae:	81a3      	strhne	r3, [r4, #12]
 80059b0:	bd10      	pop	{r4, pc}

080059b2 <__sclose>:
 80059b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059b6:	f000 b865 	b.w	8005a84 <_close_r>

080059ba <memset>:
 80059ba:	4402      	add	r2, r0
 80059bc:	4603      	mov	r3, r0
 80059be:	4293      	cmp	r3, r2
 80059c0:	d100      	bne.n	80059c4 <memset+0xa>
 80059c2:	4770      	bx	lr
 80059c4:	f803 1b01 	strb.w	r1, [r3], #1
 80059c8:	e7f9      	b.n	80059be <memset+0x4>
	...

080059cc <strtok>:
 80059cc:	4b16      	ldr	r3, [pc, #88]	@ (8005a28 <strtok+0x5c>)
 80059ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059d2:	681f      	ldr	r7, [r3, #0]
 80059d4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80059d6:	4605      	mov	r5, r0
 80059d8:	460e      	mov	r6, r1
 80059da:	b9ec      	cbnz	r4, 8005a18 <strtok+0x4c>
 80059dc:	2050      	movs	r0, #80	@ 0x50
 80059de:	f000 f935 	bl	8005c4c <malloc>
 80059e2:	4602      	mov	r2, r0
 80059e4:	6478      	str	r0, [r7, #68]	@ 0x44
 80059e6:	b920      	cbnz	r0, 80059f2 <strtok+0x26>
 80059e8:	4b10      	ldr	r3, [pc, #64]	@ (8005a2c <strtok+0x60>)
 80059ea:	4811      	ldr	r0, [pc, #68]	@ (8005a30 <strtok+0x64>)
 80059ec:	215b      	movs	r1, #91	@ 0x5b
 80059ee:	f000 f8c5 	bl	8005b7c <__assert_func>
 80059f2:	e9c0 4400 	strd	r4, r4, [r0]
 80059f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80059fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80059fe:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8005a02:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8005a06:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8005a0a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8005a0e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8005a12:	6184      	str	r4, [r0, #24]
 8005a14:	7704      	strb	r4, [r0, #28]
 8005a16:	6244      	str	r4, [r0, #36]	@ 0x24
 8005a18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a1a:	4631      	mov	r1, r6
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a24:	f000 b806 	b.w	8005a34 <__strtok_r>
 8005a28:	2000001c 	.word	0x2000001c
 8005a2c:	08006965 	.word	0x08006965
 8005a30:	0800697c 	.word	0x0800697c

08005a34 <__strtok_r>:
 8005a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a36:	4604      	mov	r4, r0
 8005a38:	b908      	cbnz	r0, 8005a3e <__strtok_r+0xa>
 8005a3a:	6814      	ldr	r4, [r2, #0]
 8005a3c:	b144      	cbz	r4, 8005a50 <__strtok_r+0x1c>
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005a44:	460f      	mov	r7, r1
 8005a46:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005a4a:	b91e      	cbnz	r6, 8005a54 <__strtok_r+0x20>
 8005a4c:	b965      	cbnz	r5, 8005a68 <__strtok_r+0x34>
 8005a4e:	6015      	str	r5, [r2, #0]
 8005a50:	2000      	movs	r0, #0
 8005a52:	e005      	b.n	8005a60 <__strtok_r+0x2c>
 8005a54:	42b5      	cmp	r5, r6
 8005a56:	d1f6      	bne.n	8005a46 <__strtok_r+0x12>
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1f0      	bne.n	8005a3e <__strtok_r+0xa>
 8005a5c:	6014      	str	r4, [r2, #0]
 8005a5e:	7003      	strb	r3, [r0, #0]
 8005a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a62:	461c      	mov	r4, r3
 8005a64:	e00c      	b.n	8005a80 <__strtok_r+0x4c>
 8005a66:	b915      	cbnz	r5, 8005a6e <__strtok_r+0x3a>
 8005a68:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005a6c:	460e      	mov	r6, r1
 8005a6e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005a72:	42ab      	cmp	r3, r5
 8005a74:	d1f7      	bne.n	8005a66 <__strtok_r+0x32>
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0f3      	beq.n	8005a62 <__strtok_r+0x2e>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005a80:	6014      	str	r4, [r2, #0]
 8005a82:	e7ed      	b.n	8005a60 <__strtok_r+0x2c>

08005a84 <_close_r>:
 8005a84:	b538      	push	{r3, r4, r5, lr}
 8005a86:	4d06      	ldr	r5, [pc, #24]	@ (8005aa0 <_close_r+0x1c>)
 8005a88:	2300      	movs	r3, #0
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	4608      	mov	r0, r1
 8005a8e:	602b      	str	r3, [r5, #0]
 8005a90:	f7fb fee2 	bl	8001858 <_close>
 8005a94:	1c43      	adds	r3, r0, #1
 8005a96:	d102      	bne.n	8005a9e <_close_r+0x1a>
 8005a98:	682b      	ldr	r3, [r5, #0]
 8005a9a:	b103      	cbz	r3, 8005a9e <_close_r+0x1a>
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	bd38      	pop	{r3, r4, r5, pc}
 8005aa0:	200003c8 	.word	0x200003c8

08005aa4 <_lseek_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	4d07      	ldr	r5, [pc, #28]	@ (8005ac4 <_lseek_r+0x20>)
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	4608      	mov	r0, r1
 8005aac:	4611      	mov	r1, r2
 8005aae:	2200      	movs	r2, #0
 8005ab0:	602a      	str	r2, [r5, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f7fb fef7 	bl	80018a6 <_lseek>
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	d102      	bne.n	8005ac2 <_lseek_r+0x1e>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	b103      	cbz	r3, 8005ac2 <_lseek_r+0x1e>
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	200003c8 	.word	0x200003c8

08005ac8 <_read_r>:
 8005ac8:	b538      	push	{r3, r4, r5, lr}
 8005aca:	4d07      	ldr	r5, [pc, #28]	@ (8005ae8 <_read_r+0x20>)
 8005acc:	4604      	mov	r4, r0
 8005ace:	4608      	mov	r0, r1
 8005ad0:	4611      	mov	r1, r2
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	602a      	str	r2, [r5, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f7fb fe85 	bl	80017e6 <_read>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d102      	bne.n	8005ae6 <_read_r+0x1e>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	b103      	cbz	r3, 8005ae6 <_read_r+0x1e>
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	bd38      	pop	{r3, r4, r5, pc}
 8005ae8:	200003c8 	.word	0x200003c8

08005aec <_write_r>:
 8005aec:	b538      	push	{r3, r4, r5, lr}
 8005aee:	4d07      	ldr	r5, [pc, #28]	@ (8005b0c <_write_r+0x20>)
 8005af0:	4604      	mov	r4, r0
 8005af2:	4608      	mov	r0, r1
 8005af4:	4611      	mov	r1, r2
 8005af6:	2200      	movs	r2, #0
 8005af8:	602a      	str	r2, [r5, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	f7fb fe90 	bl	8001820 <_write>
 8005b00:	1c43      	adds	r3, r0, #1
 8005b02:	d102      	bne.n	8005b0a <_write_r+0x1e>
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	b103      	cbz	r3, 8005b0a <_write_r+0x1e>
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	bd38      	pop	{r3, r4, r5, pc}
 8005b0c:	200003c8 	.word	0x200003c8

08005b10 <__errno>:
 8005b10:	4b01      	ldr	r3, [pc, #4]	@ (8005b18 <__errno+0x8>)
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	2000001c 	.word	0x2000001c

08005b1c <__libc_init_array>:
 8005b1c:	b570      	push	{r4, r5, r6, lr}
 8005b1e:	4d0d      	ldr	r5, [pc, #52]	@ (8005b54 <__libc_init_array+0x38>)
 8005b20:	4c0d      	ldr	r4, [pc, #52]	@ (8005b58 <__libc_init_array+0x3c>)
 8005b22:	1b64      	subs	r4, r4, r5
 8005b24:	10a4      	asrs	r4, r4, #2
 8005b26:	2600      	movs	r6, #0
 8005b28:	42a6      	cmp	r6, r4
 8005b2a:	d109      	bne.n	8005b40 <__libc_init_array+0x24>
 8005b2c:	4d0b      	ldr	r5, [pc, #44]	@ (8005b5c <__libc_init_array+0x40>)
 8005b2e:	4c0c      	ldr	r4, [pc, #48]	@ (8005b60 <__libc_init_array+0x44>)
 8005b30:	f000 fe42 	bl	80067b8 <_init>
 8005b34:	1b64      	subs	r4, r4, r5
 8005b36:	10a4      	asrs	r4, r4, #2
 8005b38:	2600      	movs	r6, #0
 8005b3a:	42a6      	cmp	r6, r4
 8005b3c:	d105      	bne.n	8005b4a <__libc_init_array+0x2e>
 8005b3e:	bd70      	pop	{r4, r5, r6, pc}
 8005b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b44:	4798      	blx	r3
 8005b46:	3601      	adds	r6, #1
 8005b48:	e7ee      	b.n	8005b28 <__libc_init_array+0xc>
 8005b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b4e:	4798      	blx	r3
 8005b50:	3601      	adds	r6, #1
 8005b52:	e7f2      	b.n	8005b3a <__libc_init_array+0x1e>
 8005b54:	08006a50 	.word	0x08006a50
 8005b58:	08006a50 	.word	0x08006a50
 8005b5c:	08006a50 	.word	0x08006a50
 8005b60:	08006a54 	.word	0x08006a54

08005b64 <__retarget_lock_init_recursive>:
 8005b64:	4770      	bx	lr

08005b66 <__retarget_lock_acquire_recursive>:
 8005b66:	4770      	bx	lr

08005b68 <__retarget_lock_release_recursive>:
 8005b68:	4770      	bx	lr

08005b6a <strcpy>:
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b70:	f803 2b01 	strb.w	r2, [r3], #1
 8005b74:	2a00      	cmp	r2, #0
 8005b76:	d1f9      	bne.n	8005b6c <strcpy+0x2>
 8005b78:	4770      	bx	lr
	...

08005b7c <__assert_func>:
 8005b7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b7e:	4614      	mov	r4, r2
 8005b80:	461a      	mov	r2, r3
 8005b82:	4b09      	ldr	r3, [pc, #36]	@ (8005ba8 <__assert_func+0x2c>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4605      	mov	r5, r0
 8005b88:	68d8      	ldr	r0, [r3, #12]
 8005b8a:	b954      	cbnz	r4, 8005ba2 <__assert_func+0x26>
 8005b8c:	4b07      	ldr	r3, [pc, #28]	@ (8005bac <__assert_func+0x30>)
 8005b8e:	461c      	mov	r4, r3
 8005b90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005b94:	9100      	str	r1, [sp, #0]
 8005b96:	462b      	mov	r3, r5
 8005b98:	4905      	ldr	r1, [pc, #20]	@ (8005bb0 <__assert_func+0x34>)
 8005b9a:	f000 f9b9 	bl	8005f10 <fiprintf>
 8005b9e:	f000 f9d9 	bl	8005f54 <abort>
 8005ba2:	4b04      	ldr	r3, [pc, #16]	@ (8005bb4 <__assert_func+0x38>)
 8005ba4:	e7f4      	b.n	8005b90 <__assert_func+0x14>
 8005ba6:	bf00      	nop
 8005ba8:	2000001c 	.word	0x2000001c
 8005bac:	08006a11 	.word	0x08006a11
 8005bb0:	080069e3 	.word	0x080069e3
 8005bb4:	080069d6 	.word	0x080069d6

08005bb8 <_free_r>:
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	4605      	mov	r5, r0
 8005bbc:	2900      	cmp	r1, #0
 8005bbe:	d041      	beq.n	8005c44 <_free_r+0x8c>
 8005bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bc4:	1f0c      	subs	r4, r1, #4
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	bfb8      	it	lt
 8005bca:	18e4      	addlt	r4, r4, r3
 8005bcc:	f000 f8e8 	bl	8005da0 <__malloc_lock>
 8005bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c48 <_free_r+0x90>)
 8005bd2:	6813      	ldr	r3, [r2, #0]
 8005bd4:	b933      	cbnz	r3, 8005be4 <_free_r+0x2c>
 8005bd6:	6063      	str	r3, [r4, #4]
 8005bd8:	6014      	str	r4, [r2, #0]
 8005bda:	4628      	mov	r0, r5
 8005bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005be0:	f000 b8e4 	b.w	8005dac <__malloc_unlock>
 8005be4:	42a3      	cmp	r3, r4
 8005be6:	d908      	bls.n	8005bfa <_free_r+0x42>
 8005be8:	6820      	ldr	r0, [r4, #0]
 8005bea:	1821      	adds	r1, r4, r0
 8005bec:	428b      	cmp	r3, r1
 8005bee:	bf01      	itttt	eq
 8005bf0:	6819      	ldreq	r1, [r3, #0]
 8005bf2:	685b      	ldreq	r3, [r3, #4]
 8005bf4:	1809      	addeq	r1, r1, r0
 8005bf6:	6021      	streq	r1, [r4, #0]
 8005bf8:	e7ed      	b.n	8005bd6 <_free_r+0x1e>
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	b10b      	cbz	r3, 8005c04 <_free_r+0x4c>
 8005c00:	42a3      	cmp	r3, r4
 8005c02:	d9fa      	bls.n	8005bfa <_free_r+0x42>
 8005c04:	6811      	ldr	r1, [r2, #0]
 8005c06:	1850      	adds	r0, r2, r1
 8005c08:	42a0      	cmp	r0, r4
 8005c0a:	d10b      	bne.n	8005c24 <_free_r+0x6c>
 8005c0c:	6820      	ldr	r0, [r4, #0]
 8005c0e:	4401      	add	r1, r0
 8005c10:	1850      	adds	r0, r2, r1
 8005c12:	4283      	cmp	r3, r0
 8005c14:	6011      	str	r1, [r2, #0]
 8005c16:	d1e0      	bne.n	8005bda <_free_r+0x22>
 8005c18:	6818      	ldr	r0, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	6053      	str	r3, [r2, #4]
 8005c1e:	4408      	add	r0, r1
 8005c20:	6010      	str	r0, [r2, #0]
 8005c22:	e7da      	b.n	8005bda <_free_r+0x22>
 8005c24:	d902      	bls.n	8005c2c <_free_r+0x74>
 8005c26:	230c      	movs	r3, #12
 8005c28:	602b      	str	r3, [r5, #0]
 8005c2a:	e7d6      	b.n	8005bda <_free_r+0x22>
 8005c2c:	6820      	ldr	r0, [r4, #0]
 8005c2e:	1821      	adds	r1, r4, r0
 8005c30:	428b      	cmp	r3, r1
 8005c32:	bf04      	itt	eq
 8005c34:	6819      	ldreq	r1, [r3, #0]
 8005c36:	685b      	ldreq	r3, [r3, #4]
 8005c38:	6063      	str	r3, [r4, #4]
 8005c3a:	bf04      	itt	eq
 8005c3c:	1809      	addeq	r1, r1, r0
 8005c3e:	6021      	streq	r1, [r4, #0]
 8005c40:	6054      	str	r4, [r2, #4]
 8005c42:	e7ca      	b.n	8005bda <_free_r+0x22>
 8005c44:	bd38      	pop	{r3, r4, r5, pc}
 8005c46:	bf00      	nop
 8005c48:	200003d4 	.word	0x200003d4

08005c4c <malloc>:
 8005c4c:	4b02      	ldr	r3, [pc, #8]	@ (8005c58 <malloc+0xc>)
 8005c4e:	4601      	mov	r1, r0
 8005c50:	6818      	ldr	r0, [r3, #0]
 8005c52:	f000 b825 	b.w	8005ca0 <_malloc_r>
 8005c56:	bf00      	nop
 8005c58:	2000001c 	.word	0x2000001c

08005c5c <sbrk_aligned>:
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	4e0f      	ldr	r6, [pc, #60]	@ (8005c9c <sbrk_aligned+0x40>)
 8005c60:	460c      	mov	r4, r1
 8005c62:	6831      	ldr	r1, [r6, #0]
 8005c64:	4605      	mov	r5, r0
 8005c66:	b911      	cbnz	r1, 8005c6e <sbrk_aligned+0x12>
 8005c68:	f000 f964 	bl	8005f34 <_sbrk_r>
 8005c6c:	6030      	str	r0, [r6, #0]
 8005c6e:	4621      	mov	r1, r4
 8005c70:	4628      	mov	r0, r5
 8005c72:	f000 f95f 	bl	8005f34 <_sbrk_r>
 8005c76:	1c43      	adds	r3, r0, #1
 8005c78:	d103      	bne.n	8005c82 <sbrk_aligned+0x26>
 8005c7a:	f04f 34ff 	mov.w	r4, #4294967295
 8005c7e:	4620      	mov	r0, r4
 8005c80:	bd70      	pop	{r4, r5, r6, pc}
 8005c82:	1cc4      	adds	r4, r0, #3
 8005c84:	f024 0403 	bic.w	r4, r4, #3
 8005c88:	42a0      	cmp	r0, r4
 8005c8a:	d0f8      	beq.n	8005c7e <sbrk_aligned+0x22>
 8005c8c:	1a21      	subs	r1, r4, r0
 8005c8e:	4628      	mov	r0, r5
 8005c90:	f000 f950 	bl	8005f34 <_sbrk_r>
 8005c94:	3001      	adds	r0, #1
 8005c96:	d1f2      	bne.n	8005c7e <sbrk_aligned+0x22>
 8005c98:	e7ef      	b.n	8005c7a <sbrk_aligned+0x1e>
 8005c9a:	bf00      	nop
 8005c9c:	200003d0 	.word	0x200003d0

08005ca0 <_malloc_r>:
 8005ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ca4:	1ccd      	adds	r5, r1, #3
 8005ca6:	f025 0503 	bic.w	r5, r5, #3
 8005caa:	3508      	adds	r5, #8
 8005cac:	2d0c      	cmp	r5, #12
 8005cae:	bf38      	it	cc
 8005cb0:	250c      	movcc	r5, #12
 8005cb2:	2d00      	cmp	r5, #0
 8005cb4:	4606      	mov	r6, r0
 8005cb6:	db01      	blt.n	8005cbc <_malloc_r+0x1c>
 8005cb8:	42a9      	cmp	r1, r5
 8005cba:	d904      	bls.n	8005cc6 <_malloc_r+0x26>
 8005cbc:	230c      	movs	r3, #12
 8005cbe:	6033      	str	r3, [r6, #0]
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d9c <_malloc_r+0xfc>
 8005cca:	f000 f869 	bl	8005da0 <__malloc_lock>
 8005cce:	f8d8 3000 	ldr.w	r3, [r8]
 8005cd2:	461c      	mov	r4, r3
 8005cd4:	bb44      	cbnz	r4, 8005d28 <_malloc_r+0x88>
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	4630      	mov	r0, r6
 8005cda:	f7ff ffbf 	bl	8005c5c <sbrk_aligned>
 8005cde:	1c43      	adds	r3, r0, #1
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	d158      	bne.n	8005d96 <_malloc_r+0xf6>
 8005ce4:	f8d8 4000 	ldr.w	r4, [r8]
 8005ce8:	4627      	mov	r7, r4
 8005cea:	2f00      	cmp	r7, #0
 8005cec:	d143      	bne.n	8005d76 <_malloc_r+0xd6>
 8005cee:	2c00      	cmp	r4, #0
 8005cf0:	d04b      	beq.n	8005d8a <_malloc_r+0xea>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	4639      	mov	r1, r7
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	eb04 0903 	add.w	r9, r4, r3
 8005cfc:	f000 f91a 	bl	8005f34 <_sbrk_r>
 8005d00:	4581      	cmp	r9, r0
 8005d02:	d142      	bne.n	8005d8a <_malloc_r+0xea>
 8005d04:	6821      	ldr	r1, [r4, #0]
 8005d06:	1a6d      	subs	r5, r5, r1
 8005d08:	4629      	mov	r1, r5
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	f7ff ffa6 	bl	8005c5c <sbrk_aligned>
 8005d10:	3001      	adds	r0, #1
 8005d12:	d03a      	beq.n	8005d8a <_malloc_r+0xea>
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	442b      	add	r3, r5
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	f8d8 3000 	ldr.w	r3, [r8]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	bb62      	cbnz	r2, 8005d7c <_malloc_r+0xdc>
 8005d22:	f8c8 7000 	str.w	r7, [r8]
 8005d26:	e00f      	b.n	8005d48 <_malloc_r+0xa8>
 8005d28:	6822      	ldr	r2, [r4, #0]
 8005d2a:	1b52      	subs	r2, r2, r5
 8005d2c:	d420      	bmi.n	8005d70 <_malloc_r+0xd0>
 8005d2e:	2a0b      	cmp	r2, #11
 8005d30:	d917      	bls.n	8005d62 <_malloc_r+0xc2>
 8005d32:	1961      	adds	r1, r4, r5
 8005d34:	42a3      	cmp	r3, r4
 8005d36:	6025      	str	r5, [r4, #0]
 8005d38:	bf18      	it	ne
 8005d3a:	6059      	strne	r1, [r3, #4]
 8005d3c:	6863      	ldr	r3, [r4, #4]
 8005d3e:	bf08      	it	eq
 8005d40:	f8c8 1000 	streq.w	r1, [r8]
 8005d44:	5162      	str	r2, [r4, r5]
 8005d46:	604b      	str	r3, [r1, #4]
 8005d48:	4630      	mov	r0, r6
 8005d4a:	f000 f82f 	bl	8005dac <__malloc_unlock>
 8005d4e:	f104 000b 	add.w	r0, r4, #11
 8005d52:	1d23      	adds	r3, r4, #4
 8005d54:	f020 0007 	bic.w	r0, r0, #7
 8005d58:	1ac2      	subs	r2, r0, r3
 8005d5a:	bf1c      	itt	ne
 8005d5c:	1a1b      	subne	r3, r3, r0
 8005d5e:	50a3      	strne	r3, [r4, r2]
 8005d60:	e7af      	b.n	8005cc2 <_malloc_r+0x22>
 8005d62:	6862      	ldr	r2, [r4, #4]
 8005d64:	42a3      	cmp	r3, r4
 8005d66:	bf0c      	ite	eq
 8005d68:	f8c8 2000 	streq.w	r2, [r8]
 8005d6c:	605a      	strne	r2, [r3, #4]
 8005d6e:	e7eb      	b.n	8005d48 <_malloc_r+0xa8>
 8005d70:	4623      	mov	r3, r4
 8005d72:	6864      	ldr	r4, [r4, #4]
 8005d74:	e7ae      	b.n	8005cd4 <_malloc_r+0x34>
 8005d76:	463c      	mov	r4, r7
 8005d78:	687f      	ldr	r7, [r7, #4]
 8005d7a:	e7b6      	b.n	8005cea <_malloc_r+0x4a>
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	42a3      	cmp	r3, r4
 8005d82:	d1fb      	bne.n	8005d7c <_malloc_r+0xdc>
 8005d84:	2300      	movs	r3, #0
 8005d86:	6053      	str	r3, [r2, #4]
 8005d88:	e7de      	b.n	8005d48 <_malloc_r+0xa8>
 8005d8a:	230c      	movs	r3, #12
 8005d8c:	6033      	str	r3, [r6, #0]
 8005d8e:	4630      	mov	r0, r6
 8005d90:	f000 f80c 	bl	8005dac <__malloc_unlock>
 8005d94:	e794      	b.n	8005cc0 <_malloc_r+0x20>
 8005d96:	6005      	str	r5, [r0, #0]
 8005d98:	e7d6      	b.n	8005d48 <_malloc_r+0xa8>
 8005d9a:	bf00      	nop
 8005d9c:	200003d4 	.word	0x200003d4

08005da0 <__malloc_lock>:
 8005da0:	4801      	ldr	r0, [pc, #4]	@ (8005da8 <__malloc_lock+0x8>)
 8005da2:	f7ff bee0 	b.w	8005b66 <__retarget_lock_acquire_recursive>
 8005da6:	bf00      	nop
 8005da8:	200003cc 	.word	0x200003cc

08005dac <__malloc_unlock>:
 8005dac:	4801      	ldr	r0, [pc, #4]	@ (8005db4 <__malloc_unlock+0x8>)
 8005dae:	f7ff bedb 	b.w	8005b68 <__retarget_lock_release_recursive>
 8005db2:	bf00      	nop
 8005db4:	200003cc 	.word	0x200003cc

08005db8 <__sflush_r>:
 8005db8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dc0:	0716      	lsls	r6, r2, #28
 8005dc2:	4605      	mov	r5, r0
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	d454      	bmi.n	8005e72 <__sflush_r+0xba>
 8005dc8:	684b      	ldr	r3, [r1, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	dc02      	bgt.n	8005dd4 <__sflush_r+0x1c>
 8005dce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	dd48      	ble.n	8005e66 <__sflush_r+0xae>
 8005dd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005dd6:	2e00      	cmp	r6, #0
 8005dd8:	d045      	beq.n	8005e66 <__sflush_r+0xae>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005de0:	682f      	ldr	r7, [r5, #0]
 8005de2:	6a21      	ldr	r1, [r4, #32]
 8005de4:	602b      	str	r3, [r5, #0]
 8005de6:	d030      	beq.n	8005e4a <__sflush_r+0x92>
 8005de8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005dea:	89a3      	ldrh	r3, [r4, #12]
 8005dec:	0759      	lsls	r1, r3, #29
 8005dee:	d505      	bpl.n	8005dfc <__sflush_r+0x44>
 8005df0:	6863      	ldr	r3, [r4, #4]
 8005df2:	1ad2      	subs	r2, r2, r3
 8005df4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005df6:	b10b      	cbz	r3, 8005dfc <__sflush_r+0x44>
 8005df8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005dfa:	1ad2      	subs	r2, r2, r3
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e00:	6a21      	ldr	r1, [r4, #32]
 8005e02:	4628      	mov	r0, r5
 8005e04:	47b0      	blx	r6
 8005e06:	1c43      	adds	r3, r0, #1
 8005e08:	89a3      	ldrh	r3, [r4, #12]
 8005e0a:	d106      	bne.n	8005e1a <__sflush_r+0x62>
 8005e0c:	6829      	ldr	r1, [r5, #0]
 8005e0e:	291d      	cmp	r1, #29
 8005e10:	d82b      	bhi.n	8005e6a <__sflush_r+0xb2>
 8005e12:	4a2a      	ldr	r2, [pc, #168]	@ (8005ebc <__sflush_r+0x104>)
 8005e14:	410a      	asrs	r2, r1
 8005e16:	07d6      	lsls	r6, r2, #31
 8005e18:	d427      	bmi.n	8005e6a <__sflush_r+0xb2>
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	6062      	str	r2, [r4, #4]
 8005e1e:	04d9      	lsls	r1, r3, #19
 8005e20:	6922      	ldr	r2, [r4, #16]
 8005e22:	6022      	str	r2, [r4, #0]
 8005e24:	d504      	bpl.n	8005e30 <__sflush_r+0x78>
 8005e26:	1c42      	adds	r2, r0, #1
 8005e28:	d101      	bne.n	8005e2e <__sflush_r+0x76>
 8005e2a:	682b      	ldr	r3, [r5, #0]
 8005e2c:	b903      	cbnz	r3, 8005e30 <__sflush_r+0x78>
 8005e2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005e30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e32:	602f      	str	r7, [r5, #0]
 8005e34:	b1b9      	cbz	r1, 8005e66 <__sflush_r+0xae>
 8005e36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e3a:	4299      	cmp	r1, r3
 8005e3c:	d002      	beq.n	8005e44 <__sflush_r+0x8c>
 8005e3e:	4628      	mov	r0, r5
 8005e40:	f7ff feba 	bl	8005bb8 <_free_r>
 8005e44:	2300      	movs	r3, #0
 8005e46:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e48:	e00d      	b.n	8005e66 <__sflush_r+0xae>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	47b0      	blx	r6
 8005e50:	4602      	mov	r2, r0
 8005e52:	1c50      	adds	r0, r2, #1
 8005e54:	d1c9      	bne.n	8005dea <__sflush_r+0x32>
 8005e56:	682b      	ldr	r3, [r5, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d0c6      	beq.n	8005dea <__sflush_r+0x32>
 8005e5c:	2b1d      	cmp	r3, #29
 8005e5e:	d001      	beq.n	8005e64 <__sflush_r+0xac>
 8005e60:	2b16      	cmp	r3, #22
 8005e62:	d11e      	bne.n	8005ea2 <__sflush_r+0xea>
 8005e64:	602f      	str	r7, [r5, #0]
 8005e66:	2000      	movs	r0, #0
 8005e68:	e022      	b.n	8005eb0 <__sflush_r+0xf8>
 8005e6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e6e:	b21b      	sxth	r3, r3
 8005e70:	e01b      	b.n	8005eaa <__sflush_r+0xf2>
 8005e72:	690f      	ldr	r7, [r1, #16]
 8005e74:	2f00      	cmp	r7, #0
 8005e76:	d0f6      	beq.n	8005e66 <__sflush_r+0xae>
 8005e78:	0793      	lsls	r3, r2, #30
 8005e7a:	680e      	ldr	r6, [r1, #0]
 8005e7c:	bf08      	it	eq
 8005e7e:	694b      	ldreq	r3, [r1, #20]
 8005e80:	600f      	str	r7, [r1, #0]
 8005e82:	bf18      	it	ne
 8005e84:	2300      	movne	r3, #0
 8005e86:	eba6 0807 	sub.w	r8, r6, r7
 8005e8a:	608b      	str	r3, [r1, #8]
 8005e8c:	f1b8 0f00 	cmp.w	r8, #0
 8005e90:	dde9      	ble.n	8005e66 <__sflush_r+0xae>
 8005e92:	6a21      	ldr	r1, [r4, #32]
 8005e94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005e96:	4643      	mov	r3, r8
 8005e98:	463a      	mov	r2, r7
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	47b0      	blx	r6
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	dc08      	bgt.n	8005eb4 <__sflush_r+0xfc>
 8005ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ea6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005eaa:	81a3      	strh	r3, [r4, #12]
 8005eac:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eb4:	4407      	add	r7, r0
 8005eb6:	eba8 0800 	sub.w	r8, r8, r0
 8005eba:	e7e7      	b.n	8005e8c <__sflush_r+0xd4>
 8005ebc:	dfbffffe 	.word	0xdfbffffe

08005ec0 <_fflush_r>:
 8005ec0:	b538      	push	{r3, r4, r5, lr}
 8005ec2:	690b      	ldr	r3, [r1, #16]
 8005ec4:	4605      	mov	r5, r0
 8005ec6:	460c      	mov	r4, r1
 8005ec8:	b913      	cbnz	r3, 8005ed0 <_fflush_r+0x10>
 8005eca:	2500      	movs	r5, #0
 8005ecc:	4628      	mov	r0, r5
 8005ece:	bd38      	pop	{r3, r4, r5, pc}
 8005ed0:	b118      	cbz	r0, 8005eda <_fflush_r+0x1a>
 8005ed2:	6a03      	ldr	r3, [r0, #32]
 8005ed4:	b90b      	cbnz	r3, 8005eda <_fflush_r+0x1a>
 8005ed6:	f7ff fcf7 	bl	80058c8 <__sinit>
 8005eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0f3      	beq.n	8005eca <_fflush_r+0xa>
 8005ee2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ee4:	07d0      	lsls	r0, r2, #31
 8005ee6:	d404      	bmi.n	8005ef2 <_fflush_r+0x32>
 8005ee8:	0599      	lsls	r1, r3, #22
 8005eea:	d402      	bmi.n	8005ef2 <_fflush_r+0x32>
 8005eec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eee:	f7ff fe3a 	bl	8005b66 <__retarget_lock_acquire_recursive>
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	f7ff ff5f 	bl	8005db8 <__sflush_r>
 8005efa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005efc:	07da      	lsls	r2, r3, #31
 8005efe:	4605      	mov	r5, r0
 8005f00:	d4e4      	bmi.n	8005ecc <_fflush_r+0xc>
 8005f02:	89a3      	ldrh	r3, [r4, #12]
 8005f04:	059b      	lsls	r3, r3, #22
 8005f06:	d4e1      	bmi.n	8005ecc <_fflush_r+0xc>
 8005f08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f0a:	f7ff fe2d 	bl	8005b68 <__retarget_lock_release_recursive>
 8005f0e:	e7dd      	b.n	8005ecc <_fflush_r+0xc>

08005f10 <fiprintf>:
 8005f10:	b40e      	push	{r1, r2, r3}
 8005f12:	b503      	push	{r0, r1, lr}
 8005f14:	4601      	mov	r1, r0
 8005f16:	ab03      	add	r3, sp, #12
 8005f18:	4805      	ldr	r0, [pc, #20]	@ (8005f30 <fiprintf+0x20>)
 8005f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f1e:	6800      	ldr	r0, [r0, #0]
 8005f20:	9301      	str	r3, [sp, #4]
 8005f22:	f000 f847 	bl	8005fb4 <_vfiprintf_r>
 8005f26:	b002      	add	sp, #8
 8005f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f2c:	b003      	add	sp, #12
 8005f2e:	4770      	bx	lr
 8005f30:	2000001c 	.word	0x2000001c

08005f34 <_sbrk_r>:
 8005f34:	b538      	push	{r3, r4, r5, lr}
 8005f36:	4d06      	ldr	r5, [pc, #24]	@ (8005f50 <_sbrk_r+0x1c>)
 8005f38:	2300      	movs	r3, #0
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	4608      	mov	r0, r1
 8005f3e:	602b      	str	r3, [r5, #0]
 8005f40:	f7fb fcbe 	bl	80018c0 <_sbrk>
 8005f44:	1c43      	adds	r3, r0, #1
 8005f46:	d102      	bne.n	8005f4e <_sbrk_r+0x1a>
 8005f48:	682b      	ldr	r3, [r5, #0]
 8005f4a:	b103      	cbz	r3, 8005f4e <_sbrk_r+0x1a>
 8005f4c:	6023      	str	r3, [r4, #0]
 8005f4e:	bd38      	pop	{r3, r4, r5, pc}
 8005f50:	200003c8 	.word	0x200003c8

08005f54 <abort>:
 8005f54:	b508      	push	{r3, lr}
 8005f56:	2006      	movs	r0, #6
 8005f58:	f000 fb8e 	bl	8006678 <raise>
 8005f5c:	2001      	movs	r0, #1
 8005f5e:	f7fb fc37 	bl	80017d0 <_exit>

08005f62 <__sfputc_r>:
 8005f62:	6893      	ldr	r3, [r2, #8]
 8005f64:	3b01      	subs	r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	b410      	push	{r4}
 8005f6a:	6093      	str	r3, [r2, #8]
 8005f6c:	da08      	bge.n	8005f80 <__sfputc_r+0x1e>
 8005f6e:	6994      	ldr	r4, [r2, #24]
 8005f70:	42a3      	cmp	r3, r4
 8005f72:	db01      	blt.n	8005f78 <__sfputc_r+0x16>
 8005f74:	290a      	cmp	r1, #10
 8005f76:	d103      	bne.n	8005f80 <__sfputc_r+0x1e>
 8005f78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f7c:	f000 bac0 	b.w	8006500 <__swbuf_r>
 8005f80:	6813      	ldr	r3, [r2, #0]
 8005f82:	1c58      	adds	r0, r3, #1
 8005f84:	6010      	str	r0, [r2, #0]
 8005f86:	7019      	strb	r1, [r3, #0]
 8005f88:	4608      	mov	r0, r1
 8005f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <__sfputs_r>:
 8005f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f92:	4606      	mov	r6, r0
 8005f94:	460f      	mov	r7, r1
 8005f96:	4614      	mov	r4, r2
 8005f98:	18d5      	adds	r5, r2, r3
 8005f9a:	42ac      	cmp	r4, r5
 8005f9c:	d101      	bne.n	8005fa2 <__sfputs_r+0x12>
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	e007      	b.n	8005fb2 <__sfputs_r+0x22>
 8005fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fa6:	463a      	mov	r2, r7
 8005fa8:	4630      	mov	r0, r6
 8005faa:	f7ff ffda 	bl	8005f62 <__sfputc_r>
 8005fae:	1c43      	adds	r3, r0, #1
 8005fb0:	d1f3      	bne.n	8005f9a <__sfputs_r+0xa>
 8005fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005fb4 <_vfiprintf_r>:
 8005fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb8:	460d      	mov	r5, r1
 8005fba:	b09d      	sub	sp, #116	@ 0x74
 8005fbc:	4614      	mov	r4, r2
 8005fbe:	4698      	mov	r8, r3
 8005fc0:	4606      	mov	r6, r0
 8005fc2:	b118      	cbz	r0, 8005fcc <_vfiprintf_r+0x18>
 8005fc4:	6a03      	ldr	r3, [r0, #32]
 8005fc6:	b90b      	cbnz	r3, 8005fcc <_vfiprintf_r+0x18>
 8005fc8:	f7ff fc7e 	bl	80058c8 <__sinit>
 8005fcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005fce:	07d9      	lsls	r1, r3, #31
 8005fd0:	d405      	bmi.n	8005fde <_vfiprintf_r+0x2a>
 8005fd2:	89ab      	ldrh	r3, [r5, #12]
 8005fd4:	059a      	lsls	r2, r3, #22
 8005fd6:	d402      	bmi.n	8005fde <_vfiprintf_r+0x2a>
 8005fd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005fda:	f7ff fdc4 	bl	8005b66 <__retarget_lock_acquire_recursive>
 8005fde:	89ab      	ldrh	r3, [r5, #12]
 8005fe0:	071b      	lsls	r3, r3, #28
 8005fe2:	d501      	bpl.n	8005fe8 <_vfiprintf_r+0x34>
 8005fe4:	692b      	ldr	r3, [r5, #16]
 8005fe6:	b99b      	cbnz	r3, 8006010 <_vfiprintf_r+0x5c>
 8005fe8:	4629      	mov	r1, r5
 8005fea:	4630      	mov	r0, r6
 8005fec:	f000 fac6 	bl	800657c <__swsetup_r>
 8005ff0:	b170      	cbz	r0, 8006010 <_vfiprintf_r+0x5c>
 8005ff2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ff4:	07dc      	lsls	r4, r3, #31
 8005ff6:	d504      	bpl.n	8006002 <_vfiprintf_r+0x4e>
 8005ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffc:	b01d      	add	sp, #116	@ 0x74
 8005ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006002:	89ab      	ldrh	r3, [r5, #12]
 8006004:	0598      	lsls	r0, r3, #22
 8006006:	d4f7      	bmi.n	8005ff8 <_vfiprintf_r+0x44>
 8006008:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800600a:	f7ff fdad 	bl	8005b68 <__retarget_lock_release_recursive>
 800600e:	e7f3      	b.n	8005ff8 <_vfiprintf_r+0x44>
 8006010:	2300      	movs	r3, #0
 8006012:	9309      	str	r3, [sp, #36]	@ 0x24
 8006014:	2320      	movs	r3, #32
 8006016:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800601a:	f8cd 800c 	str.w	r8, [sp, #12]
 800601e:	2330      	movs	r3, #48	@ 0x30
 8006020:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80061d0 <_vfiprintf_r+0x21c>
 8006024:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006028:	f04f 0901 	mov.w	r9, #1
 800602c:	4623      	mov	r3, r4
 800602e:	469a      	mov	sl, r3
 8006030:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006034:	b10a      	cbz	r2, 800603a <_vfiprintf_r+0x86>
 8006036:	2a25      	cmp	r2, #37	@ 0x25
 8006038:	d1f9      	bne.n	800602e <_vfiprintf_r+0x7a>
 800603a:	ebba 0b04 	subs.w	fp, sl, r4
 800603e:	d00b      	beq.n	8006058 <_vfiprintf_r+0xa4>
 8006040:	465b      	mov	r3, fp
 8006042:	4622      	mov	r2, r4
 8006044:	4629      	mov	r1, r5
 8006046:	4630      	mov	r0, r6
 8006048:	f7ff ffa2 	bl	8005f90 <__sfputs_r>
 800604c:	3001      	adds	r0, #1
 800604e:	f000 80a7 	beq.w	80061a0 <_vfiprintf_r+0x1ec>
 8006052:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006054:	445a      	add	r2, fp
 8006056:	9209      	str	r2, [sp, #36]	@ 0x24
 8006058:	f89a 3000 	ldrb.w	r3, [sl]
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 809f 	beq.w	80061a0 <_vfiprintf_r+0x1ec>
 8006062:	2300      	movs	r3, #0
 8006064:	f04f 32ff 	mov.w	r2, #4294967295
 8006068:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800606c:	f10a 0a01 	add.w	sl, sl, #1
 8006070:	9304      	str	r3, [sp, #16]
 8006072:	9307      	str	r3, [sp, #28]
 8006074:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006078:	931a      	str	r3, [sp, #104]	@ 0x68
 800607a:	4654      	mov	r4, sl
 800607c:	2205      	movs	r2, #5
 800607e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006082:	4853      	ldr	r0, [pc, #332]	@ (80061d0 <_vfiprintf_r+0x21c>)
 8006084:	f7fa f8e4 	bl	8000250 <memchr>
 8006088:	9a04      	ldr	r2, [sp, #16]
 800608a:	b9d8      	cbnz	r0, 80060c4 <_vfiprintf_r+0x110>
 800608c:	06d1      	lsls	r1, r2, #27
 800608e:	bf44      	itt	mi
 8006090:	2320      	movmi	r3, #32
 8006092:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006096:	0713      	lsls	r3, r2, #28
 8006098:	bf44      	itt	mi
 800609a:	232b      	movmi	r3, #43	@ 0x2b
 800609c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060a0:	f89a 3000 	ldrb.w	r3, [sl]
 80060a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80060a6:	d015      	beq.n	80060d4 <_vfiprintf_r+0x120>
 80060a8:	9a07      	ldr	r2, [sp, #28]
 80060aa:	4654      	mov	r4, sl
 80060ac:	2000      	movs	r0, #0
 80060ae:	f04f 0c0a 	mov.w	ip, #10
 80060b2:	4621      	mov	r1, r4
 80060b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060b8:	3b30      	subs	r3, #48	@ 0x30
 80060ba:	2b09      	cmp	r3, #9
 80060bc:	d94b      	bls.n	8006156 <_vfiprintf_r+0x1a2>
 80060be:	b1b0      	cbz	r0, 80060ee <_vfiprintf_r+0x13a>
 80060c0:	9207      	str	r2, [sp, #28]
 80060c2:	e014      	b.n	80060ee <_vfiprintf_r+0x13a>
 80060c4:	eba0 0308 	sub.w	r3, r0, r8
 80060c8:	fa09 f303 	lsl.w	r3, r9, r3
 80060cc:	4313      	orrs	r3, r2
 80060ce:	9304      	str	r3, [sp, #16]
 80060d0:	46a2      	mov	sl, r4
 80060d2:	e7d2      	b.n	800607a <_vfiprintf_r+0xc6>
 80060d4:	9b03      	ldr	r3, [sp, #12]
 80060d6:	1d19      	adds	r1, r3, #4
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	9103      	str	r1, [sp, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	bfbb      	ittet	lt
 80060e0:	425b      	neglt	r3, r3
 80060e2:	f042 0202 	orrlt.w	r2, r2, #2
 80060e6:	9307      	strge	r3, [sp, #28]
 80060e8:	9307      	strlt	r3, [sp, #28]
 80060ea:	bfb8      	it	lt
 80060ec:	9204      	strlt	r2, [sp, #16]
 80060ee:	7823      	ldrb	r3, [r4, #0]
 80060f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80060f2:	d10a      	bne.n	800610a <_vfiprintf_r+0x156>
 80060f4:	7863      	ldrb	r3, [r4, #1]
 80060f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80060f8:	d132      	bne.n	8006160 <_vfiprintf_r+0x1ac>
 80060fa:	9b03      	ldr	r3, [sp, #12]
 80060fc:	1d1a      	adds	r2, r3, #4
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	9203      	str	r2, [sp, #12]
 8006102:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006106:	3402      	adds	r4, #2
 8006108:	9305      	str	r3, [sp, #20]
 800610a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80061e0 <_vfiprintf_r+0x22c>
 800610e:	7821      	ldrb	r1, [r4, #0]
 8006110:	2203      	movs	r2, #3
 8006112:	4650      	mov	r0, sl
 8006114:	f7fa f89c 	bl	8000250 <memchr>
 8006118:	b138      	cbz	r0, 800612a <_vfiprintf_r+0x176>
 800611a:	9b04      	ldr	r3, [sp, #16]
 800611c:	eba0 000a 	sub.w	r0, r0, sl
 8006120:	2240      	movs	r2, #64	@ 0x40
 8006122:	4082      	lsls	r2, r0
 8006124:	4313      	orrs	r3, r2
 8006126:	3401      	adds	r4, #1
 8006128:	9304      	str	r3, [sp, #16]
 800612a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800612e:	4829      	ldr	r0, [pc, #164]	@ (80061d4 <_vfiprintf_r+0x220>)
 8006130:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006134:	2206      	movs	r2, #6
 8006136:	f7fa f88b 	bl	8000250 <memchr>
 800613a:	2800      	cmp	r0, #0
 800613c:	d03f      	beq.n	80061be <_vfiprintf_r+0x20a>
 800613e:	4b26      	ldr	r3, [pc, #152]	@ (80061d8 <_vfiprintf_r+0x224>)
 8006140:	bb1b      	cbnz	r3, 800618a <_vfiprintf_r+0x1d6>
 8006142:	9b03      	ldr	r3, [sp, #12]
 8006144:	3307      	adds	r3, #7
 8006146:	f023 0307 	bic.w	r3, r3, #7
 800614a:	3308      	adds	r3, #8
 800614c:	9303      	str	r3, [sp, #12]
 800614e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006150:	443b      	add	r3, r7
 8006152:	9309      	str	r3, [sp, #36]	@ 0x24
 8006154:	e76a      	b.n	800602c <_vfiprintf_r+0x78>
 8006156:	fb0c 3202 	mla	r2, ip, r2, r3
 800615a:	460c      	mov	r4, r1
 800615c:	2001      	movs	r0, #1
 800615e:	e7a8      	b.n	80060b2 <_vfiprintf_r+0xfe>
 8006160:	2300      	movs	r3, #0
 8006162:	3401      	adds	r4, #1
 8006164:	9305      	str	r3, [sp, #20]
 8006166:	4619      	mov	r1, r3
 8006168:	f04f 0c0a 	mov.w	ip, #10
 800616c:	4620      	mov	r0, r4
 800616e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006172:	3a30      	subs	r2, #48	@ 0x30
 8006174:	2a09      	cmp	r2, #9
 8006176:	d903      	bls.n	8006180 <_vfiprintf_r+0x1cc>
 8006178:	2b00      	cmp	r3, #0
 800617a:	d0c6      	beq.n	800610a <_vfiprintf_r+0x156>
 800617c:	9105      	str	r1, [sp, #20]
 800617e:	e7c4      	b.n	800610a <_vfiprintf_r+0x156>
 8006180:	fb0c 2101 	mla	r1, ip, r1, r2
 8006184:	4604      	mov	r4, r0
 8006186:	2301      	movs	r3, #1
 8006188:	e7f0      	b.n	800616c <_vfiprintf_r+0x1b8>
 800618a:	ab03      	add	r3, sp, #12
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	462a      	mov	r2, r5
 8006190:	4b12      	ldr	r3, [pc, #72]	@ (80061dc <_vfiprintf_r+0x228>)
 8006192:	a904      	add	r1, sp, #16
 8006194:	4630      	mov	r0, r6
 8006196:	f3af 8000 	nop.w
 800619a:	4607      	mov	r7, r0
 800619c:	1c78      	adds	r0, r7, #1
 800619e:	d1d6      	bne.n	800614e <_vfiprintf_r+0x19a>
 80061a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061a2:	07d9      	lsls	r1, r3, #31
 80061a4:	d405      	bmi.n	80061b2 <_vfiprintf_r+0x1fe>
 80061a6:	89ab      	ldrh	r3, [r5, #12]
 80061a8:	059a      	lsls	r2, r3, #22
 80061aa:	d402      	bmi.n	80061b2 <_vfiprintf_r+0x1fe>
 80061ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061ae:	f7ff fcdb 	bl	8005b68 <__retarget_lock_release_recursive>
 80061b2:	89ab      	ldrh	r3, [r5, #12]
 80061b4:	065b      	lsls	r3, r3, #25
 80061b6:	f53f af1f 	bmi.w	8005ff8 <_vfiprintf_r+0x44>
 80061ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061bc:	e71e      	b.n	8005ffc <_vfiprintf_r+0x48>
 80061be:	ab03      	add	r3, sp, #12
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	462a      	mov	r2, r5
 80061c4:	4b05      	ldr	r3, [pc, #20]	@ (80061dc <_vfiprintf_r+0x228>)
 80061c6:	a904      	add	r1, sp, #16
 80061c8:	4630      	mov	r0, r6
 80061ca:	f000 f879 	bl	80062c0 <_printf_i>
 80061ce:	e7e4      	b.n	800619a <_vfiprintf_r+0x1e6>
 80061d0:	08006a12 	.word	0x08006a12
 80061d4:	08006a1c 	.word	0x08006a1c
 80061d8:	00000000 	.word	0x00000000
 80061dc:	08005f91 	.word	0x08005f91
 80061e0:	08006a18 	.word	0x08006a18

080061e4 <_printf_common>:
 80061e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061e8:	4616      	mov	r6, r2
 80061ea:	4698      	mov	r8, r3
 80061ec:	688a      	ldr	r2, [r1, #8]
 80061ee:	690b      	ldr	r3, [r1, #16]
 80061f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061f4:	4293      	cmp	r3, r2
 80061f6:	bfb8      	it	lt
 80061f8:	4613      	movlt	r3, r2
 80061fa:	6033      	str	r3, [r6, #0]
 80061fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006200:	4607      	mov	r7, r0
 8006202:	460c      	mov	r4, r1
 8006204:	b10a      	cbz	r2, 800620a <_printf_common+0x26>
 8006206:	3301      	adds	r3, #1
 8006208:	6033      	str	r3, [r6, #0]
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	0699      	lsls	r1, r3, #26
 800620e:	bf42      	ittt	mi
 8006210:	6833      	ldrmi	r3, [r6, #0]
 8006212:	3302      	addmi	r3, #2
 8006214:	6033      	strmi	r3, [r6, #0]
 8006216:	6825      	ldr	r5, [r4, #0]
 8006218:	f015 0506 	ands.w	r5, r5, #6
 800621c:	d106      	bne.n	800622c <_printf_common+0x48>
 800621e:	f104 0a19 	add.w	sl, r4, #25
 8006222:	68e3      	ldr	r3, [r4, #12]
 8006224:	6832      	ldr	r2, [r6, #0]
 8006226:	1a9b      	subs	r3, r3, r2
 8006228:	42ab      	cmp	r3, r5
 800622a:	dc26      	bgt.n	800627a <_printf_common+0x96>
 800622c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006230:	6822      	ldr	r2, [r4, #0]
 8006232:	3b00      	subs	r3, #0
 8006234:	bf18      	it	ne
 8006236:	2301      	movne	r3, #1
 8006238:	0692      	lsls	r2, r2, #26
 800623a:	d42b      	bmi.n	8006294 <_printf_common+0xb0>
 800623c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006240:	4641      	mov	r1, r8
 8006242:	4638      	mov	r0, r7
 8006244:	47c8      	blx	r9
 8006246:	3001      	adds	r0, #1
 8006248:	d01e      	beq.n	8006288 <_printf_common+0xa4>
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	6922      	ldr	r2, [r4, #16]
 800624e:	f003 0306 	and.w	r3, r3, #6
 8006252:	2b04      	cmp	r3, #4
 8006254:	bf02      	ittt	eq
 8006256:	68e5      	ldreq	r5, [r4, #12]
 8006258:	6833      	ldreq	r3, [r6, #0]
 800625a:	1aed      	subeq	r5, r5, r3
 800625c:	68a3      	ldr	r3, [r4, #8]
 800625e:	bf0c      	ite	eq
 8006260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006264:	2500      	movne	r5, #0
 8006266:	4293      	cmp	r3, r2
 8006268:	bfc4      	itt	gt
 800626a:	1a9b      	subgt	r3, r3, r2
 800626c:	18ed      	addgt	r5, r5, r3
 800626e:	2600      	movs	r6, #0
 8006270:	341a      	adds	r4, #26
 8006272:	42b5      	cmp	r5, r6
 8006274:	d11a      	bne.n	80062ac <_printf_common+0xc8>
 8006276:	2000      	movs	r0, #0
 8006278:	e008      	b.n	800628c <_printf_common+0xa8>
 800627a:	2301      	movs	r3, #1
 800627c:	4652      	mov	r2, sl
 800627e:	4641      	mov	r1, r8
 8006280:	4638      	mov	r0, r7
 8006282:	47c8      	blx	r9
 8006284:	3001      	adds	r0, #1
 8006286:	d103      	bne.n	8006290 <_printf_common+0xac>
 8006288:	f04f 30ff 	mov.w	r0, #4294967295
 800628c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006290:	3501      	adds	r5, #1
 8006292:	e7c6      	b.n	8006222 <_printf_common+0x3e>
 8006294:	18e1      	adds	r1, r4, r3
 8006296:	1c5a      	adds	r2, r3, #1
 8006298:	2030      	movs	r0, #48	@ 0x30
 800629a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800629e:	4422      	add	r2, r4
 80062a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80062a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80062a8:	3302      	adds	r3, #2
 80062aa:	e7c7      	b.n	800623c <_printf_common+0x58>
 80062ac:	2301      	movs	r3, #1
 80062ae:	4622      	mov	r2, r4
 80062b0:	4641      	mov	r1, r8
 80062b2:	4638      	mov	r0, r7
 80062b4:	47c8      	blx	r9
 80062b6:	3001      	adds	r0, #1
 80062b8:	d0e6      	beq.n	8006288 <_printf_common+0xa4>
 80062ba:	3601      	adds	r6, #1
 80062bc:	e7d9      	b.n	8006272 <_printf_common+0x8e>
	...

080062c0 <_printf_i>:
 80062c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062c4:	7e0f      	ldrb	r7, [r1, #24]
 80062c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062c8:	2f78      	cmp	r7, #120	@ 0x78
 80062ca:	4691      	mov	r9, r2
 80062cc:	4680      	mov	r8, r0
 80062ce:	460c      	mov	r4, r1
 80062d0:	469a      	mov	sl, r3
 80062d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062d6:	d807      	bhi.n	80062e8 <_printf_i+0x28>
 80062d8:	2f62      	cmp	r7, #98	@ 0x62
 80062da:	d80a      	bhi.n	80062f2 <_printf_i+0x32>
 80062dc:	2f00      	cmp	r7, #0
 80062de:	f000 80d2 	beq.w	8006486 <_printf_i+0x1c6>
 80062e2:	2f58      	cmp	r7, #88	@ 0x58
 80062e4:	f000 80b9 	beq.w	800645a <_printf_i+0x19a>
 80062e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80062f0:	e03a      	b.n	8006368 <_printf_i+0xa8>
 80062f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062f6:	2b15      	cmp	r3, #21
 80062f8:	d8f6      	bhi.n	80062e8 <_printf_i+0x28>
 80062fa:	a101      	add	r1, pc, #4	@ (adr r1, 8006300 <_printf_i+0x40>)
 80062fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006300:	08006359 	.word	0x08006359
 8006304:	0800636d 	.word	0x0800636d
 8006308:	080062e9 	.word	0x080062e9
 800630c:	080062e9 	.word	0x080062e9
 8006310:	080062e9 	.word	0x080062e9
 8006314:	080062e9 	.word	0x080062e9
 8006318:	0800636d 	.word	0x0800636d
 800631c:	080062e9 	.word	0x080062e9
 8006320:	080062e9 	.word	0x080062e9
 8006324:	080062e9 	.word	0x080062e9
 8006328:	080062e9 	.word	0x080062e9
 800632c:	0800646d 	.word	0x0800646d
 8006330:	08006397 	.word	0x08006397
 8006334:	08006427 	.word	0x08006427
 8006338:	080062e9 	.word	0x080062e9
 800633c:	080062e9 	.word	0x080062e9
 8006340:	0800648f 	.word	0x0800648f
 8006344:	080062e9 	.word	0x080062e9
 8006348:	08006397 	.word	0x08006397
 800634c:	080062e9 	.word	0x080062e9
 8006350:	080062e9 	.word	0x080062e9
 8006354:	0800642f 	.word	0x0800642f
 8006358:	6833      	ldr	r3, [r6, #0]
 800635a:	1d1a      	adds	r2, r3, #4
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6032      	str	r2, [r6, #0]
 8006360:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006364:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006368:	2301      	movs	r3, #1
 800636a:	e09d      	b.n	80064a8 <_printf_i+0x1e8>
 800636c:	6833      	ldr	r3, [r6, #0]
 800636e:	6820      	ldr	r0, [r4, #0]
 8006370:	1d19      	adds	r1, r3, #4
 8006372:	6031      	str	r1, [r6, #0]
 8006374:	0606      	lsls	r6, r0, #24
 8006376:	d501      	bpl.n	800637c <_printf_i+0xbc>
 8006378:	681d      	ldr	r5, [r3, #0]
 800637a:	e003      	b.n	8006384 <_printf_i+0xc4>
 800637c:	0645      	lsls	r5, r0, #25
 800637e:	d5fb      	bpl.n	8006378 <_printf_i+0xb8>
 8006380:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006384:	2d00      	cmp	r5, #0
 8006386:	da03      	bge.n	8006390 <_printf_i+0xd0>
 8006388:	232d      	movs	r3, #45	@ 0x2d
 800638a:	426d      	negs	r5, r5
 800638c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006390:	4859      	ldr	r0, [pc, #356]	@ (80064f8 <_printf_i+0x238>)
 8006392:	230a      	movs	r3, #10
 8006394:	e011      	b.n	80063ba <_printf_i+0xfa>
 8006396:	6821      	ldr	r1, [r4, #0]
 8006398:	6833      	ldr	r3, [r6, #0]
 800639a:	0608      	lsls	r0, r1, #24
 800639c:	f853 5b04 	ldr.w	r5, [r3], #4
 80063a0:	d402      	bmi.n	80063a8 <_printf_i+0xe8>
 80063a2:	0649      	lsls	r1, r1, #25
 80063a4:	bf48      	it	mi
 80063a6:	b2ad      	uxthmi	r5, r5
 80063a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80063aa:	4853      	ldr	r0, [pc, #332]	@ (80064f8 <_printf_i+0x238>)
 80063ac:	6033      	str	r3, [r6, #0]
 80063ae:	bf14      	ite	ne
 80063b0:	230a      	movne	r3, #10
 80063b2:	2308      	moveq	r3, #8
 80063b4:	2100      	movs	r1, #0
 80063b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80063ba:	6866      	ldr	r6, [r4, #4]
 80063bc:	60a6      	str	r6, [r4, #8]
 80063be:	2e00      	cmp	r6, #0
 80063c0:	bfa2      	ittt	ge
 80063c2:	6821      	ldrge	r1, [r4, #0]
 80063c4:	f021 0104 	bicge.w	r1, r1, #4
 80063c8:	6021      	strge	r1, [r4, #0]
 80063ca:	b90d      	cbnz	r5, 80063d0 <_printf_i+0x110>
 80063cc:	2e00      	cmp	r6, #0
 80063ce:	d04b      	beq.n	8006468 <_printf_i+0x1a8>
 80063d0:	4616      	mov	r6, r2
 80063d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80063d6:	fb03 5711 	mls	r7, r3, r1, r5
 80063da:	5dc7      	ldrb	r7, [r0, r7]
 80063dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063e0:	462f      	mov	r7, r5
 80063e2:	42bb      	cmp	r3, r7
 80063e4:	460d      	mov	r5, r1
 80063e6:	d9f4      	bls.n	80063d2 <_printf_i+0x112>
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	d10b      	bne.n	8006404 <_printf_i+0x144>
 80063ec:	6823      	ldr	r3, [r4, #0]
 80063ee:	07df      	lsls	r7, r3, #31
 80063f0:	d508      	bpl.n	8006404 <_printf_i+0x144>
 80063f2:	6923      	ldr	r3, [r4, #16]
 80063f4:	6861      	ldr	r1, [r4, #4]
 80063f6:	4299      	cmp	r1, r3
 80063f8:	bfde      	ittt	le
 80063fa:	2330      	movle	r3, #48	@ 0x30
 80063fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006400:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006404:	1b92      	subs	r2, r2, r6
 8006406:	6122      	str	r2, [r4, #16]
 8006408:	f8cd a000 	str.w	sl, [sp]
 800640c:	464b      	mov	r3, r9
 800640e:	aa03      	add	r2, sp, #12
 8006410:	4621      	mov	r1, r4
 8006412:	4640      	mov	r0, r8
 8006414:	f7ff fee6 	bl	80061e4 <_printf_common>
 8006418:	3001      	adds	r0, #1
 800641a:	d14a      	bne.n	80064b2 <_printf_i+0x1f2>
 800641c:	f04f 30ff 	mov.w	r0, #4294967295
 8006420:	b004      	add	sp, #16
 8006422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	f043 0320 	orr.w	r3, r3, #32
 800642c:	6023      	str	r3, [r4, #0]
 800642e:	4833      	ldr	r0, [pc, #204]	@ (80064fc <_printf_i+0x23c>)
 8006430:	2778      	movs	r7, #120	@ 0x78
 8006432:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	6831      	ldr	r1, [r6, #0]
 800643a:	061f      	lsls	r7, r3, #24
 800643c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006440:	d402      	bmi.n	8006448 <_printf_i+0x188>
 8006442:	065f      	lsls	r7, r3, #25
 8006444:	bf48      	it	mi
 8006446:	b2ad      	uxthmi	r5, r5
 8006448:	6031      	str	r1, [r6, #0]
 800644a:	07d9      	lsls	r1, r3, #31
 800644c:	bf44      	itt	mi
 800644e:	f043 0320 	orrmi.w	r3, r3, #32
 8006452:	6023      	strmi	r3, [r4, #0]
 8006454:	b11d      	cbz	r5, 800645e <_printf_i+0x19e>
 8006456:	2310      	movs	r3, #16
 8006458:	e7ac      	b.n	80063b4 <_printf_i+0xf4>
 800645a:	4827      	ldr	r0, [pc, #156]	@ (80064f8 <_printf_i+0x238>)
 800645c:	e7e9      	b.n	8006432 <_printf_i+0x172>
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	f023 0320 	bic.w	r3, r3, #32
 8006464:	6023      	str	r3, [r4, #0]
 8006466:	e7f6      	b.n	8006456 <_printf_i+0x196>
 8006468:	4616      	mov	r6, r2
 800646a:	e7bd      	b.n	80063e8 <_printf_i+0x128>
 800646c:	6833      	ldr	r3, [r6, #0]
 800646e:	6825      	ldr	r5, [r4, #0]
 8006470:	6961      	ldr	r1, [r4, #20]
 8006472:	1d18      	adds	r0, r3, #4
 8006474:	6030      	str	r0, [r6, #0]
 8006476:	062e      	lsls	r6, r5, #24
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	d501      	bpl.n	8006480 <_printf_i+0x1c0>
 800647c:	6019      	str	r1, [r3, #0]
 800647e:	e002      	b.n	8006486 <_printf_i+0x1c6>
 8006480:	0668      	lsls	r0, r5, #25
 8006482:	d5fb      	bpl.n	800647c <_printf_i+0x1bc>
 8006484:	8019      	strh	r1, [r3, #0]
 8006486:	2300      	movs	r3, #0
 8006488:	6123      	str	r3, [r4, #16]
 800648a:	4616      	mov	r6, r2
 800648c:	e7bc      	b.n	8006408 <_printf_i+0x148>
 800648e:	6833      	ldr	r3, [r6, #0]
 8006490:	1d1a      	adds	r2, r3, #4
 8006492:	6032      	str	r2, [r6, #0]
 8006494:	681e      	ldr	r6, [r3, #0]
 8006496:	6862      	ldr	r2, [r4, #4]
 8006498:	2100      	movs	r1, #0
 800649a:	4630      	mov	r0, r6
 800649c:	f7f9 fed8 	bl	8000250 <memchr>
 80064a0:	b108      	cbz	r0, 80064a6 <_printf_i+0x1e6>
 80064a2:	1b80      	subs	r0, r0, r6
 80064a4:	6060      	str	r0, [r4, #4]
 80064a6:	6863      	ldr	r3, [r4, #4]
 80064a8:	6123      	str	r3, [r4, #16]
 80064aa:	2300      	movs	r3, #0
 80064ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064b0:	e7aa      	b.n	8006408 <_printf_i+0x148>
 80064b2:	6923      	ldr	r3, [r4, #16]
 80064b4:	4632      	mov	r2, r6
 80064b6:	4649      	mov	r1, r9
 80064b8:	4640      	mov	r0, r8
 80064ba:	47d0      	blx	sl
 80064bc:	3001      	adds	r0, #1
 80064be:	d0ad      	beq.n	800641c <_printf_i+0x15c>
 80064c0:	6823      	ldr	r3, [r4, #0]
 80064c2:	079b      	lsls	r3, r3, #30
 80064c4:	d413      	bmi.n	80064ee <_printf_i+0x22e>
 80064c6:	68e0      	ldr	r0, [r4, #12]
 80064c8:	9b03      	ldr	r3, [sp, #12]
 80064ca:	4298      	cmp	r0, r3
 80064cc:	bfb8      	it	lt
 80064ce:	4618      	movlt	r0, r3
 80064d0:	e7a6      	b.n	8006420 <_printf_i+0x160>
 80064d2:	2301      	movs	r3, #1
 80064d4:	4632      	mov	r2, r6
 80064d6:	4649      	mov	r1, r9
 80064d8:	4640      	mov	r0, r8
 80064da:	47d0      	blx	sl
 80064dc:	3001      	adds	r0, #1
 80064de:	d09d      	beq.n	800641c <_printf_i+0x15c>
 80064e0:	3501      	adds	r5, #1
 80064e2:	68e3      	ldr	r3, [r4, #12]
 80064e4:	9903      	ldr	r1, [sp, #12]
 80064e6:	1a5b      	subs	r3, r3, r1
 80064e8:	42ab      	cmp	r3, r5
 80064ea:	dcf2      	bgt.n	80064d2 <_printf_i+0x212>
 80064ec:	e7eb      	b.n	80064c6 <_printf_i+0x206>
 80064ee:	2500      	movs	r5, #0
 80064f0:	f104 0619 	add.w	r6, r4, #25
 80064f4:	e7f5      	b.n	80064e2 <_printf_i+0x222>
 80064f6:	bf00      	nop
 80064f8:	08006a23 	.word	0x08006a23
 80064fc:	08006a34 	.word	0x08006a34

08006500 <__swbuf_r>:
 8006500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006502:	460e      	mov	r6, r1
 8006504:	4614      	mov	r4, r2
 8006506:	4605      	mov	r5, r0
 8006508:	b118      	cbz	r0, 8006512 <__swbuf_r+0x12>
 800650a:	6a03      	ldr	r3, [r0, #32]
 800650c:	b90b      	cbnz	r3, 8006512 <__swbuf_r+0x12>
 800650e:	f7ff f9db 	bl	80058c8 <__sinit>
 8006512:	69a3      	ldr	r3, [r4, #24]
 8006514:	60a3      	str	r3, [r4, #8]
 8006516:	89a3      	ldrh	r3, [r4, #12]
 8006518:	071a      	lsls	r2, r3, #28
 800651a:	d501      	bpl.n	8006520 <__swbuf_r+0x20>
 800651c:	6923      	ldr	r3, [r4, #16]
 800651e:	b943      	cbnz	r3, 8006532 <__swbuf_r+0x32>
 8006520:	4621      	mov	r1, r4
 8006522:	4628      	mov	r0, r5
 8006524:	f000 f82a 	bl	800657c <__swsetup_r>
 8006528:	b118      	cbz	r0, 8006532 <__swbuf_r+0x32>
 800652a:	f04f 37ff 	mov.w	r7, #4294967295
 800652e:	4638      	mov	r0, r7
 8006530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	6922      	ldr	r2, [r4, #16]
 8006536:	1a98      	subs	r0, r3, r2
 8006538:	6963      	ldr	r3, [r4, #20]
 800653a:	b2f6      	uxtb	r6, r6
 800653c:	4283      	cmp	r3, r0
 800653e:	4637      	mov	r7, r6
 8006540:	dc05      	bgt.n	800654e <__swbuf_r+0x4e>
 8006542:	4621      	mov	r1, r4
 8006544:	4628      	mov	r0, r5
 8006546:	f7ff fcbb 	bl	8005ec0 <_fflush_r>
 800654a:	2800      	cmp	r0, #0
 800654c:	d1ed      	bne.n	800652a <__swbuf_r+0x2a>
 800654e:	68a3      	ldr	r3, [r4, #8]
 8006550:	3b01      	subs	r3, #1
 8006552:	60a3      	str	r3, [r4, #8]
 8006554:	6823      	ldr	r3, [r4, #0]
 8006556:	1c5a      	adds	r2, r3, #1
 8006558:	6022      	str	r2, [r4, #0]
 800655a:	701e      	strb	r6, [r3, #0]
 800655c:	6962      	ldr	r2, [r4, #20]
 800655e:	1c43      	adds	r3, r0, #1
 8006560:	429a      	cmp	r2, r3
 8006562:	d004      	beq.n	800656e <__swbuf_r+0x6e>
 8006564:	89a3      	ldrh	r3, [r4, #12]
 8006566:	07db      	lsls	r3, r3, #31
 8006568:	d5e1      	bpl.n	800652e <__swbuf_r+0x2e>
 800656a:	2e0a      	cmp	r6, #10
 800656c:	d1df      	bne.n	800652e <__swbuf_r+0x2e>
 800656e:	4621      	mov	r1, r4
 8006570:	4628      	mov	r0, r5
 8006572:	f7ff fca5 	bl	8005ec0 <_fflush_r>
 8006576:	2800      	cmp	r0, #0
 8006578:	d0d9      	beq.n	800652e <__swbuf_r+0x2e>
 800657a:	e7d6      	b.n	800652a <__swbuf_r+0x2a>

0800657c <__swsetup_r>:
 800657c:	b538      	push	{r3, r4, r5, lr}
 800657e:	4b29      	ldr	r3, [pc, #164]	@ (8006624 <__swsetup_r+0xa8>)
 8006580:	4605      	mov	r5, r0
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	460c      	mov	r4, r1
 8006586:	b118      	cbz	r0, 8006590 <__swsetup_r+0x14>
 8006588:	6a03      	ldr	r3, [r0, #32]
 800658a:	b90b      	cbnz	r3, 8006590 <__swsetup_r+0x14>
 800658c:	f7ff f99c 	bl	80058c8 <__sinit>
 8006590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006594:	0719      	lsls	r1, r3, #28
 8006596:	d422      	bmi.n	80065de <__swsetup_r+0x62>
 8006598:	06da      	lsls	r2, r3, #27
 800659a:	d407      	bmi.n	80065ac <__swsetup_r+0x30>
 800659c:	2209      	movs	r2, #9
 800659e:	602a      	str	r2, [r5, #0]
 80065a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065a4:	81a3      	strh	r3, [r4, #12]
 80065a6:	f04f 30ff 	mov.w	r0, #4294967295
 80065aa:	e033      	b.n	8006614 <__swsetup_r+0x98>
 80065ac:	0758      	lsls	r0, r3, #29
 80065ae:	d512      	bpl.n	80065d6 <__swsetup_r+0x5a>
 80065b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065b2:	b141      	cbz	r1, 80065c6 <__swsetup_r+0x4a>
 80065b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80065b8:	4299      	cmp	r1, r3
 80065ba:	d002      	beq.n	80065c2 <__swsetup_r+0x46>
 80065bc:	4628      	mov	r0, r5
 80065be:	f7ff fafb 	bl	8005bb8 <_free_r>
 80065c2:	2300      	movs	r3, #0
 80065c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80065c6:	89a3      	ldrh	r3, [r4, #12]
 80065c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80065cc:	81a3      	strh	r3, [r4, #12]
 80065ce:	2300      	movs	r3, #0
 80065d0:	6063      	str	r3, [r4, #4]
 80065d2:	6923      	ldr	r3, [r4, #16]
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	89a3      	ldrh	r3, [r4, #12]
 80065d8:	f043 0308 	orr.w	r3, r3, #8
 80065dc:	81a3      	strh	r3, [r4, #12]
 80065de:	6923      	ldr	r3, [r4, #16]
 80065e0:	b94b      	cbnz	r3, 80065f6 <__swsetup_r+0x7a>
 80065e2:	89a3      	ldrh	r3, [r4, #12]
 80065e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80065e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065ec:	d003      	beq.n	80065f6 <__swsetup_r+0x7a>
 80065ee:	4621      	mov	r1, r4
 80065f0:	4628      	mov	r0, r5
 80065f2:	f000 f883 	bl	80066fc <__smakebuf_r>
 80065f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065fa:	f013 0201 	ands.w	r2, r3, #1
 80065fe:	d00a      	beq.n	8006616 <__swsetup_r+0x9a>
 8006600:	2200      	movs	r2, #0
 8006602:	60a2      	str	r2, [r4, #8]
 8006604:	6962      	ldr	r2, [r4, #20]
 8006606:	4252      	negs	r2, r2
 8006608:	61a2      	str	r2, [r4, #24]
 800660a:	6922      	ldr	r2, [r4, #16]
 800660c:	b942      	cbnz	r2, 8006620 <__swsetup_r+0xa4>
 800660e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006612:	d1c5      	bne.n	80065a0 <__swsetup_r+0x24>
 8006614:	bd38      	pop	{r3, r4, r5, pc}
 8006616:	0799      	lsls	r1, r3, #30
 8006618:	bf58      	it	pl
 800661a:	6962      	ldrpl	r2, [r4, #20]
 800661c:	60a2      	str	r2, [r4, #8]
 800661e:	e7f4      	b.n	800660a <__swsetup_r+0x8e>
 8006620:	2000      	movs	r0, #0
 8006622:	e7f7      	b.n	8006614 <__swsetup_r+0x98>
 8006624:	2000001c 	.word	0x2000001c

08006628 <_raise_r>:
 8006628:	291f      	cmp	r1, #31
 800662a:	b538      	push	{r3, r4, r5, lr}
 800662c:	4605      	mov	r5, r0
 800662e:	460c      	mov	r4, r1
 8006630:	d904      	bls.n	800663c <_raise_r+0x14>
 8006632:	2316      	movs	r3, #22
 8006634:	6003      	str	r3, [r0, #0]
 8006636:	f04f 30ff 	mov.w	r0, #4294967295
 800663a:	bd38      	pop	{r3, r4, r5, pc}
 800663c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800663e:	b112      	cbz	r2, 8006646 <_raise_r+0x1e>
 8006640:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006644:	b94b      	cbnz	r3, 800665a <_raise_r+0x32>
 8006646:	4628      	mov	r0, r5
 8006648:	f000 f830 	bl	80066ac <_getpid_r>
 800664c:	4622      	mov	r2, r4
 800664e:	4601      	mov	r1, r0
 8006650:	4628      	mov	r0, r5
 8006652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006656:	f000 b817 	b.w	8006688 <_kill_r>
 800665a:	2b01      	cmp	r3, #1
 800665c:	d00a      	beq.n	8006674 <_raise_r+0x4c>
 800665e:	1c59      	adds	r1, r3, #1
 8006660:	d103      	bne.n	800666a <_raise_r+0x42>
 8006662:	2316      	movs	r3, #22
 8006664:	6003      	str	r3, [r0, #0]
 8006666:	2001      	movs	r0, #1
 8006668:	e7e7      	b.n	800663a <_raise_r+0x12>
 800666a:	2100      	movs	r1, #0
 800666c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006670:	4620      	mov	r0, r4
 8006672:	4798      	blx	r3
 8006674:	2000      	movs	r0, #0
 8006676:	e7e0      	b.n	800663a <_raise_r+0x12>

08006678 <raise>:
 8006678:	4b02      	ldr	r3, [pc, #8]	@ (8006684 <raise+0xc>)
 800667a:	4601      	mov	r1, r0
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	f7ff bfd3 	b.w	8006628 <_raise_r>
 8006682:	bf00      	nop
 8006684:	2000001c 	.word	0x2000001c

08006688 <_kill_r>:
 8006688:	b538      	push	{r3, r4, r5, lr}
 800668a:	4d07      	ldr	r5, [pc, #28]	@ (80066a8 <_kill_r+0x20>)
 800668c:	2300      	movs	r3, #0
 800668e:	4604      	mov	r4, r0
 8006690:	4608      	mov	r0, r1
 8006692:	4611      	mov	r1, r2
 8006694:	602b      	str	r3, [r5, #0]
 8006696:	f7fb f88b 	bl	80017b0 <_kill>
 800669a:	1c43      	adds	r3, r0, #1
 800669c:	d102      	bne.n	80066a4 <_kill_r+0x1c>
 800669e:	682b      	ldr	r3, [r5, #0]
 80066a0:	b103      	cbz	r3, 80066a4 <_kill_r+0x1c>
 80066a2:	6023      	str	r3, [r4, #0]
 80066a4:	bd38      	pop	{r3, r4, r5, pc}
 80066a6:	bf00      	nop
 80066a8:	200003c8 	.word	0x200003c8

080066ac <_getpid_r>:
 80066ac:	f7fb b878 	b.w	80017a0 <_getpid>

080066b0 <__swhatbuf_r>:
 80066b0:	b570      	push	{r4, r5, r6, lr}
 80066b2:	460c      	mov	r4, r1
 80066b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b8:	2900      	cmp	r1, #0
 80066ba:	b096      	sub	sp, #88	@ 0x58
 80066bc:	4615      	mov	r5, r2
 80066be:	461e      	mov	r6, r3
 80066c0:	da0d      	bge.n	80066de <__swhatbuf_r+0x2e>
 80066c2:	89a3      	ldrh	r3, [r4, #12]
 80066c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80066c8:	f04f 0100 	mov.w	r1, #0
 80066cc:	bf14      	ite	ne
 80066ce:	2340      	movne	r3, #64	@ 0x40
 80066d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80066d4:	2000      	movs	r0, #0
 80066d6:	6031      	str	r1, [r6, #0]
 80066d8:	602b      	str	r3, [r5, #0]
 80066da:	b016      	add	sp, #88	@ 0x58
 80066dc:	bd70      	pop	{r4, r5, r6, pc}
 80066de:	466a      	mov	r2, sp
 80066e0:	f000 f848 	bl	8006774 <_fstat_r>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	dbec      	blt.n	80066c2 <__swhatbuf_r+0x12>
 80066e8:	9901      	ldr	r1, [sp, #4]
 80066ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80066ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80066f2:	4259      	negs	r1, r3
 80066f4:	4159      	adcs	r1, r3
 80066f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80066fa:	e7eb      	b.n	80066d4 <__swhatbuf_r+0x24>

080066fc <__smakebuf_r>:
 80066fc:	898b      	ldrh	r3, [r1, #12]
 80066fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006700:	079d      	lsls	r5, r3, #30
 8006702:	4606      	mov	r6, r0
 8006704:	460c      	mov	r4, r1
 8006706:	d507      	bpl.n	8006718 <__smakebuf_r+0x1c>
 8006708:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	6123      	str	r3, [r4, #16]
 8006710:	2301      	movs	r3, #1
 8006712:	6163      	str	r3, [r4, #20]
 8006714:	b003      	add	sp, #12
 8006716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006718:	ab01      	add	r3, sp, #4
 800671a:	466a      	mov	r2, sp
 800671c:	f7ff ffc8 	bl	80066b0 <__swhatbuf_r>
 8006720:	9f00      	ldr	r7, [sp, #0]
 8006722:	4605      	mov	r5, r0
 8006724:	4639      	mov	r1, r7
 8006726:	4630      	mov	r0, r6
 8006728:	f7ff faba 	bl	8005ca0 <_malloc_r>
 800672c:	b948      	cbnz	r0, 8006742 <__smakebuf_r+0x46>
 800672e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006732:	059a      	lsls	r2, r3, #22
 8006734:	d4ee      	bmi.n	8006714 <__smakebuf_r+0x18>
 8006736:	f023 0303 	bic.w	r3, r3, #3
 800673a:	f043 0302 	orr.w	r3, r3, #2
 800673e:	81a3      	strh	r3, [r4, #12]
 8006740:	e7e2      	b.n	8006708 <__smakebuf_r+0xc>
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	6020      	str	r0, [r4, #0]
 8006746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800674a:	81a3      	strh	r3, [r4, #12]
 800674c:	9b01      	ldr	r3, [sp, #4]
 800674e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006752:	b15b      	cbz	r3, 800676c <__smakebuf_r+0x70>
 8006754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006758:	4630      	mov	r0, r6
 800675a:	f000 f81d 	bl	8006798 <_isatty_r>
 800675e:	b128      	cbz	r0, 800676c <__smakebuf_r+0x70>
 8006760:	89a3      	ldrh	r3, [r4, #12]
 8006762:	f023 0303 	bic.w	r3, r3, #3
 8006766:	f043 0301 	orr.w	r3, r3, #1
 800676a:	81a3      	strh	r3, [r4, #12]
 800676c:	89a3      	ldrh	r3, [r4, #12]
 800676e:	431d      	orrs	r5, r3
 8006770:	81a5      	strh	r5, [r4, #12]
 8006772:	e7cf      	b.n	8006714 <__smakebuf_r+0x18>

08006774 <_fstat_r>:
 8006774:	b538      	push	{r3, r4, r5, lr}
 8006776:	4d07      	ldr	r5, [pc, #28]	@ (8006794 <_fstat_r+0x20>)
 8006778:	2300      	movs	r3, #0
 800677a:	4604      	mov	r4, r0
 800677c:	4608      	mov	r0, r1
 800677e:	4611      	mov	r1, r2
 8006780:	602b      	str	r3, [r5, #0]
 8006782:	f7fb f875 	bl	8001870 <_fstat>
 8006786:	1c43      	adds	r3, r0, #1
 8006788:	d102      	bne.n	8006790 <_fstat_r+0x1c>
 800678a:	682b      	ldr	r3, [r5, #0]
 800678c:	b103      	cbz	r3, 8006790 <_fstat_r+0x1c>
 800678e:	6023      	str	r3, [r4, #0]
 8006790:	bd38      	pop	{r3, r4, r5, pc}
 8006792:	bf00      	nop
 8006794:	200003c8 	.word	0x200003c8

08006798 <_isatty_r>:
 8006798:	b538      	push	{r3, r4, r5, lr}
 800679a:	4d06      	ldr	r5, [pc, #24]	@ (80067b4 <_isatty_r+0x1c>)
 800679c:	2300      	movs	r3, #0
 800679e:	4604      	mov	r4, r0
 80067a0:	4608      	mov	r0, r1
 80067a2:	602b      	str	r3, [r5, #0]
 80067a4:	f7fb f874 	bl	8001890 <_isatty>
 80067a8:	1c43      	adds	r3, r0, #1
 80067aa:	d102      	bne.n	80067b2 <_isatty_r+0x1a>
 80067ac:	682b      	ldr	r3, [r5, #0]
 80067ae:	b103      	cbz	r3, 80067b2 <_isatty_r+0x1a>
 80067b0:	6023      	str	r3, [r4, #0]
 80067b2:	bd38      	pop	{r3, r4, r5, pc}
 80067b4:	200003c8 	.word	0x200003c8

080067b8 <_init>:
 80067b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ba:	bf00      	nop
 80067bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067be:	bc08      	pop	{r3}
 80067c0:	469e      	mov	lr, r3
 80067c2:	4770      	bx	lr

080067c4 <_fini>:
 80067c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c6:	bf00      	nop
 80067c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ca:	bc08      	pop	{r3}
 80067cc:	469e      	mov	lr, r3
 80067ce:	4770      	bx	lr

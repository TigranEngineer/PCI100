
tyom_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030e4  080001e0  080001e0  000011e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080032c4  080032c4  000042c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003368  08003368  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003368  08003368  00004368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003370  08003370  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003370  08003370  00004370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003374  08003374  00004374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003378  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  2000000c  08003384  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  08003384  00005514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c695  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001acb  00000000  00000000  000116d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  000131a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007bd  00000000  00000000  00013b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021f5d  00000000  00000000  0001434d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e43b  00000000  00000000  000362aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d34cc  00000000  00000000  000446e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117bb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028d0  00000000  00000000  00117bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0011a4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080032ac 	.word	0x080032ac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000010 	.word	0x20000010
 800021c:	080032ac 	.word	0x080032ac

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr

08000244 <__aeabi_uldivmod>:
 8000244:	b953      	cbnz	r3, 800025c <__aeabi_uldivmod+0x18>
 8000246:	b94a      	cbnz	r2, 800025c <__aeabi_uldivmod+0x18>
 8000248:	2900      	cmp	r1, #0
 800024a:	bf08      	it	eq
 800024c:	2800      	cmpeq	r0, #0
 800024e:	bf1c      	itt	ne
 8000250:	f04f 31ff 	movne.w	r1, #4294967295
 8000254:	f04f 30ff 	movne.w	r0, #4294967295
 8000258:	f000 b96a 	b.w	8000530 <__aeabi_idiv0>
 800025c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000260:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4770      	bx	lr

08000274 <__udivmoddi4>:
 8000274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000278:	9d08      	ldr	r5, [sp, #32]
 800027a:	460c      	mov	r4, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14e      	bne.n	800031e <__udivmoddi4+0xaa>
 8000280:	4694      	mov	ip, r2
 8000282:	458c      	cmp	ip, r1
 8000284:	4686      	mov	lr, r0
 8000286:	fab2 f282 	clz	r2, r2
 800028a:	d962      	bls.n	8000352 <__udivmoddi4+0xde>
 800028c:	b14a      	cbz	r2, 80002a2 <__udivmoddi4+0x2e>
 800028e:	f1c2 0320 	rsb	r3, r2, #32
 8000292:	4091      	lsls	r1, r2
 8000294:	fa20 f303 	lsr.w	r3, r0, r3
 8000298:	fa0c fc02 	lsl.w	ip, ip, r2
 800029c:	4319      	orrs	r1, r3
 800029e:	fa00 fe02 	lsl.w	lr, r0, r2
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f f68c 	uxth.w	r6, ip
 80002aa:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b2:	fb07 1114 	mls	r1, r7, r4, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb04 f106 	mul.w	r1, r4, r6
 80002be:	4299      	cmp	r1, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x64>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ca:	f080 8112 	bcs.w	80004f2 <__udivmoddi4+0x27e>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 810f 	bls.w	80004f2 <__udivmoddi4+0x27e>
 80002d4:	3c02      	subs	r4, #2
 80002d6:	4463      	add	r3, ip
 80002d8:	1a59      	subs	r1, r3, r1
 80002da:	fa1f f38e 	uxth.w	r3, lr
 80002de:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e2:	fb07 1110 	mls	r1, r7, r0, r1
 80002e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ea:	fb00 f606 	mul.w	r6, r0, r6
 80002ee:	429e      	cmp	r6, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x94>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fa:	f080 80fc 	bcs.w	80004f6 <__udivmoddi4+0x282>
 80002fe:	429e      	cmp	r6, r3
 8000300:	f240 80f9 	bls.w	80004f6 <__udivmoddi4+0x282>
 8000304:	4463      	add	r3, ip
 8000306:	3802      	subs	r0, #2
 8000308:	1b9b      	subs	r3, r3, r6
 800030a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030e:	2100      	movs	r1, #0
 8000310:	b11d      	cbz	r5, 800031a <__udivmoddi4+0xa6>
 8000312:	40d3      	lsrs	r3, r2
 8000314:	2200      	movs	r2, #0
 8000316:	e9c5 3200 	strd	r3, r2, [r5]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d905      	bls.n	800032e <__udivmoddi4+0xba>
 8000322:	b10d      	cbz	r5, 8000328 <__udivmoddi4+0xb4>
 8000324:	e9c5 0100 	strd	r0, r1, [r5]
 8000328:	2100      	movs	r1, #0
 800032a:	4608      	mov	r0, r1
 800032c:	e7f5      	b.n	800031a <__udivmoddi4+0xa6>
 800032e:	fab3 f183 	clz	r1, r3
 8000332:	2900      	cmp	r1, #0
 8000334:	d146      	bne.n	80003c4 <__udivmoddi4+0x150>
 8000336:	42a3      	cmp	r3, r4
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xcc>
 800033a:	4290      	cmp	r0, r2
 800033c:	f0c0 80f0 	bcc.w	8000520 <__udivmoddi4+0x2ac>
 8000340:	1a86      	subs	r6, r0, r2
 8000342:	eb64 0303 	sbc.w	r3, r4, r3
 8000346:	2001      	movs	r0, #1
 8000348:	2d00      	cmp	r5, #0
 800034a:	d0e6      	beq.n	800031a <__udivmoddi4+0xa6>
 800034c:	e9c5 6300 	strd	r6, r3, [r5]
 8000350:	e7e3      	b.n	800031a <__udivmoddi4+0xa6>
 8000352:	2a00      	cmp	r2, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x204>
 8000358:	eba1 040c 	sub.w	r4, r1, ip
 800035c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000360:	fa1f f78c 	uxth.w	r7, ip
 8000364:	2101      	movs	r1, #1
 8000366:	fbb4 f6f8 	udiv	r6, r4, r8
 800036a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036e:	fb08 4416 	mls	r4, r8, r6, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb07 f006 	mul.w	r0, r7, r6
 800037a:	4298      	cmp	r0, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x11c>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f106 34ff 	add.w	r4, r6, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x11a>
 8000388:	4298      	cmp	r0, r3
 800038a:	f200 80cd 	bhi.w	8000528 <__udivmoddi4+0x2b4>
 800038e:	4626      	mov	r6, r4
 8000390:	1a1c      	subs	r4, r3, r0
 8000392:	fa1f f38e 	uxth.w	r3, lr
 8000396:	fbb4 f0f8 	udiv	r0, r4, r8
 800039a:	fb08 4410 	mls	r4, r8, r0, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb00 f707 	mul.w	r7, r0, r7
 80003a6:	429f      	cmp	r7, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x148>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f100 34ff 	add.w	r4, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x146>
 80003b4:	429f      	cmp	r7, r3
 80003b6:	f200 80b0 	bhi.w	800051a <__udivmoddi4+0x2a6>
 80003ba:	4620      	mov	r0, r4
 80003bc:	1bdb      	subs	r3, r3, r7
 80003be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003c2:	e7a5      	b.n	8000310 <__udivmoddi4+0x9c>
 80003c4:	f1c1 0620 	rsb	r6, r1, #32
 80003c8:	408b      	lsls	r3, r1
 80003ca:	fa22 f706 	lsr.w	r7, r2, r6
 80003ce:	431f      	orrs	r7, r3
 80003d0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d4:	fa04 f301 	lsl.w	r3, r4, r1
 80003d8:	ea43 030c 	orr.w	r3, r3, ip
 80003dc:	40f4      	lsrs	r4, r6
 80003de:	fa00 f801 	lsl.w	r8, r0, r1
 80003e2:	0c38      	lsrs	r0, r7, #16
 80003e4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ec:	fa1f fc87 	uxth.w	ip, r7
 80003f0:	fb00 441e 	mls	r4, r0, lr, r4
 80003f4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f8:	fb0e f90c 	mul.w	r9, lr, ip
 80003fc:	45a1      	cmp	r9, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	d90a      	bls.n	800041a <__udivmoddi4+0x1a6>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f10e 3aff 	add.w	sl, lr, #4294967295
 800040a:	f080 8084 	bcs.w	8000516 <__udivmoddi4+0x2a2>
 800040e:	45a1      	cmp	r9, r4
 8000410:	f240 8081 	bls.w	8000516 <__udivmoddi4+0x2a2>
 8000414:	f1ae 0e02 	sub.w	lr, lr, #2
 8000418:	443c      	add	r4, r7
 800041a:	eba4 0409 	sub.w	r4, r4, r9
 800041e:	fa1f f983 	uxth.w	r9, r3
 8000422:	fbb4 f3f0 	udiv	r3, r4, r0
 8000426:	fb00 4413 	mls	r4, r0, r3, r4
 800042a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000432:	45a4      	cmp	ip, r4
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x1d2>
 8000436:	193c      	adds	r4, r7, r4
 8000438:	f103 30ff 	add.w	r0, r3, #4294967295
 800043c:	d267      	bcs.n	800050e <__udivmoddi4+0x29a>
 800043e:	45a4      	cmp	ip, r4
 8000440:	d965      	bls.n	800050e <__udivmoddi4+0x29a>
 8000442:	3b02      	subs	r3, #2
 8000444:	443c      	add	r4, r7
 8000446:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800044a:	fba0 9302 	umull	r9, r3, r0, r2
 800044e:	eba4 040c 	sub.w	r4, r4, ip
 8000452:	429c      	cmp	r4, r3
 8000454:	46ce      	mov	lr, r9
 8000456:	469c      	mov	ip, r3
 8000458:	d351      	bcc.n	80004fe <__udivmoddi4+0x28a>
 800045a:	d04e      	beq.n	80004fa <__udivmoddi4+0x286>
 800045c:	b155      	cbz	r5, 8000474 <__udivmoddi4+0x200>
 800045e:	ebb8 030e 	subs.w	r3, r8, lr
 8000462:	eb64 040c 	sbc.w	r4, r4, ip
 8000466:	fa04 f606 	lsl.w	r6, r4, r6
 800046a:	40cb      	lsrs	r3, r1
 800046c:	431e      	orrs	r6, r3
 800046e:	40cc      	lsrs	r4, r1
 8000470:	e9c5 6400 	strd	r6, r4, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	e750      	b.n	800031a <__udivmoddi4+0xa6>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f103 	lsr.w	r1, r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa24 f303 	lsr.w	r3, r4, r3
 8000488:	4094      	lsls	r4, r2
 800048a:	430c      	orrs	r4, r1
 800048c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000490:	fa00 fe02 	lsl.w	lr, r0, r2
 8000494:	fa1f f78c 	uxth.w	r7, ip
 8000498:	fbb3 f0f8 	udiv	r0, r3, r8
 800049c:	fb08 3110 	mls	r1, r8, r0, r3
 80004a0:	0c23      	lsrs	r3, r4, #16
 80004a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a6:	fb00 f107 	mul.w	r1, r0, r7
 80004aa:	4299      	cmp	r1, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x24c>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b6:	d22c      	bcs.n	8000512 <__udivmoddi4+0x29e>
 80004b8:	4299      	cmp	r1, r3
 80004ba:	d92a      	bls.n	8000512 <__udivmoddi4+0x29e>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1a5b      	subs	r3, r3, r1
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c8:	fb08 3311 	mls	r3, r8, r1, r3
 80004cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d0:	fb01 f307 	mul.w	r3, r1, r7
 80004d4:	42a3      	cmp	r3, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x276>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f101 36ff 	add.w	r6, r1, #4294967295
 80004e0:	d213      	bcs.n	800050a <__udivmoddi4+0x296>
 80004e2:	42a3      	cmp	r3, r4
 80004e4:	d911      	bls.n	800050a <__udivmoddi4+0x296>
 80004e6:	3902      	subs	r1, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	1ae4      	subs	r4, r4, r3
 80004ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004f0:	e739      	b.n	8000366 <__udivmoddi4+0xf2>
 80004f2:	4604      	mov	r4, r0
 80004f4:	e6f0      	b.n	80002d8 <__udivmoddi4+0x64>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e706      	b.n	8000308 <__udivmoddi4+0x94>
 80004fa:	45c8      	cmp	r8, r9
 80004fc:	d2ae      	bcs.n	800045c <__udivmoddi4+0x1e8>
 80004fe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000502:	eb63 0c07 	sbc.w	ip, r3, r7
 8000506:	3801      	subs	r0, #1
 8000508:	e7a8      	b.n	800045c <__udivmoddi4+0x1e8>
 800050a:	4631      	mov	r1, r6
 800050c:	e7ed      	b.n	80004ea <__udivmoddi4+0x276>
 800050e:	4603      	mov	r3, r0
 8000510:	e799      	b.n	8000446 <__udivmoddi4+0x1d2>
 8000512:	4630      	mov	r0, r6
 8000514:	e7d4      	b.n	80004c0 <__udivmoddi4+0x24c>
 8000516:	46d6      	mov	lr, sl
 8000518:	e77f      	b.n	800041a <__udivmoddi4+0x1a6>
 800051a:	4463      	add	r3, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e74d      	b.n	80003bc <__udivmoddi4+0x148>
 8000520:	4606      	mov	r6, r0
 8000522:	4623      	mov	r3, r4
 8000524:	4608      	mov	r0, r1
 8000526:	e70f      	b.n	8000348 <__udivmoddi4+0xd4>
 8000528:	3e02      	subs	r6, #2
 800052a:	4463      	add	r3, ip
 800052c:	e730      	b.n	8000390 <__udivmoddi4+0x11c>
 800052e:	bf00      	nop

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b08a      	sub	sp, #40	@ 0x28
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int __attribute__((unused)) freq_arr[] = {
 800053a:	4b12      	ldr	r3, [pc, #72]	@ (8000584 <main+0x50>)
 800053c:	1d3c      	adds	r4, r7, #4
 800053e:	461d      	mov	r5, r3
 8000540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000548:	682b      	ldr	r3, [r5, #0]
 800054a:	6023      	str	r3, [r4, #0]
	};

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800054c:	f000 f982 	bl	8000854 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000550:	f000 fc15 	bl	8000d7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000554:	f000 f81c 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000558:	f000 f8e6 	bl	8000728 <MX_GPIO_Init>
  MX_I2C1_Init();
 800055c:	f000 f874 	bl	8000648 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000560:	f000 f8b2 	bl	80006c8 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    if (LED_MODE == LED_ON) {
 8000564:	4b08      	ldr	r3, [pc, #32]	@ (8000588 <main+0x54>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d107      	bne.n	800057c <main+0x48>
      blink_led(freq_arr, CFG_PIN_MAX + 1, BLINK_FREQ);
 800056c:	4b07      	ldr	r3, [pc, #28]	@ (800058c <main+0x58>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	b2da      	uxtb	r2, r3
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2109      	movs	r1, #9
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fac0 	bl	8000afc <blink_led>
    }

    start_cli();
 800057c:	f000 fb50 	bl	8000c20 <start_cli>
    if (LED_MODE == LED_ON) {
 8000580:	e7f0      	b.n	8000564 <main+0x30>
 8000582:	bf00      	nop
 8000584:	080032c4 	.word	0x080032c4
 8000588:	20000104 	.word	0x20000104
 800058c:	20000108 	.word	0x20000108

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	@ 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	@ 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f002 fe58 	bl	8003254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	4b22      	ldr	r3, [pc, #136]	@ (8000640 <SystemClock_Config+0xb0>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b8:	4a21      	ldr	r2, [pc, #132]	@ (8000640 <SystemClock_Config+0xb0>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000640 <SystemClock_Config+0xb0>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000644 <SystemClock_Config+0xb4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000644 <SystemClock_Config+0xb4>)
 80005d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b19      	ldr	r3, [pc, #100]	@ (8000644 <SystemClock_Config+0xb4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	2302      	movs	r3, #2
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	2301      	movs	r3, #1
 80005ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f0:	2310      	movs	r3, #16
 80005f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0320 	add.w	r3, r7, #32
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 f887 	bl	8001710 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000608:	f000 f950 	bl	80008ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f001 fb16 	bl	8001c58 <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000632:	f000 f93b 	bl	80008ac <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3750      	adds	r7, #80	@ 0x50
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800064c:	4b1b      	ldr	r3, [pc, #108]	@ (80006bc <MX_I2C1_Init+0x74>)
 800064e:	4a1c      	ldr	r2, [pc, #112]	@ (80006c0 <MX_I2C1_Init+0x78>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000652:	4b1a      	ldr	r3, [pc, #104]	@ (80006bc <MX_I2C1_Init+0x74>)
 8000654:	4a1b      	ldr	r2, [pc, #108]	@ (80006c4 <MX_I2C1_Init+0x7c>)
 8000656:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000658:	4b18      	ldr	r3, [pc, #96]	@ (80006bc <MX_I2C1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065e:	4b17      	ldr	r3, [pc, #92]	@ (80006bc <MX_I2C1_Init+0x74>)
 8000660:	2201      	movs	r2, #1
 8000662:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b15      	ldr	r3, [pc, #84]	@ (80006bc <MX_I2C1_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800066a:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <MX_I2C1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000670:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <MX_I2C1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000676:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <MX_I2C1_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067c:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <MX_I2C1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000682:	480e      	ldr	r0, [pc, #56]	@ (80006bc <MX_I2C1_Init+0x74>)
 8000684:	f000 ff10 	bl	80014a8 <HAL_I2C_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800068e:	f000 f90d 	bl	80008ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000692:	2100      	movs	r1, #0
 8000694:	4809      	ldr	r0, [pc, #36]	@ (80006bc <MX_I2C1_Init+0x74>)
 8000696:	f000 ffa3 	bl	80015e0 <HAL_I2CEx_ConfigAnalogFilter>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006a0:	f000 f904 	bl	80008ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006a4:	2100      	movs	r1, #0
 80006a6:	4805      	ldr	r0, [pc, #20]	@ (80006bc <MX_I2C1_Init+0x74>)
 80006a8:	f000 ffe5 	bl	8001676 <HAL_I2CEx_ConfigDigitalFilter>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006b2:	f000 f8fb 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000028 	.word	0x20000028
 80006c0:	40005400 	.word	0x40005400
 80006c4:	00303d5b 	.word	0x00303d5b

080006c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006cc:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <MX_USART1_UART_Init+0x58>)
 80006ce:	4a15      	ldr	r2, [pc, #84]	@ (8000724 <MX_USART1_UART_Init+0x5c>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006d2:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <MX_USART1_UART_Init+0x58>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_USART1_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <MX_USART1_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_USART1_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_USART1_UART_Init+0x58>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <MX_USART1_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_USART1_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <MX_USART1_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_USART1_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_USART1_UART_Init+0x58>)
 800070c:	f001 ffd4 	bl	80026b8 <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000716:	f000 f8c9 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000007c 	.word	0x2000007c
 8000724:	40011000 	.word	0x40011000

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	@ 0x28
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	4b41      	ldr	r3, [pc, #260]	@ (8000844 <MX_GPIO_Init+0x11c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a40      	ldr	r2, [pc, #256]	@ (8000844 <MX_GPIO_Init+0x11c>)
 8000744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b3e      	ldr	r3, [pc, #248]	@ (8000844 <MX_GPIO_Init+0x11c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	4b3b      	ldr	r3, [pc, #236]	@ (8000844 <MX_GPIO_Init+0x11c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a3a      	ldr	r2, [pc, #232]	@ (8000844 <MX_GPIO_Init+0x11c>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b38      	ldr	r3, [pc, #224]	@ (8000844 <MX_GPIO_Init+0x11c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b35      	ldr	r3, [pc, #212]	@ (8000844 <MX_GPIO_Init+0x11c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a34      	ldr	r2, [pc, #208]	@ (8000844 <MX_GPIO_Init+0x11c>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b32      	ldr	r3, [pc, #200]	@ (8000844 <MX_GPIO_Init+0x11c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	4b2f      	ldr	r3, [pc, #188]	@ (8000844 <MX_GPIO_Init+0x11c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a2e      	ldr	r2, [pc, #184]	@ (8000844 <MX_GPIO_Init+0x11c>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b2c      	ldr	r3, [pc, #176]	@ (8000844 <MX_GPIO_Init+0x11c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	210c      	movs	r1, #12
 80007a2:	4829      	ldr	r0, [pc, #164]	@ (8000848 <MX_GPIO_Init+0x120>)
 80007a4:	f000 fe66 	bl	8001474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_ACT_LED_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 80007ae:	4827      	ldr	r0, [pc, #156]	@ (800084c <MX_GPIO_Init+0x124>)
 80007b0:	f000 fe60 	bl	8001474 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007b4:	230c      	movs	r3, #12
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	481f      	ldr	r0, [pc, #124]	@ (8000848 <MX_GPIO_Init+0x120>)
 80007cc:	f000 fcb6 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80007d0:	23fe      	movs	r3, #254	@ 0xfe
 80007d2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d8:	2301      	movs	r3, #1
 80007da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	481b      	ldr	r0, [pc, #108]	@ (8000850 <MX_GPIO_Init+0x128>)
 80007e4:	f000 fcaa 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACT_LED_Pin */
  GPIO_InitStruct.Pin = MCU_ACT_LED_Pin;
 80007e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_ACT_LED_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	4812      	ldr	r0, [pc, #72]	@ (800084c <MX_GPIO_Init+0x124>)
 8000802:	f000 fc9b 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000806:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	480b      	ldr	r0, [pc, #44]	@ (8000848 <MX_GPIO_Init+0x120>)
 800081c:	f000 fc8e 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000820:	2310      	movs	r3, #16
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <MX_GPIO_Init+0x124>)
 8000838:	f000 fc80 	bl	800113c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800083c:	bf00      	nop
 800083e:	3728      	adds	r7, #40	@ 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40020800 	.word	0x40020800
 800084c:	40020400 	.word	0x40020400
 8000850:	40020000 	.word	0x40020000

08000854 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000866:	f000 fbf1 	bl	800104c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800086a:	2301      	movs	r3, #1
 800086c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800086e:	2300      	movs	r3, #0
 8000870:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000876:	231f      	movs	r3, #31
 8000878:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800087a:	2387      	movs	r3, #135	@ 0x87
 800087c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800087e:	2300      	movs	r3, #0
 8000880:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000882:	2300      	movs	r3, #0
 8000884:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000886:	2301      	movs	r3, #1
 8000888:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800088a:	2301      	movs	r3, #1
 800088c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800088e:	2300      	movs	r3, #0
 8000890:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000896:	463b      	mov	r3, r7
 8000898:	4618      	mov	r0, r3
 800089a:	f000 fc0f 	bl	80010bc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800089e:	2004      	movs	r0, #4
 80008a0:	f000 fbec 	bl	800107c <HAL_MPU_Enable>

}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <Error_Handler+0x8>

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <HAL_MspInit+0x44>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c2:	4a0e      	ldr	r2, [pc, #56]	@ (80008fc <HAL_MspInit+0x44>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ca:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <HAL_MspInit+0x44>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <HAL_MspInit+0x44>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008da:	4a08      	ldr	r2, [pc, #32]	@ (80008fc <HAL_MspInit+0x44>)
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008e2:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <HAL_MspInit+0x44>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b0aa      	sub	sp, #168	@ 0xa8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2280      	movs	r2, #128	@ 0x80
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f002 fc97 	bl	8003254 <memset>
  if(hi2c->Instance==I2C1)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a21      	ldr	r2, [pc, #132]	@ (80009b0 <HAL_I2C_MspInit+0xb0>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d13b      	bne.n	80009a8 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000930:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000934:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000936:	2300      	movs	r3, #0
 8000938:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4618      	mov	r0, r3
 8000940:	f001 fb70 	bl	8002024 <HAL_RCCEx_PeriphCLKConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800094a:	f7ff ffaf 	bl	80008ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <HAL_I2C_MspInit+0xb4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a18      	ldr	r2, [pc, #96]	@ (80009b4 <HAL_I2C_MspInit+0xb4>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b16      	ldr	r3, [pc, #88]	@ (80009b4 <HAL_I2C_MspInit+0xb4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000966:	23c0      	movs	r3, #192	@ 0xc0
 8000968:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800096c:	2312      	movs	r3, #18
 800096e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000978:	2303      	movs	r3, #3
 800097a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800097e:	2304      	movs	r3, #4
 8000980:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000988:	4619      	mov	r1, r3
 800098a:	480b      	ldr	r0, [pc, #44]	@ (80009b8 <HAL_I2C_MspInit+0xb8>)
 800098c:	f000 fbd6 	bl	800113c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000990:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <HAL_I2C_MspInit+0xb4>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000994:	4a07      	ldr	r2, [pc, #28]	@ (80009b4 <HAL_I2C_MspInit+0xb4>)
 8000996:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800099a:	6413      	str	r3, [r2, #64]	@ 0x40
 800099c:	4b05      	ldr	r3, [pc, #20]	@ (80009b4 <HAL_I2C_MspInit+0xb4>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80009a8:	bf00      	nop
 80009aa:	37a8      	adds	r7, #168	@ 0xa8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40005400 	.word	0x40005400
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020400 	.word	0x40020400

080009bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b0aa      	sub	sp, #168	@ 0xa8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2280      	movs	r2, #128	@ 0x80
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f002 fc39 	bl	8003254 <memset>
  if(huart->Instance==USART1)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a21      	ldr	r2, [pc, #132]	@ (8000a6c <HAL_UART_MspInit+0xb0>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d13b      	bne.n	8000a64 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009ec:	2340      	movs	r3, #64	@ 0x40
 80009ee:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009f0:	2300      	movs	r3, #0
 80009f2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 fb13 	bl	8002024 <HAL_RCCEx_PeriphCLKConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a04:	f7ff ff52 	bl	80008ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a08:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <HAL_UART_MspInit+0xb4>)
 8000a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0c:	4a18      	ldr	r2, [pc, #96]	@ (8000a70 <HAL_UART_MspInit+0xb4>)
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a14:	4b16      	ldr	r3, [pc, #88]	@ (8000a70 <HAL_UART_MspInit+0xb4>)
 8000a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a18:	f003 0310 	and.w	r3, r3, #16
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a20:	4b13      	ldr	r3, [pc, #76]	@ (8000a70 <HAL_UART_MspInit+0xb4>)
 8000a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a24:	4a12      	ldr	r2, [pc, #72]	@ (8000a70 <HAL_UART_MspInit+0xb4>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2c:	4b10      	ldr	r3, [pc, #64]	@ (8000a70 <HAL_UART_MspInit+0xb4>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a38:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a3c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a52:	2307      	movs	r3, #7
 8000a54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a58:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <HAL_UART_MspInit+0xb8>)
 8000a60:	f000 fb6c 	bl	800113c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a64:	bf00      	nop
 8000a66:	37a8      	adds	r7, #168	@ 0xa8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40011000 	.word	0x40011000
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020000 	.word	0x40020000

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <NMI_Handler+0x4>

08000a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <MemManage_Handler+0x4>

08000a90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <UsageFault_Handler+0x4>

08000aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ace:	f000 f993 	bl	8000df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <SystemInit+0x20>)
 8000ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ae2:	4a05      	ldr	r2, [pc, #20]	@ (8000af8 <SystemInit+0x20>)
 8000ae4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ae8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <blink_led>:
        HAL_UART_Transmit(&huart1, &rxbuf, 1, 1000);
    }
}

void blink_led(const uint32_t *freq_arr, const uint8_t freq_arr_size, const uint8_t num_cfg_on)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	70fb      	strb	r3, [r7, #3]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	70bb      	strb	r3, [r7, #2]
    if (num_cfg_on >= freq_arr_size) {
 8000b0c:	78ba      	ldrb	r2, [r7, #2]
 8000b0e:	78fb      	ldrb	r3, [r7, #3]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d230      	bcs.n	8000b76 <blink_led+0x7a>
        return;
    }
    switch (num_cfg_on)
 8000b14:	78bb      	ldrb	r3, [r7, #2]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d002      	beq.n	8000b20 <blink_led+0x24>
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d007      	beq.n	8000b2e <blink_led+0x32>
 8000b1e:	e00d      	b.n	8000b3c <blink_led+0x40>
    {
    case LED_ON:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b26:	4816      	ldr	r0, [pc, #88]	@ (8000b80 <blink_led+0x84>)
 8000b28:	f000 fca4 	bl	8001474 <HAL_GPIO_WritePin>
        break;
 8000b2c:	e024      	b.n	8000b78 <blink_led+0x7c>
    case LED_OFF:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b34:	4812      	ldr	r0, [pc, #72]	@ (8000b80 <blink_led+0x84>)
 8000b36:	f000 fc9d 	bl	8001474 <HAL_GPIO_WritePin>
        break;
 8000b3a:	e01d      	b.n	8000b78 <blink_led+0x7c>
    default:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b42:	480f      	ldr	r0, [pc, #60]	@ (8000b80 <blink_led+0x84>)
 8000b44:	f000 fc96 	bl	8001474 <HAL_GPIO_WritePin>
        HAL_Delay(freq_arr[num_cfg_on]);
 8000b48:	78bb      	ldrb	r3, [r7, #2]
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	4413      	add	r3, r2
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 f970 	bl	8000e38 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b5e:	4808      	ldr	r0, [pc, #32]	@ (8000b80 <blink_led+0x84>)
 8000b60:	f000 fc88 	bl	8001474 <HAL_GPIO_WritePin>
        HAL_Delay(freq_arr[num_cfg_on]);
 8000b64:	78bb      	ldrb	r3, [r7, #2]
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f962 	bl	8000e38 <HAL_Delay>
 8000b74:	e000      	b.n	8000b78 <blink_led+0x7c>
        return;
 8000b76:	bf00      	nop
    }
}
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40020400 	.word	0x40020400

08000b84 <prompt_nl>:
    input |= (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)) << 7);

    return input;
}

static void prompt_nl(void){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (const uint8_t *)"\r\n", 2, 1000);
 8000b88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	4903      	ldr	r1, [pc, #12]	@ (8000b9c <prompt_nl+0x18>)
 8000b90:	4803      	ldr	r0, [pc, #12]	@ (8000ba0 <prompt_nl+0x1c>)
 8000b92:	f001 fddf 	bl	8002754 <HAL_UART_Transmit>
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	080032e8 	.word	0x080032e8
 8000ba0:	2000007c 	.word	0x2000007c

08000ba4 <display_prompt>:

static void display_prompt(const char *msg) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	prompt_nl();
 8000bac:	f7ff ffea 	bl	8000b84 <prompt_nl>
    HAL_UART_Transmit(&huart1, (const uint8_t *)msg, (const uint16_t)strlen(msg), 1000);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff fb3f 	bl	8000234 <strlen>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	4804      	ldr	r0, [pc, #16]	@ (8000bd4 <display_prompt+0x30>)
 8000bc2:	f001 fdc7 	bl	8002754 <HAL_UART_Transmit>
    prompt_nl();
 8000bc6:	f7ff ffdd 	bl	8000b84 <prompt_nl>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	2000007c 	.word	0x2000007c

08000bd8 <flushbuf>:

static void flushbuf(uint8_t *buf, uint16_t *pos) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
    *pos = 0;
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	2200      	movs	r2, #0
 8000be6:	801a      	strh	r2, [r3, #0]
    memset(buf, 0, BUFFER_SIZE);
 8000be8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bec:	2100      	movs	r1, #0
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f002 fb30 	bl	8003254 <memset>
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <display_prompt_and_flush>:

static void display_prompt_and_flush(const char *msg, uint8_t *buf, uint16_t *pos) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
    display_prompt(msg);
 8000c08:	68f8      	ldr	r0, [r7, #12]
 8000c0a:	f7ff ffcb 	bl	8000ba4 <display_prompt>
    flushbuf(buf, pos);
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	68b8      	ldr	r0, [r7, #8]
 8000c12:	f7ff ffe1 	bl	8000bd8 <flushbuf>
}
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <start_cli>:


void start_cli(void) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
    
    static uint8_t buf[BUFFER_SIZE] = {0};
    static uint16_t pos = 0;

    if (HAL_OK == HAL_UART_Receive(&huart1, (buf + pos), 1, 1000)) {
 8000c24:	4b35      	ldr	r3, [pc, #212]	@ (8000cfc <start_cli+0xdc>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b35      	ldr	r3, [pc, #212]	@ (8000d00 <start_cli+0xe0>)
 8000c2c:	18d1      	adds	r1, r2, r3
 8000c2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c32:	2201      	movs	r2, #1
 8000c34:	4833      	ldr	r0, [pc, #204]	@ (8000d04 <start_cli+0xe4>)
 8000c36:	f001 fe16 	bl	8002866 <HAL_UART_Receive>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d15a      	bne.n	8000cf6 <start_cli+0xd6>

        if (!strcmp((const char*)buf, "help\r")) {
 8000c40:	4931      	ldr	r1, [pc, #196]	@ (8000d08 <start_cli+0xe8>)
 8000c42:	482f      	ldr	r0, [pc, #188]	@ (8000d00 <start_cli+0xe0>)
 8000c44:	f7ff faec 	bl	8000220 <strcmp>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d105      	bne.n	8000c5a <start_cli+0x3a>
            display_prompt_and_flush("led <on/off>", buf, &pos);
 8000c4e:	4a2b      	ldr	r2, [pc, #172]	@ (8000cfc <start_cli+0xdc>)
 8000c50:	492b      	ldr	r1, [pc, #172]	@ (8000d00 <start_cli+0xe0>)
 8000c52:	482e      	ldr	r0, [pc, #184]	@ (8000d0c <start_cli+0xec>)
 8000c54:	f7ff ffd2 	bl	8000bfc <display_prompt_and_flush>
    	} else {
            HAL_UART_Transmit(&huart1, (buf + pos), 1, 1000);
            ++pos;
        }
    }
}
 8000c58:	e04d      	b.n	8000cf6 <start_cli+0xd6>
        } else if (!strcmp((const char*)buf, "led on\r")) {
 8000c5a:	492d      	ldr	r1, [pc, #180]	@ (8000d10 <start_cli+0xf0>)
 8000c5c:	4828      	ldr	r0, [pc, #160]	@ (8000d00 <start_cli+0xe0>)
 8000c5e:	f7ff fadf 	bl	8000220 <strcmp>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d108      	bne.n	8000c7a <start_cli+0x5a>
            BLINK_FREQ = LED_ON;
 8000c68:	4b2a      	ldr	r3, [pc, #168]	@ (8000d14 <start_cli+0xf4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
            display_prompt_and_flush("OK!", buf, &pos);
 8000c6e:	4a23      	ldr	r2, [pc, #140]	@ (8000cfc <start_cli+0xdc>)
 8000c70:	4923      	ldr	r1, [pc, #140]	@ (8000d00 <start_cli+0xe0>)
 8000c72:	4829      	ldr	r0, [pc, #164]	@ (8000d18 <start_cli+0xf8>)
 8000c74:	f7ff ffc2 	bl	8000bfc <display_prompt_and_flush>
}
 8000c78:	e03d      	b.n	8000cf6 <start_cli+0xd6>
        } else if (!strcmp((const char*)buf, "led off\r")) {
 8000c7a:	4928      	ldr	r1, [pc, #160]	@ (8000d1c <start_cli+0xfc>)
 8000c7c:	4820      	ldr	r0, [pc, #128]	@ (8000d00 <start_cli+0xe0>)
 8000c7e:	f7ff facf 	bl	8000220 <strcmp>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d108      	bne.n	8000c9a <start_cli+0x7a>
            BLINK_FREQ = LED_OFF;
 8000c88:	4b22      	ldr	r3, [pc, #136]	@ (8000d14 <start_cli+0xf4>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	601a      	str	r2, [r3, #0]
        	display_prompt_and_flush("OK!", buf, &pos);
 8000c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8000cfc <start_cli+0xdc>)
 8000c90:	491b      	ldr	r1, [pc, #108]	@ (8000d00 <start_cli+0xe0>)
 8000c92:	4821      	ldr	r0, [pc, #132]	@ (8000d18 <start_cli+0xf8>)
 8000c94:	f7ff ffb2 	bl	8000bfc <display_prompt_and_flush>
}
 8000c98:	e02d      	b.n	8000cf6 <start_cli+0xd6>
        } else if (!strcmp((const char*)buf, "set 10\r")) {
 8000c9a:	4921      	ldr	r1, [pc, #132]	@ (8000d20 <start_cli+0x100>)
 8000c9c:	4818      	ldr	r0, [pc, #96]	@ (8000d00 <start_cli+0xe0>)
 8000c9e:	f7ff fabf 	bl	8000220 <strcmp>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d108      	bne.n	8000cba <start_cli+0x9a>
            BLINK_FREQ = 4;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d14 <start_cli+0xf4>)
 8000caa:	2204      	movs	r2, #4
 8000cac:	601a      	str	r2, [r3, #0]
        	display_prompt_and_flush("led frequency set to 10", buf, &pos);
 8000cae:	4a13      	ldr	r2, [pc, #76]	@ (8000cfc <start_cli+0xdc>)
 8000cb0:	4913      	ldr	r1, [pc, #76]	@ (8000d00 <start_cli+0xe0>)
 8000cb2:	481c      	ldr	r0, [pc, #112]	@ (8000d24 <start_cli+0x104>)
 8000cb4:	f7ff ffa2 	bl	8000bfc <display_prompt_and_flush>
}
 8000cb8:	e01d      	b.n	8000cf6 <start_cli+0xd6>
        } else if (buf[pos] == '\r'){
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <start_cli+0xdc>)
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <start_cli+0xe0>)
 8000cc2:	5c9b      	ldrb	r3, [r3, r2]
 8000cc4:	2b0d      	cmp	r3, #13
 8000cc6:	d105      	bne.n	8000cd4 <start_cli+0xb4>
        	display_prompt_and_flush("command not found:(", buf, &pos);
 8000cc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000cfc <start_cli+0xdc>)
 8000cca:	490d      	ldr	r1, [pc, #52]	@ (8000d00 <start_cli+0xe0>)
 8000ccc:	4816      	ldr	r0, [pc, #88]	@ (8000d28 <start_cli+0x108>)
 8000cce:	f7ff ff95 	bl	8000bfc <display_prompt_and_flush>
}
 8000cd2:	e010      	b.n	8000cf6 <start_cli+0xd6>
            HAL_UART_Transmit(&huart1, (buf + pos), 1, 1000);
 8000cd4:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <start_cli+0xdc>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <start_cli+0xe0>)
 8000cdc:	18d1      	adds	r1, r2, r3
 8000cde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4807      	ldr	r0, [pc, #28]	@ (8000d04 <start_cli+0xe4>)
 8000ce6:	f001 fd35 	bl	8002754 <HAL_UART_Transmit>
            ++pos;
 8000cea:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <start_cli+0xdc>)
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	4b02      	ldr	r3, [pc, #8]	@ (8000cfc <start_cli+0xdc>)
 8000cf4:	801a      	strh	r2, [r3, #0]
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2000010c 	.word	0x2000010c
 8000d00:	20000110 	.word	0x20000110
 8000d04:	2000007c 	.word	0x2000007c
 8000d08:	080032ec 	.word	0x080032ec
 8000d0c:	080032f4 	.word	0x080032f4
 8000d10:	08003304 	.word	0x08003304
 8000d14:	20000108 	.word	0x20000108
 8000d18:	0800330c 	.word	0x0800330c
 8000d1c:	08003310 	.word	0x08003310
 8000d20:	0800331c 	.word	0x0800331c
 8000d24:	08003324 	.word	0x08003324
 8000d28:	0800333c 	.word	0x0800333c

08000d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000d30:	f7ff fed2 	bl	8000ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d34:	480c      	ldr	r0, [pc, #48]	@ (8000d68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d36:	490d      	ldr	r1, [pc, #52]	@ (8000d6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d38:	4a0d      	ldr	r2, [pc, #52]	@ (8000d70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d5a:	f002 fa83 	bl	8003264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5e:	f7ff fbe9 	bl	8000534 <main>
  bx  lr    
 8000d62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d64:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d70:	08003378 	.word	0x08003378
  ldr r2, =_sbss
 8000d74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d78:	20000514 	.word	0x20000514

08000d7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC_IRQHandler>

08000d7e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d82:	2003      	movs	r0, #3
 8000d84:	f000 f92e 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d88:	200f      	movs	r0, #15
 8000d8a:	f000 f805 	bl	8000d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8e:	f7ff fd93 	bl	80008b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da0:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <HAL_InitTick+0x54>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <HAL_InitTick+0x58>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4619      	mov	r1, r3
 8000daa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f93b 	bl	8001032 <HAL_SYSTICK_Config>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00e      	b.n	8000de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b0f      	cmp	r3, #15
 8000dca:	d80a      	bhi.n	8000de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd4:	f000 f911 	bl	8000ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd8:	4a06      	ldr	r2, [pc, #24]	@ (8000df4 <HAL_InitTick+0x5c>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dde:	2300      	movs	r3, #0
 8000de0:	e000      	b.n	8000de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000000 	.word	0x20000000
 8000df0:	20000008 	.word	0x20000008
 8000df4:	20000004 	.word	0x20000004

08000df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_IncTick+0x20>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <HAL_IncTick+0x24>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a04      	ldr	r2, [pc, #16]	@ (8000e1c <HAL_IncTick+0x24>)
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	20000510 	.word	0x20000510

08000e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return uwTick;
 8000e24:	4b03      	ldr	r3, [pc, #12]	@ (8000e34 <HAL_GetTick+0x14>)
 8000e26:	681b      	ldr	r3, [r3, #0]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000510 	.word	0x20000510

08000e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e40:	f7ff ffee 	bl	8000e20 <HAL_GetTick>
 8000e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e50:	d005      	beq.n	8000e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e52:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <HAL_Delay+0x44>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e5e:	bf00      	nop
 8000e60:	f7ff ffde 	bl	8000e20 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d8f7      	bhi.n	8000e60 <HAL_Delay+0x28>
  {
  }
}
 8000e70:	bf00      	nop
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000008 	.word	0x20000008

08000e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e90:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <__NVIC_SetPriorityGrouping+0x40>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eae:	4a04      	ldr	r2, [pc, #16]	@ (8000ec0 <__NVIC_SetPriorityGrouping+0x40>)
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	60d3      	str	r3, [r2, #12]
}
 8000eb4:	bf00      	nop
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00
 8000ec4:	05fa0000 	.word	0x05fa0000

08000ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ecc:	4b04      	ldr	r3, [pc, #16]	@ (8000ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	f003 0307 	and.w	r3, r3, #7
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	db0a      	blt.n	8000f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	490c      	ldr	r1, [pc, #48]	@ (8000f30 <__NVIC_SetPriority+0x4c>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	0112      	lsls	r2, r2, #4
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	440b      	add	r3, r1
 8000f08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f0c:	e00a      	b.n	8000f24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4908      	ldr	r1, [pc, #32]	@ (8000f34 <__NVIC_SetPriority+0x50>)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	3b04      	subs	r3, #4
 8000f1c:	0112      	lsls	r2, r2, #4
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	440b      	add	r3, r1
 8000f22:	761a      	strb	r2, [r3, #24]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000e100 	.word	0xe000e100
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	@ 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f1c3 0307 	rsb	r3, r3, #7
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	bf28      	it	cs
 8000f56:	2304      	movcs	r3, #4
 8000f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	2b06      	cmp	r3, #6
 8000f60:	d902      	bls.n	8000f68 <NVIC_EncodePriority+0x30>
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3b03      	subs	r3, #3
 8000f66:	e000      	b.n	8000f6a <NVIC_EncodePriority+0x32>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43da      	mvns	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f80:	f04f 31ff 	mov.w	r1, #4294967295
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	43d9      	mvns	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	4313      	orrs	r3, r2
         );
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3724      	adds	r7, #36	@ 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fb0:	d301      	bcc.n	8000fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00f      	b.n	8000fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe0 <SysTick_Config+0x40>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f7ff ff8e 	bl	8000ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc8:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <SysTick_Config+0x40>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fce:	4b04      	ldr	r3, [pc, #16]	@ (8000fe0 <SysTick_Config+0x40>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff47 	bl	8000e80 <__NVIC_SetPriorityGrouping>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100c:	f7ff ff5c 	bl	8000ec8 <__NVIC_GetPriorityGrouping>
 8001010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	6978      	ldr	r0, [r7, #20]
 8001018:	f7ff ff8e 	bl	8000f38 <NVIC_EncodePriority>
 800101c:	4602      	mov	r2, r0
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff5d 	bl	8000ee4 <__NVIC_SetPriority>
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffb0 	bl	8000fa0 <SysTick_Config>
 8001040:	4603      	mov	r3, r0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001050:	f3bf 8f5f 	dmb	sy
}
 8001054:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001056:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <HAL_MPU_Disable+0x28>)
 8001058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105a:	4a06      	ldr	r2, [pc, #24]	@ (8001074 <HAL_MPU_Disable+0x28>)
 800105c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001060:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001062:	4b05      	ldr	r3, [pc, #20]	@ (8001078 <HAL_MPU_Disable+0x2c>)
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00
 8001078:	e000ed90 	.word	0xe000ed90

0800107c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001084:	4a0b      	ldr	r2, [pc, #44]	@ (80010b4 <HAL_MPU_Enable+0x38>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <HAL_MPU_Enable+0x3c>)
 8001090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001092:	4a09      	ldr	r2, [pc, #36]	@ (80010b8 <HAL_MPU_Enable+0x3c>)
 8001094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001098:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800109a:	f3bf 8f4f 	dsb	sy
}
 800109e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010a0:	f3bf 8f6f 	isb	sy
}
 80010a4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000ed90 	.word	0xe000ed90
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	785a      	ldrb	r2, [r3, #1]
 80010c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001138 <HAL_MPU_ConfigRegion+0x7c>)
 80010ca:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80010cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001138 <HAL_MPU_ConfigRegion+0x7c>)
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	4a19      	ldr	r2, [pc, #100]	@ (8001138 <HAL_MPU_ConfigRegion+0x7c>)
 80010d2:	f023 0301 	bic.w	r3, r3, #1
 80010d6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80010d8:	4a17      	ldr	r2, [pc, #92]	@ (8001138 <HAL_MPU_ConfigRegion+0x7c>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7b1b      	ldrb	r3, [r3, #12]
 80010e4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7adb      	ldrb	r3, [r3, #11]
 80010ea:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	7a9b      	ldrb	r3, [r3, #10]
 80010f2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80010f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	7b5b      	ldrb	r3, [r3, #13]
 80010fa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80010fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7b9b      	ldrb	r3, [r3, #14]
 8001102:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001104:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	7bdb      	ldrb	r3, [r3, #15]
 800110a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800110c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	7a5b      	ldrb	r3, [r3, #9]
 8001112:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001114:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	7a1b      	ldrb	r3, [r3, #8]
 800111a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800111c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	7812      	ldrb	r2, [r2, #0]
 8001122:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001124:	4a04      	ldr	r2, [pc, #16]	@ (8001138 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001126:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001128:	6113      	str	r3, [r2, #16]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000ed90 	.word	0xe000ed90

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	@ 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
 800115a:	e169      	b.n	8001430 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800115c:	2201      	movs	r2, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	429a      	cmp	r2, r3
 8001176:	f040 8158 	bne.w	800142a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	2b01      	cmp	r3, #1
 8001184:	d005      	beq.n	8001192 <HAL_GPIO_Init+0x56>
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d130      	bne.n	80011f4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	2203      	movs	r2, #3
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	68da      	ldr	r2, [r3, #12]
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c8:	2201      	movs	r2, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	f003 0201 	and.w	r2, r3, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d017      	beq.n	8001230 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d123      	bne.n	8001284 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	08da      	lsrs	r2, r3, #3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3208      	adds	r2, #8
 8001244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	220f      	movs	r2, #15
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	08da      	lsrs	r2, r3, #3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3208      	adds	r2, #8
 800127e:	69b9      	ldr	r1, [r7, #24]
 8001280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	2203      	movs	r2, #3
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0203 	and.w	r2, r3, #3
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 80b2 	beq.w	800142a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	4b60      	ldr	r3, [pc, #384]	@ (8001448 <HAL_GPIO_Init+0x30c>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	4a5f      	ldr	r2, [pc, #380]	@ (8001448 <HAL_GPIO_Init+0x30c>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d2:	4b5d      	ldr	r3, [pc, #372]	@ (8001448 <HAL_GPIO_Init+0x30c>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012de:	4a5b      	ldr	r2, [pc, #364]	@ (800144c <HAL_GPIO_Init+0x310>)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	3302      	adds	r3, #2
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a52      	ldr	r2, [pc, #328]	@ (8001450 <HAL_GPIO_Init+0x314>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d02b      	beq.n	8001362 <HAL_GPIO_Init+0x226>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a51      	ldr	r2, [pc, #324]	@ (8001454 <HAL_GPIO_Init+0x318>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d025      	beq.n	800135e <HAL_GPIO_Init+0x222>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a50      	ldr	r2, [pc, #320]	@ (8001458 <HAL_GPIO_Init+0x31c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d01f      	beq.n	800135a <HAL_GPIO_Init+0x21e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4f      	ldr	r2, [pc, #316]	@ (800145c <HAL_GPIO_Init+0x320>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d019      	beq.n	8001356 <HAL_GPIO_Init+0x21a>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4e      	ldr	r2, [pc, #312]	@ (8001460 <HAL_GPIO_Init+0x324>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d013      	beq.n	8001352 <HAL_GPIO_Init+0x216>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4d      	ldr	r2, [pc, #308]	@ (8001464 <HAL_GPIO_Init+0x328>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d00d      	beq.n	800134e <HAL_GPIO_Init+0x212>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4c      	ldr	r2, [pc, #304]	@ (8001468 <HAL_GPIO_Init+0x32c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d007      	beq.n	800134a <HAL_GPIO_Init+0x20e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4b      	ldr	r2, [pc, #300]	@ (800146c <HAL_GPIO_Init+0x330>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d101      	bne.n	8001346 <HAL_GPIO_Init+0x20a>
 8001342:	2307      	movs	r3, #7
 8001344:	e00e      	b.n	8001364 <HAL_GPIO_Init+0x228>
 8001346:	2308      	movs	r3, #8
 8001348:	e00c      	b.n	8001364 <HAL_GPIO_Init+0x228>
 800134a:	2306      	movs	r3, #6
 800134c:	e00a      	b.n	8001364 <HAL_GPIO_Init+0x228>
 800134e:	2305      	movs	r3, #5
 8001350:	e008      	b.n	8001364 <HAL_GPIO_Init+0x228>
 8001352:	2304      	movs	r3, #4
 8001354:	e006      	b.n	8001364 <HAL_GPIO_Init+0x228>
 8001356:	2303      	movs	r3, #3
 8001358:	e004      	b.n	8001364 <HAL_GPIO_Init+0x228>
 800135a:	2302      	movs	r3, #2
 800135c:	e002      	b.n	8001364 <HAL_GPIO_Init+0x228>
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <HAL_GPIO_Init+0x228>
 8001362:	2300      	movs	r3, #0
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	f002 0203 	and.w	r2, r2, #3
 800136a:	0092      	lsls	r2, r2, #2
 800136c:	4093      	lsls	r3, r2
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001374:	4935      	ldr	r1, [pc, #212]	@ (800144c <HAL_GPIO_Init+0x310>)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001382:	4b3b      	ldr	r3, [pc, #236]	@ (8001470 <HAL_GPIO_Init+0x334>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013a6:	4a32      	ldr	r2, [pc, #200]	@ (8001470 <HAL_GPIO_Init+0x334>)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013ac:	4b30      	ldr	r3, [pc, #192]	@ (8001470 <HAL_GPIO_Init+0x334>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013d0:	4a27      	ldr	r2, [pc, #156]	@ (8001470 <HAL_GPIO_Init+0x334>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013d6:	4b26      	ldr	r3, [pc, #152]	@ (8001470 <HAL_GPIO_Init+0x334>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001470 <HAL_GPIO_Init+0x334>)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001400:	4b1b      	ldr	r3, [pc, #108]	@ (8001470 <HAL_GPIO_Init+0x334>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001424:	4a12      	ldr	r2, [pc, #72]	@ (8001470 <HAL_GPIO_Init+0x334>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3301      	adds	r3, #1
 800142e:	61fb      	str	r3, [r7, #28]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	2b0f      	cmp	r3, #15
 8001434:	f67f ae92 	bls.w	800115c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3724      	adds	r7, #36	@ 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	40013800 	.word	0x40013800
 8001450:	40020000 	.word	0x40020000
 8001454:	40020400 	.word	0x40020400
 8001458:	40020800 	.word	0x40020800
 800145c:	40020c00 	.word	0x40020c00
 8001460:	40021000 	.word	0x40021000
 8001464:	40021400 	.word	0x40021400
 8001468:	40021800 	.word	0x40021800
 800146c:	40021c00 	.word	0x40021c00
 8001470:	40013c00 	.word	0x40013c00

08001474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	807b      	strh	r3, [r7, #2]
 8001480:	4613      	mov	r3, r2
 8001482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001484:	787b      	ldrb	r3, [r7, #1]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800148a:	887a      	ldrh	r2, [r7, #2]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001490:	e003      	b.n	800149a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001492:	887b      	ldrh	r3, [r7, #2]
 8001494:	041a      	lsls	r2, r3, #16
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	619a      	str	r2, [r3, #24]
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e08b      	b.n	80015d2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d106      	bne.n	80014d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fa16 	bl	8000900 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2224      	movs	r2, #36	@ 0x24
 80014d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 0201 	bic.w	r2, r2, #1
 80014ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001508:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d107      	bne.n	8001522 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	e006      	b.n	8001530 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800152e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d108      	bne.n	800154a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	e007      	b.n	800155a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001558:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6859      	ldr	r1, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <HAL_I2C_Init+0x134>)
 8001566:	430b      	orrs	r3, r1
 8001568:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001578:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691a      	ldr	r2, [r3, #16]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69d9      	ldr	r1, [r3, #28]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a1a      	ldr	r2, [r3, #32]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0201 	orr.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2220      	movs	r2, #32
 80015be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	02008000 	.word	0x02008000

080015e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b20      	cmp	r3, #32
 80015f4:	d138      	bne.n	8001668 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001600:	2302      	movs	r3, #2
 8001602:	e032      	b.n	800166a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2224      	movs	r2, #36	@ 0x24
 8001610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0201 	bic.w	r2, r2, #1
 8001622:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001632:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6819      	ldr	r1, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0201 	orr.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2220      	movs	r2, #32
 8001658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	e000      	b.n	800166a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001668:	2302      	movs	r3, #2
  }
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001676:	b480      	push	{r7}
 8001678:	b085      	sub	sp, #20
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b20      	cmp	r3, #32
 800168a:	d139      	bne.n	8001700 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001692:	2b01      	cmp	r3, #1
 8001694:	d101      	bne.n	800169a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001696:	2302      	movs	r3, #2
 8001698:	e033      	b.n	8001702 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2224      	movs	r2, #36	@ 0x24
 80016a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0201 	bic.w	r2, r2, #1
 80016b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80016c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2220      	movs	r2, #32
 80016f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	e000      	b.n	8001702 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001700:	2302      	movs	r3, #2
  }
}
 8001702:	4618      	mov	r0, r3
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001718:	2300      	movs	r3, #0
 800171a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e291      	b.n	8001c4a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 8087 	beq.w	8001842 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001734:	4b96      	ldr	r3, [pc, #600]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 030c 	and.w	r3, r3, #12
 800173c:	2b04      	cmp	r3, #4
 800173e:	d00c      	beq.n	800175a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001740:	4b93      	ldr	r3, [pc, #588]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	2b08      	cmp	r3, #8
 800174a:	d112      	bne.n	8001772 <HAL_RCC_OscConfig+0x62>
 800174c:	4b90      	ldr	r3, [pc, #576]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001754:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001758:	d10b      	bne.n	8001772 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175a:	4b8d      	ldr	r3, [pc, #564]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d06c      	beq.n	8001840 <HAL_RCC_OscConfig+0x130>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d168      	bne.n	8001840 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e26b      	b.n	8001c4a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800177a:	d106      	bne.n	800178a <HAL_RCC_OscConfig+0x7a>
 800177c:	4b84      	ldr	r3, [pc, #528]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a83      	ldr	r2, [pc, #524]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 8001782:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	e02e      	b.n	80017e8 <HAL_RCC_OscConfig+0xd8>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10c      	bne.n	80017ac <HAL_RCC_OscConfig+0x9c>
 8001792:	4b7f      	ldr	r3, [pc, #508]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a7e      	ldr	r2, [pc, #504]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 8001798:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	4b7c      	ldr	r3, [pc, #496]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a7b      	ldr	r2, [pc, #492]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 80017a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	e01d      	b.n	80017e8 <HAL_RCC_OscConfig+0xd8>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017b4:	d10c      	bne.n	80017d0 <HAL_RCC_OscConfig+0xc0>
 80017b6:	4b76      	ldr	r3, [pc, #472]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a75      	ldr	r2, [pc, #468]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 80017bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	4b73      	ldr	r3, [pc, #460]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a72      	ldr	r2, [pc, #456]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 80017c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	e00b      	b.n	80017e8 <HAL_RCC_OscConfig+0xd8>
 80017d0:	4b6f      	ldr	r3, [pc, #444]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a6e      	ldr	r2, [pc, #440]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 80017d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b6c      	ldr	r3, [pc, #432]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a6b      	ldr	r2, [pc, #428]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 80017e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d013      	beq.n	8001818 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff fb16 	bl	8000e20 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff fb12 	bl	8000e20 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	@ 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e21f      	b.n	8001c4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180a:	4b61      	ldr	r3, [pc, #388]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0xe8>
 8001816:	e014      	b.n	8001842 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff fb02 	bl	8000e20 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001820:	f7ff fafe 	bl	8000e20 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b64      	cmp	r3, #100	@ 0x64
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e20b      	b.n	8001c4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001832:	4b57      	ldr	r3, [pc, #348]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x110>
 800183e:	e000      	b.n	8001842 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d069      	beq.n	8001922 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800184e:	4b50      	ldr	r3, [pc, #320]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00b      	beq.n	8001872 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800185a:	4b4d      	ldr	r3, [pc, #308]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b08      	cmp	r3, #8
 8001864:	d11c      	bne.n	80018a0 <HAL_RCC_OscConfig+0x190>
 8001866:	4b4a      	ldr	r3, [pc, #296]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d116      	bne.n	80018a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001872:	4b47      	ldr	r3, [pc, #284]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d005      	beq.n	800188a <HAL_RCC_OscConfig+0x17a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d001      	beq.n	800188a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e1df      	b.n	8001c4a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188a:	4b41      	ldr	r3, [pc, #260]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	493d      	ldr	r1, [pc, #244]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189e:	e040      	b.n	8001922 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d023      	beq.n	80018f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a8:	4b39      	ldr	r3, [pc, #228]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a38      	ldr	r2, [pc, #224]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff fab4 	bl	8000e20 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018bc:	f7ff fab0 	bl	8000e20 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e1bd      	b.n	8001c4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ce:	4b30      	ldr	r3, [pc, #192]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018da:	4b2d      	ldr	r3, [pc, #180]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4929      	ldr	r1, [pc, #164]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
 80018ee:	e018      	b.n	8001922 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f0:	4b27      	ldr	r3, [pc, #156]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a26      	ldr	r2, [pc, #152]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 80018f6:	f023 0301 	bic.w	r3, r3, #1
 80018fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff fa90 	bl	8000e20 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001904:	f7ff fa8c 	bl	8000e20 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e199      	b.n	8001c4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001916:	4b1e      	ldr	r3, [pc, #120]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d038      	beq.n	80019a0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d019      	beq.n	800196a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001936:	4b16      	ldr	r3, [pc, #88]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 8001938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800193a:	4a15      	ldr	r2, [pc, #84]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001942:	f7ff fa6d 	bl	8000e20 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194a:	f7ff fa69 	bl	8000e20 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e176      	b.n	8001c4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195c:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 800195e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0f0      	beq.n	800194a <HAL_RCC_OscConfig+0x23a>
 8001968:	e01a      	b.n	80019a0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800196a:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 800196c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800196e:	4a08      	ldr	r2, [pc, #32]	@ (8001990 <HAL_RCC_OscConfig+0x280>)
 8001970:	f023 0301 	bic.w	r3, r3, #1
 8001974:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001976:	f7ff fa53 	bl	8000e20 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800197c:	e00a      	b.n	8001994 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800197e:	f7ff fa4f 	bl	8000e20 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d903      	bls.n	8001994 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e15c      	b.n	8001c4a <HAL_RCC_OscConfig+0x53a>
 8001990:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001994:	4b91      	ldr	r3, [pc, #580]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001996:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1ee      	bne.n	800197e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80a4 	beq.w	8001af6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ae:	4b8b      	ldr	r3, [pc, #556]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10d      	bne.n	80019d6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	4b88      	ldr	r3, [pc, #544]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	4a87      	ldr	r2, [pc, #540]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c6:	4b85      	ldr	r3, [pc, #532]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d2:	2301      	movs	r3, #1
 80019d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d6:	4b82      	ldr	r3, [pc, #520]	@ (8001be0 <HAL_RCC_OscConfig+0x4d0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d118      	bne.n	8001a14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80019e2:	4b7f      	ldr	r3, [pc, #508]	@ (8001be0 <HAL_RCC_OscConfig+0x4d0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a7e      	ldr	r2, [pc, #504]	@ (8001be0 <HAL_RCC_OscConfig+0x4d0>)
 80019e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ee:	f7ff fa17 	bl	8000e20 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f6:	f7ff fa13 	bl	8000e20 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b64      	cmp	r3, #100	@ 0x64
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e120      	b.n	8001c4a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a08:	4b75      	ldr	r3, [pc, #468]	@ (8001be0 <HAL_RCC_OscConfig+0x4d0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d106      	bne.n	8001a2a <HAL_RCC_OscConfig+0x31a>
 8001a1c:	4b6f      	ldr	r3, [pc, #444]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a20:	4a6e      	ldr	r2, [pc, #440]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a28:	e02d      	b.n	8001a86 <HAL_RCC_OscConfig+0x376>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x33c>
 8001a32:	4b6a      	ldr	r3, [pc, #424]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a36:	4a69      	ldr	r2, [pc, #420]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a3e:	4b67      	ldr	r3, [pc, #412]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a42:	4a66      	ldr	r2, [pc, #408]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001a44:	f023 0304 	bic.w	r3, r3, #4
 8001a48:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a4a:	e01c      	b.n	8001a86 <HAL_RCC_OscConfig+0x376>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2b05      	cmp	r3, #5
 8001a52:	d10c      	bne.n	8001a6e <HAL_RCC_OscConfig+0x35e>
 8001a54:	4b61      	ldr	r3, [pc, #388]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a58:	4a60      	ldr	r2, [pc, #384]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001a5a:	f043 0304 	orr.w	r3, r3, #4
 8001a5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a60:	4b5e      	ldr	r3, [pc, #376]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a64:	4a5d      	ldr	r2, [pc, #372]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a6c:	e00b      	b.n	8001a86 <HAL_RCC_OscConfig+0x376>
 8001a6e:	4b5b      	ldr	r3, [pc, #364]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a72:	4a5a      	ldr	r2, [pc, #360]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001a74:	f023 0301 	bic.w	r3, r3, #1
 8001a78:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a7a:	4b58      	ldr	r3, [pc, #352]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a7e:	4a57      	ldr	r2, [pc, #348]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001a80:	f023 0304 	bic.w	r3, r3, #4
 8001a84:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d015      	beq.n	8001aba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8e:	f7ff f9c7 	bl	8000e20 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a94:	e00a      	b.n	8001aac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f7ff f9c3 	bl	8000e20 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e0ce      	b.n	8001c4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aac:	4b4b      	ldr	r3, [pc, #300]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0ee      	beq.n	8001a96 <HAL_RCC_OscConfig+0x386>
 8001ab8:	e014      	b.n	8001ae4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aba:	f7ff f9b1 	bl	8000e20 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac0:	e00a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac2:	f7ff f9ad 	bl	8000e20 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e0b8      	b.n	8001c4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad8:	4b40      	ldr	r3, [pc, #256]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1ee      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ae4:	7dfb      	ldrb	r3, [r7, #23]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d105      	bne.n	8001af6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aea:	4b3c      	ldr	r3, [pc, #240]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	4a3b      	ldr	r2, [pc, #236]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001af0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001af4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 80a4 	beq.w	8001c48 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b00:	4b36      	ldr	r3, [pc, #216]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d06b      	beq.n	8001be4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d149      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b14:	4b31      	ldr	r3, [pc, #196]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a30      	ldr	r2, [pc, #192]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001b1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff f97e 	bl	8000e20 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b28:	f7ff f97a 	bl	8000e20 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e087      	b.n	8001c4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3a:	4b28      	ldr	r3, [pc, #160]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69da      	ldr	r2, [r3, #28]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b54:	019b      	lsls	r3, r3, #6
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5c:	085b      	lsrs	r3, r3, #1
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	041b      	lsls	r3, r3, #16
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b68:	061b      	lsls	r3, r3, #24
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001b6e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001b72:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b74:	4b19      	ldr	r3, [pc, #100]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a18      	ldr	r2, [pc, #96]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001b7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7ff f94e 	bl	8000e20 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b88:	f7ff f94a 	bl	8000e20 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e057      	b.n	8001c4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9a:	4b10      	ldr	r3, [pc, #64]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x478>
 8001ba6:	e04f      	b.n	8001c48 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a0b      	ldr	r2, [pc, #44]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001bae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb4:	f7ff f934 	bl	8000e20 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bbc:	f7ff f930 	bl	8000e20 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e03d      	b.n	8001c4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bce:	4b03      	ldr	r3, [pc, #12]	@ (8001bdc <HAL_RCC_OscConfig+0x4cc>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x4ac>
 8001bda:	e035      	b.n	8001c48 <HAL_RCC_OscConfig+0x538>
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c54 <HAL_RCC_OscConfig+0x544>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d028      	beq.n	8001c44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d121      	bne.n	8001c44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d11a      	bne.n	8001c44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c14:	4013      	ands	r3, r2
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c1a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d111      	bne.n	8001c44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c2a:	085b      	lsrs	r3, r3, #1
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d107      	bne.n	8001c44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800

08001c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0d0      	b.n	8001e12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c70:	4b6a      	ldr	r3, [pc, #424]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d910      	bls.n	8001ca0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7e:	4b67      	ldr	r3, [pc, #412]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 020f 	bic.w	r2, r3, #15
 8001c86:	4965      	ldr	r1, [pc, #404]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8e:	4b63      	ldr	r3, [pc, #396]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e0b8      	b.n	8001e12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d020      	beq.n	8001cee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cb8:	4b59      	ldr	r3, [pc, #356]	@ (8001e20 <HAL_RCC_ClockConfig+0x1c8>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	4a58      	ldr	r2, [pc, #352]	@ (8001e20 <HAL_RCC_ClockConfig+0x1c8>)
 8001cbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001cc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cd0:	4b53      	ldr	r3, [pc, #332]	@ (8001e20 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	4a52      	ldr	r2, [pc, #328]	@ (8001e20 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cdc:	4b50      	ldr	r3, [pc, #320]	@ (8001e20 <HAL_RCC_ClockConfig+0x1c8>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	494d      	ldr	r1, [pc, #308]	@ (8001e20 <HAL_RCC_ClockConfig+0x1c8>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d040      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d107      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d02:	4b47      	ldr	r3, [pc, #284]	@ (8001e20 <HAL_RCC_ClockConfig+0x1c8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d115      	bne.n	8001d3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e07f      	b.n	8001e12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d107      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d1a:	4b41      	ldr	r3, [pc, #260]	@ (8001e20 <HAL_RCC_ClockConfig+0x1c8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d109      	bne.n	8001d3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e073      	b.n	8001e12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e20 <HAL_RCC_ClockConfig+0x1c8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e06b      	b.n	8001e12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d3a:	4b39      	ldr	r3, [pc, #228]	@ (8001e20 <HAL_RCC_ClockConfig+0x1c8>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f023 0203 	bic.w	r2, r3, #3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	4936      	ldr	r1, [pc, #216]	@ (8001e20 <HAL_RCC_ClockConfig+0x1c8>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d4c:	f7ff f868 	bl	8000e20 <HAL_GetTick>
 8001d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d52:	e00a      	b.n	8001d6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d54:	f7ff f864 	bl	8000e20 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e053      	b.n	8001e12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e20 <HAL_RCC_ClockConfig+0x1c8>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 020c 	and.w	r2, r3, #12
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d1eb      	bne.n	8001d54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d7c:	4b27      	ldr	r3, [pc, #156]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d210      	bcs.n	8001dac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8a:	4b24      	ldr	r3, [pc, #144]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f023 020f 	bic.w	r2, r3, #15
 8001d92:	4922      	ldr	r1, [pc, #136]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9a:	4b20      	ldr	r3, [pc, #128]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d001      	beq.n	8001dac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e032      	b.n	8001e12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d008      	beq.n	8001dca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001db8:	4b19      	ldr	r3, [pc, #100]	@ (8001e20 <HAL_RCC_ClockConfig+0x1c8>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	4916      	ldr	r1, [pc, #88]	@ (8001e20 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d009      	beq.n	8001dea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dd6:	4b12      	ldr	r3, [pc, #72]	@ (8001e20 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	490e      	ldr	r1, [pc, #56]	@ (8001e20 <HAL_RCC_ClockConfig+0x1c8>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dea:	f000 f821 	bl	8001e30 <HAL_RCC_GetSysClockFreq>
 8001dee:	4602      	mov	r2, r0
 8001df0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e20 <HAL_RCC_ClockConfig+0x1c8>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	091b      	lsrs	r3, r3, #4
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	490a      	ldr	r1, [pc, #40]	@ (8001e24 <HAL_RCC_ClockConfig+0x1cc>)
 8001dfc:	5ccb      	ldrb	r3, [r1, r3]
 8001dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001e02:	4a09      	ldr	r2, [pc, #36]	@ (8001e28 <HAL_RCC_ClockConfig+0x1d0>)
 8001e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e06:	4b09      	ldr	r3, [pc, #36]	@ (8001e2c <HAL_RCC_ClockConfig+0x1d4>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe ffc4 	bl	8000d98 <HAL_InitTick>

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023c00 	.word	0x40023c00
 8001e20:	40023800 	.word	0x40023800
 8001e24:	08003350 	.word	0x08003350
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	20000004 	.word	0x20000004

08001e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e34:	b090      	sub	sp, #64	@ 0x40
 8001e36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e40:	2300      	movs	r3, #0
 8001e42:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e48:	4b59      	ldr	r3, [pc, #356]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 030c 	and.w	r3, r3, #12
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d00d      	beq.n	8001e70 <HAL_RCC_GetSysClockFreq+0x40>
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	f200 80a1 	bhi.w	8001f9c <HAL_RCC_GetSysClockFreq+0x16c>
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d002      	beq.n	8001e64 <HAL_RCC_GetSysClockFreq+0x34>
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d003      	beq.n	8001e6a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e62:	e09b      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e64:	4b53      	ldr	r3, [pc, #332]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e66:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e68:	e09b      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e6a:	4b53      	ldr	r3, [pc, #332]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e6e:	e098      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e70:	4b4f      	ldr	r3, [pc, #316]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e78:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e7a:	4b4d      	ldr	r3, [pc, #308]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d028      	beq.n	8001ed8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e86:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	099b      	lsrs	r3, r3, #6
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	623b      	str	r3, [r7, #32]
 8001e90:	627a      	str	r2, [r7, #36]	@ 0x24
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4b47      	ldr	r3, [pc, #284]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e9c:	fb03 f201 	mul.w	r2, r3, r1
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	fb00 f303 	mul.w	r3, r0, r3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	4a43      	ldr	r2, [pc, #268]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001eaa:	fba0 1202 	umull	r1, r2, r0, r2
 8001eae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001eb0:	460a      	mov	r2, r1
 8001eb2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001eb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001eb6:	4413      	add	r3, r2
 8001eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	61bb      	str	r3, [r7, #24]
 8001ec0:	61fa      	str	r2, [r7, #28]
 8001ec2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ec6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001eca:	f7fe f9bb 	bl	8000244 <__aeabi_uldivmod>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ed6:	e053      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed8:	4b35      	ldr	r3, [pc, #212]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	099b      	lsrs	r3, r3, #6
 8001ede:	2200      	movs	r2, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	617a      	str	r2, [r7, #20]
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001eea:	f04f 0b00 	mov.w	fp, #0
 8001eee:	4652      	mov	r2, sl
 8001ef0:	465b      	mov	r3, fp
 8001ef2:	f04f 0000 	mov.w	r0, #0
 8001ef6:	f04f 0100 	mov.w	r1, #0
 8001efa:	0159      	lsls	r1, r3, #5
 8001efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f00:	0150      	lsls	r0, r2, #5
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	ebb2 080a 	subs.w	r8, r2, sl
 8001f0a:	eb63 090b 	sbc.w	r9, r3, fp
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f22:	ebb2 0408 	subs.w	r4, r2, r8
 8001f26:	eb63 0509 	sbc.w	r5, r3, r9
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	f04f 0300 	mov.w	r3, #0
 8001f32:	00eb      	lsls	r3, r5, #3
 8001f34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f38:	00e2      	lsls	r2, r4, #3
 8001f3a:	4614      	mov	r4, r2
 8001f3c:	461d      	mov	r5, r3
 8001f3e:	eb14 030a 	adds.w	r3, r4, sl
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	eb45 030b 	adc.w	r3, r5, fp
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f56:	4629      	mov	r1, r5
 8001f58:	028b      	lsls	r3, r1, #10
 8001f5a:	4621      	mov	r1, r4
 8001f5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f60:	4621      	mov	r1, r4
 8001f62:	028a      	lsls	r2, r1, #10
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	60fa      	str	r2, [r7, #12]
 8001f70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f74:	f7fe f966 	bl	8000244 <__aeabi_uldivmod>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001f80:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	0c1b      	lsrs	r3, r3, #16
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001f90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f98:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f9a:	e002      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f9c:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3740      	adds	r7, #64	@ 0x40
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	00f42400 	.word	0x00f42400
 8001fb8:	017d7840 	.word	0x017d7840

08001fbc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fc0:	4b03      	ldr	r3, [pc, #12]	@ (8001fd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	20000000 	.word	0x20000000

08001fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fd8:	f7ff fff0 	bl	8001fbc <HAL_RCC_GetHCLKFreq>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	0a9b      	lsrs	r3, r3, #10
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	4903      	ldr	r1, [pc, #12]	@ (8001ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fea:	5ccb      	ldrb	r3, [r1, r3]
 8001fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	08003360 	.word	0x08003360

08001ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002000:	f7ff ffdc 	bl	8001fbc <HAL_RCC_GetHCLKFreq>
 8002004:	4602      	mov	r2, r0
 8002006:	4b05      	ldr	r3, [pc, #20]	@ (800201c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	0b5b      	lsrs	r3, r3, #13
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	4903      	ldr	r1, [pc, #12]	@ (8002020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002012:	5ccb      	ldrb	r3, [r1, r3]
 8002014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002018:	4618      	mov	r0, r3
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40023800 	.word	0x40023800
 8002020:	08003360 	.word	0x08003360

08002024 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d012      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002048:	4b65      	ldr	r3, [pc, #404]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	4a64      	ldr	r2, [pc, #400]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800204e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002052:	6093      	str	r3, [r2, #8]
 8002054:	4b62      	ldr	r3, [pc, #392]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205c:	4960      	ldr	r1, [pc, #384]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800205e:	4313      	orrs	r3, r2
 8002060:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800206a:	2301      	movs	r3, #1
 800206c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d017      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800207a:	4b59      	ldr	r3, [pc, #356]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800207c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002080:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002088:	4955      	ldr	r1, [pc, #340]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002094:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002098:	d101      	bne.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800209a:	2301      	movs	r3, #1
 800209c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80020a6:	2301      	movs	r3, #1
 80020a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d017      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020b6:	4b4a      	ldr	r3, [pc, #296]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020bc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020c4:	4946      	ldr	r1, [pc, #280]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020d4:	d101      	bne.n	80020da <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80020d6:	2301      	movs	r3, #1
 80020d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80020e2:	2301      	movs	r3, #1
 80020e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0320 	and.w	r3, r3, #32
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 808b 	beq.w	800220a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80020f4:	4b3a      	ldr	r3, [pc, #232]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	4a39      	ldr	r2, [pc, #228]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002100:	4b37      	ldr	r3, [pc, #220]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002104:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800210c:	4b35      	ldr	r3, [pc, #212]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a34      	ldr	r2, [pc, #208]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002116:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002118:	f7fe fe82 	bl	8000e20 <HAL_GetTick>
 800211c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002120:	f7fe fe7e 	bl	8000e20 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b64      	cmp	r3, #100	@ 0x64
 800212c:	d901      	bls.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e2bc      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002132:	4b2c      	ldr	r3, [pc, #176]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800213e:	4b28      	ldr	r3, [pc, #160]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002146:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d035      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x196>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002152:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	429a      	cmp	r2, r3
 800215a:	d02e      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800215c:	4b20      	ldr	r3, [pc, #128]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002160:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002164:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002166:	4b1e      	ldr	r3, [pc, #120]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800216a:	4a1d      	ldr	r2, [pc, #116]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002170:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002172:	4b1b      	ldr	r3, [pc, #108]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002176:	4a1a      	ldr	r2, [pc, #104]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002178:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800217c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800217e:	4a18      	ldr	r2, [pc, #96]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002184:	4b16      	ldr	r3, [pc, #88]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b01      	cmp	r3, #1
 800218e:	d114      	bne.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002190:	f7fe fe46 	bl	8000e20 <HAL_GetTick>
 8002194:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002196:	e00a      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002198:	f7fe fe42 	bl	8000e20 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e27e      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ae:	4b0c      	ldr	r3, [pc, #48]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0ee      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80021c6:	d111      	bne.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80021c8:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80021d4:	4b04      	ldr	r3, [pc, #16]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80021d6:	400b      	ands	r3, r1
 80021d8:	4901      	ldr	r1, [pc, #4]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	608b      	str	r3, [r1, #8]
 80021de:	e00b      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40007000 	.word	0x40007000
 80021e8:	0ffffcff 	.word	0x0ffffcff
 80021ec:	4ba4      	ldr	r3, [pc, #656]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	4aa3      	ldr	r2, [pc, #652]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021f2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80021f6:	6093      	str	r3, [r2, #8]
 80021f8:	4ba1      	ldr	r3, [pc, #644]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021fa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002204:	499e      	ldr	r1, [pc, #632]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002206:	4313      	orrs	r3, r2
 8002208:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	2b00      	cmp	r3, #0
 8002214:	d010      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002216:	4b9a      	ldr	r3, [pc, #616]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002218:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800221c:	4a98      	ldr	r2, [pc, #608]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800221e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002222:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002226:	4b96      	ldr	r3, [pc, #600]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002228:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002230:	4993      	ldr	r1, [pc, #588]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002232:	4313      	orrs	r3, r2
 8002234:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002244:	4b8e      	ldr	r3, [pc, #568]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800224a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002252:	498b      	ldr	r1, [pc, #556]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002254:	4313      	orrs	r3, r2
 8002256:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002266:	4b86      	ldr	r3, [pc, #536]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800226c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002274:	4982      	ldr	r1, [pc, #520]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002288:	4b7d      	ldr	r3, [pc, #500]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800228a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800228e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002296:	497a      	ldr	r1, [pc, #488]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022aa:	4b75      	ldr	r3, [pc, #468]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80022ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022b0:	f023 0203 	bic.w	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b8:	4971      	ldr	r1, [pc, #452]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00a      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022cc:	4b6c      	ldr	r3, [pc, #432]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80022ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022d2:	f023 020c 	bic.w	r2, r3, #12
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	4969      	ldr	r1, [pc, #420]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022ee:	4b64      	ldr	r3, [pc, #400]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80022f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fc:	4960      	ldr	r1, [pc, #384]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00a      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002310:	4b5b      	ldr	r3, [pc, #364]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002316:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800231e:	4958      	ldr	r1, [pc, #352]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00a      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002332:	4b53      	ldr	r3, [pc, #332]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002338:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002340:	494f      	ldr	r1, [pc, #316]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00a      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002354:	4b4a      	ldr	r3, [pc, #296]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800235a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002362:	4947      	ldr	r1, [pc, #284]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002376:	4b42      	ldr	r3, [pc, #264]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800237c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002384:	493e      	ldr	r1, [pc, #248]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002398:	4b39      	ldr	r3, [pc, #228]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800239e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a6:	4936      	ldr	r1, [pc, #216]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d011      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80023ba:	4b31      	ldr	r3, [pc, #196]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023c8:	492d      	ldr	r1, [pc, #180]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023d8:	d101      	bne.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80023da:	2301      	movs	r3, #1
 80023dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00a      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023ea:	4b25      	ldr	r3, [pc, #148]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023f0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023f8:	4921      	ldr	r1, [pc, #132]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00a      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800240c:	4b1c      	ldr	r3, [pc, #112]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002412:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800241a:	4919      	ldr	r1, [pc, #100]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800242e:	4b14      	ldr	r3, [pc, #80]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002434:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800243c:	4910      	ldr	r1, [pc, #64]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800243e:	4313      	orrs	r3, r2
 8002440:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d006      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 809d 	beq.w	8002592 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002458:	4b09      	ldr	r3, [pc, #36]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a08      	ldr	r2, [pc, #32]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800245e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002462:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002464:	f7fe fcdc 	bl	8000e20 <HAL_GetTick>
 8002468:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800246a:	e00b      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800246c:	f7fe fcd8 	bl	8000e20 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b64      	cmp	r3, #100	@ 0x64
 8002478:	d904      	bls.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e116      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x688>
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002484:	4b8b      	ldr	r3, [pc, #556]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1ed      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d017      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d113      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024a4:	4b83      	ldr	r3, [pc, #524]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80024a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024aa:	0e1b      	lsrs	r3, r3, #24
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	019a      	lsls	r2, r3, #6
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	061b      	lsls	r3, r3, #24
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	071b      	lsls	r3, r3, #28
 80024c4:	497b      	ldr	r1, [pc, #492]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d004      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024e0:	d00a      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d024      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024f6:	d11f      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024f8:	4b6e      	ldr	r3, [pc, #440]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80024fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024fe:	0f1b      	lsrs	r3, r3, #28
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	019a      	lsls	r2, r3, #6
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	061b      	lsls	r3, r3, #24
 8002512:	431a      	orrs	r2, r3
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	071b      	lsls	r3, r3, #28
 8002518:	4966      	ldr	r1, [pc, #408]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002520:	4b64      	ldr	r3, [pc, #400]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002522:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002526:	f023 021f 	bic.w	r2, r3, #31
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	3b01      	subs	r3, #1
 8002530:	4960      	ldr	r1, [pc, #384]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00d      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	019a      	lsls	r2, r3, #6
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	061b      	lsls	r3, r3, #24
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	071b      	lsls	r3, r3, #28
 8002558:	4956      	ldr	r1, [pc, #344]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002560:	4b54      	ldr	r3, [pc, #336]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a53      	ldr	r2, [pc, #332]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002566:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800256a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800256c:	f7fe fc58 	bl	8000e20 <HAL_GetTick>
 8002570:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002574:	f7fe fc54 	bl	8000e20 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b64      	cmp	r3, #100	@ 0x64
 8002580:	d901      	bls.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e092      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002586:	4b4b      	ldr	r3, [pc, #300]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	2b01      	cmp	r3, #1
 8002596:	f040 8088 	bne.w	80026aa <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800259a:	4b46      	ldr	r3, [pc, #280]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a45      	ldr	r2, [pc, #276]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80025a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a6:	f7fe fc3b 	bl	8000e20 <HAL_GetTick>
 80025aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025ae:	f7fe fc37 	bl	8000e20 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b64      	cmp	r3, #100	@ 0x64
 80025ba:	d901      	bls.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e075      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025c0:	4b3c      	ldr	r3, [pc, #240]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025cc:	d0ef      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d024      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d120      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025f6:	4b2f      	ldr	r3, [pc, #188]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025fc:	0c1b      	lsrs	r3, r3, #16
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	019a      	lsls	r2, r3, #6
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	041b      	lsls	r3, r3, #16
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	061b      	lsls	r3, r3, #24
 8002616:	4927      	ldr	r1, [pc, #156]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800261e:	4b25      	ldr	r3, [pc, #148]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002620:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002624:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	3b01      	subs	r3, #1
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	4920      	ldr	r1, [pc, #128]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d018      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002648:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800264c:	d113      	bne.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800264e:	4b19      	ldr	r3, [pc, #100]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002654:	0e1b      	lsrs	r3, r3, #24
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	019a      	lsls	r2, r3, #6
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	041b      	lsls	r3, r3, #16
 8002668:	431a      	orrs	r2, r3
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	061b      	lsls	r3, r3, #24
 800266e:	4911      	ldr	r1, [pc, #68]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002676:	4b0f      	ldr	r3, [pc, #60]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a0e      	ldr	r2, [pc, #56]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800267c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002680:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002682:	f7fe fbcd 	bl	8000e20 <HAL_GetTick>
 8002686:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002688:	e008      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800268a:	f7fe fbc9 	bl	8000e20 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b64      	cmp	r3, #100	@ 0x64
 8002696:	d901      	bls.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e007      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800269c:	4b05      	ldr	r3, [pc, #20]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026a8:	d1ef      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3720      	adds	r7, #32
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40023800 	.word	0x40023800

080026b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e040      	b.n	800274c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fe f96e 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2224      	movs	r2, #36	@ 0x24
 80026e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0201 	bic.w	r2, r2, #1
 80026f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 fbde 	bl	8002ec0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f977 	bl	80029f8 <UART_SetConfig>
 800270a:	4603      	mov	r3, r0
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e01b      	b.n	800274c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002722:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002732:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 fc5d 	bl	8003004 <UART_CheckIdleState>
 800274a:	4603      	mov	r3, r0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08a      	sub	sp, #40	@ 0x28
 8002758:	af02      	add	r7, sp, #8
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	4613      	mov	r3, r2
 8002762:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002768:	2b20      	cmp	r3, #32
 800276a:	d177      	bne.n	800285c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <HAL_UART_Transmit+0x24>
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e070      	b.n	800285e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2221      	movs	r2, #33	@ 0x21
 8002788:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800278a:	f7fe fb49 	bl	8000e20 <HAL_GetTick>
 800278e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	88fa      	ldrh	r2, [r7, #6]
 8002794:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	88fa      	ldrh	r2, [r7, #6]
 800279c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027a8:	d108      	bne.n	80027bc <HAL_UART_Transmit+0x68>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d104      	bne.n	80027bc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	e003      	b.n	80027c4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027c4:	e02f      	b.n	8002826 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2200      	movs	r2, #0
 80027ce:	2180      	movs	r1, #128	@ 0x80
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 fc6e 	bl	80030b2 <UART_WaitOnFlagUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d004      	beq.n	80027e6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2220      	movs	r2, #32
 80027e0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e03b      	b.n	800285e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10b      	bne.n	8002804 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	3302      	adds	r3, #2
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	e007      	b.n	8002814 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	781a      	ldrb	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3301      	adds	r3, #1
 8002812:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800282c:	b29b      	uxth	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1c9      	bne.n	80027c6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2200      	movs	r2, #0
 800283a:	2140      	movs	r1, #64	@ 0x40
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 fc38 	bl	80030b2 <UART_WaitOnFlagUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d004      	beq.n	8002852 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2220      	movs	r2, #32
 800284c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e005      	b.n	800285e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2220      	movs	r2, #32
 8002856:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	e000      	b.n	800285e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800285c:	2302      	movs	r3, #2
  }
}
 800285e:	4618      	mov	r0, r3
 8002860:	3720      	adds	r7, #32
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b08a      	sub	sp, #40	@ 0x28
 800286a:	af02      	add	r7, sp, #8
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	603b      	str	r3, [r7, #0]
 8002872:	4613      	mov	r3, r2
 8002874:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800287c:	2b20      	cmp	r3, #32
 800287e:	f040 80b5 	bne.w	80029ec <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <HAL_UART_Receive+0x28>
 8002888:	88fb      	ldrh	r3, [r7, #6]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e0ad      	b.n	80029ee <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2222      	movs	r2, #34	@ 0x22
 800289e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028a8:	f7fe faba 	bl	8000e20 <HAL_GetTick>
 80028ac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	88fa      	ldrh	r2, [r7, #6]
 80028b2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	88fa      	ldrh	r2, [r7, #6]
 80028ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028c6:	d10e      	bne.n	80028e6 <HAL_UART_Receive+0x80>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d105      	bne.n	80028dc <HAL_UART_Receive+0x76>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80028d6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80028da:	e02d      	b.n	8002938 <HAL_UART_Receive+0xd2>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	22ff      	movs	r2, #255	@ 0xff
 80028e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80028e4:	e028      	b.n	8002938 <HAL_UART_Receive+0xd2>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10d      	bne.n	800290a <HAL_UART_Receive+0xa4>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d104      	bne.n	8002900 <HAL_UART_Receive+0x9a>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	22ff      	movs	r2, #255	@ 0xff
 80028fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80028fe:	e01b      	b.n	8002938 <HAL_UART_Receive+0xd2>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	227f      	movs	r2, #127	@ 0x7f
 8002904:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002908:	e016      	b.n	8002938 <HAL_UART_Receive+0xd2>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002912:	d10d      	bne.n	8002930 <HAL_UART_Receive+0xca>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d104      	bne.n	8002926 <HAL_UART_Receive+0xc0>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	227f      	movs	r2, #127	@ 0x7f
 8002920:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002924:	e008      	b.n	8002938 <HAL_UART_Receive+0xd2>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	223f      	movs	r2, #63	@ 0x3f
 800292a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800292e:	e003      	b.n	8002938 <HAL_UART_Receive+0xd2>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800293e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002948:	d108      	bne.n	800295c <HAL_UART_Receive+0xf6>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d104      	bne.n	800295c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	e003      	b.n	8002964 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002960:	2300      	movs	r3, #0
 8002962:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002964:	e036      	b.n	80029d4 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2200      	movs	r2, #0
 800296e:	2120      	movs	r1, #32
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 fb9e 	bl	80030b2 <UART_WaitOnFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2220      	movs	r2, #32
 8002980:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e032      	b.n	80029ee <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10c      	bne.n	80029a8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	b29a      	uxth	r2, r3
 8002996:	8a7b      	ldrh	r3, [r7, #18]
 8002998:	4013      	ands	r3, r2
 800299a:	b29a      	uxth	r2, r3
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	3302      	adds	r3, #2
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	e00c      	b.n	80029c2 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	8a7b      	ldrh	r3, [r7, #18]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	4013      	ands	r3, r2
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	3301      	adds	r3, #1
 80029c0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1c2      	bne.n	8002966 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	e000      	b.n	80029ee <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80029ec:	2302      	movs	r3, #2
  }
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3720      	adds	r7, #32
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	4ba6      	ldr	r3, [pc, #664]	@ (8002cbc <UART_SetConfig+0x2c4>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6812      	ldr	r2, [r2, #0]
 8002a2a:	6979      	ldr	r1, [r7, #20]
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a94      	ldr	r2, [pc, #592]	@ (8002cc0 <UART_SetConfig+0x2c8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d120      	bne.n	8002ab6 <UART_SetConfig+0xbe>
 8002a74:	4b93      	ldr	r3, [pc, #588]	@ (8002cc4 <UART_SetConfig+0x2cc>)
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d816      	bhi.n	8002ab0 <UART_SetConfig+0xb8>
 8002a82:	a201      	add	r2, pc, #4	@ (adr r2, 8002a88 <UART_SetConfig+0x90>)
 8002a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a88:	08002a99 	.word	0x08002a99
 8002a8c:	08002aa5 	.word	0x08002aa5
 8002a90:	08002a9f 	.word	0x08002a9f
 8002a94:	08002aab 	.word	0x08002aab
 8002a98:	2301      	movs	r3, #1
 8002a9a:	77fb      	strb	r3, [r7, #31]
 8002a9c:	e150      	b.n	8002d40 <UART_SetConfig+0x348>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	77fb      	strb	r3, [r7, #31]
 8002aa2:	e14d      	b.n	8002d40 <UART_SetConfig+0x348>
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	77fb      	strb	r3, [r7, #31]
 8002aa8:	e14a      	b.n	8002d40 <UART_SetConfig+0x348>
 8002aaa:	2308      	movs	r3, #8
 8002aac:	77fb      	strb	r3, [r7, #31]
 8002aae:	e147      	b.n	8002d40 <UART_SetConfig+0x348>
 8002ab0:	2310      	movs	r3, #16
 8002ab2:	77fb      	strb	r3, [r7, #31]
 8002ab4:	e144      	b.n	8002d40 <UART_SetConfig+0x348>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a83      	ldr	r2, [pc, #524]	@ (8002cc8 <UART_SetConfig+0x2d0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d132      	bne.n	8002b26 <UART_SetConfig+0x12e>
 8002ac0:	4b80      	ldr	r3, [pc, #512]	@ (8002cc4 <UART_SetConfig+0x2cc>)
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac6:	f003 030c 	and.w	r3, r3, #12
 8002aca:	2b0c      	cmp	r3, #12
 8002acc:	d828      	bhi.n	8002b20 <UART_SetConfig+0x128>
 8002ace:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad4 <UART_SetConfig+0xdc>)
 8002ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad4:	08002b09 	.word	0x08002b09
 8002ad8:	08002b21 	.word	0x08002b21
 8002adc:	08002b21 	.word	0x08002b21
 8002ae0:	08002b21 	.word	0x08002b21
 8002ae4:	08002b15 	.word	0x08002b15
 8002ae8:	08002b21 	.word	0x08002b21
 8002aec:	08002b21 	.word	0x08002b21
 8002af0:	08002b21 	.word	0x08002b21
 8002af4:	08002b0f 	.word	0x08002b0f
 8002af8:	08002b21 	.word	0x08002b21
 8002afc:	08002b21 	.word	0x08002b21
 8002b00:	08002b21 	.word	0x08002b21
 8002b04:	08002b1b 	.word	0x08002b1b
 8002b08:	2300      	movs	r3, #0
 8002b0a:	77fb      	strb	r3, [r7, #31]
 8002b0c:	e118      	b.n	8002d40 <UART_SetConfig+0x348>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	77fb      	strb	r3, [r7, #31]
 8002b12:	e115      	b.n	8002d40 <UART_SetConfig+0x348>
 8002b14:	2304      	movs	r3, #4
 8002b16:	77fb      	strb	r3, [r7, #31]
 8002b18:	e112      	b.n	8002d40 <UART_SetConfig+0x348>
 8002b1a:	2308      	movs	r3, #8
 8002b1c:	77fb      	strb	r3, [r7, #31]
 8002b1e:	e10f      	b.n	8002d40 <UART_SetConfig+0x348>
 8002b20:	2310      	movs	r3, #16
 8002b22:	77fb      	strb	r3, [r7, #31]
 8002b24:	e10c      	b.n	8002d40 <UART_SetConfig+0x348>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a68      	ldr	r2, [pc, #416]	@ (8002ccc <UART_SetConfig+0x2d4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d120      	bne.n	8002b72 <UART_SetConfig+0x17a>
 8002b30:	4b64      	ldr	r3, [pc, #400]	@ (8002cc4 <UART_SetConfig+0x2cc>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b36:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002b3a:	2b30      	cmp	r3, #48	@ 0x30
 8002b3c:	d013      	beq.n	8002b66 <UART_SetConfig+0x16e>
 8002b3e:	2b30      	cmp	r3, #48	@ 0x30
 8002b40:	d814      	bhi.n	8002b6c <UART_SetConfig+0x174>
 8002b42:	2b20      	cmp	r3, #32
 8002b44:	d009      	beq.n	8002b5a <UART_SetConfig+0x162>
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	d810      	bhi.n	8002b6c <UART_SetConfig+0x174>
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <UART_SetConfig+0x15c>
 8002b4e:	2b10      	cmp	r3, #16
 8002b50:	d006      	beq.n	8002b60 <UART_SetConfig+0x168>
 8002b52:	e00b      	b.n	8002b6c <UART_SetConfig+0x174>
 8002b54:	2300      	movs	r3, #0
 8002b56:	77fb      	strb	r3, [r7, #31]
 8002b58:	e0f2      	b.n	8002d40 <UART_SetConfig+0x348>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	77fb      	strb	r3, [r7, #31]
 8002b5e:	e0ef      	b.n	8002d40 <UART_SetConfig+0x348>
 8002b60:	2304      	movs	r3, #4
 8002b62:	77fb      	strb	r3, [r7, #31]
 8002b64:	e0ec      	b.n	8002d40 <UART_SetConfig+0x348>
 8002b66:	2308      	movs	r3, #8
 8002b68:	77fb      	strb	r3, [r7, #31]
 8002b6a:	e0e9      	b.n	8002d40 <UART_SetConfig+0x348>
 8002b6c:	2310      	movs	r3, #16
 8002b6e:	77fb      	strb	r3, [r7, #31]
 8002b70:	e0e6      	b.n	8002d40 <UART_SetConfig+0x348>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a56      	ldr	r2, [pc, #344]	@ (8002cd0 <UART_SetConfig+0x2d8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d120      	bne.n	8002bbe <UART_SetConfig+0x1c6>
 8002b7c:	4b51      	ldr	r3, [pc, #324]	@ (8002cc4 <UART_SetConfig+0x2cc>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002b86:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b88:	d013      	beq.n	8002bb2 <UART_SetConfig+0x1ba>
 8002b8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b8c:	d814      	bhi.n	8002bb8 <UART_SetConfig+0x1c0>
 8002b8e:	2b80      	cmp	r3, #128	@ 0x80
 8002b90:	d009      	beq.n	8002ba6 <UART_SetConfig+0x1ae>
 8002b92:	2b80      	cmp	r3, #128	@ 0x80
 8002b94:	d810      	bhi.n	8002bb8 <UART_SetConfig+0x1c0>
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <UART_SetConfig+0x1a8>
 8002b9a:	2b40      	cmp	r3, #64	@ 0x40
 8002b9c:	d006      	beq.n	8002bac <UART_SetConfig+0x1b4>
 8002b9e:	e00b      	b.n	8002bb8 <UART_SetConfig+0x1c0>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	77fb      	strb	r3, [r7, #31]
 8002ba4:	e0cc      	b.n	8002d40 <UART_SetConfig+0x348>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	77fb      	strb	r3, [r7, #31]
 8002baa:	e0c9      	b.n	8002d40 <UART_SetConfig+0x348>
 8002bac:	2304      	movs	r3, #4
 8002bae:	77fb      	strb	r3, [r7, #31]
 8002bb0:	e0c6      	b.n	8002d40 <UART_SetConfig+0x348>
 8002bb2:	2308      	movs	r3, #8
 8002bb4:	77fb      	strb	r3, [r7, #31]
 8002bb6:	e0c3      	b.n	8002d40 <UART_SetConfig+0x348>
 8002bb8:	2310      	movs	r3, #16
 8002bba:	77fb      	strb	r3, [r7, #31]
 8002bbc:	e0c0      	b.n	8002d40 <UART_SetConfig+0x348>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a44      	ldr	r2, [pc, #272]	@ (8002cd4 <UART_SetConfig+0x2dc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d125      	bne.n	8002c14 <UART_SetConfig+0x21c>
 8002bc8:	4b3e      	ldr	r3, [pc, #248]	@ (8002cc4 <UART_SetConfig+0x2cc>)
 8002bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002bd6:	d017      	beq.n	8002c08 <UART_SetConfig+0x210>
 8002bd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002bdc:	d817      	bhi.n	8002c0e <UART_SetConfig+0x216>
 8002bde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002be2:	d00b      	beq.n	8002bfc <UART_SetConfig+0x204>
 8002be4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002be8:	d811      	bhi.n	8002c0e <UART_SetConfig+0x216>
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <UART_SetConfig+0x1fe>
 8002bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bf2:	d006      	beq.n	8002c02 <UART_SetConfig+0x20a>
 8002bf4:	e00b      	b.n	8002c0e <UART_SetConfig+0x216>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	77fb      	strb	r3, [r7, #31]
 8002bfa:	e0a1      	b.n	8002d40 <UART_SetConfig+0x348>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	77fb      	strb	r3, [r7, #31]
 8002c00:	e09e      	b.n	8002d40 <UART_SetConfig+0x348>
 8002c02:	2304      	movs	r3, #4
 8002c04:	77fb      	strb	r3, [r7, #31]
 8002c06:	e09b      	b.n	8002d40 <UART_SetConfig+0x348>
 8002c08:	2308      	movs	r3, #8
 8002c0a:	77fb      	strb	r3, [r7, #31]
 8002c0c:	e098      	b.n	8002d40 <UART_SetConfig+0x348>
 8002c0e:	2310      	movs	r3, #16
 8002c10:	77fb      	strb	r3, [r7, #31]
 8002c12:	e095      	b.n	8002d40 <UART_SetConfig+0x348>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a2f      	ldr	r2, [pc, #188]	@ (8002cd8 <UART_SetConfig+0x2e0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d125      	bne.n	8002c6a <UART_SetConfig+0x272>
 8002c1e:	4b29      	ldr	r3, [pc, #164]	@ (8002cc4 <UART_SetConfig+0x2cc>)
 8002c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c2c:	d017      	beq.n	8002c5e <UART_SetConfig+0x266>
 8002c2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c32:	d817      	bhi.n	8002c64 <UART_SetConfig+0x26c>
 8002c34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c38:	d00b      	beq.n	8002c52 <UART_SetConfig+0x25a>
 8002c3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c3e:	d811      	bhi.n	8002c64 <UART_SetConfig+0x26c>
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <UART_SetConfig+0x254>
 8002c44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c48:	d006      	beq.n	8002c58 <UART_SetConfig+0x260>
 8002c4a:	e00b      	b.n	8002c64 <UART_SetConfig+0x26c>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	77fb      	strb	r3, [r7, #31]
 8002c50:	e076      	b.n	8002d40 <UART_SetConfig+0x348>
 8002c52:	2302      	movs	r3, #2
 8002c54:	77fb      	strb	r3, [r7, #31]
 8002c56:	e073      	b.n	8002d40 <UART_SetConfig+0x348>
 8002c58:	2304      	movs	r3, #4
 8002c5a:	77fb      	strb	r3, [r7, #31]
 8002c5c:	e070      	b.n	8002d40 <UART_SetConfig+0x348>
 8002c5e:	2308      	movs	r3, #8
 8002c60:	77fb      	strb	r3, [r7, #31]
 8002c62:	e06d      	b.n	8002d40 <UART_SetConfig+0x348>
 8002c64:	2310      	movs	r3, #16
 8002c66:	77fb      	strb	r3, [r7, #31]
 8002c68:	e06a      	b.n	8002d40 <UART_SetConfig+0x348>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1b      	ldr	r2, [pc, #108]	@ (8002cdc <UART_SetConfig+0x2e4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d138      	bne.n	8002ce6 <UART_SetConfig+0x2ee>
 8002c74:	4b13      	ldr	r3, [pc, #76]	@ (8002cc4 <UART_SetConfig+0x2cc>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002c7e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c82:	d017      	beq.n	8002cb4 <UART_SetConfig+0x2bc>
 8002c84:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c88:	d82a      	bhi.n	8002ce0 <UART_SetConfig+0x2e8>
 8002c8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c8e:	d00b      	beq.n	8002ca8 <UART_SetConfig+0x2b0>
 8002c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c94:	d824      	bhi.n	8002ce0 <UART_SetConfig+0x2e8>
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <UART_SetConfig+0x2aa>
 8002c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c9e:	d006      	beq.n	8002cae <UART_SetConfig+0x2b6>
 8002ca0:	e01e      	b.n	8002ce0 <UART_SetConfig+0x2e8>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	77fb      	strb	r3, [r7, #31]
 8002ca6:	e04b      	b.n	8002d40 <UART_SetConfig+0x348>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	77fb      	strb	r3, [r7, #31]
 8002cac:	e048      	b.n	8002d40 <UART_SetConfig+0x348>
 8002cae:	2304      	movs	r3, #4
 8002cb0:	77fb      	strb	r3, [r7, #31]
 8002cb2:	e045      	b.n	8002d40 <UART_SetConfig+0x348>
 8002cb4:	2308      	movs	r3, #8
 8002cb6:	77fb      	strb	r3, [r7, #31]
 8002cb8:	e042      	b.n	8002d40 <UART_SetConfig+0x348>
 8002cba:	bf00      	nop
 8002cbc:	efff69f3 	.word	0xefff69f3
 8002cc0:	40011000 	.word	0x40011000
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40004400 	.word	0x40004400
 8002ccc:	40004800 	.word	0x40004800
 8002cd0:	40004c00 	.word	0x40004c00
 8002cd4:	40005000 	.word	0x40005000
 8002cd8:	40011400 	.word	0x40011400
 8002cdc:	40007800 	.word	0x40007800
 8002ce0:	2310      	movs	r3, #16
 8002ce2:	77fb      	strb	r3, [r7, #31]
 8002ce4:	e02c      	b.n	8002d40 <UART_SetConfig+0x348>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a72      	ldr	r2, [pc, #456]	@ (8002eb4 <UART_SetConfig+0x4bc>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d125      	bne.n	8002d3c <UART_SetConfig+0x344>
 8002cf0:	4b71      	ldr	r3, [pc, #452]	@ (8002eb8 <UART_SetConfig+0x4c0>)
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cf6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002cfa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002cfe:	d017      	beq.n	8002d30 <UART_SetConfig+0x338>
 8002d00:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002d04:	d817      	bhi.n	8002d36 <UART_SetConfig+0x33e>
 8002d06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d0a:	d00b      	beq.n	8002d24 <UART_SetConfig+0x32c>
 8002d0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d10:	d811      	bhi.n	8002d36 <UART_SetConfig+0x33e>
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <UART_SetConfig+0x326>
 8002d16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d1a:	d006      	beq.n	8002d2a <UART_SetConfig+0x332>
 8002d1c:	e00b      	b.n	8002d36 <UART_SetConfig+0x33e>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	77fb      	strb	r3, [r7, #31]
 8002d22:	e00d      	b.n	8002d40 <UART_SetConfig+0x348>
 8002d24:	2302      	movs	r3, #2
 8002d26:	77fb      	strb	r3, [r7, #31]
 8002d28:	e00a      	b.n	8002d40 <UART_SetConfig+0x348>
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	77fb      	strb	r3, [r7, #31]
 8002d2e:	e007      	b.n	8002d40 <UART_SetConfig+0x348>
 8002d30:	2308      	movs	r3, #8
 8002d32:	77fb      	strb	r3, [r7, #31]
 8002d34:	e004      	b.n	8002d40 <UART_SetConfig+0x348>
 8002d36:	2310      	movs	r3, #16
 8002d38:	77fb      	strb	r3, [r7, #31]
 8002d3a:	e001      	b.n	8002d40 <UART_SetConfig+0x348>
 8002d3c:	2310      	movs	r3, #16
 8002d3e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d48:	d15b      	bne.n	8002e02 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002d4a:	7ffb      	ldrb	r3, [r7, #31]
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d828      	bhi.n	8002da2 <UART_SetConfig+0x3aa>
 8002d50:	a201      	add	r2, pc, #4	@ (adr r2, 8002d58 <UART_SetConfig+0x360>)
 8002d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d56:	bf00      	nop
 8002d58:	08002d7d 	.word	0x08002d7d
 8002d5c:	08002d85 	.word	0x08002d85
 8002d60:	08002d8d 	.word	0x08002d8d
 8002d64:	08002da3 	.word	0x08002da3
 8002d68:	08002d93 	.word	0x08002d93
 8002d6c:	08002da3 	.word	0x08002da3
 8002d70:	08002da3 	.word	0x08002da3
 8002d74:	08002da3 	.word	0x08002da3
 8002d78:	08002d9b 	.word	0x08002d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d7c:	f7ff f92a 	bl	8001fd4 <HAL_RCC_GetPCLK1Freq>
 8002d80:	61b8      	str	r0, [r7, #24]
        break;
 8002d82:	e013      	b.n	8002dac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d84:	f7ff f93a 	bl	8001ffc <HAL_RCC_GetPCLK2Freq>
 8002d88:	61b8      	str	r0, [r7, #24]
        break;
 8002d8a:	e00f      	b.n	8002dac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8002ebc <UART_SetConfig+0x4c4>)
 8002d8e:	61bb      	str	r3, [r7, #24]
        break;
 8002d90:	e00c      	b.n	8002dac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d92:	f7ff f84d 	bl	8001e30 <HAL_RCC_GetSysClockFreq>
 8002d96:	61b8      	str	r0, [r7, #24]
        break;
 8002d98:	e008      	b.n	8002dac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d9e:	61bb      	str	r3, [r7, #24]
        break;
 8002da0:	e004      	b.n	8002dac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	77bb      	strb	r3, [r7, #30]
        break;
 8002daa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d074      	beq.n	8002e9c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	005a      	lsls	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	085b      	lsrs	r3, r3, #1
 8002dbc:	441a      	add	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	2b0f      	cmp	r3, #15
 8002dcc:	d916      	bls.n	8002dfc <UART_SetConfig+0x404>
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dd4:	d212      	bcs.n	8002dfc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	f023 030f 	bic.w	r3, r3, #15
 8002dde:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	085b      	lsrs	r3, r3, #1
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	89fb      	ldrh	r3, [r7, #14]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	89fa      	ldrh	r2, [r7, #14]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	e04f      	b.n	8002e9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	77bb      	strb	r3, [r7, #30]
 8002e00:	e04c      	b.n	8002e9c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e02:	7ffb      	ldrb	r3, [r7, #31]
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d828      	bhi.n	8002e5a <UART_SetConfig+0x462>
 8002e08:	a201      	add	r2, pc, #4	@ (adr r2, 8002e10 <UART_SetConfig+0x418>)
 8002e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0e:	bf00      	nop
 8002e10:	08002e35 	.word	0x08002e35
 8002e14:	08002e3d 	.word	0x08002e3d
 8002e18:	08002e45 	.word	0x08002e45
 8002e1c:	08002e5b 	.word	0x08002e5b
 8002e20:	08002e4b 	.word	0x08002e4b
 8002e24:	08002e5b 	.word	0x08002e5b
 8002e28:	08002e5b 	.word	0x08002e5b
 8002e2c:	08002e5b 	.word	0x08002e5b
 8002e30:	08002e53 	.word	0x08002e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e34:	f7ff f8ce 	bl	8001fd4 <HAL_RCC_GetPCLK1Freq>
 8002e38:	61b8      	str	r0, [r7, #24]
        break;
 8002e3a:	e013      	b.n	8002e64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e3c:	f7ff f8de 	bl	8001ffc <HAL_RCC_GetPCLK2Freq>
 8002e40:	61b8      	str	r0, [r7, #24]
        break;
 8002e42:	e00f      	b.n	8002e64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e44:	4b1d      	ldr	r3, [pc, #116]	@ (8002ebc <UART_SetConfig+0x4c4>)
 8002e46:	61bb      	str	r3, [r7, #24]
        break;
 8002e48:	e00c      	b.n	8002e64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e4a:	f7fe fff1 	bl	8001e30 <HAL_RCC_GetSysClockFreq>
 8002e4e:	61b8      	str	r0, [r7, #24]
        break;
 8002e50:	e008      	b.n	8002e64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e56:	61bb      	str	r3, [r7, #24]
        break;
 8002e58:	e004      	b.n	8002e64 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	77bb      	strb	r3, [r7, #30]
        break;
 8002e62:	bf00      	nop
    }

    if (pclk != 0U)
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d018      	beq.n	8002e9c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	085a      	lsrs	r2, r3, #1
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	441a      	add	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	2b0f      	cmp	r3, #15
 8002e82:	d909      	bls.n	8002e98 <UART_SetConfig+0x4a0>
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e8a:	d205      	bcs.n	8002e98 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	e001      	b.n	8002e9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002ea8:	7fbb      	ldrb	r3, [r7, #30]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3720      	adds	r7, #32
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40007c00 	.word	0x40007c00
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	00f42400 	.word	0x00f42400

08002ec0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00a      	beq.n	8002eea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00a      	beq.n	8002f0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00a      	beq.n	8002f2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00a      	beq.n	8002f50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00a      	beq.n	8002f72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00a      	beq.n	8002f94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d01a      	beq.n	8002fd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fbe:	d10a      	bne.n	8002fd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	605a      	str	r2, [r3, #4]
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08c      	sub	sp, #48	@ 0x30
 8003008:	af02      	add	r7, sp, #8
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003014:	f7fd ff04 	bl	8000e20 <HAL_GetTick>
 8003018:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b08      	cmp	r3, #8
 8003026:	d12e      	bne.n	8003086 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003028:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	2200      	movs	r2, #0
 8003032:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f83b 	bl	80030b2 <UART_WaitOnFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d021      	beq.n	8003086 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	e853 3f00 	ldrex	r3, [r3]
 800304e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003056:	623b      	str	r3, [r7, #32]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003064:	69b9      	ldr	r1, [r7, #24]
 8003066:	69fa      	ldr	r2, [r7, #28]
 8003068:	e841 2300 	strex	r3, r2, [r1]
 800306c:	617b      	str	r3, [r7, #20]
   return(result);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e6      	bne.n	8003042 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e011      	b.n	80030aa <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2220      	movs	r2, #32
 800308a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2220      	movs	r2, #32
 8003090:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3728      	adds	r7, #40	@ 0x28
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b084      	sub	sp, #16
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	4613      	mov	r3, r2
 80030c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c2:	e04f      	b.n	8003164 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ca:	d04b      	beq.n	8003164 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030cc:	f7fd fea8 	bl	8000e20 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d302      	bcc.n	80030e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e04e      	b.n	8003184 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d037      	beq.n	8003164 <UART_WaitOnFlagUntilTimeout+0xb2>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b80      	cmp	r3, #128	@ 0x80
 80030f8:	d034      	beq.n	8003164 <UART_WaitOnFlagUntilTimeout+0xb2>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b40      	cmp	r3, #64	@ 0x40
 80030fe:	d031      	beq.n	8003164 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b08      	cmp	r3, #8
 800310c:	d110      	bne.n	8003130 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2208      	movs	r2, #8
 8003114:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f838 	bl	800318c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2208      	movs	r2, #8
 8003120:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e029      	b.n	8003184 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800313a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800313e:	d111      	bne.n	8003164 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003148:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f81e 	bl	800318c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e00f      	b.n	8003184 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	69da      	ldr	r2, [r3, #28]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	4013      	ands	r3, r2
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	429a      	cmp	r2, r3
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	461a      	mov	r2, r3
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	429a      	cmp	r2, r3
 8003180:	d0a0      	beq.n	80030c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800318c:	b480      	push	{r7}
 800318e:	b095      	sub	sp, #84	@ 0x54
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319c:	e853 3f00 	ldrex	r3, [r3]
 80031a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80031b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031ba:	e841 2300 	strex	r3, r2, [r1]
 80031be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1e6      	bne.n	8003194 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	3308      	adds	r3, #8
 80031cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	e853 3f00 	ldrex	r3, [r3]
 80031d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f023 0301 	bic.w	r3, r3, #1
 80031dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3308      	adds	r3, #8
 80031e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031ee:	e841 2300 	strex	r3, r2, [r1]
 80031f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1e5      	bne.n	80031c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d118      	bne.n	8003234 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	e853 3f00 	ldrex	r3, [r3]
 800320e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f023 0310 	bic.w	r3, r3, #16
 8003216:	647b      	str	r3, [r7, #68]	@ 0x44
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003220:	61bb      	str	r3, [r7, #24]
 8003222:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003224:	6979      	ldr	r1, [r7, #20]
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	e841 2300 	strex	r3, r2, [r1]
 800322c:	613b      	str	r3, [r7, #16]
   return(result);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1e6      	bne.n	8003202 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003248:	bf00      	nop
 800324a:	3754      	adds	r7, #84	@ 0x54
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <memset>:
 8003254:	4402      	add	r2, r0
 8003256:	4603      	mov	r3, r0
 8003258:	4293      	cmp	r3, r2
 800325a:	d100      	bne.n	800325e <memset+0xa>
 800325c:	4770      	bx	lr
 800325e:	f803 1b01 	strb.w	r1, [r3], #1
 8003262:	e7f9      	b.n	8003258 <memset+0x4>

08003264 <__libc_init_array>:
 8003264:	b570      	push	{r4, r5, r6, lr}
 8003266:	4d0d      	ldr	r5, [pc, #52]	@ (800329c <__libc_init_array+0x38>)
 8003268:	4c0d      	ldr	r4, [pc, #52]	@ (80032a0 <__libc_init_array+0x3c>)
 800326a:	1b64      	subs	r4, r4, r5
 800326c:	10a4      	asrs	r4, r4, #2
 800326e:	2600      	movs	r6, #0
 8003270:	42a6      	cmp	r6, r4
 8003272:	d109      	bne.n	8003288 <__libc_init_array+0x24>
 8003274:	4d0b      	ldr	r5, [pc, #44]	@ (80032a4 <__libc_init_array+0x40>)
 8003276:	4c0c      	ldr	r4, [pc, #48]	@ (80032a8 <__libc_init_array+0x44>)
 8003278:	f000 f818 	bl	80032ac <_init>
 800327c:	1b64      	subs	r4, r4, r5
 800327e:	10a4      	asrs	r4, r4, #2
 8003280:	2600      	movs	r6, #0
 8003282:	42a6      	cmp	r6, r4
 8003284:	d105      	bne.n	8003292 <__libc_init_array+0x2e>
 8003286:	bd70      	pop	{r4, r5, r6, pc}
 8003288:	f855 3b04 	ldr.w	r3, [r5], #4
 800328c:	4798      	blx	r3
 800328e:	3601      	adds	r6, #1
 8003290:	e7ee      	b.n	8003270 <__libc_init_array+0xc>
 8003292:	f855 3b04 	ldr.w	r3, [r5], #4
 8003296:	4798      	blx	r3
 8003298:	3601      	adds	r6, #1
 800329a:	e7f2      	b.n	8003282 <__libc_init_array+0x1e>
 800329c:	08003370 	.word	0x08003370
 80032a0:	08003370 	.word	0x08003370
 80032a4:	08003370 	.word	0x08003370
 80032a8:	08003374 	.word	0x08003374

080032ac <_init>:
 80032ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ae:	bf00      	nop
 80032b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032b2:	bc08      	pop	{r3}
 80032b4:	469e      	mov	lr, r3
 80032b6:	4770      	bx	lr

080032b8 <_fini>:
 80032b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ba:	bf00      	nop
 80032bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032be:	bc08      	pop	{r3}
 80032c0:	469e      	mov	lr, r3
 80032c2:	4770      	bx	lr

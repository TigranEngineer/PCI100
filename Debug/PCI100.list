
PCI100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000556c  080001e0  080001e0  000011e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  0800574c  0800574c  0000674c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a74  08005a74  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005a74  08005a74  00006a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a7c  08005a7c  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a7c  08005a7c  00006a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a80  08005a80  00006a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005a84  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000768  20000070  08005af4  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007d8  08005af4  000077d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cbd  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a78  00000000  00000000  00018d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  0001b7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3c  00000000  00000000  0001c510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002357c  00000000  00000000  0001cf4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b09  00000000  00000000  000404c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9646  00000000  00000000  00053fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d617  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037a8  00000000  00000000  0012d65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  00130e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005734 	.word	0x08005734

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08005734 	.word	0x08005734

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr

08000244 <__aeabi_uldivmod>:
 8000244:	b953      	cbnz	r3, 800025c <__aeabi_uldivmod+0x18>
 8000246:	b94a      	cbnz	r2, 800025c <__aeabi_uldivmod+0x18>
 8000248:	2900      	cmp	r1, #0
 800024a:	bf08      	it	eq
 800024c:	2800      	cmpeq	r0, #0
 800024e:	bf1c      	itt	ne
 8000250:	f04f 31ff 	movne.w	r1, #4294967295
 8000254:	f04f 30ff 	movne.w	r0, #4294967295
 8000258:	f000 b96a 	b.w	8000530 <__aeabi_idiv0>
 800025c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000260:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4770      	bx	lr

08000274 <__udivmoddi4>:
 8000274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000278:	9d08      	ldr	r5, [sp, #32]
 800027a:	460c      	mov	r4, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14e      	bne.n	800031e <__udivmoddi4+0xaa>
 8000280:	4694      	mov	ip, r2
 8000282:	458c      	cmp	ip, r1
 8000284:	4686      	mov	lr, r0
 8000286:	fab2 f282 	clz	r2, r2
 800028a:	d962      	bls.n	8000352 <__udivmoddi4+0xde>
 800028c:	b14a      	cbz	r2, 80002a2 <__udivmoddi4+0x2e>
 800028e:	f1c2 0320 	rsb	r3, r2, #32
 8000292:	4091      	lsls	r1, r2
 8000294:	fa20 f303 	lsr.w	r3, r0, r3
 8000298:	fa0c fc02 	lsl.w	ip, ip, r2
 800029c:	4319      	orrs	r1, r3
 800029e:	fa00 fe02 	lsl.w	lr, r0, r2
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f f68c 	uxth.w	r6, ip
 80002aa:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b2:	fb07 1114 	mls	r1, r7, r4, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb04 f106 	mul.w	r1, r4, r6
 80002be:	4299      	cmp	r1, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x64>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ca:	f080 8112 	bcs.w	80004f2 <__udivmoddi4+0x27e>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 810f 	bls.w	80004f2 <__udivmoddi4+0x27e>
 80002d4:	3c02      	subs	r4, #2
 80002d6:	4463      	add	r3, ip
 80002d8:	1a59      	subs	r1, r3, r1
 80002da:	fa1f f38e 	uxth.w	r3, lr
 80002de:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e2:	fb07 1110 	mls	r1, r7, r0, r1
 80002e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ea:	fb00 f606 	mul.w	r6, r0, r6
 80002ee:	429e      	cmp	r6, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x94>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fa:	f080 80fc 	bcs.w	80004f6 <__udivmoddi4+0x282>
 80002fe:	429e      	cmp	r6, r3
 8000300:	f240 80f9 	bls.w	80004f6 <__udivmoddi4+0x282>
 8000304:	4463      	add	r3, ip
 8000306:	3802      	subs	r0, #2
 8000308:	1b9b      	subs	r3, r3, r6
 800030a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030e:	2100      	movs	r1, #0
 8000310:	b11d      	cbz	r5, 800031a <__udivmoddi4+0xa6>
 8000312:	40d3      	lsrs	r3, r2
 8000314:	2200      	movs	r2, #0
 8000316:	e9c5 3200 	strd	r3, r2, [r5]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d905      	bls.n	800032e <__udivmoddi4+0xba>
 8000322:	b10d      	cbz	r5, 8000328 <__udivmoddi4+0xb4>
 8000324:	e9c5 0100 	strd	r0, r1, [r5]
 8000328:	2100      	movs	r1, #0
 800032a:	4608      	mov	r0, r1
 800032c:	e7f5      	b.n	800031a <__udivmoddi4+0xa6>
 800032e:	fab3 f183 	clz	r1, r3
 8000332:	2900      	cmp	r1, #0
 8000334:	d146      	bne.n	80003c4 <__udivmoddi4+0x150>
 8000336:	42a3      	cmp	r3, r4
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xcc>
 800033a:	4290      	cmp	r0, r2
 800033c:	f0c0 80f0 	bcc.w	8000520 <__udivmoddi4+0x2ac>
 8000340:	1a86      	subs	r6, r0, r2
 8000342:	eb64 0303 	sbc.w	r3, r4, r3
 8000346:	2001      	movs	r0, #1
 8000348:	2d00      	cmp	r5, #0
 800034a:	d0e6      	beq.n	800031a <__udivmoddi4+0xa6>
 800034c:	e9c5 6300 	strd	r6, r3, [r5]
 8000350:	e7e3      	b.n	800031a <__udivmoddi4+0xa6>
 8000352:	2a00      	cmp	r2, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x204>
 8000358:	eba1 040c 	sub.w	r4, r1, ip
 800035c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000360:	fa1f f78c 	uxth.w	r7, ip
 8000364:	2101      	movs	r1, #1
 8000366:	fbb4 f6f8 	udiv	r6, r4, r8
 800036a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036e:	fb08 4416 	mls	r4, r8, r6, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb07 f006 	mul.w	r0, r7, r6
 800037a:	4298      	cmp	r0, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x11c>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f106 34ff 	add.w	r4, r6, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x11a>
 8000388:	4298      	cmp	r0, r3
 800038a:	f200 80cd 	bhi.w	8000528 <__udivmoddi4+0x2b4>
 800038e:	4626      	mov	r6, r4
 8000390:	1a1c      	subs	r4, r3, r0
 8000392:	fa1f f38e 	uxth.w	r3, lr
 8000396:	fbb4 f0f8 	udiv	r0, r4, r8
 800039a:	fb08 4410 	mls	r4, r8, r0, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb00 f707 	mul.w	r7, r0, r7
 80003a6:	429f      	cmp	r7, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x148>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f100 34ff 	add.w	r4, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x146>
 80003b4:	429f      	cmp	r7, r3
 80003b6:	f200 80b0 	bhi.w	800051a <__udivmoddi4+0x2a6>
 80003ba:	4620      	mov	r0, r4
 80003bc:	1bdb      	subs	r3, r3, r7
 80003be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003c2:	e7a5      	b.n	8000310 <__udivmoddi4+0x9c>
 80003c4:	f1c1 0620 	rsb	r6, r1, #32
 80003c8:	408b      	lsls	r3, r1
 80003ca:	fa22 f706 	lsr.w	r7, r2, r6
 80003ce:	431f      	orrs	r7, r3
 80003d0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d4:	fa04 f301 	lsl.w	r3, r4, r1
 80003d8:	ea43 030c 	orr.w	r3, r3, ip
 80003dc:	40f4      	lsrs	r4, r6
 80003de:	fa00 f801 	lsl.w	r8, r0, r1
 80003e2:	0c38      	lsrs	r0, r7, #16
 80003e4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ec:	fa1f fc87 	uxth.w	ip, r7
 80003f0:	fb00 441e 	mls	r4, r0, lr, r4
 80003f4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f8:	fb0e f90c 	mul.w	r9, lr, ip
 80003fc:	45a1      	cmp	r9, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	d90a      	bls.n	800041a <__udivmoddi4+0x1a6>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f10e 3aff 	add.w	sl, lr, #4294967295
 800040a:	f080 8084 	bcs.w	8000516 <__udivmoddi4+0x2a2>
 800040e:	45a1      	cmp	r9, r4
 8000410:	f240 8081 	bls.w	8000516 <__udivmoddi4+0x2a2>
 8000414:	f1ae 0e02 	sub.w	lr, lr, #2
 8000418:	443c      	add	r4, r7
 800041a:	eba4 0409 	sub.w	r4, r4, r9
 800041e:	fa1f f983 	uxth.w	r9, r3
 8000422:	fbb4 f3f0 	udiv	r3, r4, r0
 8000426:	fb00 4413 	mls	r4, r0, r3, r4
 800042a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000432:	45a4      	cmp	ip, r4
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x1d2>
 8000436:	193c      	adds	r4, r7, r4
 8000438:	f103 30ff 	add.w	r0, r3, #4294967295
 800043c:	d267      	bcs.n	800050e <__udivmoddi4+0x29a>
 800043e:	45a4      	cmp	ip, r4
 8000440:	d965      	bls.n	800050e <__udivmoddi4+0x29a>
 8000442:	3b02      	subs	r3, #2
 8000444:	443c      	add	r4, r7
 8000446:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800044a:	fba0 9302 	umull	r9, r3, r0, r2
 800044e:	eba4 040c 	sub.w	r4, r4, ip
 8000452:	429c      	cmp	r4, r3
 8000454:	46ce      	mov	lr, r9
 8000456:	469c      	mov	ip, r3
 8000458:	d351      	bcc.n	80004fe <__udivmoddi4+0x28a>
 800045a:	d04e      	beq.n	80004fa <__udivmoddi4+0x286>
 800045c:	b155      	cbz	r5, 8000474 <__udivmoddi4+0x200>
 800045e:	ebb8 030e 	subs.w	r3, r8, lr
 8000462:	eb64 040c 	sbc.w	r4, r4, ip
 8000466:	fa04 f606 	lsl.w	r6, r4, r6
 800046a:	40cb      	lsrs	r3, r1
 800046c:	431e      	orrs	r6, r3
 800046e:	40cc      	lsrs	r4, r1
 8000470:	e9c5 6400 	strd	r6, r4, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	e750      	b.n	800031a <__udivmoddi4+0xa6>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f103 	lsr.w	r1, r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa24 f303 	lsr.w	r3, r4, r3
 8000488:	4094      	lsls	r4, r2
 800048a:	430c      	orrs	r4, r1
 800048c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000490:	fa00 fe02 	lsl.w	lr, r0, r2
 8000494:	fa1f f78c 	uxth.w	r7, ip
 8000498:	fbb3 f0f8 	udiv	r0, r3, r8
 800049c:	fb08 3110 	mls	r1, r8, r0, r3
 80004a0:	0c23      	lsrs	r3, r4, #16
 80004a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a6:	fb00 f107 	mul.w	r1, r0, r7
 80004aa:	4299      	cmp	r1, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x24c>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b6:	d22c      	bcs.n	8000512 <__udivmoddi4+0x29e>
 80004b8:	4299      	cmp	r1, r3
 80004ba:	d92a      	bls.n	8000512 <__udivmoddi4+0x29e>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1a5b      	subs	r3, r3, r1
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c8:	fb08 3311 	mls	r3, r8, r1, r3
 80004cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d0:	fb01 f307 	mul.w	r3, r1, r7
 80004d4:	42a3      	cmp	r3, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x276>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f101 36ff 	add.w	r6, r1, #4294967295
 80004e0:	d213      	bcs.n	800050a <__udivmoddi4+0x296>
 80004e2:	42a3      	cmp	r3, r4
 80004e4:	d911      	bls.n	800050a <__udivmoddi4+0x296>
 80004e6:	3902      	subs	r1, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	1ae4      	subs	r4, r4, r3
 80004ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004f0:	e739      	b.n	8000366 <__udivmoddi4+0xf2>
 80004f2:	4604      	mov	r4, r0
 80004f4:	e6f0      	b.n	80002d8 <__udivmoddi4+0x64>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e706      	b.n	8000308 <__udivmoddi4+0x94>
 80004fa:	45c8      	cmp	r8, r9
 80004fc:	d2ae      	bcs.n	800045c <__udivmoddi4+0x1e8>
 80004fe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000502:	eb63 0c07 	sbc.w	ip, r3, r7
 8000506:	3801      	subs	r0, #1
 8000508:	e7a8      	b.n	800045c <__udivmoddi4+0x1e8>
 800050a:	4631      	mov	r1, r6
 800050c:	e7ed      	b.n	80004ea <__udivmoddi4+0x276>
 800050e:	4603      	mov	r3, r0
 8000510:	e799      	b.n	8000446 <__udivmoddi4+0x1d2>
 8000512:	4630      	mov	r0, r6
 8000514:	e7d4      	b.n	80004c0 <__udivmoddi4+0x24c>
 8000516:	46d6      	mov	lr, sl
 8000518:	e77f      	b.n	800041a <__udivmoddi4+0x1a6>
 800051a:	4463      	add	r3, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e74d      	b.n	80003bc <__udivmoddi4+0x148>
 8000520:	4606      	mov	r6, r0
 8000522:	4623      	mov	r3, r4
 8000524:	4608      	mov	r0, r1
 8000526:	e70f      	b.n	8000348 <__udivmoddi4+0xd4>
 8000528:	3e02      	subs	r6, #2
 800052a:	4463      	add	r3, ip
 800052c:	e730      	b.n	8000390 <__udivmoddi4+0x11c>
 800052e:	bf00      	nop

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <cli_engine>:
// Created by Artyom on 3/17/2025.
//
#include "cli.h"
#include <string.h>

void cli_engine(UART_HandleTypeDef *huartx, message_handler_t handle) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]

  static uint8_t buf[UART_BUFFER_SIZE] = {0};
  static uint16_t pos = 0;
  static uint8_t prompt = 1;

  if (prompt) {
 800053e:	4b27      	ldr	r3, [pc, #156]	@ (80005dc <cli_engine+0xa8>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d008      	beq.n	8000558 <cli_engine+0x24>
	  prompt = 0;
 8000546:	4b25      	ldr	r3, [pc, #148]	@ (80005dc <cli_engine+0xa8>)
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(huartx, (uint8_t *)PROMPT, 9, 100);
 800054c:	2364      	movs	r3, #100	@ 0x64
 800054e:	2209      	movs	r2, #9
 8000550:	4923      	ldr	r1, [pc, #140]	@ (80005e0 <cli_engine+0xac>)
 8000552:	6878      	ldr	r0, [r7, #4]
 8000554:	f004 faa2 	bl	8004a9c <HAL_UART_Transmit>
  }

  if (HAL_OK == HAL_UART_Receive(huartx, buf + pos, 1, UART_RECEIVE_TIMEOUT)) {
 8000558:	4b22      	ldr	r3, [pc, #136]	@ (80005e4 <cli_engine+0xb0>)
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	461a      	mov	r2, r3
 800055e:	4b22      	ldr	r3, [pc, #136]	@ (80005e8 <cli_engine+0xb4>)
 8000560:	18d1      	adds	r1, r2, r3
 8000562:	2364      	movs	r3, #100	@ 0x64
 8000564:	2201      	movs	r2, #1
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f004 fb21 	bl	8004bae <HAL_UART_Receive>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d12f      	bne.n	80005d2 <cli_engine+0x9e>
    if (buf[pos] == '\r') {
 8000572:	4b1c      	ldr	r3, [pc, #112]	@ (80005e4 <cli_engine+0xb0>)
 8000574:	881b      	ldrh	r3, [r3, #0]
 8000576:	461a      	mov	r2, r3
 8000578:	4b1b      	ldr	r3, [pc, #108]	@ (80005e8 <cli_engine+0xb4>)
 800057a:	5c9b      	ldrb	r3, [r3, r2]
 800057c:	2b0d      	cmp	r3, #13
 800057e:	d118      	bne.n	80005b2 <cli_engine+0x7e>
      buf[pos] = '\0';
 8000580:	4b18      	ldr	r3, [pc, #96]	@ (80005e4 <cli_engine+0xb0>)
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b18      	ldr	r3, [pc, #96]	@ (80005e8 <cli_engine+0xb4>)
 8000588:	2100      	movs	r1, #0
 800058a:	5499      	strb	r1, [r3, r2]
      cli_putnl(huartx);
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 f851 	bl	8000634 <cli_putnl>
      handle((const char *)buf);
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	4814      	ldr	r0, [pc, #80]	@ (80005e8 <cli_engine+0xb4>)
 8000596:	4798      	blx	r3
      memset(buf, 0, UART_BUFFER_SIZE);
 8000598:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800059c:	2100      	movs	r1, #0
 800059e:	4812      	ldr	r0, [pc, #72]	@ (80005e8 <cli_engine+0xb4>)
 80005a0:	f005 f884 	bl	80056ac <memset>
      pos = 0;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <cli_engine+0xb0>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	801a      	strh	r2, [r3, #0]
      prompt = 1;
 80005aa:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <cli_engine+0xa8>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	701a      	strb	r2, [r3, #0]
    } else {
      HAL_UART_Transmit(huartx, buf + pos, 1, UART_TRANSMIT_TIMEOUT);
      ++pos;
    }
  }
}
 80005b0:	e00f      	b.n	80005d2 <cli_engine+0x9e>
      HAL_UART_Transmit(huartx, buf + pos, 1, UART_TRANSMIT_TIMEOUT);
 80005b2:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <cli_engine+0xb0>)
 80005b4:	881b      	ldrh	r3, [r3, #0]
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b0b      	ldr	r3, [pc, #44]	@ (80005e8 <cli_engine+0xb4>)
 80005ba:	18d1      	adds	r1, r2, r3
 80005bc:	2364      	movs	r3, #100	@ 0x64
 80005be:	2201      	movs	r2, #1
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f004 fa6b 	bl	8004a9c <HAL_UART_Transmit>
      ++pos;
 80005c6:	4b07      	ldr	r3, [pc, #28]	@ (80005e4 <cli_engine+0xb0>)
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	3301      	adds	r3, #1
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	4b05      	ldr	r3, [pc, #20]	@ (80005e4 <cli_engine+0xb0>)
 80005d0:	801a      	strh	r2, [r3, #0]
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000000 	.word	0x20000000
 80005e0:	0800574c 	.word	0x0800574c
 80005e4:	2000008c 	.word	0x2000008c
 80005e8:	20000090 	.word	0x20000090

080005ec <cli_writeline>:


void cli_writeline(UART_HandleTypeDef *huartx, const char *s) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
  cli_puts(huartx, s);
 80005f6:	6839      	ldr	r1, [r7, #0]
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 f807 	bl	800060c <cli_puts>
  cli_putnl(huartx);
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 f818 	bl	8000634 <cli_putnl>
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <cli_puts>:

void cli_puts(UART_HandleTypeDef *huartx, const char *s) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(huartx, (const uint8_t *)s, strlen(s), UART_TRANSMIT_TIMEOUT);
 8000616:	6838      	ldr	r0, [r7, #0]
 8000618:	f7ff fe0c 	bl	8000234 <strlen>
 800061c:	4603      	mov	r3, r0
 800061e:	b29a      	uxth	r2, r3
 8000620:	2364      	movs	r3, #100	@ 0x64
 8000622:	6839      	ldr	r1, [r7, #0]
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f004 fa39 	bl	8004a9c <HAL_UART_Transmit>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <cli_putnl>:

void cli_putnl(UART_HandleTypeDef *huartx) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(huartx, (const uint8_t *)"\r\n", 2, UART_TRANSMIT_TIMEOUT);
 800063c:	2364      	movs	r3, #100	@ 0x64
 800063e:	2202      	movs	r2, #2
 8000640:	4903      	ldr	r1, [pc, #12]	@ (8000650 <cli_putnl+0x1c>)
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f004 fa2a 	bl	8004a9c <HAL_UART_Transmit>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	08005758 	.word	0x08005758

08000654 <starts_with>:

uint8_t starts_with(const char *s1, const char *s2) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
  return (strncmp(s1, s2, strlen(s2)) == 0);
 800065e:	6838      	ldr	r0, [r7, #0]
 8000660:	f7ff fde8 	bl	8000234 <strlen>
 8000664:	4603      	mov	r3, r0
 8000666:	461a      	mov	r2, r3
 8000668:	6839      	ldr	r1, [r7, #0]
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f005 f826 	bl	80056bc <strncmp>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	bf0c      	ite	eq
 8000676:	2301      	moveq	r3, #1
 8000678:	2300      	movne	r3, #0
 800067a:	b2db      	uxtb	r3, r3
}
 800067c:	4618      	mov	r0, r3
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <dac_write>:
#include <string.h>

extern UART_HandleTypeDef huart1;
extern DAC_HandleTypeDef hdac;

static void dac_write(uint16_t dac_value) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	80fb      	strh	r3, [r7, #6]
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 800068e:	88fb      	ldrh	r3, [r7, #6]
 8000690:	2200      	movs	r2, #0
 8000692:	2100      	movs	r1, #0
 8000694:	4803      	ldr	r0, [pc, #12]	@ (80006a4 <dac_write+0x20>)
 8000696:	f001 fd2a 	bl	80020ee <HAL_DAC_SetValue>
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200004e0 	.word	0x200004e0

080006a8 <parse_expr>:

static int32_t parse_expr(const char* s) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  if (!s) {
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d102      	bne.n	80006bc <parse_expr+0x14>
    return -1;
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ba:	e019      	b.n	80006f0 <parse_expr+0x48>
  }
  const int32_t res = atoi(s);
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f004 ff6d 	bl	800559c <atoi>
 80006c2:	60f8      	str	r0, [r7, #12]
  while (isdigit((uint8_t)*s)) {
 80006c4:	e002      	b.n	80006cc <parse_expr+0x24>
    ++s;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	3301      	adds	r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
  while (isdigit((uint8_t)*s)) {
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	3301      	adds	r3, #1
 80006d2:	4a09      	ldr	r2, [pc, #36]	@ (80006f8 <parse_expr+0x50>)
 80006d4:	4413      	add	r3, r2
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	f003 0304 	and.w	r3, r3, #4
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1f2      	bne.n	80006c6 <parse_expr+0x1e>
  }
  return (*s == '\0') ? res : -1;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d101      	bne.n	80006ec <parse_expr+0x44>
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	e001      	b.n	80006f0 <parse_expr+0x48>
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	08005970 	.word	0x08005970

080006fc <dac_message_handler>:

uint8_t dac_message_handler(const char *message) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

  if (!strcmp(message, "help")) {
 8000704:	4917      	ldr	r1, [pc, #92]	@ (8000764 <dac_message_handler+0x68>)
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff fd8a 	bl	8000220 <strcmp>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d105      	bne.n	800071e <dac_message_handler+0x22>
    cli_writeline(&huart1, "to set DAC value, type `dac write <value>`");
 8000712:	4915      	ldr	r1, [pc, #84]	@ (8000768 <dac_message_handler+0x6c>)
 8000714:	4815      	ldr	r0, [pc, #84]	@ (800076c <dac_message_handler+0x70>)
 8000716:	f7ff ff69 	bl	80005ec <cli_writeline>
    return CLI_OK;
 800071a:	2300      	movs	r3, #0
 800071c:	e01d      	b.n	800075a <dac_message_handler+0x5e>
  }

  else if (starts_with(message, "dac write ")) {
 800071e:	4914      	ldr	r1, [pc, #80]	@ (8000770 <dac_message_handler+0x74>)
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff ff97 	bl	8000654 <starts_with>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d015      	beq.n	8000758 <dac_message_handler+0x5c>
    const uint32_t value = parse_expr(message + strlen("dac write "));
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	330a      	adds	r3, #10
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ffb9 	bl	80006a8 <parse_expr>
 8000736:	4603      	mov	r3, r0
 8000738:	60fb      	str	r3, [r7, #12]
    if (-1 != value && value < DAC12_MAX) {
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000740:	d008      	beq.n	8000754 <dac_message_handler+0x58>
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000748:	d204      	bcs.n	8000754 <dac_message_handler+0x58>
      dac_write(value);
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	b29b      	uxth	r3, r3
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff98 	bl	8000684 <dac_write>
    }
    return CLI_OK;
 8000754:	2300      	movs	r3, #0
 8000756:	e000      	b.n	800075a <dac_message_handler+0x5e>
  }

  return CLI_COMMAND_NOT_FOUND;
 8000758:	237f      	movs	r3, #127	@ 0x7f
}
 800075a:	4618      	mov	r0, r3
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	0800575c 	.word	0x0800575c
 8000768:	08005764 	.word	0x08005764
 800076c:	20000608 	.word	0x20000608
 8000770:	08005790 	.word	0x08005790

08000774 <get_led_mode>:
uint8_t BLINK_MODE = BLINK_OFF;
uint8_t LED_STATE = LED_OFF;

static uint32_t start = 0;

static const char *get_led_mode(void) {
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  if (LED_STATE == LED_OFF) {
 8000778:	4b0b      	ldr	r3, [pc, #44]	@ (80007a8 <get_led_mode+0x34>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d101      	bne.n	8000784 <get_led_mode+0x10>
	  return "off";
 8000780:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <get_led_mode+0x38>)
 8000782:	e00f      	b.n	80007a4 <get_led_mode+0x30>
  } else if (LED_STATE == LED_ON && BLINK_MODE == BLINK_OFF) {
 8000784:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <get_led_mode+0x34>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d105      	bne.n	8000798 <get_led_mode+0x24>
 800078c:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <get_led_mode+0x3c>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d101      	bne.n	8000798 <get_led_mode+0x24>
	  return "on";
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <get_led_mode+0x40>)
 8000796:	e005      	b.n	80007a4 <get_led_mode+0x30>
  } else {
	  return static_itoa(BLINK_FREQ);
 8000798:	4b07      	ldr	r3, [pc, #28]	@ (80007b8 <get_led_mode+0x44>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	f000 ff2f 	bl	8001600 <static_itoa>
 80007a2:	4603      	mov	r3, r0
  }
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000002 	.word	0x20000002
 80007ac:	0800579c 	.word	0x0800579c
 80007b0:	20000001 	.word	0x20000001
 80007b4:	080057a0 	.word	0x080057a0
 80007b8:	20000490 	.word	0x20000490

080007bc <blink_led>:

void blink_led(const uint32_t frequency) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  if (BLINK_MODE == BLINK_OFF) {
 80007c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <blink_led+0x44>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d014      	beq.n	80007f6 <blink_led+0x3a>
    return;
  }
  const uint32_t current_tick = HAL_GetTick();
 80007cc:	f000 ffec 	bl	80017a8 <HAL_GetTick>
 80007d0:	60f8      	str	r0, [r7, #12]
  if (current_tick >= start + frequency) {
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <blink_led+0x48>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d30b      	bcc.n	80007f8 <blink_led+0x3c>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 80007e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007e4:	4808      	ldr	r0, [pc, #32]	@ (8000808 <blink_led+0x4c>)
 80007e6:	f002 f9ec 	bl	8002bc2 <HAL_GPIO_TogglePin>
    start = HAL_GetTick();
 80007ea:	f000 ffdd 	bl	80017a8 <HAL_GetTick>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4a04      	ldr	r2, [pc, #16]	@ (8000804 <blink_led+0x48>)
 80007f2:	6013      	str	r3, [r2, #0]
 80007f4:	e000      	b.n	80007f8 <blink_led+0x3c>
    return;
 80007f6:	bf00      	nop
  }
}
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000001 	.word	0x20000001
 8000804:	20000494 	.word	0x20000494
 8000808:	40020400 	.word	0x40020400

0800080c <set_led_config>:

void set_led_config(void) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
  uint8_t input = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	71fb      	strb	r3, [r7, #7]

  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000816:	2101      	movs	r1, #1
 8000818:	4858      	ldr	r0, [pc, #352]	@ (800097c <set_led_config+0x170>)
 800081a:	f002 f9a1 	bl	8002b60 <HAL_GPIO_ReadPin>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	bf0c      	ite	eq
 8000824:	2301      	moveq	r3, #1
 8000826:	2300      	movne	r3, #0
 8000828:	b2db      	uxtb	r3, r3
 800082a:	b25a      	sxtb	r2, r3
 800082c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000830:	4313      	orrs	r3, r2
 8000832:	b25b      	sxtb	r3, r3
 8000834:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) << 1;
 8000836:	2102      	movs	r1, #2
 8000838:	4850      	ldr	r0, [pc, #320]	@ (800097c <set_led_config+0x170>)
 800083a:	f002 f991 	bl	8002b60 <HAL_GPIO_ReadPin>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d101      	bne.n	8000848 <set_led_config+0x3c>
 8000844:	2302      	movs	r3, #2
 8000846:	e000      	b.n	800084a <set_led_config+0x3e>
 8000848:	2300      	movs	r3, #0
 800084a:	b25a      	sxtb	r2, r3
 800084c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000850:	4313      	orrs	r3, r2
 8000852:	b25b      	sxtb	r3, r3
 8000854:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) << 2;
 8000856:	2104      	movs	r1, #4
 8000858:	4848      	ldr	r0, [pc, #288]	@ (800097c <set_led_config+0x170>)
 800085a:	f002 f981 	bl	8002b60 <HAL_GPIO_ReadPin>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d101      	bne.n	8000868 <set_led_config+0x5c>
 8000864:	2304      	movs	r3, #4
 8000866:	e000      	b.n	800086a <set_led_config+0x5e>
 8000868:	2300      	movs	r3, #0
 800086a:	b25a      	sxtb	r2, r3
 800086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000870:	4313      	orrs	r3, r2
 8000872:	b25b      	sxtb	r3, r3
 8000874:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) << 3;
 8000876:	2108      	movs	r1, #8
 8000878:	4840      	ldr	r0, [pc, #256]	@ (800097c <set_led_config+0x170>)
 800087a:	f002 f971 	bl	8002b60 <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d101      	bne.n	8000888 <set_led_config+0x7c>
 8000884:	2308      	movs	r3, #8
 8000886:	e000      	b.n	800088a <set_led_config+0x7e>
 8000888:	2300      	movs	r3, #0
 800088a:	b25a      	sxtb	r2, r3
 800088c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000890:	4313      	orrs	r3, r2
 8000892:	b25b      	sxtb	r3, r3
 8000894:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) << 4;
 8000896:	2110      	movs	r1, #16
 8000898:	4838      	ldr	r0, [pc, #224]	@ (800097c <set_led_config+0x170>)
 800089a:	f002 f961 	bl	8002b60 <HAL_GPIO_ReadPin>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d101      	bne.n	80008a8 <set_led_config+0x9c>
 80008a4:	2310      	movs	r3, #16
 80008a6:	e000      	b.n	80008aa <set_led_config+0x9e>
 80008a8:	2300      	movs	r3, #0
 80008aa:	b25a      	sxtb	r2, r3
 80008ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	b25b      	sxtb	r3, r3
 80008b4:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) << 5;
 80008b6:	2120      	movs	r1, #32
 80008b8:	4830      	ldr	r0, [pc, #192]	@ (800097c <set_led_config+0x170>)
 80008ba:	f002 f951 	bl	8002b60 <HAL_GPIO_ReadPin>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d101      	bne.n	80008c8 <set_led_config+0xbc>
 80008c4:	2320      	movs	r3, #32
 80008c6:	e000      	b.n	80008ca <set_led_config+0xbe>
 80008c8:	2300      	movs	r3, #0
 80008ca:	b25a      	sxtb	r2, r3
 80008cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	b25b      	sxtb	r3, r3
 80008d4:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) << 6;
 80008d6:	2140      	movs	r1, #64	@ 0x40
 80008d8:	4828      	ldr	r0, [pc, #160]	@ (800097c <set_led_config+0x170>)
 80008da:	f002 f941 	bl	8002b60 <HAL_GPIO_ReadPin>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d101      	bne.n	80008e8 <set_led_config+0xdc>
 80008e4:	2340      	movs	r3, #64	@ 0x40
 80008e6:	e000      	b.n	80008ea <set_led_config+0xde>
 80008e8:	2300      	movs	r3, #0
 80008ea:	b25a      	sxtb	r2, r3
 80008ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) << 7;
 80008f6:	2180      	movs	r1, #128	@ 0x80
 80008f8:	4820      	ldr	r0, [pc, #128]	@ (800097c <set_led_config+0x170>)
 80008fa:	f002 f931 	bl	8002b60 <HAL_GPIO_ReadPin>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d101      	bne.n	8000908 <set_led_config+0xfc>
 8000904:	2380      	movs	r3, #128	@ 0x80
 8000906:	e000      	b.n	800090a <set_led_config+0xfe>
 8000908:	2300      	movs	r3, #0
 800090a:	b25a      	sxtb	r2, r3
 800090c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000910:	4313      	orrs	r3, r2
 8000912:	b25b      	sxtb	r3, r3
 8000914:	71fb      	strb	r3, [r7, #7]
    BLINK_50,
    BLINK_100,
    BLINK_1000,
  };

  switch (input) {
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b08      	cmp	r3, #8
 800091a:	dc2b      	bgt.n	8000974 <set_led_config+0x168>
 800091c:	2b02      	cmp	r3, #2
 800091e:	da1e      	bge.n	800095e <set_led_config+0x152>
 8000920:	2b00      	cmp	r3, #0
 8000922:	d002      	beq.n	800092a <set_led_config+0x11e>
 8000924:	2b01      	cmp	r3, #1
 8000926:	d00d      	beq.n	8000944 <set_led_config+0x138>
    break;
  case 2 ... 8:
    BLINK_MODE = BLINK_ON;
    BLINK_FREQ = fmap[input];
  }
}
 8000928:	e024      	b.n	8000974 <set_led_config+0x168>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800092a:	2201      	movs	r2, #1
 800092c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000930:	4813      	ldr	r0, [pc, #76]	@ (8000980 <set_led_config+0x174>)
 8000932:	f002 f92d 	bl	8002b90 <HAL_GPIO_WritePin>
    BLINK_FREQ = 0;
 8000936:	4b13      	ldr	r3, [pc, #76]	@ (8000984 <set_led_config+0x178>)
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
    BLINK_MODE = BLINK_OFF;
 800093c:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <set_led_config+0x17c>)
 800093e:	2201      	movs	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
    break;
 8000942:	e017      	b.n	8000974 <set_led_config+0x168>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800094a:	480d      	ldr	r0, [pc, #52]	@ (8000980 <set_led_config+0x174>)
 800094c:	f002 f920 	bl	8002b90 <HAL_GPIO_WritePin>
    BLINK_FREQ = 1;
 8000950:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <set_led_config+0x178>)
 8000952:	2201      	movs	r2, #1
 8000954:	601a      	str	r2, [r3, #0]
    BLINK_MODE = BLINK_ON;
 8000956:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <set_led_config+0x17c>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
    break;
 800095c:	e00a      	b.n	8000974 <set_led_config+0x168>
    BLINK_MODE = BLINK_ON;
 800095e:	4b0a      	ldr	r3, [pc, #40]	@ (8000988 <set_led_config+0x17c>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
    BLINK_FREQ = fmap[input];
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	4a09      	ldr	r2, [pc, #36]	@ (800098c <set_led_config+0x180>)
 8000968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800096c:	461a      	mov	r2, r3
 800096e:	4b05      	ldr	r3, [pc, #20]	@ (8000984 <set_led_config+0x178>)
 8000970:	601a      	str	r2, [r3, #0]
}
 8000972:	e7ff      	b.n	8000974 <set_led_config+0x168>
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40020000 	.word	0x40020000
 8000980:	40020400 	.word	0x40020400
 8000984:	20000490 	.word	0x20000490
 8000988:	20000001 	.word	0x20000001
 800098c:	0800593c 	.word	0x0800593c

08000990 <parse_set_expr>:

static int32_t parse_set_expr(const char* s) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  if (!s) {
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d105      	bne.n	80009aa <parse_set_expr+0x1a>
    return -1;
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	e02a      	b.n	80009fa <parse_set_expr+0x6a>
  }
  while (*s && !isdigit((const uint8_t)*s)) {
    ++s;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3301      	adds	r3, #1
 80009a8:	607b      	str	r3, [r7, #4]
  while (*s && !isdigit((const uint8_t)*s)) {
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d009      	beq.n	80009c6 <parse_set_expr+0x36>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	3301      	adds	r3, #1
 80009b8:	4a12      	ldr	r2, [pc, #72]	@ (8000a04 <parse_set_expr+0x74>)
 80009ba:	4413      	add	r3, r2
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0ee      	beq.n	80009a4 <parse_set_expr+0x14>
  }
  const int32_t res = atoi(s);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f004 fde8 	bl	800559c <atoi>
 80009cc:	60f8      	str	r0, [r7, #12]
  while (isdigit((const uint8_t)*s)) {
 80009ce:	e002      	b.n	80009d6 <parse_set_expr+0x46>
    ++s;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3301      	adds	r3, #1
 80009d4:	607b      	str	r3, [r7, #4]
  while (isdigit((const uint8_t)*s)) {
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	3301      	adds	r3, #1
 80009dc:	4a09      	ldr	r2, [pc, #36]	@ (8000a04 <parse_set_expr+0x74>)
 80009de:	4413      	add	r3, r2
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d1f2      	bne.n	80009d0 <parse_set_expr+0x40>
  }
  return (*s == '\0') ? res : -1;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d101      	bne.n	80009f6 <parse_set_expr+0x66>
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	e001      	b.n	80009fa <parse_set_expr+0x6a>
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	08005970 	.word	0x08005970

08000a08 <led_blink_handler>:


static uint8_t led_blink_handler(const int32_t val) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	if (-1 == val) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a16:	d105      	bne.n	8000a24 <led_blink_handler+0x1c>
		cli_writeline(&huart1, "error: bad frequency value: Available values are 1, 10, 20, 50, 100, 500, 1000");
 8000a18:	4926      	ldr	r1, [pc, #152]	@ (8000ab4 <led_blink_handler+0xac>)
 8000a1a:	4827      	ldr	r0, [pc, #156]	@ (8000ab8 <led_blink_handler+0xb0>)
 8000a1c:	f7ff fde6 	bl	80005ec <cli_writeline>
		return CLI_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	e043      	b.n	8000aac <led_blink_handler+0xa4>
	}
	switch(val) {
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a2a:	d023      	beq.n	8000a74 <led_blink_handler+0x6c>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a32:	dc36      	bgt.n	8000aa2 <led_blink_handler+0x9a>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000a3a:	d01b      	beq.n	8000a74 <led_blink_handler+0x6c>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000a42:	dc2e      	bgt.n	8000aa2 <led_blink_handler+0x9a>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2b64      	cmp	r3, #100	@ 0x64
 8000a48:	d014      	beq.n	8000a74 <led_blink_handler+0x6c>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b64      	cmp	r3, #100	@ 0x64
 8000a4e:	dc28      	bgt.n	8000aa2 <led_blink_handler+0x9a>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b32      	cmp	r3, #50	@ 0x32
 8000a54:	d00e      	beq.n	8000a74 <led_blink_handler+0x6c>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b32      	cmp	r3, #50	@ 0x32
 8000a5a:	dc22      	bgt.n	8000aa2 <led_blink_handler+0x9a>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b14      	cmp	r3, #20
 8000a60:	d008      	beq.n	8000a74 <led_blink_handler+0x6c>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b14      	cmp	r3, #20
 8000a66:	dc1c      	bgt.n	8000aa2 <led_blink_handler+0x9a>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d002      	beq.n	8000a74 <led_blink_handler+0x6c>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b0a      	cmp	r3, #10
 8000a72:	d116      	bne.n	8000aa2 <led_blink_handler+0x9a>
	case 20:
	case 50:
	case 100:
	case 500:
	case 1000:
		BLINK_MODE = BLINK_ON;
 8000a74:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <led_blink_handler+0xb4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
		LED_STATE = LED_ON;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <led_blink_handler+0xb8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
		BLINK_FREQ = val;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a10      	ldr	r2, [pc, #64]	@ (8000ac4 <led_blink_handler+0xbc>)
 8000a84:	6013      	str	r3, [r2, #0]
		cli_puts(&huart1, "Led frequency set to ");
 8000a86:	4910      	ldr	r1, [pc, #64]	@ (8000ac8 <led_blink_handler+0xc0>)
 8000a88:	480b      	ldr	r0, [pc, #44]	@ (8000ab8 <led_blink_handler+0xb0>)
 8000a8a:	f7ff fdbf 	bl	800060c <cli_puts>
		cli_writeline(&huart1, get_led_mode());
 8000a8e:	f7ff fe71 	bl	8000774 <get_led_mode>
 8000a92:	4603      	mov	r3, r0
 8000a94:	4619      	mov	r1, r3
 8000a96:	4808      	ldr	r0, [pc, #32]	@ (8000ab8 <led_blink_handler+0xb0>)
 8000a98:	f7ff fda8 	bl	80005ec <cli_writeline>
		break;
 8000a9c:	bf00      	nop
	default:
		cli_writeline(&huart1, "error: frequency not supported");
		return CLI_ERROR;
	}

	return CLI_OK;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e004      	b.n	8000aac <led_blink_handler+0xa4>
		cli_writeline(&huart1, "error: frequency not supported");
 8000aa2:	490a      	ldr	r1, [pc, #40]	@ (8000acc <led_blink_handler+0xc4>)
 8000aa4:	4804      	ldr	r0, [pc, #16]	@ (8000ab8 <led_blink_handler+0xb0>)
 8000aa6:	f7ff fda1 	bl	80005ec <cli_writeline>
		return CLI_ERROR;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	080057a4 	.word	0x080057a4
 8000ab8:	20000608 	.word	0x20000608
 8000abc:	20000001 	.word	0x20000001
 8000ac0:	20000002 	.word	0x20000002
 8000ac4:	20000490 	.word	0x20000490
 8000ac8:	080057f4 	.word	0x080057f4
 8000acc:	0800580c 	.word	0x0800580c

08000ad0 <led_message_handler>:

uint8_t led_message_handler(const char *message) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]

  if (!strcmp(message, "led on")) {
 8000ad8:	4934      	ldr	r1, [pc, #208]	@ (8000bac <led_message_handler+0xdc>)
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff fba0 	bl	8000220 <strcmp>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d111      	bne.n	8000b0a <led_message_handler+0x3a>
    BLINK_MODE = BLINK_OFF;
 8000ae6:	4b32      	ldr	r3, [pc, #200]	@ (8000bb0 <led_message_handler+0xe0>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	701a      	strb	r2, [r3, #0]
    LED_STATE = LED_ON;
 8000aec:	4b31      	ldr	r3, [pc, #196]	@ (8000bb4 <led_message_handler+0xe4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000af8:	482f      	ldr	r0, [pc, #188]	@ (8000bb8 <led_message_handler+0xe8>)
 8000afa:	f002 f849 	bl	8002b90 <HAL_GPIO_WritePin>
    cli_writeline(&huart1, "Led is now on");
 8000afe:	492f      	ldr	r1, [pc, #188]	@ (8000bbc <led_message_handler+0xec>)
 8000b00:	482f      	ldr	r0, [pc, #188]	@ (8000bc0 <led_message_handler+0xf0>)
 8000b02:	f7ff fd73 	bl	80005ec <cli_writeline>
    return CLI_OK;
 8000b06:	2300      	movs	r3, #0
 8000b08:	e04c      	b.n	8000ba4 <led_message_handler+0xd4>
  }

  if (!strcmp(message, "led off")) {
 8000b0a:	492e      	ldr	r1, [pc, #184]	@ (8000bc4 <led_message_handler+0xf4>)
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff fb87 	bl	8000220 <strcmp>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d111      	bne.n	8000b3c <led_message_handler+0x6c>
    BLINK_MODE = BLINK_OFF;
 8000b18:	4b25      	ldr	r3, [pc, #148]	@ (8000bb0 <led_message_handler+0xe0>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	701a      	strb	r2, [r3, #0]
    LED_STATE = LED_OFF;
 8000b1e:	4b25      	ldr	r3, [pc, #148]	@ (8000bb4 <led_message_handler+0xe4>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b2a:	4823      	ldr	r0, [pc, #140]	@ (8000bb8 <led_message_handler+0xe8>)
 8000b2c:	f002 f830 	bl	8002b90 <HAL_GPIO_WritePin>
    cli_writeline(&huart1, "Led is now off");
 8000b30:	4925      	ldr	r1, [pc, #148]	@ (8000bc8 <led_message_handler+0xf8>)
 8000b32:	4823      	ldr	r0, [pc, #140]	@ (8000bc0 <led_message_handler+0xf0>)
 8000b34:	f7ff fd5a 	bl	80005ec <cli_writeline>
    return CLI_OK;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e033      	b.n	8000ba4 <led_message_handler+0xd4>
  }

  if (starts_with(message, "led blink ")) {
 8000b3c:	4923      	ldr	r1, [pc, #140]	@ (8000bcc <led_message_handler+0xfc>)
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff fd88 	bl	8000654 <starts_with>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d008      	beq.n	8000b5c <led_message_handler+0x8c>
    led_blink_handler(parse_set_expr(message));
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ff20 	bl	8000990 <parse_set_expr>
 8000b50:	4603      	mov	r3, r0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ff58 	bl	8000a08 <led_blink_handler>
    return CLI_OK;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e023      	b.n	8000ba4 <led_message_handler+0xd4>
  }

  if (!strcmp(message, "led reset")) {
 8000b5c:	491c      	ldr	r1, [pc, #112]	@ (8000bd0 <led_message_handler+0x100>)
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff fb5e 	bl	8000220 <strcmp>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d107      	bne.n	8000b7a <led_message_handler+0xaa>
    set_led_config();
 8000b6a:	f7ff fe4f 	bl	800080c <set_led_config>
    cli_writeline(&huart1, "led mode is now configured by physical switches");
 8000b6e:	4919      	ldr	r1, [pc, #100]	@ (8000bd4 <led_message_handler+0x104>)
 8000b70:	4813      	ldr	r0, [pc, #76]	@ (8000bc0 <led_message_handler+0xf0>)
 8000b72:	f7ff fd3b 	bl	80005ec <cli_writeline>
    return CLI_OK;
 8000b76:	2300      	movs	r3, #0
 8000b78:	e014      	b.n	8000ba4 <led_message_handler+0xd4>
  }

  if (!strcmp(message, "led get state")) {
 8000b7a:	4917      	ldr	r1, [pc, #92]	@ (8000bd8 <led_message_handler+0x108>)
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff fb4f 	bl	8000220 <strcmp>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d10c      	bne.n	8000ba2 <led_message_handler+0xd2>
    cli_puts(&huart1, "led mode is ");
 8000b88:	4914      	ldr	r1, [pc, #80]	@ (8000bdc <led_message_handler+0x10c>)
 8000b8a:	480d      	ldr	r0, [pc, #52]	@ (8000bc0 <led_message_handler+0xf0>)
 8000b8c:	f7ff fd3e 	bl	800060c <cli_puts>
    cli_writeline(&huart1, get_led_mode());
 8000b90:	f7ff fdf0 	bl	8000774 <get_led_mode>
 8000b94:	4603      	mov	r3, r0
 8000b96:	4619      	mov	r1, r3
 8000b98:	4809      	ldr	r0, [pc, #36]	@ (8000bc0 <led_message_handler+0xf0>)
 8000b9a:	f7ff fd27 	bl	80005ec <cli_writeline>
    return CLI_OK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e000      	b.n	8000ba4 <led_message_handler+0xd4>
  }

  return CLI_COMMAND_NOT_FOUND;
 8000ba2:	237f      	movs	r3, #127	@ 0x7f
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	0800582c 	.word	0x0800582c
 8000bb0:	20000001 	.word	0x20000001
 8000bb4:	20000002 	.word	0x20000002
 8000bb8:	40020400 	.word	0x40020400
 8000bbc:	08005834 	.word	0x08005834
 8000bc0:	20000608 	.word	0x20000608
 8000bc4:	08005844 	.word	0x08005844
 8000bc8:	0800584c 	.word	0x0800584c
 8000bcc:	0800585c 	.word	0x0800585c
 8000bd0:	08005868 	.word	0x08005868
 8000bd4:	08005874 	.word	0x08005874
 8000bd8:	080058a4 	.word	0x080058a4
 8000bdc:	080058b4 	.word	0x080058b4

08000be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000be4:	f000 fa2a 	bl	800103c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be8:	f000 fd8d 	bl	8001706 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bec:	f000 f818 	bl	8000c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf0:	f000 f984 	bl	8000efc <MX_GPIO_Init>
  MX_DMA_Init();
 8000bf4:	f000 f95c 	bl	8000eb0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000bf8:	f000 f8ea 	bl	8000dd0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000bfc:	f000 f928 	bl	8000e50 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000c00:	f000 f86a 	bl	8000cd8 <MX_ADC1_Init>
  MX_DAC_Init();
 8000c04:	f000 f8ba 	bl	8000d7c <MX_DAC_Init>
  /* USER CODE BEGIN WHILE */

  // uint8_t TX_Buffer = 5;
  // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4804      	ldr	r0, [pc, #16]	@ (8000c1c <main+0x3c>)
 8000c0c:	f001 fa18 	bl	8002040 <HAL_DAC_Start>
  set_led_config();
 8000c10:	f7ff fdfc 	bl	800080c <set_led_config>

  while (1)
  {
	  pci100_cli();
 8000c14:	f000 fa8e 	bl	8001134 <pci100_cli>
 8000c18:	e7fc      	b.n	8000c14 <main+0x34>
 8000c1a:	bf00      	nop
 8000c1c:	200004e0 	.word	0x200004e0

08000c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b094      	sub	sp, #80	@ 0x50
 8000c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	2230      	movs	r2, #48	@ 0x30
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f004 fd3c 	bl	80056ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c44:	4b22      	ldr	r3, [pc, #136]	@ (8000cd0 <SystemClock_Config+0xb0>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c48:	4a21      	ldr	r2, [pc, #132]	@ (8000cd0 <SystemClock_Config+0xb0>)
 8000c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c50:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd0 <SystemClock_Config+0xb0>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd4 <SystemClock_Config+0xb4>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c64:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd4 <SystemClock_Config+0xb4>)
 8000c66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c6a:	6013      	str	r3, [r2, #0]
 8000c6c:	4b19      	ldr	r3, [pc, #100]	@ (8000cd4 <SystemClock_Config+0xb4>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c80:	2310      	movs	r3, #16
 8000c82:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c88:	f107 0320 	add.w	r3, r7, #32
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f002 fee3 	bl	8003a58 <HAL_RCC_OscConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000c98:	f000 f9fc 	bl	8001094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f003 f972 	bl	8003fa0 <HAL_RCC_ClockConfig>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000cc2:	f000 f9e7 	bl	8001094 <Error_Handler>
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	3750      	adds	r7, #80	@ 0x50
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40007000 	.word	0x40007000

08000cd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cde:	463b      	mov	r3, r7
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cea:	4b21      	ldr	r3, [pc, #132]	@ (8000d70 <MX_ADC1_Init+0x98>)
 8000cec:	4a21      	ldr	r2, [pc, #132]	@ (8000d74 <MX_ADC1_Init+0x9c>)
 8000cee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d70 <MX_ADC1_Init+0x98>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d70 <MX_ADC1_Init+0x98>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d70 <MX_ADC1_Init+0x98>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d02:	4b1b      	ldr	r3, [pc, #108]	@ (8000d70 <MX_ADC1_Init+0x98>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d08:	4b19      	ldr	r3, [pc, #100]	@ (8000d70 <MX_ADC1_Init+0x98>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d10:	4b17      	ldr	r3, [pc, #92]	@ (8000d70 <MX_ADC1_Init+0x98>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d16:	4b16      	ldr	r3, [pc, #88]	@ (8000d70 <MX_ADC1_Init+0x98>)
 8000d18:	4a17      	ldr	r2, [pc, #92]	@ (8000d78 <MX_ADC1_Init+0xa0>)
 8000d1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d1c:	4b14      	ldr	r3, [pc, #80]	@ (8000d70 <MX_ADC1_Init+0x98>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d22:	4b13      	ldr	r3, [pc, #76]	@ (8000d70 <MX_ADC1_Init+0x98>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d28:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <MX_ADC1_Init+0x98>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	@ (8000d70 <MX_ADC1_Init+0x98>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d36:	480e      	ldr	r0, [pc, #56]	@ (8000d70 <MX_ADC1_Init+0x98>)
 8000d38:	f000 fd42 	bl	80017c0 <HAL_ADC_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d42:	f000 f9a7 	bl	8001094 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000d46:	230a      	movs	r3, #10
 8000d48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d52:	463b      	mov	r3, r7
 8000d54:	4619      	mov	r1, r3
 8000d56:	4806      	ldr	r0, [pc, #24]	@ (8000d70 <MX_ADC1_Init+0x98>)
 8000d58:	f000 fd76 	bl	8001848 <HAL_ADC_ConfigChannel>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d62:	f000 f997 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000498 	.word	0x20000498
 8000d74:	40012000 	.word	0x40012000
 8000d78:	0f000001 	.word	0x0f000001

08000d7c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d82:	463b      	mov	r3, r7
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <MX_DAC_Init+0x4c>)
 8000d8c:	4a0f      	ldr	r2, [pc, #60]	@ (8000dcc <MX_DAC_Init+0x50>)
 8000d8e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000d90:	480d      	ldr	r0, [pc, #52]	@ (8000dc8 <MX_DAC_Init+0x4c>)
 8000d92:	f001 f933 	bl	8001ffc <HAL_DAC_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000d9c:	f000 f97a 	bl	8001094 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000da8:	463b      	mov	r3, r7
 8000daa:	2200      	movs	r2, #0
 8000dac:	4619      	mov	r1, r3
 8000dae:	4806      	ldr	r0, [pc, #24]	@ (8000dc8 <MX_DAC_Init+0x4c>)
 8000db0:	f001 f9c7 	bl	8002142 <HAL_DAC_ConfigChannel>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000dba:	f000 f96b 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200004e0 	.word	0x200004e0
 8000dcc:	40007400 	.word	0x40007400

08000dd0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e44 <MX_I2C1_Init+0x74>)
 8000dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e48 <MX_I2C1_Init+0x78>)
 8000dd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	@ (8000e44 <MX_I2C1_Init+0x74>)
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e4c <MX_I2C1_Init+0x7c>)
 8000dde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000de0:	4b18      	ldr	r3, [pc, #96]	@ (8000e44 <MX_I2C1_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000de6:	4b17      	ldr	r3, [pc, #92]	@ (8000e44 <MX_I2C1_Init+0x74>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dec:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <MX_I2C1_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000df2:	4b14      	ldr	r3, [pc, #80]	@ (8000e44 <MX_I2C1_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000df8:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <MX_I2C1_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <MX_I2C1_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	@ (8000e44 <MX_I2C1_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e0a:	480e      	ldr	r0, [pc, #56]	@ (8000e44 <MX_I2C1_Init+0x74>)
 8000e0c:	f001 fef4 	bl	8002bf8 <HAL_I2C_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e16:	f000 f93d 	bl	8001094 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4809      	ldr	r0, [pc, #36]	@ (8000e44 <MX_I2C1_Init+0x74>)
 8000e1e:	f002 fd84 	bl	800392a <HAL_I2CEx_ConfigAnalogFilter>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e28:	f000 f934 	bl	8001094 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4805      	ldr	r0, [pc, #20]	@ (8000e44 <MX_I2C1_Init+0x74>)
 8000e30:	f002 fdc6 	bl	80039c0 <HAL_I2CEx_ConfigDigitalFilter>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e3a:	f000 f92b 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200004f4 	.word	0x200004f4
 8000e48:	40005400 	.word	0x40005400
 8000e4c:	00303d5b 	.word	0x00303d5b

08000e50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e54:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <MX_USART1_UART_Init+0x58>)
 8000e56:	4a15      	ldr	r2, [pc, #84]	@ (8000eac <MX_USART1_UART_Init+0x5c>)
 8000e58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ea8 <MX_USART1_UART_Init+0x58>)
 8000e5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e62:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <MX_USART1_UART_Init+0x58>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <MX_USART1_UART_Init+0x58>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <MX_USART1_UART_Init+0x58>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <MX_USART1_UART_Init+0x58>)
 8000e76:	220c      	movs	r2, #12
 8000e78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <MX_USART1_UART_Init+0x58>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e80:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <MX_USART1_UART_Init+0x58>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e86:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <MX_USART1_UART_Init+0x58>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <MX_USART1_UART_Init+0x58>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e92:	4805      	ldr	r0, [pc, #20]	@ (8000ea8 <MX_USART1_UART_Init+0x58>)
 8000e94:	f003 fdb4 	bl	8004a00 <HAL_UART_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e9e:	f000 f8f9 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000608 	.word	0x20000608
 8000eac:	40011000 	.word	0x40011000

08000eb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <MX_DMA_Init+0x48>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef8 <MX_DMA_Init+0x48>)
 8000ebc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef8 <MX_DMA_Init+0x48>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	200b      	movs	r0, #11
 8000ed4:	f000 ffe3 	bl	8001e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ed8:	200b      	movs	r0, #11
 8000eda:	f000 fffc 	bl	8001ed6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2011      	movs	r0, #17
 8000ee4:	f000 ffdb 	bl	8001e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ee8:	2011      	movs	r0, #17
 8000eea:	f000 fff4 	bl	8001ed6 <HAL_NVIC_EnableIRQ>

}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800

08000efc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	@ 0x28
 8000f00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f12:	4b46      	ldr	r3, [pc, #280]	@ (800102c <MX_GPIO_Init+0x130>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	4a45      	ldr	r2, [pc, #276]	@ (800102c <MX_GPIO_Init+0x130>)
 8000f18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1e:	4b43      	ldr	r3, [pc, #268]	@ (800102c <MX_GPIO_Init+0x130>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2a:	4b40      	ldr	r3, [pc, #256]	@ (800102c <MX_GPIO_Init+0x130>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	4a3f      	ldr	r2, [pc, #252]	@ (800102c <MX_GPIO_Init+0x130>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f36:	4b3d      	ldr	r3, [pc, #244]	@ (800102c <MX_GPIO_Init+0x130>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	4b3a      	ldr	r3, [pc, #232]	@ (800102c <MX_GPIO_Init+0x130>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a39      	ldr	r2, [pc, #228]	@ (800102c <MX_GPIO_Init+0x130>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b37      	ldr	r3, [pc, #220]	@ (800102c <MX_GPIO_Init+0x130>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	4b34      	ldr	r3, [pc, #208]	@ (800102c <MX_GPIO_Init+0x130>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	4a33      	ldr	r2, [pc, #204]	@ (800102c <MX_GPIO_Init+0x130>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f66:	4b31      	ldr	r3, [pc, #196]	@ (800102c <MX_GPIO_Init+0x130>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2104      	movs	r1, #4
 8000f76:	482e      	ldr	r0, [pc, #184]	@ (8001030 <MX_GPIO_Init+0x134>)
 8000f78:	f001 fe0a 	bl	8002b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_ACT_LED_GPIO_Port, MCU_ACT_LED_Pin, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f82:	482c      	ldr	r0, [pc, #176]	@ (8001034 <MX_GPIO_Init+0x138>)
 8000f84:	f001 fe04 	bl	8002b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4824      	ldr	r0, [pc, #144]	@ (8001030 <MX_GPIO_Init+0x134>)
 8000fa0:	f001 fc42 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	481e      	ldr	r0, [pc, #120]	@ (8001030 <MX_GPIO_Init+0x134>)
 8000fb8:	f001 fc36 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8000fbc:	23ee      	movs	r3, #238	@ 0xee
 8000fbe:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	481a      	ldr	r0, [pc, #104]	@ (8001038 <MX_GPIO_Init+0x13c>)
 8000fd0:	f001 fc2a 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACT_LED_Pin */
  GPIO_InitStruct.Pin = MCU_ACT_LED_Pin;
 8000fd4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_ACT_LED_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	4811      	ldr	r0, [pc, #68]	@ (8001034 <MX_GPIO_Init+0x138>)
 8000fee:	f001 fc1b 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ff2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	4619      	mov	r1, r3
 8001006:	480a      	ldr	r0, [pc, #40]	@ (8001030 <MX_GPIO_Init+0x134>)
 8001008:	f001 fc0e 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800100c:	2310      	movs	r3, #16
 800100e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001010:	2300      	movs	r3, #0
 8001012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001014:	2301      	movs	r3, #1
 8001016:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4619      	mov	r1, r3
 800101e:	4805      	ldr	r0, [pc, #20]	@ (8001034 <MX_GPIO_Init+0x138>)
 8001020:	f001 fc02 	bl	8002828 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001024:	bf00      	nop
 8001026:	3728      	adds	r7, #40	@ 0x28
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40023800 	.word	0x40023800
 8001030:	40020800 	.word	0x40020800
 8001034:	40020400 	.word	0x40020400
 8001038:	40020000 	.word	0x40020000

0800103c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001042:	463b      	mov	r3, r7
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800104e:	f000 ff5d 	bl	8001f0c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001052:	2301      	movs	r3, #1
 8001054:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001056:	2300      	movs	r3, #0
 8001058:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800105e:	231f      	movs	r3, #31
 8001060:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001062:	2387      	movs	r3, #135	@ 0x87
 8001064:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001066:	2300      	movs	r3, #0
 8001068:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800106a:	2300      	movs	r3, #0
 800106c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800106e:	2301      	movs	r3, #1
 8001070:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001072:	2301      	movs	r3, #1
 8001074:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800107e:	463b      	mov	r3, r7
 8001080:	4618      	mov	r0, r3
 8001082:	f000 ff7b 	bl	8001f7c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001086:	2004      	movs	r0, #4
 8001088:	f000 ff58 	bl	8001f3c <HAL_MPU_Enable>

}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <Error_Handler+0x8>

080010a0 <pci100_message_handler>:
		command_not_found_handler,
		NULL
};


void pci100_message_handler(const char *message) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  if (!strcmp(message, "help")) {
 80010a8:	491a      	ldr	r1, [pc, #104]	@ (8001114 <pci100_message_handler+0x74>)
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff f8b8 	bl	8000220 <strcmp>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d113      	bne.n	80010de <pci100_message_handler+0x3e>
      cli_writeline(&huart1, "led <on/off>");
 80010b6:	4918      	ldr	r1, [pc, #96]	@ (8001118 <pci100_message_handler+0x78>)
 80010b8:	4818      	ldr	r0, [pc, #96]	@ (800111c <pci100_message_handler+0x7c>)
 80010ba:	f7ff fa97 	bl	80005ec <cli_writeline>
      cli_writeline(&huart1, "led blink <hz>");
 80010be:	4918      	ldr	r1, [pc, #96]	@ (8001120 <pci100_message_handler+0x80>)
 80010c0:	4816      	ldr	r0, [pc, #88]	@ (800111c <pci100_message_handler+0x7c>)
 80010c2:	f7ff fa93 	bl	80005ec <cli_writeline>
      cli_writeline(&huart1, "led reset");
 80010c6:	4917      	ldr	r1, [pc, #92]	@ (8001124 <pci100_message_handler+0x84>)
 80010c8:	4814      	ldr	r0, [pc, #80]	@ (800111c <pci100_message_handler+0x7c>)
 80010ca:	f7ff fa8f 	bl	80005ec <cli_writeline>
      cli_writeline(&huart1, "led get state");
 80010ce:	4916      	ldr	r1, [pc, #88]	@ (8001128 <pci100_message_handler+0x88>)
 80010d0:	4812      	ldr	r0, [pc, #72]	@ (800111c <pci100_message_handler+0x7c>)
 80010d2:	f7ff fa8b 	bl	80005ec <cli_writeline>
      cli_writeline(&huart1, "dac <id> write <value>");
 80010d6:	4915      	ldr	r1, [pc, #84]	@ (800112c <pci100_message_handler+0x8c>)
 80010d8:	4810      	ldr	r0, [pc, #64]	@ (800111c <pci100_message_handler+0x7c>)
 80010da:	f7ff fa87 	bl	80005ec <cli_writeline>
  }

  for (uint16_t i = 0; HANDLERS[i]; ++i) {
 80010de:	2300      	movs	r3, #0
 80010e0:	81fb      	strh	r3, [r7, #14]
 80010e2:	e00b      	b.n	80010fc <pci100_message_handler+0x5c>
	  if (CLI_COMMAND_NOT_FOUND != HANDLERS[i](message)) {
 80010e4:	89fb      	ldrh	r3, [r7, #14]
 80010e6:	4a12      	ldr	r2, [pc, #72]	@ (8001130 <pci100_message_handler+0x90>)
 80010e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	4798      	blx	r3
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80010f4:	d109      	bne.n	800110a <pci100_message_handler+0x6a>
  for (uint16_t i = 0; HANDLERS[i]; ++i) {
 80010f6:	89fb      	ldrh	r3, [r7, #14]
 80010f8:	3301      	adds	r3, #1
 80010fa:	81fb      	strh	r3, [r7, #14]
 80010fc:	89fb      	ldrh	r3, [r7, #14]
 80010fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001130 <pci100_message_handler+0x90>)
 8001100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1ed      	bne.n	80010e4 <pci100_message_handler+0x44>
		  break;
	  }
  }
}
 8001108:	e000      	b.n	800110c <pci100_message_handler+0x6c>
		  break;
 800110a:	bf00      	nop
}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	080058c4 	.word	0x080058c4
 8001118:	080058cc 	.word	0x080058cc
 800111c:	20000608 	.word	0x20000608
 8001120:	080058dc 	.word	0x080058dc
 8001124:	080058ec 	.word	0x080058ec
 8001128:	080058f8 	.word	0x080058f8
 800112c:	08005908 	.word	0x08005908
 8001130:	20000004 	.word	0x20000004

08001134 <pci100_cli>:


void pci100_cli(void) {
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	blink_led(BLINK_FREQ);
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <pci100_cli+0x1c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fb3d 	bl	80007bc <blink_led>
	cli_engine(&huart1, pci100_message_handler);
 8001142:	4904      	ldr	r1, [pc, #16]	@ (8001154 <pci100_cli+0x20>)
 8001144:	4804      	ldr	r0, [pc, #16]	@ (8001158 <pci100_cli+0x24>)
 8001146:	f7ff f9f5 	bl	8000534 <cli_engine>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000490 	.word	0x20000490
 8001154:	080010a1 	.word	0x080010a1
 8001158:	20000608 	.word	0x20000608

0800115c <command_not_found_handler>:


uint8_t command_not_found_handler(const char *message) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	cli_writeline(&huart1, "error: command not found");
 8001164:	4904      	ldr	r1, [pc, #16]	@ (8001178 <command_not_found_handler+0x1c>)
 8001166:	4805      	ldr	r0, [pc, #20]	@ (800117c <command_not_found_handler+0x20>)
 8001168:	f7ff fa40 	bl	80005ec <cli_writeline>
	return CLI_COMMAND_NOT_FOUND;
 800116c:	237f      	movs	r3, #127	@ 0x7f
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	08005920 	.word	0x08005920
 800117c:	20000608 	.word	0x20000608

08001180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <HAL_MspInit+0x44>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118a:	4a0e      	ldr	r2, [pc, #56]	@ (80011c4 <HAL_MspInit+0x44>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001190:	6413      	str	r3, [r2, #64]	@ 0x40
 8001192:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <HAL_MspInit+0x44>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <HAL_MspInit+0x44>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	4a08      	ldr	r2, [pc, #32]	@ (80011c4 <HAL_MspInit+0x44>)
 80011a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <HAL_MspInit+0x44>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800

080011c8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	@ 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a15      	ldr	r2, [pc, #84]	@ (800123c <HAL_ADC_MspInit+0x74>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d123      	bne.n	8001232 <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ea:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <HAL_ADC_MspInit+0x78>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ee:	4a14      	ldr	r2, [pc, #80]	@ (8001240 <HAL_ADC_MspInit+0x78>)
 80011f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011f6:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <HAL_ADC_MspInit+0x78>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001202:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <HAL_ADC_MspInit+0x78>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a0e      	ldr	r2, [pc, #56]	@ (8001240 <HAL_ADC_MspInit+0x78>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <HAL_ADC_MspInit+0x78>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800121a:	2301      	movs	r3, #1
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121e:	2303      	movs	r3, #3
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	@ (8001244 <HAL_ADC_MspInit+0x7c>)
 800122e:	f001 fafb 	bl	8002828 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	@ 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40012000 	.word	0x40012000
 8001240:	40023800 	.word	0x40023800
 8001244:	40020800 	.word	0x40020800

08001248 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	@ 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a15      	ldr	r2, [pc, #84]	@ (80012bc <HAL_DAC_MspInit+0x74>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d123      	bne.n	80012b2 <HAL_DAC_MspInit+0x6a>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800126a:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <HAL_DAC_MspInit+0x78>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	4a14      	ldr	r2, [pc, #80]	@ (80012c0 <HAL_DAC_MspInit+0x78>)
 8001270:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001274:	6413      	str	r3, [r2, #64]	@ 0x40
 8001276:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <HAL_DAC_MspInit+0x78>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <HAL_DAC_MspInit+0x78>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a0e      	ldr	r2, [pc, #56]	@ (80012c0 <HAL_DAC_MspInit+0x78>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <HAL_DAC_MspInit+0x78>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800129a:	2310      	movs	r3, #16
 800129c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129e:	2303      	movs	r3, #3
 80012a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <HAL_DAC_MspInit+0x7c>)
 80012ae:	f001 fabb 	bl	8002828 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	@ 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40007400 	.word	0x40007400
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020000 	.word	0x40020000

080012c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b0aa      	sub	sp, #168	@ 0xa8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2280      	movs	r2, #128	@ 0x80
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f004 f9df 	bl	80056ac <memset>
  if(hi2c->Instance==I2C1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a58      	ldr	r2, [pc, #352]	@ (8001454 <HAL_I2C_MspInit+0x18c>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	f040 80a8 	bne.w	800144a <HAL_I2C_MspInit+0x182>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80012fe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001300:	2300      	movs	r3, #0
 8001302:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4618      	mov	r0, r3
 800130a:	f003 f82f 	bl	800436c <HAL_RCCEx_PeriphCLKConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001314:	f7ff febe 	bl	8001094 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001318:	4b4f      	ldr	r3, [pc, #316]	@ (8001458 <HAL_I2C_MspInit+0x190>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131c:	4a4e      	ldr	r2, [pc, #312]	@ (8001458 <HAL_I2C_MspInit+0x190>)
 800131e:	f043 0302 	orr.w	r3, r3, #2
 8001322:	6313      	str	r3, [r2, #48]	@ 0x30
 8001324:	4b4c      	ldr	r3, [pc, #304]	@ (8001458 <HAL_I2C_MspInit+0x190>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001330:	23c0      	movs	r3, #192	@ 0xc0
 8001332:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001336:	2312      	movs	r3, #18
 8001338:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800133c:	2301      	movs	r3, #1
 800133e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001342:	2303      	movs	r3, #3
 8001344:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001348:	2304      	movs	r3, #4
 800134a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001352:	4619      	mov	r1, r3
 8001354:	4841      	ldr	r0, [pc, #260]	@ (800145c <HAL_I2C_MspInit+0x194>)
 8001356:	f001 fa67 	bl	8002828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800135a:	4b3f      	ldr	r3, [pc, #252]	@ (8001458 <HAL_I2C_MspInit+0x190>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	4a3e      	ldr	r2, [pc, #248]	@ (8001458 <HAL_I2C_MspInit+0x190>)
 8001360:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001364:	6413      	str	r3, [r2, #64]	@ 0x40
 8001366:	4b3c      	ldr	r3, [pc, #240]	@ (8001458 <HAL_I2C_MspInit+0x190>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001372:	4b3b      	ldr	r3, [pc, #236]	@ (8001460 <HAL_I2C_MspInit+0x198>)
 8001374:	4a3b      	ldr	r2, [pc, #236]	@ (8001464 <HAL_I2C_MspInit+0x19c>)
 8001376:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001378:	4b39      	ldr	r3, [pc, #228]	@ (8001460 <HAL_I2C_MspInit+0x198>)
 800137a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800137e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001380:	4b37      	ldr	r3, [pc, #220]	@ (8001460 <HAL_I2C_MspInit+0x198>)
 8001382:	2240      	movs	r2, #64	@ 0x40
 8001384:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001386:	4b36      	ldr	r3, [pc, #216]	@ (8001460 <HAL_I2C_MspInit+0x198>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800138c:	4b34      	ldr	r3, [pc, #208]	@ (8001460 <HAL_I2C_MspInit+0x198>)
 800138e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001392:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001394:	4b32      	ldr	r3, [pc, #200]	@ (8001460 <HAL_I2C_MspInit+0x198>)
 8001396:	2200      	movs	r2, #0
 8001398:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800139a:	4b31      	ldr	r3, [pc, #196]	@ (8001460 <HAL_I2C_MspInit+0x198>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80013a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001460 <HAL_I2C_MspInit+0x198>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001460 <HAL_I2C_MspInit+0x198>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001460 <HAL_I2C_MspInit+0x198>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80013b2:	482b      	ldr	r0, [pc, #172]	@ (8001460 <HAL_I2C_MspInit+0x198>)
 80013b4:	f000 ff1e 	bl	80021f4 <HAL_DMA_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 80013be:	f7ff fe69 	bl	8001094 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a26      	ldr	r2, [pc, #152]	@ (8001460 <HAL_I2C_MspInit+0x198>)
 80013c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80013c8:	4a25      	ldr	r2, [pc, #148]	@ (8001460 <HAL_I2C_MspInit+0x198>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80013ce:	4b26      	ldr	r3, [pc, #152]	@ (8001468 <HAL_I2C_MspInit+0x1a0>)
 80013d0:	4a26      	ldr	r2, [pc, #152]	@ (800146c <HAL_I2C_MspInit+0x1a4>)
 80013d2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80013d4:	4b24      	ldr	r3, [pc, #144]	@ (8001468 <HAL_I2C_MspInit+0x1a0>)
 80013d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80013da:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013dc:	4b22      	ldr	r3, [pc, #136]	@ (8001468 <HAL_I2C_MspInit+0x1a0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e2:	4b21      	ldr	r3, [pc, #132]	@ (8001468 <HAL_I2C_MspInit+0x1a0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001468 <HAL_I2C_MspInit+0x1a0>)
 80013ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ee:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <HAL_I2C_MspInit+0x1a0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <HAL_I2C_MspInit+0x1a0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80013fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <HAL_I2C_MspInit+0x1a0>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001402:	4b19      	ldr	r3, [pc, #100]	@ (8001468 <HAL_I2C_MspInit+0x1a0>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001408:	4b17      	ldr	r3, [pc, #92]	@ (8001468 <HAL_I2C_MspInit+0x1a0>)
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800140e:	4816      	ldr	r0, [pc, #88]	@ (8001468 <HAL_I2C_MspInit+0x1a0>)
 8001410:	f000 fef0 	bl	80021f4 <HAL_DMA_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_I2C_MspInit+0x156>
    {
      Error_Handler();
 800141a:	f7ff fe3b 	bl	8001094 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a11      	ldr	r2, [pc, #68]	@ (8001468 <HAL_I2C_MspInit+0x1a0>)
 8001422:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001424:	4a10      	ldr	r2, [pc, #64]	@ (8001468 <HAL_I2C_MspInit+0x1a0>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	201f      	movs	r0, #31
 8001430:	f000 fd35 	bl	8001e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001434:	201f      	movs	r0, #31
 8001436:	f000 fd4e 	bl	8001ed6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	2020      	movs	r0, #32
 8001440:	f000 fd2d 	bl	8001e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001444:	2020      	movs	r0, #32
 8001446:	f000 fd46 	bl	8001ed6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800144a:	bf00      	nop
 800144c:	37a8      	adds	r7, #168	@ 0xa8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40005400 	.word	0x40005400
 8001458:	40023800 	.word	0x40023800
 800145c:	40020400 	.word	0x40020400
 8001460:	20000548 	.word	0x20000548
 8001464:	400260a0 	.word	0x400260a0
 8001468:	200005a8 	.word	0x200005a8
 800146c:	40026010 	.word	0x40026010

08001470 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b0aa      	sub	sp, #168	@ 0xa8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	2280      	movs	r2, #128	@ 0x80
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f004 f90b 	bl	80056ac <memset>
  if(huart->Instance==USART1)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a21      	ldr	r2, [pc, #132]	@ (8001520 <HAL_UART_MspInit+0xb0>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d13b      	bne.n	8001518 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014a0:	2340      	movs	r3, #64	@ 0x40
 80014a2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014a4:	2300      	movs	r3, #0
 80014a6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4618      	mov	r0, r3
 80014ae:	f002 ff5d 	bl	800436c <HAL_RCCEx_PeriphCLKConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014b8:	f7ff fdec 	bl	8001094 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014bc:	4b19      	ldr	r3, [pc, #100]	@ (8001524 <HAL_UART_MspInit+0xb4>)
 80014be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c0:	4a18      	ldr	r2, [pc, #96]	@ (8001524 <HAL_UART_MspInit+0xb4>)
 80014c2:	f043 0310 	orr.w	r3, r3, #16
 80014c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80014c8:	4b16      	ldr	r3, [pc, #88]	@ (8001524 <HAL_UART_MspInit+0xb4>)
 80014ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014cc:	f003 0310 	and.w	r3, r3, #16
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d4:	4b13      	ldr	r3, [pc, #76]	@ (8001524 <HAL_UART_MspInit+0xb4>)
 80014d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d8:	4a12      	ldr	r2, [pc, #72]	@ (8001524 <HAL_UART_MspInit+0xb4>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e0:	4b10      	ldr	r3, [pc, #64]	@ (8001524 <HAL_UART_MspInit+0xb4>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014ec:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001506:	2307      	movs	r3, #7
 8001508:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001510:	4619      	mov	r1, r3
 8001512:	4805      	ldr	r0, [pc, #20]	@ (8001528 <HAL_UART_MspInit+0xb8>)
 8001514:	f001 f988 	bl	8002828 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001518:	bf00      	nop
 800151a:	37a8      	adds	r7, #168	@ 0xa8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40011000 	.word	0x40011000
 8001524:	40023800 	.word	0x40023800
 8001528:	40020000 	.word	0x40020000

0800152c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <NMI_Handler+0x4>

08001534 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <HardFault_Handler+0x4>

0800153c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <MemManage_Handler+0x4>

08001544 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <BusFault_Handler+0x4>

0800154c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <UsageFault_Handler+0x4>

08001554 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001582:	f000 f8fd 	bl	8001780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001590:	4802      	ldr	r0, [pc, #8]	@ (800159c <DMA1_Stream0_IRQHandler+0x10>)
 8001592:	f000 feff 	bl	8002394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200005a8 	.word	0x200005a8

080015a0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80015a4:	4802      	ldr	r0, [pc, #8]	@ (80015b0 <DMA1_Stream6_IRQHandler+0x10>)
 80015a6:	f000 fef5 	bl	8002394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000548 	.word	0x20000548

080015b4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80015b8:	4802      	ldr	r0, [pc, #8]	@ (80015c4 <I2C1_EV_IRQHandler+0x10>)
 80015ba:	f001 fbb9 	bl	8002d30 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200004f4 	.word	0x200004f4

080015c8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80015cc:	4802      	ldr	r0, [pc, #8]	@ (80015d8 <I2C1_ER_IRQHandler+0x10>)
 80015ce:	f001 fbc9 	bl	8002d64 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200004f4 	.word	0x200004f4

080015dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <SystemInit+0x20>)
 80015e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015e6:	4a05      	ldr	r2, [pc, #20]	@ (80015fc <SystemInit+0x20>)
 80015e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <static_itoa>:
  if (HAL_OK == HAL_UART_Receive(&huart1, &rxbuf, 1, 10)) {
    HAL_UART_Transmit(&huart1, &rxbuf, 1, 10);
  }
}

const char *static_itoa(uint32_t n) {
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  static char res[UINT32_MAX_DIGITS + 1] = {0};
  uint8_t i = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	73fb      	strb	r3, [r7, #15]

  while (n > 9) {
 800160c:	e018      	b.n	8001640 <static_itoa+0x40>
    res[i] = '0' + (n % 10);
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4b26      	ldr	r3, [pc, #152]	@ (80016ac <static_itoa+0xac>)
 8001612:	fba3 2301 	umull	r2, r3, r3, r1
 8001616:	08da      	lsrs	r2, r3, #3
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	1aca      	subs	r2, r1, r3
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	3230      	adds	r2, #48	@ 0x30
 8001628:	b2d1      	uxtb	r1, r2
 800162a:	4a21      	ldr	r2, [pc, #132]	@ (80016b0 <static_itoa+0xb0>)
 800162c:	54d1      	strb	r1, [r2, r3]
    n /= 10;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a1e      	ldr	r2, [pc, #120]	@ (80016ac <static_itoa+0xac>)
 8001632:	fba2 2303 	umull	r2, r3, r2, r3
 8001636:	08db      	lsrs	r3, r3, #3
 8001638:	607b      	str	r3, [r7, #4]
    ++i;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	3301      	adds	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]
  while (n > 9) {
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b09      	cmp	r3, #9
 8001644:	d8e3      	bhi.n	800160e <static_itoa+0xe>
  }
  res[i] = '0' + n;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	3230      	adds	r2, #48	@ 0x30
 800164e:	b2d1      	uxtb	r1, r2
 8001650:	4a17      	ldr	r2, [pc, #92]	@ (80016b0 <static_itoa+0xb0>)
 8001652:	54d1      	strb	r1, [r2, r3]
  res[i + 1] = '\0';
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	3301      	adds	r3, #1
 8001658:	4a15      	ldr	r2, [pc, #84]	@ (80016b0 <static_itoa+0xb0>)
 800165a:	2100      	movs	r1, #0
 800165c:	54d1      	strb	r1, [r2, r3]

  for (int8_t j = 0; j < i; ++j, --i) {
 800165e:	2300      	movs	r3, #0
 8001660:	73bb      	strb	r3, [r7, #14]
 8001662:	e016      	b.n	8001692 <static_itoa+0x92>
    const char t = res[j];
 8001664:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001668:	4a11      	ldr	r2, [pc, #68]	@ (80016b0 <static_itoa+0xb0>)
 800166a:	5cd3      	ldrb	r3, [r2, r3]
 800166c:	737b      	strb	r3, [r7, #13]
    res[j] = res[i];
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001674:	490e      	ldr	r1, [pc, #56]	@ (80016b0 <static_itoa+0xb0>)
 8001676:	5c89      	ldrb	r1, [r1, r2]
 8001678:	4a0d      	ldr	r2, [pc, #52]	@ (80016b0 <static_itoa+0xb0>)
 800167a:	54d1      	strb	r1, [r2, r3]
    res[i] = t;
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	490c      	ldr	r1, [pc, #48]	@ (80016b0 <static_itoa+0xb0>)
 8001680:	7b7a      	ldrb	r2, [r7, #13]
 8001682:	54ca      	strb	r2, [r1, r3]
  for (int8_t j = 0; j < i; ++j, --i) {
 8001684:	7bbb      	ldrb	r3, [r7, #14]
 8001686:	3301      	adds	r3, #1
 8001688:	b2db      	uxtb	r3, r3
 800168a:	73bb      	strb	r3, [r7, #14]
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	3b01      	subs	r3, #1
 8001690:	73fb      	strb	r3, [r7, #15]
 8001692:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	429a      	cmp	r2, r3
 800169a:	dbe3      	blt.n	8001664 <static_itoa+0x64>
  }

  return res;
 800169c:	4b04      	ldr	r3, [pc, #16]	@ (80016b0 <static_itoa+0xb0>)
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	cccccccd 	.word	0xcccccccd
 80016b0:	20000690 	.word	0x20000690

080016b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 80016b8:	f7ff ff90 	bl	80015dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016bc:	480c      	ldr	r0, [pc, #48]	@ (80016f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016be:	490d      	ldr	r1, [pc, #52]	@ (80016f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016c0:	4a0d      	ldr	r2, [pc, #52]	@ (80016f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c4:	e002      	b.n	80016cc <LoopCopyDataInit>

080016c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ca:	3304      	adds	r3, #4

080016cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d0:	d3f9      	bcc.n	80016c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d2:	4a0a      	ldr	r2, [pc, #40]	@ (80016fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001700 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d8:	e001      	b.n	80016de <LoopFillZerobss>

080016da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016dc:	3204      	adds	r2, #4

080016de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e0:	d3fb      	bcc.n	80016da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016e2:	f004 f803 	bl	80056ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016e6:	f7ff fa7b 	bl	8000be0 <main>
  bx  lr    
 80016ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016ec:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80016f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016f8:	08005a84 	.word	0x08005a84
  ldr r2, =_sbss
 80016fc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001700:	200007d8 	.word	0x200007d8

08001704 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001704:	e7fe      	b.n	8001704 <ADC_IRQHandler>

08001706 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170a:	2003      	movs	r0, #3
 800170c:	f000 fbbc 	bl	8001e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001710:	200f      	movs	r0, #15
 8001712:	f000 f805 	bl	8001720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001716:	f7ff fd33 	bl	8001180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <HAL_InitTick+0x54>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <HAL_InitTick+0x58>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4619      	mov	r1, r3
 8001732:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001736:	fbb3 f3f1 	udiv	r3, r3, r1
 800173a:	fbb2 f3f3 	udiv	r3, r2, r3
 800173e:	4618      	mov	r0, r3
 8001740:	f000 fbd7 	bl	8001ef2 <HAL_SYSTICK_Config>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e00e      	b.n	800176c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b0f      	cmp	r3, #15
 8001752:	d80a      	bhi.n	800176a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001754:	2200      	movs	r2, #0
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	f04f 30ff 	mov.w	r0, #4294967295
 800175c:	f000 fb9f 	bl	8001e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001760:	4a06      	ldr	r2, [pc, #24]	@ (800177c <HAL_InitTick+0x5c>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	e000      	b.n	800176c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000014 	.word	0x20000014
 8001778:	2000001c 	.word	0x2000001c
 800177c:	20000018 	.word	0x20000018

08001780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001784:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <HAL_IncTick+0x20>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_IncTick+0x24>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4413      	add	r3, r2
 8001790:	4a04      	ldr	r2, [pc, #16]	@ (80017a4 <HAL_IncTick+0x24>)
 8001792:	6013      	str	r3, [r2, #0]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	2000001c 	.word	0x2000001c
 80017a4:	2000069c 	.word	0x2000069c

080017a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return uwTick;
 80017ac:	4b03      	ldr	r3, [pc, #12]	@ (80017bc <HAL_GetTick+0x14>)
 80017ae:	681b      	ldr	r3, [r3, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	2000069c 	.word	0x2000069c

080017c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e031      	b.n	800183a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d109      	bne.n	80017f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff fcf2 	bl	80011c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d116      	bne.n	800182c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001802:	4b10      	ldr	r3, [pc, #64]	@ (8001844 <HAL_ADC_Init+0x84>)
 8001804:	4013      	ands	r3, r2
 8001806:	f043 0202 	orr.w	r2, r3, #2
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f970 	bl	8001af4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	f023 0303 	bic.w	r3, r3, #3
 8001822:	f043 0201 	orr.w	r2, r3, #1
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	641a      	str	r2, [r3, #64]	@ 0x40
 800182a:	e001      	b.n	8001830 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001838:	7bfb      	ldrb	r3, [r7, #15]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	ffffeefd 	.word	0xffffeefd

08001848 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800185c:	2b01      	cmp	r3, #1
 800185e:	d101      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x1c>
 8001860:	2302      	movs	r3, #2
 8001862:	e136      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x28a>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b09      	cmp	r3, #9
 8001872:	d93a      	bls.n	80018ea <HAL_ADC_ConfigChannel+0xa2>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800187c:	d035      	beq.n	80018ea <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68d9      	ldr	r1, [r3, #12]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	b29b      	uxth	r3, r3
 800188a:	461a      	mov	r2, r3
 800188c:	4613      	mov	r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	3b1e      	subs	r3, #30
 8001894:	2207      	movs	r2, #7
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	400a      	ands	r2, r1
 80018a2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a8d      	ldr	r2, [pc, #564]	@ (8001ae0 <HAL_ADC_ConfigChannel+0x298>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d10a      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68d9      	ldr	r1, [r3, #12]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	061a      	lsls	r2, r3, #24
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018c2:	e035      	b.n	8001930 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68d9      	ldr	r1, [r3, #12]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	4618      	mov	r0, r3
 80018d6:	4603      	mov	r3, r0
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4403      	add	r3, r0
 80018dc:	3b1e      	subs	r3, #30
 80018de:	409a      	lsls	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018e8:	e022      	b.n	8001930 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6919      	ldr	r1, [r3, #16]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	2207      	movs	r2, #7
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43da      	mvns	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	400a      	ands	r2, r1
 800190c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6919      	ldr	r1, [r3, #16]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	b29b      	uxth	r3, r3
 800191e:	4618      	mov	r0, r3
 8001920:	4603      	mov	r3, r0
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4403      	add	r3, r0
 8001926:	409a      	lsls	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b06      	cmp	r3, #6
 8001936:	d824      	bhi.n	8001982 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	3b05      	subs	r3, #5
 800194a:	221f      	movs	r2, #31
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43da      	mvns	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	400a      	ands	r2, r1
 8001958:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	b29b      	uxth	r3, r3
 8001966:	4618      	mov	r0, r3
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	3b05      	subs	r3, #5
 8001974:	fa00 f203 	lsl.w	r2, r0, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001980:	e04c      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b0c      	cmp	r3, #12
 8001988:	d824      	bhi.n	80019d4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	3b23      	subs	r3, #35	@ 0x23
 800199c:	221f      	movs	r2, #31
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	400a      	ands	r2, r1
 80019aa:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	4618      	mov	r0, r3
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	3b23      	subs	r3, #35	@ 0x23
 80019c6:	fa00 f203 	lsl.w	r2, r0, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80019d2:	e023      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	3b41      	subs	r3, #65	@ 0x41
 80019e6:	221f      	movs	r2, #31
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43da      	mvns	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	400a      	ands	r2, r1
 80019f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	4618      	mov	r0, r3
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3b41      	subs	r3, #65	@ 0x41
 8001a10:	fa00 f203 	lsl.w	r2, r0, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a30      	ldr	r2, [pc, #192]	@ (8001ae4 <HAL_ADC_ConfigChannel+0x29c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d10a      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x1f4>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001a2e:	d105      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001a30:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	4a2c      	ldr	r2, [pc, #176]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a36:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001a3a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a28      	ldr	r2, [pc, #160]	@ (8001ae4 <HAL_ADC_ConfigChannel+0x29c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d10f      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x21e>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b12      	cmp	r3, #18
 8001a4c:	d10b      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001a4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	4a25      	ldr	r2, [pc, #148]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a54:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001a58:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001a5a:	4b23      	ldr	r3, [pc, #140]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4a22      	ldr	r2, [pc, #136]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a64:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae4 <HAL_ADC_ConfigChannel+0x29c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d12b      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x280>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a1a      	ldr	r2, [pc, #104]	@ (8001ae0 <HAL_ADC_ConfigChannel+0x298>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d003      	beq.n	8001a82 <HAL_ADC_ConfigChannel+0x23a>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b11      	cmp	r3, #17
 8001a80:	d122      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001a82:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4a18      	ldr	r2, [pc, #96]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a88:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001a8c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001a8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4a15      	ldr	r2, [pc, #84]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a98:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a10      	ldr	r2, [pc, #64]	@ (8001ae0 <HAL_ADC_ConfigChannel+0x298>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d111      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001aa4:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <HAL_ADC_ConfigChannel+0x2a4>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a11      	ldr	r2, [pc, #68]	@ (8001af0 <HAL_ADC_ConfigChannel+0x2a8>)
 8001aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001aae:	0c9a      	lsrs	r2, r3, #18
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001aba:	e002      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f9      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	10000012 	.word	0x10000012
 8001ae4:	40012000 	.word	0x40012000
 8001ae8:	40012300 	.word	0x40012300
 8001aec:	20000014 	.word	0x20000014
 8001af0:	431bde83 	.word	0x431bde83

08001af4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001afc:	4b78      	ldr	r3, [pc, #480]	@ (8001ce0 <ADC_Init+0x1ec>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	4a77      	ldr	r2, [pc, #476]	@ (8001ce0 <ADC_Init+0x1ec>)
 8001b02:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001b06:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001b08:	4b75      	ldr	r3, [pc, #468]	@ (8001ce0 <ADC_Init+0x1ec>)
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	4973      	ldr	r1, [pc, #460]	@ (8001ce0 <ADC_Init+0x1ec>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6859      	ldr	r1, [r3, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	021a      	lsls	r2, r3, #8
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6859      	ldr	r1, [r3, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6899      	ldr	r1, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b82:	4a58      	ldr	r2, [pc, #352]	@ (8001ce4 <ADC_Init+0x1f0>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d022      	beq.n	8001bce <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6899      	ldr	r1, [r3, #8]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6899      	ldr	r1, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	e00f      	b.n	8001bee <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001bdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 0202 	bic.w	r2, r2, #2
 8001bfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6899      	ldr	r1, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	005a      	lsls	r2, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d01b      	beq.n	8001c54 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6859      	ldr	r1, [r3, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c46:	3b01      	subs	r3, #1
 8001c48:	035a      	lsls	r2, r3, #13
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	e007      	b.n	8001c64 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	051a      	lsls	r2, r3, #20
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6899      	ldr	r1, [r3, #8]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ca6:	025a      	lsls	r2, r3, #9
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6899      	ldr	r1, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	029a      	lsls	r2, r3, #10
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	609a      	str	r2, [r3, #8]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	40012300 	.word	0x40012300
 8001ce4:	0f000001 	.word	0x0f000001

08001ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <__NVIC_SetPriorityGrouping+0x40>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d04:	4013      	ands	r3, r2
 8001d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d16:	4a04      	ldr	r2, [pc, #16]	@ (8001d28 <__NVIC_SetPriorityGrouping+0x40>)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	60d3      	str	r3, [r2, #12]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00
 8001d2c:	05fa0000 	.word	0x05fa0000

08001d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d34:	4b04      	ldr	r3, [pc, #16]	@ (8001d48 <__NVIC_GetPriorityGrouping+0x18>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	0a1b      	lsrs	r3, r3, #8
 8001d3a:	f003 0307 	and.w	r3, r3, #7
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	db0b      	blt.n	8001d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	f003 021f 	and.w	r2, r3, #31
 8001d64:	4907      	ldr	r1, [pc, #28]	@ (8001d84 <__NVIC_EnableIRQ+0x38>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000e100 	.word	0xe000e100

08001d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	6039      	str	r1, [r7, #0]
 8001d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	db0a      	blt.n	8001db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	490c      	ldr	r1, [pc, #48]	@ (8001dd4 <__NVIC_SetPriority+0x4c>)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	0112      	lsls	r2, r2, #4
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	440b      	add	r3, r1
 8001dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db0:	e00a      	b.n	8001dc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4908      	ldr	r1, [pc, #32]	@ (8001dd8 <__NVIC_SetPriority+0x50>)
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	3b04      	subs	r3, #4
 8001dc0:	0112      	lsls	r2, r2, #4
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	761a      	strb	r2, [r3, #24]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000e100 	.word	0xe000e100
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	@ 0x24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f1c3 0307 	rsb	r3, r3, #7
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	bf28      	it	cs
 8001dfa:	2304      	movcs	r3, #4
 8001dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3304      	adds	r3, #4
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d902      	bls.n	8001e0c <NVIC_EncodePriority+0x30>
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3b03      	subs	r3, #3
 8001e0a:	e000      	b.n	8001e0e <NVIC_EncodePriority+0x32>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	f04f 32ff 	mov.w	r2, #4294967295
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	401a      	ands	r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2e:	43d9      	mvns	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	4313      	orrs	r3, r2
         );
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3724      	adds	r7, #36	@ 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e54:	d301      	bcc.n	8001e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00f      	b.n	8001e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e84 <SysTick_Config+0x40>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e62:	210f      	movs	r1, #15
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295
 8001e68:	f7ff ff8e 	bl	8001d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e6c:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <SysTick_Config+0x40>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e72:	4b04      	ldr	r3, [pc, #16]	@ (8001e84 <SysTick_Config+0x40>)
 8001e74:	2207      	movs	r2, #7
 8001e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	e000e010 	.word	0xe000e010

08001e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff ff29 	bl	8001ce8 <__NVIC_SetPriorityGrouping>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b086      	sub	sp, #24
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb0:	f7ff ff3e 	bl	8001d30 <__NVIC_GetPriorityGrouping>
 8001eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	68b9      	ldr	r1, [r7, #8]
 8001eba:	6978      	ldr	r0, [r7, #20]
 8001ebc:	f7ff ff8e 	bl	8001ddc <NVIC_EncodePriority>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff5d 	bl	8001d88 <__NVIC_SetPriority>
}
 8001ece:	bf00      	nop
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff31 	bl	8001d4c <__NVIC_EnableIRQ>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff ffa2 	bl	8001e44 <SysTick_Config>
 8001f00:	4603      	mov	r3, r0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f10:	f3bf 8f5f 	dmb	sy
}
 8001f14:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001f16:	4b07      	ldr	r3, [pc, #28]	@ (8001f34 <HAL_MPU_Disable+0x28>)
 8001f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1a:	4a06      	ldr	r2, [pc, #24]	@ (8001f34 <HAL_MPU_Disable+0x28>)
 8001f1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f20:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001f22:	4b05      	ldr	r3, [pc, #20]	@ (8001f38 <HAL_MPU_Disable+0x2c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	605a      	str	r2, [r3, #4]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000ed00 	.word	0xe000ed00
 8001f38:	e000ed90 	.word	0xe000ed90

08001f3c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001f44:	4a0b      	ldr	r2, [pc, #44]	@ (8001f74 <HAL_MPU_Enable+0x38>)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <HAL_MPU_Enable+0x3c>)
 8001f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f52:	4a09      	ldr	r2, [pc, #36]	@ (8001f78 <HAL_MPU_Enable+0x3c>)
 8001f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f58:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001f5a:	f3bf 8f4f 	dsb	sy
}
 8001f5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f60:	f3bf 8f6f 	isb	sy
}
 8001f64:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000ed90 	.word	0xe000ed90
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	785a      	ldrb	r2, [r3, #1]
 8001f88:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff8 <HAL_MPU_ConfigRegion+0x7c>)
 8001f8a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff8 <HAL_MPU_ConfigRegion+0x7c>)
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	4a19      	ldr	r2, [pc, #100]	@ (8001ff8 <HAL_MPU_ConfigRegion+0x7c>)
 8001f92:	f023 0301 	bic.w	r3, r3, #1
 8001f96:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001f98:	4a17      	ldr	r2, [pc, #92]	@ (8001ff8 <HAL_MPU_ConfigRegion+0x7c>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	7b1b      	ldrb	r3, [r3, #12]
 8001fa4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	7adb      	ldrb	r3, [r3, #11]
 8001faa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	7a9b      	ldrb	r3, [r3, #10]
 8001fb2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001fb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	7b5b      	ldrb	r3, [r3, #13]
 8001fba:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001fbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	7b9b      	ldrb	r3, [r3, #14]
 8001fc2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001fc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	7bdb      	ldrb	r3, [r3, #15]
 8001fca:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001fcc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	7a5b      	ldrb	r3, [r3, #9]
 8001fd2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001fd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7a1b      	ldrb	r3, [r3, #8]
 8001fda:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001fdc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	7812      	ldrb	r2, [r2, #0]
 8001fe2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fe4:	4a04      	ldr	r2, [pc, #16]	@ (8001ff8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001fe6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fe8:	6113      	str	r3, [r2, #16]
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	e000ed90 	.word	0xe000ed90

08001ffc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e014      	b.n	8002038 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	791b      	ldrb	r3, [r3, #4]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d105      	bne.n	8002024 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff f912 	bl	8001248 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e046      	b.n	80020e2 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	795b      	ldrb	r3, [r3, #5]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d101      	bne.n	8002060 <HAL_DAC_Start+0x20>
 800205c:	2302      	movs	r3, #2
 800205e:	e040      	b.n	80020e2 <HAL_DAC_Start+0xa2>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2202      	movs	r2, #2
 800206a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6819      	ldr	r1, [r3, #0]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	2201      	movs	r2, #1
 800207a:	409a      	lsls	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10f      	bne.n	80020aa <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002094:	2b3c      	cmp	r3, #60	@ 0x3c
 8002096:	d11d      	bne.n	80020d4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0201 	orr.w	r2, r2, #1
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	e014      	b.n	80020d4 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	213c      	movs	r1, #60	@ 0x3c
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d107      	bne.n	80020d4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0202 	orr.w	r2, r2, #2
 80020d2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b087      	sub	sp, #28
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
 80020fa:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e015      	b.n	8002136 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d105      	bne.n	8002122 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4413      	add	r3, r2
 800211c:	3308      	adds	r3, #8
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	e004      	b.n	800212c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4413      	add	r3, r2
 8002128:	3314      	adds	r3, #20
 800212a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	461a      	mov	r2, r3
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	371c      	adds	r7, #28
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002142:	b480      	push	{r7}
 8002144:	b089      	sub	sp, #36	@ 0x24
 8002146:	af00      	add	r7, sp, #0
 8002148:	60f8      	str	r0, [r7, #12]
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <HAL_DAC_ConfigChannel+0x1c>
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e042      	b.n	80021e8 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	795b      	ldrb	r3, [r3, #5]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_DAC_ConfigChannel+0x2c>
 800216a:	2302      	movs	r3, #2
 800216c:	e03c      	b.n	80021e8 <HAL_DAC_ConfigChannel+0xa6>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2202      	movs	r2, #2
 8002178:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f003 0310 	and.w	r3, r3, #16
 8002188:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6819      	ldr	r1, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	22c0      	movs	r2, #192	@ 0xc0
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43da      	mvns	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	400a      	ands	r2, r1
 80021d8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2201      	movs	r2, #1
 80021de:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80021e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3724      	adds	r7, #36	@ 0x24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002200:	f7ff fad2 	bl	80017a8 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e099      	b.n	8002344 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0201 	bic.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002230:	e00f      	b.n	8002252 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002232:	f7ff fab9 	bl	80017a8 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b05      	cmp	r3, #5
 800223e:	d908      	bls.n	8002252 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2220      	movs	r2, #32
 8002244:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2203      	movs	r2, #3
 800224a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e078      	b.n	8002344 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1e8      	bne.n	8002232 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	4b38      	ldr	r3, [pc, #224]	@ (800234c <HAL_DMA_Init+0x158>)
 800226c:	4013      	ands	r3, r2
 800226e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800227e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002296:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d107      	bne.n	80022bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b4:	4313      	orrs	r3, r2
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f023 0307 	bic.w	r3, r3, #7
 80022d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	4313      	orrs	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d117      	bne.n	8002316 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00e      	beq.n	8002316 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fa19 	bl	8002730 <DMA_CheckFifoParam>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d008      	beq.n	8002316 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2240      	movs	r2, #64	@ 0x40
 8002308:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002312:	2301      	movs	r3, #1
 8002314:	e016      	b.n	8002344 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f9d0 	bl	80026c4 <DMA_CalcBaseAndBitshift>
 8002324:	4603      	mov	r3, r0
 8002326:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232c:	223f      	movs	r2, #63	@ 0x3f
 800232e:	409a      	lsls	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	e010803f 	.word	0xe010803f

08002350 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d004      	beq.n	800236e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2280      	movs	r2, #128	@ 0x80
 8002368:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e00c      	b.n	8002388 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2205      	movs	r2, #5
 8002372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0201 	bic.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80023a0:	4b8e      	ldr	r3, [pc, #568]	@ (80025dc <HAL_DMA_IRQHandler+0x248>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a8e      	ldr	r2, [pc, #568]	@ (80025e0 <HAL_DMA_IRQHandler+0x24c>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	0a9b      	lsrs	r3, r3, #10
 80023ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023be:	2208      	movs	r2, #8
 80023c0:	409a      	lsls	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4013      	ands	r3, r2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d01a      	beq.n	8002400 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d013      	beq.n	8002400 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0204 	bic.w	r2, r2, #4
 80023e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ec:	2208      	movs	r2, #8
 80023ee:	409a      	lsls	r2, r3
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f8:	f043 0201 	orr.w	r2, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002404:	2201      	movs	r2, #1
 8002406:	409a      	lsls	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d012      	beq.n	8002436 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002422:	2201      	movs	r2, #1
 8002424:	409a      	lsls	r2, r3
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800242e:	f043 0202 	orr.w	r2, r3, #2
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800243a:	2204      	movs	r2, #4
 800243c:	409a      	lsls	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4013      	ands	r3, r2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d012      	beq.n	800246c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00b      	beq.n	800246c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002458:	2204      	movs	r2, #4
 800245a:	409a      	lsls	r2, r3
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002464:	f043 0204 	orr.w	r2, r3, #4
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002470:	2210      	movs	r2, #16
 8002472:	409a      	lsls	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d043      	beq.n	8002504 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d03c      	beq.n	8002504 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800248e:	2210      	movs	r2, #16
 8002490:	409a      	lsls	r2, r3
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d018      	beq.n	80024d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d108      	bne.n	80024c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d024      	beq.n	8002504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	4798      	blx	r3
 80024c2:	e01f      	b.n	8002504 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d01b      	beq.n	8002504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	4798      	blx	r3
 80024d4:	e016      	b.n	8002504 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d107      	bne.n	80024f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0208 	bic.w	r2, r2, #8
 80024f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002508:	2220      	movs	r2, #32
 800250a:	409a      	lsls	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 808f 	beq.w	8002634 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 8087 	beq.w	8002634 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252a:	2220      	movs	r2, #32
 800252c:	409a      	lsls	r2, r3
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b05      	cmp	r3, #5
 800253c:	d136      	bne.n	80025ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0216 	bic.w	r2, r2, #22
 800254c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695a      	ldr	r2, [r3, #20]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800255c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	2b00      	cmp	r3, #0
 8002564:	d103      	bne.n	800256e <HAL_DMA_IRQHandler+0x1da>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800256a:	2b00      	cmp	r3, #0
 800256c:	d007      	beq.n	800257e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0208 	bic.w	r2, r2, #8
 800257c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002582:	223f      	movs	r2, #63	@ 0x3f
 8002584:	409a      	lsls	r2, r3
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d07e      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	4798      	blx	r3
        }
        return;
 80025aa:	e079      	b.n	80026a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d01d      	beq.n	80025f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10d      	bne.n	80025e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d031      	beq.n	8002634 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	4798      	blx	r3
 80025d8:	e02c      	b.n	8002634 <HAL_DMA_IRQHandler+0x2a0>
 80025da:	bf00      	nop
 80025dc:	20000014 	.word	0x20000014
 80025e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d023      	beq.n	8002634 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	4798      	blx	r3
 80025f4:	e01e      	b.n	8002634 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10f      	bne.n	8002624 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0210 	bic.w	r2, r2, #16
 8002612:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002638:	2b00      	cmp	r3, #0
 800263a:	d032      	beq.n	80026a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d022      	beq.n	800268e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2205      	movs	r2, #5
 800264c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	3301      	adds	r3, #1
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	429a      	cmp	r2, r3
 800266a:	d307      	bcc.n	800267c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f2      	bne.n	8002660 <HAL_DMA_IRQHandler+0x2cc>
 800267a:	e000      	b.n	800267e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800267c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002692:	2b00      	cmp	r3, #0
 8002694:	d005      	beq.n	80026a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	4798      	blx	r3
 800269e:	e000      	b.n	80026a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80026a0:	bf00      	nop
    }
  }
}
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026b6:	b2db      	uxtb	r3, r3
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	3b10      	subs	r3, #16
 80026d4:	4a13      	ldr	r2, [pc, #76]	@ (8002724 <DMA_CalcBaseAndBitshift+0x60>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026de:	4a12      	ldr	r2, [pc, #72]	@ (8002728 <DMA_CalcBaseAndBitshift+0x64>)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d908      	bls.n	8002704 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <DMA_CalcBaseAndBitshift+0x68>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	1d1a      	adds	r2, r3, #4
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	659a      	str	r2, [r3, #88]	@ 0x58
 8002702:	e006      	b.n	8002712 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	461a      	mov	r2, r3
 800270a:	4b08      	ldr	r3, [pc, #32]	@ (800272c <DMA_CalcBaseAndBitshift+0x68>)
 800270c:	4013      	ands	r3, r2
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002716:	4618      	mov	r0, r3
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	aaaaaaab 	.word	0xaaaaaaab
 8002728:	08005968 	.word	0x08005968
 800272c:	fffffc00 	.word	0xfffffc00

08002730 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002740:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d11f      	bne.n	800278a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b03      	cmp	r3, #3
 800274e:	d856      	bhi.n	80027fe <DMA_CheckFifoParam+0xce>
 8002750:	a201      	add	r2, pc, #4	@ (adr r2, 8002758 <DMA_CheckFifoParam+0x28>)
 8002752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002756:	bf00      	nop
 8002758:	08002769 	.word	0x08002769
 800275c:	0800277b 	.word	0x0800277b
 8002760:	08002769 	.word	0x08002769
 8002764:	080027ff 	.word	0x080027ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800276c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d046      	beq.n	8002802 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002778:	e043      	b.n	8002802 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002782:	d140      	bne.n	8002806 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002788:	e03d      	b.n	8002806 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002792:	d121      	bne.n	80027d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b03      	cmp	r3, #3
 8002798:	d837      	bhi.n	800280a <DMA_CheckFifoParam+0xda>
 800279a:	a201      	add	r2, pc, #4	@ (adr r2, 80027a0 <DMA_CheckFifoParam+0x70>)
 800279c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a0:	080027b1 	.word	0x080027b1
 80027a4:	080027b7 	.word	0x080027b7
 80027a8:	080027b1 	.word	0x080027b1
 80027ac:	080027c9 	.word	0x080027c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
      break;
 80027b4:	e030      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d025      	beq.n	800280e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c6:	e022      	b.n	800280e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027d0:	d11f      	bne.n	8002812 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027d6:	e01c      	b.n	8002812 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d903      	bls.n	80027e6 <DMA_CheckFifoParam+0xb6>
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d003      	beq.n	80027ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027e4:	e018      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	73fb      	strb	r3, [r7, #15]
      break;
 80027ea:	e015      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00e      	beq.n	8002816 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
      break;
 80027fc:	e00b      	b.n	8002816 <DMA_CheckFifoParam+0xe6>
      break;
 80027fe:	bf00      	nop
 8002800:	e00a      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      break;
 8002802:	bf00      	nop
 8002804:	e008      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      break;
 8002806:	bf00      	nop
 8002808:	e006      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      break;
 800280a:	bf00      	nop
 800280c:	e004      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      break;
 800280e:	bf00      	nop
 8002810:	e002      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      break;   
 8002812:	bf00      	nop
 8002814:	e000      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      break;
 8002816:	bf00      	nop
    }
  } 
  
  return status; 
 8002818:	7bfb      	ldrb	r3, [r7, #15]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop

08002828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002828:	b480      	push	{r7}
 800282a:	b089      	sub	sp, #36	@ 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800283e:	2300      	movs	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	e169      	b.n	8002b1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002848:	2201      	movs	r2, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	429a      	cmp	r2, r3
 8002862:	f040 8158 	bne.w	8002b16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b01      	cmp	r3, #1
 8002870:	d005      	beq.n	800287e <HAL_GPIO_Init+0x56>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d130      	bne.n	80028e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	2203      	movs	r2, #3
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b4:	2201      	movs	r2, #1
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 0201 	and.w	r2, r3, #1
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d017      	beq.n	800291c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2203      	movs	r2, #3
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d123      	bne.n	8002970 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	08da      	lsrs	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3208      	adds	r2, #8
 8002930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	220f      	movs	r2, #15
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	08da      	lsrs	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3208      	adds	r2, #8
 800296a:	69b9      	ldr	r1, [r7, #24]
 800296c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	2203      	movs	r2, #3
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0203 	and.w	r2, r3, #3
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80b2 	beq.w	8002b16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b2:	4b60      	ldr	r3, [pc, #384]	@ (8002b34 <HAL_GPIO_Init+0x30c>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b6:	4a5f      	ldr	r2, [pc, #380]	@ (8002b34 <HAL_GPIO_Init+0x30c>)
 80029b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80029be:	4b5d      	ldr	r3, [pc, #372]	@ (8002b34 <HAL_GPIO_Init+0x30c>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80029ca:	4a5b      	ldr	r2, [pc, #364]	@ (8002b38 <HAL_GPIO_Init+0x310>)
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	089b      	lsrs	r3, r3, #2
 80029d0:	3302      	adds	r3, #2
 80029d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	220f      	movs	r2, #15
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a52      	ldr	r2, [pc, #328]	@ (8002b3c <HAL_GPIO_Init+0x314>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d02b      	beq.n	8002a4e <HAL_GPIO_Init+0x226>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a51      	ldr	r2, [pc, #324]	@ (8002b40 <HAL_GPIO_Init+0x318>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d025      	beq.n	8002a4a <HAL_GPIO_Init+0x222>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a50      	ldr	r2, [pc, #320]	@ (8002b44 <HAL_GPIO_Init+0x31c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d01f      	beq.n	8002a46 <HAL_GPIO_Init+0x21e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a4f      	ldr	r2, [pc, #316]	@ (8002b48 <HAL_GPIO_Init+0x320>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d019      	beq.n	8002a42 <HAL_GPIO_Init+0x21a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a4e      	ldr	r2, [pc, #312]	@ (8002b4c <HAL_GPIO_Init+0x324>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <HAL_GPIO_Init+0x216>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a4d      	ldr	r2, [pc, #308]	@ (8002b50 <HAL_GPIO_Init+0x328>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00d      	beq.n	8002a3a <HAL_GPIO_Init+0x212>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a4c      	ldr	r2, [pc, #304]	@ (8002b54 <HAL_GPIO_Init+0x32c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d007      	beq.n	8002a36 <HAL_GPIO_Init+0x20e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a4b      	ldr	r2, [pc, #300]	@ (8002b58 <HAL_GPIO_Init+0x330>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d101      	bne.n	8002a32 <HAL_GPIO_Init+0x20a>
 8002a2e:	2307      	movs	r3, #7
 8002a30:	e00e      	b.n	8002a50 <HAL_GPIO_Init+0x228>
 8002a32:	2308      	movs	r3, #8
 8002a34:	e00c      	b.n	8002a50 <HAL_GPIO_Init+0x228>
 8002a36:	2306      	movs	r3, #6
 8002a38:	e00a      	b.n	8002a50 <HAL_GPIO_Init+0x228>
 8002a3a:	2305      	movs	r3, #5
 8002a3c:	e008      	b.n	8002a50 <HAL_GPIO_Init+0x228>
 8002a3e:	2304      	movs	r3, #4
 8002a40:	e006      	b.n	8002a50 <HAL_GPIO_Init+0x228>
 8002a42:	2303      	movs	r3, #3
 8002a44:	e004      	b.n	8002a50 <HAL_GPIO_Init+0x228>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e002      	b.n	8002a50 <HAL_GPIO_Init+0x228>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <HAL_GPIO_Init+0x228>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	69fa      	ldr	r2, [r7, #28]
 8002a52:	f002 0203 	and.w	r2, r2, #3
 8002a56:	0092      	lsls	r2, r2, #2
 8002a58:	4093      	lsls	r3, r2
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a60:	4935      	ldr	r1, [pc, #212]	@ (8002b38 <HAL_GPIO_Init+0x310>)
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	089b      	lsrs	r3, r3, #2
 8002a66:	3302      	adds	r3, #2
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b5c <HAL_GPIO_Init+0x334>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	43db      	mvns	r3, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a92:	4a32      	ldr	r2, [pc, #200]	@ (8002b5c <HAL_GPIO_Init+0x334>)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a98:	4b30      	ldr	r3, [pc, #192]	@ (8002b5c <HAL_GPIO_Init+0x334>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002abc:	4a27      	ldr	r2, [pc, #156]	@ (8002b5c <HAL_GPIO_Init+0x334>)
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ac2:	4b26      	ldr	r3, [pc, #152]	@ (8002b5c <HAL_GPIO_Init+0x334>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8002b5c <HAL_GPIO_Init+0x334>)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aec:	4b1b      	ldr	r3, [pc, #108]	@ (8002b5c <HAL_GPIO_Init+0x334>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b10:	4a12      	ldr	r2, [pc, #72]	@ (8002b5c <HAL_GPIO_Init+0x334>)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	61fb      	str	r3, [r7, #28]
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	2b0f      	cmp	r3, #15
 8002b20:	f67f ae92 	bls.w	8002848 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
 8002b28:	3724      	adds	r7, #36	@ 0x24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40013800 	.word	0x40013800
 8002b3c:	40020000 	.word	0x40020000
 8002b40:	40020400 	.word	0x40020400
 8002b44:	40020800 	.word	0x40020800
 8002b48:	40020c00 	.word	0x40020c00
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	40021400 	.word	0x40021400
 8002b54:	40021800 	.word	0x40021800
 8002b58:	40021c00 	.word	0x40021c00
 8002b5c:	40013c00 	.word	0x40013c00

08002b60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	887b      	ldrh	r3, [r7, #2]
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
 8002b7c:	e001      	b.n	8002b82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	807b      	strh	r3, [r7, #2]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ba0:	787b      	ldrb	r3, [r7, #1]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ba6:	887a      	ldrh	r2, [r7, #2]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002bac:	e003      	b.n	8002bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002bae:	887b      	ldrh	r3, [r7, #2]
 8002bb0:	041a      	lsls	r2, r3, #16
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	619a      	str	r2, [r3, #24]
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b085      	sub	sp, #20
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bd4:	887a      	ldrh	r2, [r7, #2]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	041a      	lsls	r2, r3, #16
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	43d9      	mvns	r1, r3
 8002be0:	887b      	ldrh	r3, [r7, #2]
 8002be2:	400b      	ands	r3, r1
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	619a      	str	r2, [r3, #24]
}
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e08b      	b.n	8002d22 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fe fb52 	bl	80012c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2224      	movs	r2, #36	@ 0x24
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d107      	bne.n	8002c72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c6e:	609a      	str	r2, [r3, #8]
 8002c70:	e006      	b.n	8002c80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002c7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d108      	bne.n	8002c9a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c96:	605a      	str	r2, [r3, #4]
 8002c98:	e007      	b.n	8002caa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ca8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6859      	ldr	r1, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d2c <HAL_I2C_Init+0x134>)
 8002cb6:	430b      	orrs	r3, r1
 8002cb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691a      	ldr	r2, [r3, #16]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69d9      	ldr	r1, [r3, #28]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1a      	ldr	r2, [r3, #32]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0201 	orr.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	02008000 	.word	0x02008000

08002d30 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	68f9      	ldr	r1, [r7, #12]
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	4798      	blx	r3
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00f      	beq.n	8002da6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d94:	f043 0201 	orr.w	r2, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002da4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00f      	beq.n	8002dd0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbe:	f043 0208 	orr.w	r2, r3, #8
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002dce:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00f      	beq.n	8002dfa <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00a      	beq.n	8002dfa <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de8:	f043 0202 	orr.w	r2, r3, #2
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002df8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 030b 	and.w	r3, r3, #11
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002e0a:	68f9      	ldr	r1, [r7, #12]
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 fbd5 	bl	80035bc <I2C_ITError>
  }
}
 8002e12:	bf00      	nop
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	70fb      	strb	r3, [r7, #3]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b086      	sub	sp, #24
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eaa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <I2C_Slave_ISR_IT+0x24>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e0e2      	b.n	8003084 <I2C_Slave_ISR_IT+0x1ea>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f003 0320 	and.w	r3, r3, #32
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d009      	beq.n	8002ee4 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d004      	beq.n	8002ee4 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002eda:	6939      	ldr	r1, [r7, #16]
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f9b5 	bl	800324c <I2C_ITSlaveCplt>
 8002ee2:	e0ca      	b.n	800307a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d04b      	beq.n	8002f86 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d046      	beq.n	8002f86 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d128      	bne.n	8002f54 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b28      	cmp	r3, #40	@ 0x28
 8002f0c:	d108      	bne.n	8002f20 <I2C_Slave_ISR_IT+0x86>
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f14:	d104      	bne.n	8002f20 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002f16:	6939      	ldr	r1, [r7, #16]
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 fafb 	bl	8003514 <I2C_ITListenCplt>
 8002f1e:	e031      	b.n	8002f84 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b29      	cmp	r3, #41	@ 0x29
 8002f2a:	d10e      	bne.n	8002f4a <I2C_Slave_ISR_IT+0xb0>
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f32:	d00a      	beq.n	8002f4a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2210      	movs	r2, #16
 8002f3a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 fc54 	bl	80037ea <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f926 	bl	8003194 <I2C_ITSlaveSeqCplt>
 8002f48:	e01c      	b.n	8002f84 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2210      	movs	r2, #16
 8002f50:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002f52:	e08f      	b.n	8003074 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2210      	movs	r2, #16
 8002f5a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f60:	f043 0204 	orr.w	r2, r3, #4
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <I2C_Slave_ISR_IT+0xdc>
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f74:	d17e      	bne.n	8003074 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 fb1d 	bl	80035bc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002f82:	e077      	b.n	8003074 <I2C_Slave_ISR_IT+0x1da>
 8002f84:	e076      	b.n	8003074 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d02f      	beq.n	8002ff0 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d02a      	beq.n	8002ff0 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d018      	beq.n	8002fd6 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d14b      	bne.n	8003078 <I2C_Slave_ISR_IT+0x1de>
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002fe6:	d047      	beq.n	8003078 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 f8d3 	bl	8003194 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002fee:	e043      	b.n	8003078 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d009      	beq.n	800300e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003000:	2b00      	cmp	r3, #0
 8003002:	d004      	beq.n	800300e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003004:	6939      	ldr	r1, [r7, #16]
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f840 	bl	800308c <I2C_ITAddrCplt>
 800300c:	e035      	b.n	800307a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d030      	beq.n	800307a <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800301e:	2b00      	cmp	r3, #0
 8003020:	d02b      	beq.n	800307a <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003026:	b29b      	uxth	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d018      	beq.n	800305e <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003030:	781a      	ldrb	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800305c:	e00d      	b.n	800307a <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003064:	d002      	beq.n	800306c <I2C_Slave_ISR_IT+0x1d2>
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d106      	bne.n	800307a <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 f891 	bl	8003194 <I2C_ITSlaveSeqCplt>
 8003072:	e002      	b.n	800307a <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003074:	bf00      	nop
 8003076:	e000      	b.n	800307a <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8003078:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800309c:	b2db      	uxtb	r3, r3
 800309e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80030a2:	2b28      	cmp	r3, #40	@ 0x28
 80030a4:	d16a      	bne.n	800317c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	0c1b      	lsrs	r3, r3, #16
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	b29b      	uxth	r3, r3
 80030c0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80030c4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030d2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80030e0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d138      	bne.n	800315c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80030ea:	897b      	ldrh	r3, [r7, #10]
 80030ec:	09db      	lsrs	r3, r3, #7
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	89bb      	ldrh	r3, [r7, #12]
 80030f2:	4053      	eors	r3, r2
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	f003 0306 	and.w	r3, r3, #6
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d11c      	bne.n	8003138 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80030fe:	897b      	ldrh	r3, [r7, #10]
 8003100:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003110:	2b02      	cmp	r3, #2
 8003112:	d13b      	bne.n	800318c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2208      	movs	r2, #8
 8003120:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800312a:	89ba      	ldrh	r2, [r7, #12]
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	4619      	mov	r1, r3
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff fe86 	bl	8002e42 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003136:	e029      	b.n	800318c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003138:	893b      	ldrh	r3, [r7, #8]
 800313a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800313c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fb94 	bl	800386e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800314e:	89ba      	ldrh	r2, [r7, #12]
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	4619      	mov	r1, r3
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff fe74 	bl	8002e42 <HAL_I2C_AddrCallback>
}
 800315a:	e017      	b.n	800318c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800315c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 fb84 	bl	800386e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800316e:	89ba      	ldrh	r2, [r7, #12]
 8003170:	7bfb      	ldrb	r3, [r7, #15]
 8003172:	4619      	mov	r1, r3
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff fe64 	bl	8002e42 <HAL_I2C_AddrCallback>
}
 800317a:	e007      	b.n	800318c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2208      	movs	r2, #8
 8003182:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800318c:	bf00      	nop
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d008      	beq.n	80031c8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	e00c      	b.n	80031e2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d007      	beq.n	80031e2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031e0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b29      	cmp	r3, #41	@ 0x29
 80031ec:	d112      	bne.n	8003214 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2228      	movs	r2, #40	@ 0x28
 80031f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2221      	movs	r2, #33	@ 0x21
 80031fa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80031fc:	2101      	movs	r1, #1
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fb35 	bl	800386e <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff fe04 	bl	8002e1a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003212:	e017      	b.n	8003244 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b2a      	cmp	r3, #42	@ 0x2a
 800321e:	d111      	bne.n	8003244 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2228      	movs	r2, #40	@ 0x28
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2222      	movs	r2, #34	@ 0x22
 800322c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800322e:	2102      	movs	r1, #2
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 fb1c 	bl	800386e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff fdf5 	bl	8002e2e <HAL_I2C_SlaveRxCpltCallback>
}
 8003244:	bf00      	nop
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003266:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800326e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2220      	movs	r2, #32
 8003276:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003278:	7afb      	ldrb	r3, [r7, #11]
 800327a:	2b21      	cmp	r3, #33	@ 0x21
 800327c:	d002      	beq.n	8003284 <I2C_ITSlaveCplt+0x38>
 800327e:	7afb      	ldrb	r3, [r7, #11]
 8003280:	2b29      	cmp	r3, #41	@ 0x29
 8003282:	d108      	bne.n	8003296 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003284:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 faf0 	bl	800386e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2221      	movs	r2, #33	@ 0x21
 8003292:	631a      	str	r2, [r3, #48]	@ 0x30
 8003294:	e019      	b.n	80032ca <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003296:	7afb      	ldrb	r3, [r7, #11]
 8003298:	2b22      	cmp	r3, #34	@ 0x22
 800329a:	d002      	beq.n	80032a2 <I2C_ITSlaveCplt+0x56>
 800329c:	7afb      	ldrb	r3, [r7, #11]
 800329e:	2b2a      	cmp	r3, #42	@ 0x2a
 80032a0:	d108      	bne.n	80032b4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80032a2:	f248 0102 	movw	r1, #32770	@ 0x8002
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 fae1 	bl	800386e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2222      	movs	r2, #34	@ 0x22
 80032b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80032b2:	e00a      	b.n	80032ca <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80032b4:	7afb      	ldrb	r3, [r7, #11]
 80032b6:	2b28      	cmp	r3, #40	@ 0x28
 80032b8:	d107      	bne.n	80032ca <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80032ba:	f248 0103 	movw	r1, #32771	@ 0x8003
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fad5 	bl	800386e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032d8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6859      	ldr	r1, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	4b89      	ldr	r3, [pc, #548]	@ (800350c <I2C_ITSlaveCplt+0x2c0>)
 80032e6:	400b      	ands	r3, r1
 80032e8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fa7d 	bl	80037ea <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d013      	beq.n	8003322 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003308:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330e:	2b00      	cmp	r3, #0
 8003310:	d01f      	beq.n	8003352 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	b29a      	uxth	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003320:	e017      	b.n	8003352 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d012      	beq.n	8003352 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800333a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003340:	2b00      	cmp	r3, #0
 8003342:	d006      	beq.n	8003352 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	b29a      	uxth	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d020      	beq.n	800339e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f023 0304 	bic.w	r3, r3, #4
 8003362:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00c      	beq.n	800339e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003394:	b29b      	uxth	r3, r3
 8003396:	3b01      	subs	r3, #1
 8003398:	b29a      	uxth	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ac:	f043 0204 	orr.w	r2, r3, #4
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d049      	beq.n	8003452 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d044      	beq.n	8003452 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d128      	bne.n	8003424 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b28      	cmp	r3, #40	@ 0x28
 80033dc:	d108      	bne.n	80033f0 <I2C_ITSlaveCplt+0x1a4>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033e4:	d104      	bne.n	80033f0 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80033e6:	6979      	ldr	r1, [r7, #20]
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f893 	bl	8003514 <I2C_ITListenCplt>
 80033ee:	e030      	b.n	8003452 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b29      	cmp	r3, #41	@ 0x29
 80033fa:	d10e      	bne.n	800341a <I2C_ITSlaveCplt+0x1ce>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003402:	d00a      	beq.n	800341a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2210      	movs	r2, #16
 800340a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f9ec 	bl	80037ea <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff febe 	bl	8003194 <I2C_ITSlaveSeqCplt>
 8003418:	e01b      	b.n	8003452 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2210      	movs	r2, #16
 8003420:	61da      	str	r2, [r3, #28]
 8003422:	e016      	b.n	8003452 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2210      	movs	r2, #16
 800342a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003430:	f043 0204 	orr.w	r2, r3, #4
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <I2C_ITSlaveCplt+0x1fa>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003444:	d105      	bne.n	8003452 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344a:	4619      	mov	r1, r3
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f8b5 	bl	80035bc <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003464:	2b00      	cmp	r3, #0
 8003466:	d010      	beq.n	800348a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346c:	4619      	mov	r1, r3
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f8a4 	bl	80035bc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b28      	cmp	r3, #40	@ 0x28
 800347e:	d141      	bne.n	8003504 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003480:	6979      	ldr	r1, [r7, #20]
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f846 	bl	8003514 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003488:	e03c      	b.n	8003504 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003492:	d014      	beq.n	80034be <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff fe7d 	bl	8003194 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a1c      	ldr	r2, [pc, #112]	@ (8003510 <I2C_ITSlaveCplt+0x2c4>)
 800349e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7ff fcd1 	bl	8002e5e <HAL_I2C_ListenCpltCallback>
}
 80034bc:	e022      	b.n	8003504 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b22      	cmp	r3, #34	@ 0x22
 80034c8:	d10e      	bne.n	80034e8 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff fca4 	bl	8002e2e <HAL_I2C_SlaveRxCpltCallback>
}
 80034e6:	e00d      	b.n	8003504 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff fc8b 	bl	8002e1a <HAL_I2C_SlaveTxCpltCallback>
}
 8003504:	bf00      	nop
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	fe00e800 	.word	0xfe00e800
 8003510:	ffff0000 	.word	0xffff0000

08003514 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a25      	ldr	r2, [pc, #148]	@ (80035b8 <I2C_ITListenCplt+0xa4>)
 8003522:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	2b00      	cmp	r3, #0
 8003548:	d022      	beq.n	8003590 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003566:	2b00      	cmp	r3, #0
 8003568:	d012      	beq.n	8003590 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800356e:	3b01      	subs	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003588:	f043 0204 	orr.w	r2, r3, #4
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003590:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f96a 	bl	800386e <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2210      	movs	r2, #16
 80035a0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff fc57 	bl	8002e5e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80035b0:	bf00      	nop
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	ffff0000 	.word	0xffff0000

080035bc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035cc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a6d      	ldr	r2, [pc, #436]	@ (8003790 <I2C_ITError+0x1d4>)
 80035da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
 80035f0:	2b28      	cmp	r3, #40	@ 0x28
 80035f2:	d005      	beq.n	8003600 <I2C_ITError+0x44>
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	2b29      	cmp	r3, #41	@ 0x29
 80035f8:	d002      	beq.n	8003600 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
 80035fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80035fe:	d10b      	bne.n	8003618 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003600:	2103      	movs	r1, #3
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f933 	bl	800386e <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2228      	movs	r2, #40	@ 0x28
 800360c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a60      	ldr	r2, [pc, #384]	@ (8003794 <I2C_ITError+0x1d8>)
 8003614:	635a      	str	r2, [r3, #52]	@ 0x34
 8003616:	e030      	b.n	800367a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003618:	f248 0103 	movw	r1, #32771	@ 0x8003
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f926 	bl	800386e <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f8e1 	bl	80037ea <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b60      	cmp	r3, #96	@ 0x60
 8003632:	d01f      	beq.n	8003674 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b20      	cmp	r3, #32
 8003648:	d114      	bne.n	8003674 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b10      	cmp	r3, #16
 8003656:	d109      	bne.n	800366c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2210      	movs	r2, #16
 800365e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003664:	f043 0204 	orr.w	r2, r3, #4
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2220      	movs	r2, #32
 8003672:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003684:	2b00      	cmp	r3, #0
 8003686:	d039      	beq.n	80036fc <I2C_ITError+0x140>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b11      	cmp	r3, #17
 800368c:	d002      	beq.n	8003694 <I2C_ITError+0xd8>
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2b21      	cmp	r3, #33	@ 0x21
 8003692:	d133      	bne.n	80036fc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800369e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036a2:	d107      	bne.n	80036b4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036b2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fe fff5 	bl	80026a8 <HAL_DMA_GetState>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d017      	beq.n	80036f4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c8:	4a33      	ldr	r2, [pc, #204]	@ (8003798 <I2C_ITError+0x1dc>)
 80036ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fe fe39 	bl	8002350 <HAL_DMA_Abort_IT>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d04d      	beq.n	8003780 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036ee:	4610      	mov	r0, r2
 80036f0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036f2:	e045      	b.n	8003780 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f851 	bl	800379c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036fa:	e041      	b.n	8003780 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003700:	2b00      	cmp	r3, #0
 8003702:	d039      	beq.n	8003778 <I2C_ITError+0x1bc>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b12      	cmp	r3, #18
 8003708:	d002      	beq.n	8003710 <I2C_ITError+0x154>
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b22      	cmp	r3, #34	@ 0x22
 800370e:	d133      	bne.n	8003778 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800371a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800371e:	d107      	bne.n	8003730 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800372e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003734:	4618      	mov	r0, r3
 8003736:	f7fe ffb7 	bl	80026a8 <HAL_DMA_GetState>
 800373a:	4603      	mov	r3, r0
 800373c:	2b01      	cmp	r3, #1
 800373e:	d017      	beq.n	8003770 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003744:	4a14      	ldr	r2, [pc, #80]	@ (8003798 <I2C_ITError+0x1dc>)
 8003746:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003754:	4618      	mov	r0, r3
 8003756:	f7fe fdfb 	bl	8002350 <HAL_DMA_Abort_IT>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d011      	beq.n	8003784 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800376a:	4610      	mov	r0, r2
 800376c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800376e:	e009      	b.n	8003784 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f813 	bl	800379c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003776:	e005      	b.n	8003784 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f80f 	bl	800379c <I2C_TreatErrorCallback>
  }
}
 800377e:	e002      	b.n	8003786 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003780:	bf00      	nop
 8003782:	e000      	b.n	8003786 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003784:	bf00      	nop
}
 8003786:	bf00      	nop
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	ffff0000 	.word	0xffff0000
 8003794:	08002e9b 	.word	0x08002e9b
 8003798:	08003833 	.word	0x08003833

0800379c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b60      	cmp	r3, #96	@ 0x60
 80037ae:	d10e      	bne.n	80037ce <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7ff fb5d 	bl	8002e86 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80037cc:	e009      	b.n	80037e2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff fb48 	bl	8002e72 <HAL_I2C_ErrorCallback>
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d103      	bne.n	8003808 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2200      	movs	r2, #0
 8003806:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b01      	cmp	r3, #1
 8003814:	d007      	beq.n	8003826 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	699a      	ldr	r2, [r3, #24]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0201 	orr.w	r2, r2, #1
 8003824:	619a      	str	r2, [r3, #24]
  }
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800384c:	2200      	movs	r2, #0
 800384e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800385c:	2200      	movs	r2, #0
 800385e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f7ff ff9b 	bl	800379c <I2C_TreatErrorCallback>
}
 8003866:	bf00      	nop
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800386e:	b480      	push	{r7}
 8003870:	b085      	sub	sp, #20
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	460b      	mov	r3, r1
 8003878:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800387e:	887b      	ldrh	r3, [r7, #2]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00f      	beq.n	80038a8 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800388e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003896:	b2db      	uxtb	r3, r3
 8003898:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800389c:	2b28      	cmp	r3, #40	@ 0x28
 800389e:	d003      	beq.n	80038a8 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80038a6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80038a8:	887b      	ldrh	r3, [r7, #2]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00f      	beq.n	80038d2 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80038b8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80038c6:	2b28      	cmp	r3, #40	@ 0x28
 80038c8:	d003      	beq.n	80038d2 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80038d0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80038d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	da03      	bge.n	80038e2 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80038e0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80038e2:	887b      	ldrh	r3, [r7, #2]
 80038e4:	2b10      	cmp	r3, #16
 80038e6:	d103      	bne.n	80038f0 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80038ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80038f0:	887b      	ldrh	r3, [r7, #2]
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d103      	bne.n	80038fe <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f043 0320 	orr.w	r3, r3, #32
 80038fc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80038fe:	887b      	ldrh	r3, [r7, #2]
 8003900:	2b40      	cmp	r3, #64	@ 0x40
 8003902:	d103      	bne.n	800390c <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800390a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6819      	ldr	r1, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	43da      	mvns	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	400a      	ands	r2, r1
 800391c:	601a      	str	r2, [r3, #0]
}
 800391e:	bf00      	nop
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b20      	cmp	r3, #32
 800393e:	d138      	bne.n	80039b2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800394a:	2302      	movs	r3, #2
 800394c:	e032      	b.n	80039b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2224      	movs	r2, #36	@ 0x24
 800395a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0201 	bic.w	r2, r2, #1
 800396c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800397c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6819      	ldr	r1, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0201 	orr.w	r2, r2, #1
 800399c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e000      	b.n	80039b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039b2:	2302      	movs	r3, #2
  }
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	d139      	bne.n	8003a4a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e033      	b.n	8003a4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2224      	movs	r2, #36	@ 0x24
 80039f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0201 	bic.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a12:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 0201 	orr.w	r2, r2, #1
 8003a34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	e000      	b.n	8003a4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a4a:	2302      	movs	r3, #2
  }
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a60:	2300      	movs	r3, #0
 8003a62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e291      	b.n	8003f92 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 8087 	beq.w	8003b8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a7c:	4b96      	ldr	r3, [pc, #600]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 030c 	and.w	r3, r3, #12
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d00c      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a88:	4b93      	ldr	r3, [pc, #588]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 030c 	and.w	r3, r3, #12
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d112      	bne.n	8003aba <HAL_RCC_OscConfig+0x62>
 8003a94:	4b90      	ldr	r3, [pc, #576]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aa0:	d10b      	bne.n	8003aba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa2:	4b8d      	ldr	r3, [pc, #564]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d06c      	beq.n	8003b88 <HAL_RCC_OscConfig+0x130>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d168      	bne.n	8003b88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e26b      	b.n	8003f92 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ac2:	d106      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x7a>
 8003ac4:	4b84      	ldr	r3, [pc, #528]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a83      	ldr	r2, [pc, #524]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003aca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	e02e      	b.n	8003b30 <HAL_RCC_OscConfig+0xd8>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10c      	bne.n	8003af4 <HAL_RCC_OscConfig+0x9c>
 8003ada:	4b7f      	ldr	r3, [pc, #508]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a7e      	ldr	r2, [pc, #504]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003ae0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	4b7c      	ldr	r3, [pc, #496]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a7b      	ldr	r2, [pc, #492]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003aec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	e01d      	b.n	8003b30 <HAL_RCC_OscConfig+0xd8>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCC_OscConfig+0xc0>
 8003afe:	4b76      	ldr	r3, [pc, #472]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a75      	ldr	r2, [pc, #468]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003b04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	4b73      	ldr	r3, [pc, #460]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a72      	ldr	r2, [pc, #456]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e00b      	b.n	8003b30 <HAL_RCC_OscConfig+0xd8>
 8003b18:	4b6f      	ldr	r3, [pc, #444]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a6e      	ldr	r2, [pc, #440]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003b1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	4b6c      	ldr	r3, [pc, #432]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a6b      	ldr	r2, [pc, #428]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003b2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d013      	beq.n	8003b60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b38:	f7fd fe36 	bl	80017a8 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b40:	f7fd fe32 	bl	80017a8 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b64      	cmp	r3, #100	@ 0x64
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e21f      	b.n	8003f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b52:	4b61      	ldr	r3, [pc, #388]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f0      	beq.n	8003b40 <HAL_RCC_OscConfig+0xe8>
 8003b5e:	e014      	b.n	8003b8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b60:	f7fd fe22 	bl	80017a8 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b68:	f7fd fe1e 	bl	80017a8 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b64      	cmp	r3, #100	@ 0x64
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e20b      	b.n	8003f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b7a:	4b57      	ldr	r3, [pc, #348]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_OscConfig+0x110>
 8003b86:	e000      	b.n	8003b8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d069      	beq.n	8003c6a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b96:	4b50      	ldr	r3, [pc, #320]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00b      	beq.n	8003bba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ba2:	4b4d      	ldr	r3, [pc, #308]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d11c      	bne.n	8003be8 <HAL_RCC_OscConfig+0x190>
 8003bae:	4b4a      	ldr	r3, [pc, #296]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d116      	bne.n	8003be8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bba:	4b47      	ldr	r3, [pc, #284]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d005      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x17a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d001      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e1df      	b.n	8003f92 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd2:	4b41      	ldr	r3, [pc, #260]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	493d      	ldr	r1, [pc, #244]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003be6:	e040      	b.n	8003c6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d023      	beq.n	8003c38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf0:	4b39      	ldr	r3, [pc, #228]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a38      	ldr	r2, [pc, #224]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfc:	f7fd fdd4 	bl	80017a8 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c04:	f7fd fdd0 	bl	80017a8 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e1bd      	b.n	8003f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c16:	4b30      	ldr	r3, [pc, #192]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c22:	4b2d      	ldr	r3, [pc, #180]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	4929      	ldr	r1, [pc, #164]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]
 8003c36:	e018      	b.n	8003c6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c38:	4b27      	ldr	r3, [pc, #156]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a26      	ldr	r2, [pc, #152]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003c3e:	f023 0301 	bic.w	r3, r3, #1
 8003c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7fd fdb0 	bl	80017a8 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c4c:	f7fd fdac 	bl	80017a8 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e199      	b.n	8003f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f0      	bne.n	8003c4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d038      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d019      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c7e:	4b16      	ldr	r3, [pc, #88]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c82:	4a15      	ldr	r2, [pc, #84]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8a:	f7fd fd8d 	bl	80017a8 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c92:	f7fd fd89 	bl	80017a8 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e176      	b.n	8003f92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003ca6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0f0      	beq.n	8003c92 <HAL_RCC_OscConfig+0x23a>
 8003cb0:	e01a      	b.n	8003ce8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cb2:	4b09      	ldr	r3, [pc, #36]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cb6:	4a08      	ldr	r2, [pc, #32]	@ (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003cb8:	f023 0301 	bic.w	r3, r3, #1
 8003cbc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbe:	f7fd fd73 	bl	80017a8 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc4:	e00a      	b.n	8003cdc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc6:	f7fd fd6f 	bl	80017a8 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d903      	bls.n	8003cdc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e15c      	b.n	8003f92 <HAL_RCC_OscConfig+0x53a>
 8003cd8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cdc:	4b91      	ldr	r3, [pc, #580]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003cde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1ee      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 80a4 	beq.w	8003e3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cf6:	4b8b      	ldr	r3, [pc, #556]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10d      	bne.n	8003d1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d02:	4b88      	ldr	r3, [pc, #544]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	4a87      	ldr	r2, [pc, #540]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d0e:	4b85      	ldr	r3, [pc, #532]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d1e:	4b82      	ldr	r3, [pc, #520]	@ (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d118      	bne.n	8003d5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d2a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a7e      	ldr	r2, [pc, #504]	@ (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d36:	f7fd fd37 	bl	80017a8 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3e:	f7fd fd33 	bl	80017a8 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b64      	cmp	r3, #100	@ 0x64
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e120      	b.n	8003f92 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d50:	4b75      	ldr	r3, [pc, #468]	@ (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d106      	bne.n	8003d72 <HAL_RCC_OscConfig+0x31a>
 8003d64:	4b6f      	ldr	r3, [pc, #444]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d68:	4a6e      	ldr	r2, [pc, #440]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d70:	e02d      	b.n	8003dce <HAL_RCC_OscConfig+0x376>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCC_OscConfig+0x33c>
 8003d7a:	4b6a      	ldr	r3, [pc, #424]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7e:	4a69      	ldr	r2, [pc, #420]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d86:	4b67      	ldr	r3, [pc, #412]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8a:	4a66      	ldr	r2, [pc, #408]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003d8c:	f023 0304 	bic.w	r3, r3, #4
 8003d90:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d92:	e01c      	b.n	8003dce <HAL_RCC_OscConfig+0x376>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b05      	cmp	r3, #5
 8003d9a:	d10c      	bne.n	8003db6 <HAL_RCC_OscConfig+0x35e>
 8003d9c:	4b61      	ldr	r3, [pc, #388]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da0:	4a60      	ldr	r2, [pc, #384]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003da2:	f043 0304 	orr.w	r3, r3, #4
 8003da6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003da8:	4b5e      	ldr	r3, [pc, #376]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dac:	4a5d      	ldr	r2, [pc, #372]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003db4:	e00b      	b.n	8003dce <HAL_RCC_OscConfig+0x376>
 8003db6:	4b5b      	ldr	r3, [pc, #364]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dba:	4a5a      	ldr	r2, [pc, #360]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003dbc:	f023 0301 	bic.w	r3, r3, #1
 8003dc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dc2:	4b58      	ldr	r3, [pc, #352]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc6:	4a57      	ldr	r2, [pc, #348]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003dc8:	f023 0304 	bic.w	r3, r3, #4
 8003dcc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d015      	beq.n	8003e02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd6:	f7fd fce7 	bl	80017a8 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ddc:	e00a      	b.n	8003df4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dde:	f7fd fce3 	bl	80017a8 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e0ce      	b.n	8003f92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df4:	4b4b      	ldr	r3, [pc, #300]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0ee      	beq.n	8003dde <HAL_RCC_OscConfig+0x386>
 8003e00:	e014      	b.n	8003e2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e02:	f7fd fcd1 	bl	80017a8 <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e08:	e00a      	b.n	8003e20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e0a:	f7fd fccd 	bl	80017a8 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e0b8      	b.n	8003f92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e20:	4b40      	ldr	r3, [pc, #256]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1ee      	bne.n	8003e0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e2c:	7dfb      	ldrb	r3, [r7, #23]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d105      	bne.n	8003e3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e32:	4b3c      	ldr	r3, [pc, #240]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e36:	4a3b      	ldr	r2, [pc, #236]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003e38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e3c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 80a4 	beq.w	8003f90 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e48:	4b36      	ldr	r3, [pc, #216]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 030c 	and.w	r3, r3, #12
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d06b      	beq.n	8003f2c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d149      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5c:	4b31      	ldr	r3, [pc, #196]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a30      	ldr	r2, [pc, #192]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003e62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e68:	f7fd fc9e 	bl	80017a8 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e70:	f7fd fc9a 	bl	80017a8 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e087      	b.n	8003f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e82:	4b28      	ldr	r3, [pc, #160]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69da      	ldr	r2, [r3, #28]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9c:	019b      	lsls	r3, r3, #6
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea4:	085b      	lsrs	r3, r3, #1
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	041b      	lsls	r3, r3, #16
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb0:	061b      	lsls	r3, r3, #24
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003eb6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003eba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ebc:	4b19      	ldr	r3, [pc, #100]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a18      	ldr	r2, [pc, #96]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003ec2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7fd fc6e 	bl	80017a8 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fd fc6a 	bl	80017a8 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e057      	b.n	8003f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee2:	4b10      	ldr	r3, [pc, #64]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x478>
 8003eee:	e04f      	b.n	8003f90 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a0b      	ldr	r2, [pc, #44]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003ef6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fd fc54 	bl	80017a8 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f04:	f7fd fc50 	bl	80017a8 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e03d      	b.n	8003f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f16:	4b03      	ldr	r3, [pc, #12]	@ (8003f24 <HAL_RCC_OscConfig+0x4cc>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0x4ac>
 8003f22:	e035      	b.n	8003f90 <HAL_RCC_OscConfig+0x538>
 8003f24:	40023800 	.word	0x40023800
 8003f28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003f9c <HAL_RCC_OscConfig+0x544>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d028      	beq.n	8003f8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d121      	bne.n	8003f8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d11a      	bne.n	8003f8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d111      	bne.n	8003f8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f72:	085b      	lsrs	r3, r3, #1
 8003f74:	3b01      	subs	r3, #1
 8003f76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d107      	bne.n	8003f8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d001      	beq.n	8003f90 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e000      	b.n	8003f92 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40023800 	.word	0x40023800

08003fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0d0      	b.n	800415a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b6a      	ldr	r3, [pc, #424]	@ (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 030f 	and.w	r3, r3, #15
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d910      	bls.n	8003fe8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b67      	ldr	r3, [pc, #412]	@ (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 020f 	bic.w	r2, r3, #15
 8003fce:	4965      	ldr	r1, [pc, #404]	@ (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b63      	ldr	r3, [pc, #396]	@ (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0b8      	b.n	800415a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d020      	beq.n	8004036 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004000:	4b59      	ldr	r3, [pc, #356]	@ (8004168 <HAL_RCC_ClockConfig+0x1c8>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	4a58      	ldr	r2, [pc, #352]	@ (8004168 <HAL_RCC_ClockConfig+0x1c8>)
 8004006:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800400a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004018:	4b53      	ldr	r3, [pc, #332]	@ (8004168 <HAL_RCC_ClockConfig+0x1c8>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	4a52      	ldr	r2, [pc, #328]	@ (8004168 <HAL_RCC_ClockConfig+0x1c8>)
 800401e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004022:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004024:	4b50      	ldr	r3, [pc, #320]	@ (8004168 <HAL_RCC_ClockConfig+0x1c8>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	494d      	ldr	r1, [pc, #308]	@ (8004168 <HAL_RCC_ClockConfig+0x1c8>)
 8004032:	4313      	orrs	r3, r2
 8004034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d040      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d107      	bne.n	800405a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404a:	4b47      	ldr	r3, [pc, #284]	@ (8004168 <HAL_RCC_ClockConfig+0x1c8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d115      	bne.n	8004082 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e07f      	b.n	800415a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d107      	bne.n	8004072 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004062:	4b41      	ldr	r3, [pc, #260]	@ (8004168 <HAL_RCC_ClockConfig+0x1c8>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e073      	b.n	800415a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004072:	4b3d      	ldr	r3, [pc, #244]	@ (8004168 <HAL_RCC_ClockConfig+0x1c8>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e06b      	b.n	800415a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004082:	4b39      	ldr	r3, [pc, #228]	@ (8004168 <HAL_RCC_ClockConfig+0x1c8>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f023 0203 	bic.w	r2, r3, #3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4936      	ldr	r1, [pc, #216]	@ (8004168 <HAL_RCC_ClockConfig+0x1c8>)
 8004090:	4313      	orrs	r3, r2
 8004092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004094:	f7fd fb88 	bl	80017a8 <HAL_GetTick>
 8004098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409c:	f7fd fb84 	bl	80017a8 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e053      	b.n	800415a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004168 <HAL_RCC_ClockConfig+0x1c8>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 020c 	and.w	r2, r3, #12
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d1eb      	bne.n	800409c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040c4:	4b27      	ldr	r3, [pc, #156]	@ (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d210      	bcs.n	80040f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d2:	4b24      	ldr	r3, [pc, #144]	@ (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 020f 	bic.w	r2, r3, #15
 80040da:	4922      	ldr	r1, [pc, #136]	@ (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	4313      	orrs	r3, r2
 80040e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b20      	ldr	r3, [pc, #128]	@ (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e032      	b.n	800415a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004100:	4b19      	ldr	r3, [pc, #100]	@ (8004168 <HAL_RCC_ClockConfig+0x1c8>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4916      	ldr	r1, [pc, #88]	@ (8004168 <HAL_RCC_ClockConfig+0x1c8>)
 800410e:	4313      	orrs	r3, r2
 8004110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800411e:	4b12      	ldr	r3, [pc, #72]	@ (8004168 <HAL_RCC_ClockConfig+0x1c8>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	490e      	ldr	r1, [pc, #56]	@ (8004168 <HAL_RCC_ClockConfig+0x1c8>)
 800412e:	4313      	orrs	r3, r2
 8004130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004132:	f000 f821 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 8004136:	4602      	mov	r2, r0
 8004138:	4b0b      	ldr	r3, [pc, #44]	@ (8004168 <HAL_RCC_ClockConfig+0x1c8>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	091b      	lsrs	r3, r3, #4
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	490a      	ldr	r1, [pc, #40]	@ (800416c <HAL_RCC_ClockConfig+0x1cc>)
 8004144:	5ccb      	ldrb	r3, [r1, r3]
 8004146:	fa22 f303 	lsr.w	r3, r2, r3
 800414a:	4a09      	ldr	r2, [pc, #36]	@ (8004170 <HAL_RCC_ClockConfig+0x1d0>)
 800414c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800414e:	4b09      	ldr	r3, [pc, #36]	@ (8004174 <HAL_RCC_ClockConfig+0x1d4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f7fd fae4 	bl	8001720 <HAL_InitTick>

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40023c00 	.word	0x40023c00
 8004168:	40023800 	.word	0x40023800
 800416c:	08005950 	.word	0x08005950
 8004170:	20000014 	.word	0x20000014
 8004174:	20000018 	.word	0x20000018

08004178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800417c:	b090      	sub	sp, #64	@ 0x40
 800417e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	637b      	str	r3, [r7, #52]	@ 0x34
 8004184:	2300      	movs	r3, #0
 8004186:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004188:	2300      	movs	r3, #0
 800418a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800418c:	2300      	movs	r3, #0
 800418e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004190:	4b59      	ldr	r3, [pc, #356]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 030c 	and.w	r3, r3, #12
 8004198:	2b08      	cmp	r3, #8
 800419a:	d00d      	beq.n	80041b8 <HAL_RCC_GetSysClockFreq+0x40>
 800419c:	2b08      	cmp	r3, #8
 800419e:	f200 80a1 	bhi.w	80042e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_RCC_GetSysClockFreq+0x34>
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d003      	beq.n	80041b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80041aa:	e09b      	b.n	80042e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041ac:	4b53      	ldr	r3, [pc, #332]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x184>)
 80041ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041b0:	e09b      	b.n	80042ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041b2:	4b53      	ldr	r3, [pc, #332]	@ (8004300 <HAL_RCC_GetSysClockFreq+0x188>)
 80041b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041b6:	e098      	b.n	80042ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041b8:	4b4f      	ldr	r3, [pc, #316]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80041c2:	4b4d      	ldr	r3, [pc, #308]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d028      	beq.n	8004220 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ce:	4b4a      	ldr	r3, [pc, #296]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	099b      	lsrs	r3, r3, #6
 80041d4:	2200      	movs	r2, #0
 80041d6:	623b      	str	r3, [r7, #32]
 80041d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041e0:	2100      	movs	r1, #0
 80041e2:	4b47      	ldr	r3, [pc, #284]	@ (8004300 <HAL_RCC_GetSysClockFreq+0x188>)
 80041e4:	fb03 f201 	mul.w	r2, r3, r1
 80041e8:	2300      	movs	r3, #0
 80041ea:	fb00 f303 	mul.w	r3, r0, r3
 80041ee:	4413      	add	r3, r2
 80041f0:	4a43      	ldr	r2, [pc, #268]	@ (8004300 <HAL_RCC_GetSysClockFreq+0x188>)
 80041f2:	fba0 1202 	umull	r1, r2, r0, r2
 80041f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041f8:	460a      	mov	r2, r1
 80041fa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80041fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041fe:	4413      	add	r3, r2
 8004200:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004204:	2200      	movs	r2, #0
 8004206:	61bb      	str	r3, [r7, #24]
 8004208:	61fa      	str	r2, [r7, #28]
 800420a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800420e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004212:	f7fc f817 	bl	8000244 <__aeabi_uldivmod>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4613      	mov	r3, r2
 800421c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800421e:	e053      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004220:	4b35      	ldr	r3, [pc, #212]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	099b      	lsrs	r3, r3, #6
 8004226:	2200      	movs	r2, #0
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	617a      	str	r2, [r7, #20]
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004232:	f04f 0b00 	mov.w	fp, #0
 8004236:	4652      	mov	r2, sl
 8004238:	465b      	mov	r3, fp
 800423a:	f04f 0000 	mov.w	r0, #0
 800423e:	f04f 0100 	mov.w	r1, #0
 8004242:	0159      	lsls	r1, r3, #5
 8004244:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004248:	0150      	lsls	r0, r2, #5
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	ebb2 080a 	subs.w	r8, r2, sl
 8004252:	eb63 090b 	sbc.w	r9, r3, fp
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004262:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004266:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800426a:	ebb2 0408 	subs.w	r4, r2, r8
 800426e:	eb63 0509 	sbc.w	r5, r3, r9
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	f04f 0300 	mov.w	r3, #0
 800427a:	00eb      	lsls	r3, r5, #3
 800427c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004280:	00e2      	lsls	r2, r4, #3
 8004282:	4614      	mov	r4, r2
 8004284:	461d      	mov	r5, r3
 8004286:	eb14 030a 	adds.w	r3, r4, sl
 800428a:	603b      	str	r3, [r7, #0]
 800428c:	eb45 030b 	adc.w	r3, r5, fp
 8004290:	607b      	str	r3, [r7, #4]
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	f04f 0300 	mov.w	r3, #0
 800429a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800429e:	4629      	mov	r1, r5
 80042a0:	028b      	lsls	r3, r1, #10
 80042a2:	4621      	mov	r1, r4
 80042a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042a8:	4621      	mov	r1, r4
 80042aa:	028a      	lsls	r2, r1, #10
 80042ac:	4610      	mov	r0, r2
 80042ae:	4619      	mov	r1, r3
 80042b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b2:	2200      	movs	r2, #0
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	60fa      	str	r2, [r7, #12]
 80042b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042bc:	f7fb ffc2 	bl	8000244 <__aeabi_uldivmod>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4613      	mov	r3, r2
 80042c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80042c8:	4b0b      	ldr	r3, [pc, #44]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	0c1b      	lsrs	r3, r3, #16
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	3301      	adds	r3, #1
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80042d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042e2:	e002      	b.n	80042ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042e4:	4b05      	ldr	r3, [pc, #20]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x184>)
 80042e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3740      	adds	r7, #64	@ 0x40
 80042f0:	46bd      	mov	sp, r7
 80042f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042f6:	bf00      	nop
 80042f8:	40023800 	.word	0x40023800
 80042fc:	00f42400 	.word	0x00f42400
 8004300:	017d7840 	.word	0x017d7840

08004304 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004308:	4b03      	ldr	r3, [pc, #12]	@ (8004318 <HAL_RCC_GetHCLKFreq+0x14>)
 800430a:	681b      	ldr	r3, [r3, #0]
}
 800430c:	4618      	mov	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	20000014 	.word	0x20000014

0800431c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004320:	f7ff fff0 	bl	8004304 <HAL_RCC_GetHCLKFreq>
 8004324:	4602      	mov	r2, r0
 8004326:	4b05      	ldr	r3, [pc, #20]	@ (800433c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	0a9b      	lsrs	r3, r3, #10
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	4903      	ldr	r1, [pc, #12]	@ (8004340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004332:	5ccb      	ldrb	r3, [r1, r3]
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004338:	4618      	mov	r0, r3
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40023800 	.word	0x40023800
 8004340:	08005960 	.word	0x08005960

08004344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004348:	f7ff ffdc 	bl	8004304 <HAL_RCC_GetHCLKFreq>
 800434c:	4602      	mov	r2, r0
 800434e:	4b05      	ldr	r3, [pc, #20]	@ (8004364 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	0b5b      	lsrs	r3, r3, #13
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	4903      	ldr	r1, [pc, #12]	@ (8004368 <HAL_RCC_GetPCLK2Freq+0x24>)
 800435a:	5ccb      	ldrb	r3, [r1, r3]
 800435c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004360:	4618      	mov	r0, r3
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40023800 	.word	0x40023800
 8004368:	08005960 	.word	0x08005960

0800436c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004378:	2300      	movs	r3, #0
 800437a:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800437c:	2300      	movs	r3, #0
 800437e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004380:	2300      	movs	r3, #0
 8004382:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b00      	cmp	r3, #0
 800438e:	d012      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004390:	4b65      	ldr	r3, [pc, #404]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	4a64      	ldr	r2, [pc, #400]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004396:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800439a:	6093      	str	r3, [r2, #8]
 800439c:	4b62      	ldr	r3, [pc, #392]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a4:	4960      	ldr	r1, [pc, #384]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80043b2:	2301      	movs	r3, #1
 80043b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d017      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043c2:	4b59      	ldr	r3, [pc, #356]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043c8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043d0:	4955      	ldr	r1, [pc, #340]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043e0:	d101      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80043e2:	2301      	movs	r3, #1
 80043e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80043ee:	2301      	movs	r3, #1
 80043f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d017      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004400:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004404:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800440c:	4946      	ldr	r1, [pc, #280]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004418:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800441c:	d101      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800441e:	2301      	movs	r3, #1
 8004420:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800442a:	2301      	movs	r3, #1
 800442c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 808b 	beq.w	8004552 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800443c:	4b3a      	ldr	r3, [pc, #232]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800443e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004440:	4a39      	ldr	r2, [pc, #228]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004442:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004446:	6413      	str	r3, [r2, #64]	@ 0x40
 8004448:	4b37      	ldr	r3, [pc, #220]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800444a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004454:	4b35      	ldr	r3, [pc, #212]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a34      	ldr	r2, [pc, #208]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800445a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800445e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004460:	f7fd f9a2 	bl	80017a8 <HAL_GetTick>
 8004464:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004466:	e008      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004468:	f7fd f99e 	bl	80017a8 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	@ 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e2bc      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800447a:	4b2c      	ldr	r3, [pc, #176]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004486:	4b28      	ldr	r3, [pc, #160]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800448e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d035      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d02e      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044a4:	4b20      	ldr	r3, [pc, #128]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044be:	4a1a      	ldr	r2, [pc, #104]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044c4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80044c6:	4a18      	ldr	r2, [pc, #96]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044cc:	4b16      	ldr	r3, [pc, #88]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d114      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fd f966 	bl	80017a8 <HAL_GetTick>
 80044dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044de:	e00a      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e0:	f7fd f962 	bl	80017a8 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e27e      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0ee      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800450a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800450e:	d111      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8004510:	4b05      	ldr	r3, [pc, #20]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800451c:	4b04      	ldr	r3, [pc, #16]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800451e:	400b      	ands	r3, r1
 8004520:	4901      	ldr	r1, [pc, #4]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004522:	4313      	orrs	r3, r2
 8004524:	608b      	str	r3, [r1, #8]
 8004526:	e00b      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004528:	40023800 	.word	0x40023800
 800452c:	40007000 	.word	0x40007000
 8004530:	0ffffcff 	.word	0x0ffffcff
 8004534:	4ba4      	ldr	r3, [pc, #656]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	4aa3      	ldr	r2, [pc, #652]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800453a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800453e:	6093      	str	r3, [r2, #8]
 8004540:	4ba1      	ldr	r3, [pc, #644]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004542:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800454c:	499e      	ldr	r1, [pc, #632]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800454e:	4313      	orrs	r3, r2
 8004550:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0310 	and.w	r3, r3, #16
 800455a:	2b00      	cmp	r3, #0
 800455c:	d010      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800455e:	4b9a      	ldr	r3, [pc, #616]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004560:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004564:	4a98      	ldr	r2, [pc, #608]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004566:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800456a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800456e:	4b96      	ldr	r3, [pc, #600]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004570:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004578:	4993      	ldr	r1, [pc, #588]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00a      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800458c:	4b8e      	ldr	r3, [pc, #568]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800458e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004592:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459a:	498b      	ldr	r1, [pc, #556]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800459c:	4313      	orrs	r3, r2
 800459e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045ae:	4b86      	ldr	r3, [pc, #536]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045bc:	4982      	ldr	r1, [pc, #520]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045d0:	4b7d      	ldr	r3, [pc, #500]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045de:	497a      	ldr	r1, [pc, #488]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045f2:	4b75      	ldr	r3, [pc, #468]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f8:	f023 0203 	bic.w	r2, r3, #3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004600:	4971      	ldr	r1, [pc, #452]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004614:	4b6c      	ldr	r3, [pc, #432]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800461a:	f023 020c 	bic.w	r2, r3, #12
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004622:	4969      	ldr	r1, [pc, #420]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004636:	4b64      	ldr	r3, [pc, #400]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800463c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004644:	4960      	ldr	r1, [pc, #384]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004658:	4b5b      	ldr	r3, [pc, #364]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800465e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004666:	4958      	ldr	r1, [pc, #352]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800467a:	4b53      	ldr	r3, [pc, #332]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800467c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004680:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004688:	494f      	ldr	r1, [pc, #316]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800469c:	4b4a      	ldr	r3, [pc, #296]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800469e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046aa:	4947      	ldr	r1, [pc, #284]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80046be:	4b42      	ldr	r3, [pc, #264]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046cc:	493e      	ldr	r1, [pc, #248]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80046e0:	4b39      	ldr	r3, [pc, #228]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ee:	4936      	ldr	r1, [pc, #216]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d011      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004702:	4b31      	ldr	r3, [pc, #196]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004708:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004710:	492d      	ldr	r1, [pc, #180]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800471c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004720:	d101      	bne.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8004722:	2301      	movs	r3, #1
 8004724:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004732:	4b25      	ldr	r3, [pc, #148]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004738:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004740:	4921      	ldr	r1, [pc, #132]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004754:	4b1c      	ldr	r3, [pc, #112]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800475a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004762:	4919      	ldr	r1, [pc, #100]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004776:	4b14      	ldr	r3, [pc, #80]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800477c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004784:	4910      	ldr	r1, [pc, #64]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d006      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 809d 	beq.w	80048da <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047a0:	4b09      	ldr	r3, [pc, #36]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a08      	ldr	r2, [pc, #32]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80047a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80047aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ac:	f7fc fffc 	bl	80017a8 <HAL_GetTick>
 80047b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047b2:	e00b      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047b4:	f7fc fff8 	bl	80017a8 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b64      	cmp	r3, #100	@ 0x64
 80047c0:	d904      	bls.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e116      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80047c6:	bf00      	nop
 80047c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047cc:	4b8b      	ldr	r3, [pc, #556]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1ed      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d017      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d113      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047ec:	4b83      	ldr	r3, [pc, #524]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80047ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047f2:	0e1b      	lsrs	r3, r3, #24
 80047f4:	f003 030f 	and.w	r3, r3, #15
 80047f8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	019a      	lsls	r2, r3, #6
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	061b      	lsls	r3, r3, #24
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	071b      	lsls	r3, r3, #28
 800480c:	497b      	ldr	r1, [pc, #492]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800480e:	4313      	orrs	r3, r2
 8004810:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d004      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004824:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004828:	d00a      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004832:	2b00      	cmp	r3, #0
 8004834:	d024      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800483e:	d11f      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004840:	4b6e      	ldr	r3, [pc, #440]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004846:	0f1b      	lsrs	r3, r3, #28
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	019a      	lsls	r2, r3, #6
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	061b      	lsls	r3, r3, #24
 800485a:	431a      	orrs	r2, r3
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	071b      	lsls	r3, r3, #28
 8004860:	4966      	ldr	r1, [pc, #408]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004868:	4b64      	ldr	r3, [pc, #400]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800486a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800486e:	f023 021f 	bic.w	r2, r3, #31
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	3b01      	subs	r3, #1
 8004878:	4960      	ldr	r1, [pc, #384]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00d      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	019a      	lsls	r2, r3, #6
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	061b      	lsls	r3, r3, #24
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	071b      	lsls	r3, r3, #28
 80048a0:	4956      	ldr	r1, [pc, #344]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048a8:	4b54      	ldr	r3, [pc, #336]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a53      	ldr	r2, [pc, #332]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b4:	f7fc ff78 	bl	80017a8 <HAL_GetTick>
 80048b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048ba:	e008      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048bc:	f7fc ff74 	bl	80017a8 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b64      	cmp	r3, #100	@ 0x64
 80048c8:	d901      	bls.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e092      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048ce:	4b4b      	ldr	r3, [pc, #300]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0f0      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	f040 8088 	bne.w	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80048e2:	4b46      	ldr	r3, [pc, #280]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a45      	ldr	r2, [pc, #276]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ee:	f7fc ff5b 	bl	80017a8 <HAL_GetTick>
 80048f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048f4:	e008      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048f6:	f7fc ff57 	bl	80017a8 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b64      	cmp	r3, #100	@ 0x64
 8004902:	d901      	bls.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e075      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004908:	4b3c      	ldr	r3, [pc, #240]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004910:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004914:	d0ef      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004926:	2b00      	cmp	r3, #0
 8004928:	d009      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004932:	2b00      	cmp	r3, #0
 8004934:	d024      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493a:	2b00      	cmp	r3, #0
 800493c:	d120      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800493e:	4b2f      	ldr	r3, [pc, #188]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004944:	0c1b      	lsrs	r3, r3, #16
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	019a      	lsls	r2, r3, #6
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	041b      	lsls	r3, r3, #16
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	061b      	lsls	r3, r3, #24
 800495e:	4927      	ldr	r1, [pc, #156]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004966:	4b25      	ldr	r3, [pc, #148]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004968:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800496c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	3b01      	subs	r3, #1
 8004976:	021b      	lsls	r3, r3, #8
 8004978:	4920      	ldr	r1, [pc, #128]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d018      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x652>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004990:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004994:	d113      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004996:	4b19      	ldr	r3, [pc, #100]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800499c:	0e1b      	lsrs	r3, r3, #24
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	019a      	lsls	r2, r3, #6
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	041b      	lsls	r3, r3, #16
 80049b0:	431a      	orrs	r2, r3
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	061b      	lsls	r3, r3, #24
 80049b6:	4911      	ldr	r1, [pc, #68]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80049be:	4b0f      	ldr	r3, [pc, #60]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a0e      	ldr	r2, [pc, #56]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80049c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ca:	f7fc feed 	bl	80017a8 <HAL_GetTick>
 80049ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049d0:	e008      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049d2:	f7fc fee9 	bl	80017a8 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b64      	cmp	r3, #100	@ 0x64
 80049de:	d901      	bls.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e007      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049e4:	4b05      	ldr	r3, [pc, #20]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049f0:	d1ef      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3720      	adds	r7, #32
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40023800 	.word	0x40023800

08004a00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e040      	b.n	8004a94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fc fd24 	bl	8001470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2224      	movs	r2, #36	@ 0x24
 8004a2c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0201 	bic.w	r2, r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fbde 	bl	8005208 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f977 	bl	8004d40 <UART_SetConfig>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d101      	bne.n	8004a5c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e01b      	b.n	8004a94 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689a      	ldr	r2, [r3, #8]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0201 	orr.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 fc5d 	bl	800534c <UART_CheckIdleState>
 8004a92:	4603      	mov	r3, r0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b08a      	sub	sp, #40	@ 0x28
 8004aa0:	af02      	add	r7, sp, #8
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	603b      	str	r3, [r7, #0]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	d177      	bne.n	8004ba4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <HAL_UART_Transmit+0x24>
 8004aba:	88fb      	ldrh	r3, [r7, #6]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e070      	b.n	8004ba6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2221      	movs	r2, #33	@ 0x21
 8004ad0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ad2:	f7fc fe69 	bl	80017a8 <HAL_GetTick>
 8004ad6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	88fa      	ldrh	r2, [r7, #6]
 8004adc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	88fa      	ldrh	r2, [r7, #6]
 8004ae4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004af0:	d108      	bne.n	8004b04 <HAL_UART_Transmit+0x68>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d104      	bne.n	8004b04 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	61bb      	str	r3, [r7, #24]
 8004b02:	e003      	b.n	8004b0c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b0c:	e02f      	b.n	8004b6e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2200      	movs	r2, #0
 8004b16:	2180      	movs	r1, #128	@ 0x80
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 fc6e 	bl	80053fa <UART_WaitOnFlagUntilTimeout>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d004      	beq.n	8004b2e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2220      	movs	r2, #32
 8004b28:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e03b      	b.n	8004ba6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10b      	bne.n	8004b4c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b42:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	3302      	adds	r3, #2
 8004b48:	61bb      	str	r3, [r7, #24]
 8004b4a:	e007      	b.n	8004b5c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	781a      	ldrb	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1c9      	bne.n	8004b0e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2200      	movs	r2, #0
 8004b82:	2140      	movs	r1, #64	@ 0x40
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 fc38 	bl	80053fa <UART_WaitOnFlagUntilTimeout>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d004      	beq.n	8004b9a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e005      	b.n	8004ba6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	e000      	b.n	8004ba6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004ba4:	2302      	movs	r3, #2
  }
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3720      	adds	r7, #32
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b08a      	sub	sp, #40	@ 0x28
 8004bb2:	af02      	add	r7, sp, #8
 8004bb4:	60f8      	str	r0, [r7, #12]
 8004bb6:	60b9      	str	r1, [r7, #8]
 8004bb8:	603b      	str	r3, [r7, #0]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	f040 80b5 	bne.w	8004d34 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d002      	beq.n	8004bd6 <HAL_UART_Receive+0x28>
 8004bd0:	88fb      	ldrh	r3, [r7, #6]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e0ad      	b.n	8004d36 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2222      	movs	r2, #34	@ 0x22
 8004be6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bf0:	f7fc fdda 	bl	80017a8 <HAL_GetTick>
 8004bf4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	88fa      	ldrh	r2, [r7, #6]
 8004bfa:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	88fa      	ldrh	r2, [r7, #6]
 8004c02:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c0e:	d10e      	bne.n	8004c2e <HAL_UART_Receive+0x80>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d105      	bne.n	8004c24 <HAL_UART_Receive+0x76>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004c1e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c22:	e02d      	b.n	8004c80 <HAL_UART_Receive+0xd2>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	22ff      	movs	r2, #255	@ 0xff
 8004c28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c2c:	e028      	b.n	8004c80 <HAL_UART_Receive+0xd2>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10d      	bne.n	8004c52 <HAL_UART_Receive+0xa4>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d104      	bne.n	8004c48 <HAL_UART_Receive+0x9a>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	22ff      	movs	r2, #255	@ 0xff
 8004c42:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c46:	e01b      	b.n	8004c80 <HAL_UART_Receive+0xd2>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	227f      	movs	r2, #127	@ 0x7f
 8004c4c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c50:	e016      	b.n	8004c80 <HAL_UART_Receive+0xd2>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c5a:	d10d      	bne.n	8004c78 <HAL_UART_Receive+0xca>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d104      	bne.n	8004c6e <HAL_UART_Receive+0xc0>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	227f      	movs	r2, #127	@ 0x7f
 8004c68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c6c:	e008      	b.n	8004c80 <HAL_UART_Receive+0xd2>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	223f      	movs	r2, #63	@ 0x3f
 8004c72:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c76:	e003      	b.n	8004c80 <HAL_UART_Receive+0xd2>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004c86:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c90:	d108      	bne.n	8004ca4 <HAL_UART_Receive+0xf6>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d104      	bne.n	8004ca4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	61bb      	str	r3, [r7, #24]
 8004ca2:	e003      	b.n	8004cac <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004cac:	e036      	b.n	8004d1c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2120      	movs	r1, #32
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 fb9e 	bl	80053fa <UART_WaitOnFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e032      	b.n	8004d36 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10c      	bne.n	8004cf0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	8a7b      	ldrh	r3, [r7, #18]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	3302      	adds	r3, #2
 8004cec:	61bb      	str	r3, [r7, #24]
 8004cee:	e00c      	b.n	8004d0a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	8a7b      	ldrh	r3, [r7, #18]
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	3301      	adds	r3, #1
 8004d08:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1c2      	bne.n	8004cae <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004d30:	2300      	movs	r3, #0
 8004d32:	e000      	b.n	8004d36 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004d34:	2302      	movs	r3, #2
  }
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3720      	adds	r7, #32
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
	...

08004d40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	431a      	orrs	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	4ba6      	ldr	r3, [pc, #664]	@ (8005004 <UART_SetConfig+0x2c4>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	6979      	ldr	r1, [r7, #20]
 8004d74:	430b      	orrs	r3, r1
 8004d76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a94      	ldr	r2, [pc, #592]	@ (8005008 <UART_SetConfig+0x2c8>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d120      	bne.n	8004dfe <UART_SetConfig+0xbe>
 8004dbc:	4b93      	ldr	r3, [pc, #588]	@ (800500c <UART_SetConfig+0x2cc>)
 8004dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	2b03      	cmp	r3, #3
 8004dc8:	d816      	bhi.n	8004df8 <UART_SetConfig+0xb8>
 8004dca:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd0 <UART_SetConfig+0x90>)
 8004dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd0:	08004de1 	.word	0x08004de1
 8004dd4:	08004ded 	.word	0x08004ded
 8004dd8:	08004de7 	.word	0x08004de7
 8004ddc:	08004df3 	.word	0x08004df3
 8004de0:	2301      	movs	r3, #1
 8004de2:	77fb      	strb	r3, [r7, #31]
 8004de4:	e150      	b.n	8005088 <UART_SetConfig+0x348>
 8004de6:	2302      	movs	r3, #2
 8004de8:	77fb      	strb	r3, [r7, #31]
 8004dea:	e14d      	b.n	8005088 <UART_SetConfig+0x348>
 8004dec:	2304      	movs	r3, #4
 8004dee:	77fb      	strb	r3, [r7, #31]
 8004df0:	e14a      	b.n	8005088 <UART_SetConfig+0x348>
 8004df2:	2308      	movs	r3, #8
 8004df4:	77fb      	strb	r3, [r7, #31]
 8004df6:	e147      	b.n	8005088 <UART_SetConfig+0x348>
 8004df8:	2310      	movs	r3, #16
 8004dfa:	77fb      	strb	r3, [r7, #31]
 8004dfc:	e144      	b.n	8005088 <UART_SetConfig+0x348>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a83      	ldr	r2, [pc, #524]	@ (8005010 <UART_SetConfig+0x2d0>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d132      	bne.n	8004e6e <UART_SetConfig+0x12e>
 8004e08:	4b80      	ldr	r3, [pc, #512]	@ (800500c <UART_SetConfig+0x2cc>)
 8004e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e0e:	f003 030c 	and.w	r3, r3, #12
 8004e12:	2b0c      	cmp	r3, #12
 8004e14:	d828      	bhi.n	8004e68 <UART_SetConfig+0x128>
 8004e16:	a201      	add	r2, pc, #4	@ (adr r2, 8004e1c <UART_SetConfig+0xdc>)
 8004e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1c:	08004e51 	.word	0x08004e51
 8004e20:	08004e69 	.word	0x08004e69
 8004e24:	08004e69 	.word	0x08004e69
 8004e28:	08004e69 	.word	0x08004e69
 8004e2c:	08004e5d 	.word	0x08004e5d
 8004e30:	08004e69 	.word	0x08004e69
 8004e34:	08004e69 	.word	0x08004e69
 8004e38:	08004e69 	.word	0x08004e69
 8004e3c:	08004e57 	.word	0x08004e57
 8004e40:	08004e69 	.word	0x08004e69
 8004e44:	08004e69 	.word	0x08004e69
 8004e48:	08004e69 	.word	0x08004e69
 8004e4c:	08004e63 	.word	0x08004e63
 8004e50:	2300      	movs	r3, #0
 8004e52:	77fb      	strb	r3, [r7, #31]
 8004e54:	e118      	b.n	8005088 <UART_SetConfig+0x348>
 8004e56:	2302      	movs	r3, #2
 8004e58:	77fb      	strb	r3, [r7, #31]
 8004e5a:	e115      	b.n	8005088 <UART_SetConfig+0x348>
 8004e5c:	2304      	movs	r3, #4
 8004e5e:	77fb      	strb	r3, [r7, #31]
 8004e60:	e112      	b.n	8005088 <UART_SetConfig+0x348>
 8004e62:	2308      	movs	r3, #8
 8004e64:	77fb      	strb	r3, [r7, #31]
 8004e66:	e10f      	b.n	8005088 <UART_SetConfig+0x348>
 8004e68:	2310      	movs	r3, #16
 8004e6a:	77fb      	strb	r3, [r7, #31]
 8004e6c:	e10c      	b.n	8005088 <UART_SetConfig+0x348>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a68      	ldr	r2, [pc, #416]	@ (8005014 <UART_SetConfig+0x2d4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d120      	bne.n	8004eba <UART_SetConfig+0x17a>
 8004e78:	4b64      	ldr	r3, [pc, #400]	@ (800500c <UART_SetConfig+0x2cc>)
 8004e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e7e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e82:	2b30      	cmp	r3, #48	@ 0x30
 8004e84:	d013      	beq.n	8004eae <UART_SetConfig+0x16e>
 8004e86:	2b30      	cmp	r3, #48	@ 0x30
 8004e88:	d814      	bhi.n	8004eb4 <UART_SetConfig+0x174>
 8004e8a:	2b20      	cmp	r3, #32
 8004e8c:	d009      	beq.n	8004ea2 <UART_SetConfig+0x162>
 8004e8e:	2b20      	cmp	r3, #32
 8004e90:	d810      	bhi.n	8004eb4 <UART_SetConfig+0x174>
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <UART_SetConfig+0x15c>
 8004e96:	2b10      	cmp	r3, #16
 8004e98:	d006      	beq.n	8004ea8 <UART_SetConfig+0x168>
 8004e9a:	e00b      	b.n	8004eb4 <UART_SetConfig+0x174>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	77fb      	strb	r3, [r7, #31]
 8004ea0:	e0f2      	b.n	8005088 <UART_SetConfig+0x348>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	77fb      	strb	r3, [r7, #31]
 8004ea6:	e0ef      	b.n	8005088 <UART_SetConfig+0x348>
 8004ea8:	2304      	movs	r3, #4
 8004eaa:	77fb      	strb	r3, [r7, #31]
 8004eac:	e0ec      	b.n	8005088 <UART_SetConfig+0x348>
 8004eae:	2308      	movs	r3, #8
 8004eb0:	77fb      	strb	r3, [r7, #31]
 8004eb2:	e0e9      	b.n	8005088 <UART_SetConfig+0x348>
 8004eb4:	2310      	movs	r3, #16
 8004eb6:	77fb      	strb	r3, [r7, #31]
 8004eb8:	e0e6      	b.n	8005088 <UART_SetConfig+0x348>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a56      	ldr	r2, [pc, #344]	@ (8005018 <UART_SetConfig+0x2d8>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d120      	bne.n	8004f06 <UART_SetConfig+0x1c6>
 8004ec4:	4b51      	ldr	r3, [pc, #324]	@ (800500c <UART_SetConfig+0x2cc>)
 8004ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004ece:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ed0:	d013      	beq.n	8004efa <UART_SetConfig+0x1ba>
 8004ed2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ed4:	d814      	bhi.n	8004f00 <UART_SetConfig+0x1c0>
 8004ed6:	2b80      	cmp	r3, #128	@ 0x80
 8004ed8:	d009      	beq.n	8004eee <UART_SetConfig+0x1ae>
 8004eda:	2b80      	cmp	r3, #128	@ 0x80
 8004edc:	d810      	bhi.n	8004f00 <UART_SetConfig+0x1c0>
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d002      	beq.n	8004ee8 <UART_SetConfig+0x1a8>
 8004ee2:	2b40      	cmp	r3, #64	@ 0x40
 8004ee4:	d006      	beq.n	8004ef4 <UART_SetConfig+0x1b4>
 8004ee6:	e00b      	b.n	8004f00 <UART_SetConfig+0x1c0>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	77fb      	strb	r3, [r7, #31]
 8004eec:	e0cc      	b.n	8005088 <UART_SetConfig+0x348>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	77fb      	strb	r3, [r7, #31]
 8004ef2:	e0c9      	b.n	8005088 <UART_SetConfig+0x348>
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	77fb      	strb	r3, [r7, #31]
 8004ef8:	e0c6      	b.n	8005088 <UART_SetConfig+0x348>
 8004efa:	2308      	movs	r3, #8
 8004efc:	77fb      	strb	r3, [r7, #31]
 8004efe:	e0c3      	b.n	8005088 <UART_SetConfig+0x348>
 8004f00:	2310      	movs	r3, #16
 8004f02:	77fb      	strb	r3, [r7, #31]
 8004f04:	e0c0      	b.n	8005088 <UART_SetConfig+0x348>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a44      	ldr	r2, [pc, #272]	@ (800501c <UART_SetConfig+0x2dc>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d125      	bne.n	8004f5c <UART_SetConfig+0x21c>
 8004f10:	4b3e      	ldr	r3, [pc, #248]	@ (800500c <UART_SetConfig+0x2cc>)
 8004f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f1e:	d017      	beq.n	8004f50 <UART_SetConfig+0x210>
 8004f20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f24:	d817      	bhi.n	8004f56 <UART_SetConfig+0x216>
 8004f26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f2a:	d00b      	beq.n	8004f44 <UART_SetConfig+0x204>
 8004f2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f30:	d811      	bhi.n	8004f56 <UART_SetConfig+0x216>
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <UART_SetConfig+0x1fe>
 8004f36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f3a:	d006      	beq.n	8004f4a <UART_SetConfig+0x20a>
 8004f3c:	e00b      	b.n	8004f56 <UART_SetConfig+0x216>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	77fb      	strb	r3, [r7, #31]
 8004f42:	e0a1      	b.n	8005088 <UART_SetConfig+0x348>
 8004f44:	2302      	movs	r3, #2
 8004f46:	77fb      	strb	r3, [r7, #31]
 8004f48:	e09e      	b.n	8005088 <UART_SetConfig+0x348>
 8004f4a:	2304      	movs	r3, #4
 8004f4c:	77fb      	strb	r3, [r7, #31]
 8004f4e:	e09b      	b.n	8005088 <UART_SetConfig+0x348>
 8004f50:	2308      	movs	r3, #8
 8004f52:	77fb      	strb	r3, [r7, #31]
 8004f54:	e098      	b.n	8005088 <UART_SetConfig+0x348>
 8004f56:	2310      	movs	r3, #16
 8004f58:	77fb      	strb	r3, [r7, #31]
 8004f5a:	e095      	b.n	8005088 <UART_SetConfig+0x348>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a2f      	ldr	r2, [pc, #188]	@ (8005020 <UART_SetConfig+0x2e0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d125      	bne.n	8004fb2 <UART_SetConfig+0x272>
 8004f66:	4b29      	ldr	r3, [pc, #164]	@ (800500c <UART_SetConfig+0x2cc>)
 8004f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f74:	d017      	beq.n	8004fa6 <UART_SetConfig+0x266>
 8004f76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f7a:	d817      	bhi.n	8004fac <UART_SetConfig+0x26c>
 8004f7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f80:	d00b      	beq.n	8004f9a <UART_SetConfig+0x25a>
 8004f82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f86:	d811      	bhi.n	8004fac <UART_SetConfig+0x26c>
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <UART_SetConfig+0x254>
 8004f8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f90:	d006      	beq.n	8004fa0 <UART_SetConfig+0x260>
 8004f92:	e00b      	b.n	8004fac <UART_SetConfig+0x26c>
 8004f94:	2301      	movs	r3, #1
 8004f96:	77fb      	strb	r3, [r7, #31]
 8004f98:	e076      	b.n	8005088 <UART_SetConfig+0x348>
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	77fb      	strb	r3, [r7, #31]
 8004f9e:	e073      	b.n	8005088 <UART_SetConfig+0x348>
 8004fa0:	2304      	movs	r3, #4
 8004fa2:	77fb      	strb	r3, [r7, #31]
 8004fa4:	e070      	b.n	8005088 <UART_SetConfig+0x348>
 8004fa6:	2308      	movs	r3, #8
 8004fa8:	77fb      	strb	r3, [r7, #31]
 8004faa:	e06d      	b.n	8005088 <UART_SetConfig+0x348>
 8004fac:	2310      	movs	r3, #16
 8004fae:	77fb      	strb	r3, [r7, #31]
 8004fb0:	e06a      	b.n	8005088 <UART_SetConfig+0x348>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8005024 <UART_SetConfig+0x2e4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d138      	bne.n	800502e <UART_SetConfig+0x2ee>
 8004fbc:	4b13      	ldr	r3, [pc, #76]	@ (800500c <UART_SetConfig+0x2cc>)
 8004fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fc2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004fc6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004fca:	d017      	beq.n	8004ffc <UART_SetConfig+0x2bc>
 8004fcc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004fd0:	d82a      	bhi.n	8005028 <UART_SetConfig+0x2e8>
 8004fd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fd6:	d00b      	beq.n	8004ff0 <UART_SetConfig+0x2b0>
 8004fd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fdc:	d824      	bhi.n	8005028 <UART_SetConfig+0x2e8>
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <UART_SetConfig+0x2aa>
 8004fe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fe6:	d006      	beq.n	8004ff6 <UART_SetConfig+0x2b6>
 8004fe8:	e01e      	b.n	8005028 <UART_SetConfig+0x2e8>
 8004fea:	2300      	movs	r3, #0
 8004fec:	77fb      	strb	r3, [r7, #31]
 8004fee:	e04b      	b.n	8005088 <UART_SetConfig+0x348>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	77fb      	strb	r3, [r7, #31]
 8004ff4:	e048      	b.n	8005088 <UART_SetConfig+0x348>
 8004ff6:	2304      	movs	r3, #4
 8004ff8:	77fb      	strb	r3, [r7, #31]
 8004ffa:	e045      	b.n	8005088 <UART_SetConfig+0x348>
 8004ffc:	2308      	movs	r3, #8
 8004ffe:	77fb      	strb	r3, [r7, #31]
 8005000:	e042      	b.n	8005088 <UART_SetConfig+0x348>
 8005002:	bf00      	nop
 8005004:	efff69f3 	.word	0xefff69f3
 8005008:	40011000 	.word	0x40011000
 800500c:	40023800 	.word	0x40023800
 8005010:	40004400 	.word	0x40004400
 8005014:	40004800 	.word	0x40004800
 8005018:	40004c00 	.word	0x40004c00
 800501c:	40005000 	.word	0x40005000
 8005020:	40011400 	.word	0x40011400
 8005024:	40007800 	.word	0x40007800
 8005028:	2310      	movs	r3, #16
 800502a:	77fb      	strb	r3, [r7, #31]
 800502c:	e02c      	b.n	8005088 <UART_SetConfig+0x348>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a72      	ldr	r2, [pc, #456]	@ (80051fc <UART_SetConfig+0x4bc>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d125      	bne.n	8005084 <UART_SetConfig+0x344>
 8005038:	4b71      	ldr	r3, [pc, #452]	@ (8005200 <UART_SetConfig+0x4c0>)
 800503a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800503e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005042:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005046:	d017      	beq.n	8005078 <UART_SetConfig+0x338>
 8005048:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800504c:	d817      	bhi.n	800507e <UART_SetConfig+0x33e>
 800504e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005052:	d00b      	beq.n	800506c <UART_SetConfig+0x32c>
 8005054:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005058:	d811      	bhi.n	800507e <UART_SetConfig+0x33e>
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <UART_SetConfig+0x326>
 800505e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005062:	d006      	beq.n	8005072 <UART_SetConfig+0x332>
 8005064:	e00b      	b.n	800507e <UART_SetConfig+0x33e>
 8005066:	2300      	movs	r3, #0
 8005068:	77fb      	strb	r3, [r7, #31]
 800506a:	e00d      	b.n	8005088 <UART_SetConfig+0x348>
 800506c:	2302      	movs	r3, #2
 800506e:	77fb      	strb	r3, [r7, #31]
 8005070:	e00a      	b.n	8005088 <UART_SetConfig+0x348>
 8005072:	2304      	movs	r3, #4
 8005074:	77fb      	strb	r3, [r7, #31]
 8005076:	e007      	b.n	8005088 <UART_SetConfig+0x348>
 8005078:	2308      	movs	r3, #8
 800507a:	77fb      	strb	r3, [r7, #31]
 800507c:	e004      	b.n	8005088 <UART_SetConfig+0x348>
 800507e:	2310      	movs	r3, #16
 8005080:	77fb      	strb	r3, [r7, #31]
 8005082:	e001      	b.n	8005088 <UART_SetConfig+0x348>
 8005084:	2310      	movs	r3, #16
 8005086:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005090:	d15b      	bne.n	800514a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005092:	7ffb      	ldrb	r3, [r7, #31]
 8005094:	2b08      	cmp	r3, #8
 8005096:	d828      	bhi.n	80050ea <UART_SetConfig+0x3aa>
 8005098:	a201      	add	r2, pc, #4	@ (adr r2, 80050a0 <UART_SetConfig+0x360>)
 800509a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509e:	bf00      	nop
 80050a0:	080050c5 	.word	0x080050c5
 80050a4:	080050cd 	.word	0x080050cd
 80050a8:	080050d5 	.word	0x080050d5
 80050ac:	080050eb 	.word	0x080050eb
 80050b0:	080050db 	.word	0x080050db
 80050b4:	080050eb 	.word	0x080050eb
 80050b8:	080050eb 	.word	0x080050eb
 80050bc:	080050eb 	.word	0x080050eb
 80050c0:	080050e3 	.word	0x080050e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050c4:	f7ff f92a 	bl	800431c <HAL_RCC_GetPCLK1Freq>
 80050c8:	61b8      	str	r0, [r7, #24]
        break;
 80050ca:	e013      	b.n	80050f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050cc:	f7ff f93a 	bl	8004344 <HAL_RCC_GetPCLK2Freq>
 80050d0:	61b8      	str	r0, [r7, #24]
        break;
 80050d2:	e00f      	b.n	80050f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050d4:	4b4b      	ldr	r3, [pc, #300]	@ (8005204 <UART_SetConfig+0x4c4>)
 80050d6:	61bb      	str	r3, [r7, #24]
        break;
 80050d8:	e00c      	b.n	80050f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050da:	f7ff f84d 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 80050de:	61b8      	str	r0, [r7, #24]
        break;
 80050e0:	e008      	b.n	80050f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050e6:	61bb      	str	r3, [r7, #24]
        break;
 80050e8:	e004      	b.n	80050f4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	77bb      	strb	r3, [r7, #30]
        break;
 80050f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d074      	beq.n	80051e4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	005a      	lsls	r2, r3, #1
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	085b      	lsrs	r3, r3, #1
 8005104:	441a      	add	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	fbb2 f3f3 	udiv	r3, r2, r3
 800510e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	2b0f      	cmp	r3, #15
 8005114:	d916      	bls.n	8005144 <UART_SetConfig+0x404>
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800511c:	d212      	bcs.n	8005144 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	b29b      	uxth	r3, r3
 8005122:	f023 030f 	bic.w	r3, r3, #15
 8005126:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	085b      	lsrs	r3, r3, #1
 800512c:	b29b      	uxth	r3, r3
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	b29a      	uxth	r2, r3
 8005134:	89fb      	ldrh	r3, [r7, #14]
 8005136:	4313      	orrs	r3, r2
 8005138:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	89fa      	ldrh	r2, [r7, #14]
 8005140:	60da      	str	r2, [r3, #12]
 8005142:	e04f      	b.n	80051e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	77bb      	strb	r3, [r7, #30]
 8005148:	e04c      	b.n	80051e4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800514a:	7ffb      	ldrb	r3, [r7, #31]
 800514c:	2b08      	cmp	r3, #8
 800514e:	d828      	bhi.n	80051a2 <UART_SetConfig+0x462>
 8005150:	a201      	add	r2, pc, #4	@ (adr r2, 8005158 <UART_SetConfig+0x418>)
 8005152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005156:	bf00      	nop
 8005158:	0800517d 	.word	0x0800517d
 800515c:	08005185 	.word	0x08005185
 8005160:	0800518d 	.word	0x0800518d
 8005164:	080051a3 	.word	0x080051a3
 8005168:	08005193 	.word	0x08005193
 800516c:	080051a3 	.word	0x080051a3
 8005170:	080051a3 	.word	0x080051a3
 8005174:	080051a3 	.word	0x080051a3
 8005178:	0800519b 	.word	0x0800519b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800517c:	f7ff f8ce 	bl	800431c <HAL_RCC_GetPCLK1Freq>
 8005180:	61b8      	str	r0, [r7, #24]
        break;
 8005182:	e013      	b.n	80051ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005184:	f7ff f8de 	bl	8004344 <HAL_RCC_GetPCLK2Freq>
 8005188:	61b8      	str	r0, [r7, #24]
        break;
 800518a:	e00f      	b.n	80051ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800518c:	4b1d      	ldr	r3, [pc, #116]	@ (8005204 <UART_SetConfig+0x4c4>)
 800518e:	61bb      	str	r3, [r7, #24]
        break;
 8005190:	e00c      	b.n	80051ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005192:	f7fe fff1 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 8005196:	61b8      	str	r0, [r7, #24]
        break;
 8005198:	e008      	b.n	80051ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800519a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800519e:	61bb      	str	r3, [r7, #24]
        break;
 80051a0:	e004      	b.n	80051ac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	77bb      	strb	r3, [r7, #30]
        break;
 80051aa:	bf00      	nop
    }

    if (pclk != 0U)
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d018      	beq.n	80051e4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	085a      	lsrs	r2, r3, #1
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	441a      	add	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	2b0f      	cmp	r3, #15
 80051ca:	d909      	bls.n	80051e0 <UART_SetConfig+0x4a0>
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051d2:	d205      	bcs.n	80051e0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	60da      	str	r2, [r3, #12]
 80051de:	e001      	b.n	80051e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80051f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3720      	adds	r7, #32
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	40007c00 	.word	0x40007c00
 8005200:	40023800 	.word	0x40023800
 8005204:	00f42400 	.word	0x00f42400

08005208 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00a      	beq.n	8005232 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00a      	beq.n	8005276 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527a:	f003 0304 	and.w	r3, r3, #4
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529c:	f003 0310 	and.w	r3, r3, #16
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01a      	beq.n	800531e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005306:	d10a      	bne.n	800531e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	605a      	str	r2, [r3, #4]
  }
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b08c      	sub	sp, #48	@ 0x30
 8005350:	af02      	add	r7, sp, #8
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800535c:	f7fc fa24 	bl	80017a8 <HAL_GetTick>
 8005360:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0308 	and.w	r3, r3, #8
 800536c:	2b08      	cmp	r3, #8
 800536e:	d12e      	bne.n	80053ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005370:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	2200      	movs	r2, #0
 800537a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f83b 	bl	80053fa <UART_WaitOnFlagUntilTimeout>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d021      	beq.n	80053ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	e853 3f00 	ldrex	r3, [r3]
 8005396:	60fb      	str	r3, [r7, #12]
   return(result);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800539e:	623b      	str	r3, [r7, #32]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	461a      	mov	r2, r3
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	61fb      	str	r3, [r7, #28]
 80053aa:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ac:	69b9      	ldr	r1, [r7, #24]
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	e841 2300 	strex	r3, r2, [r1]
 80053b4:	617b      	str	r3, [r7, #20]
   return(result);
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e6      	bne.n	800538a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2220      	movs	r2, #32
 80053c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e011      	b.n	80053f2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2220      	movs	r2, #32
 80053d2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3728      	adds	r7, #40	@ 0x28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b084      	sub	sp, #16
 80053fe:	af00      	add	r7, sp, #0
 8005400:	60f8      	str	r0, [r7, #12]
 8005402:	60b9      	str	r1, [r7, #8]
 8005404:	603b      	str	r3, [r7, #0]
 8005406:	4613      	mov	r3, r2
 8005408:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800540a:	e04f      	b.n	80054ac <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005412:	d04b      	beq.n	80054ac <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005414:	f7fc f9c8 	bl	80017a8 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	429a      	cmp	r2, r3
 8005422:	d302      	bcc.n	800542a <UART_WaitOnFlagUntilTimeout+0x30>
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e04e      	b.n	80054cc <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0304 	and.w	r3, r3, #4
 8005438:	2b00      	cmp	r3, #0
 800543a:	d037      	beq.n	80054ac <UART_WaitOnFlagUntilTimeout+0xb2>
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b80      	cmp	r3, #128	@ 0x80
 8005440:	d034      	beq.n	80054ac <UART_WaitOnFlagUntilTimeout+0xb2>
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b40      	cmp	r3, #64	@ 0x40
 8005446:	d031      	beq.n	80054ac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b08      	cmp	r3, #8
 8005454:	d110      	bne.n	8005478 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2208      	movs	r2, #8
 800545c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 f838 	bl	80054d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2208      	movs	r2, #8
 8005468:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e029      	b.n	80054cc <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005482:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005486:	d111      	bne.n	80054ac <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005490:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 f81e 	bl	80054d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e00f      	b.n	80054cc <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	69da      	ldr	r2, [r3, #28]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	4013      	ands	r3, r2
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	bf0c      	ite	eq
 80054bc:	2301      	moveq	r3, #1
 80054be:	2300      	movne	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	79fb      	ldrb	r3, [r7, #7]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d0a0      	beq.n	800540c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b095      	sub	sp, #84	@ 0x54
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e4:	e853 3f00 	ldrex	r3, [r3]
 80054e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	461a      	mov	r2, r3
 80054f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80054fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005500:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005502:	e841 2300 	strex	r3, r2, [r1]
 8005506:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1e6      	bne.n	80054dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3308      	adds	r3, #8
 8005514:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	e853 3f00 	ldrex	r3, [r3]
 800551c:	61fb      	str	r3, [r7, #28]
   return(result);
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	f023 0301 	bic.w	r3, r3, #1
 8005524:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3308      	adds	r3, #8
 800552c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800552e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005530:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005532:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005534:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005536:	e841 2300 	strex	r3, r2, [r1]
 800553a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800553c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1e5      	bne.n	800550e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005546:	2b01      	cmp	r3, #1
 8005548:	d118      	bne.n	800557c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	60bb      	str	r3, [r7, #8]
   return(result);
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f023 0310 	bic.w	r3, r3, #16
 800555e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	461a      	mov	r2, r3
 8005566:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005568:	61bb      	str	r3, [r7, #24]
 800556a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	6979      	ldr	r1, [r7, #20]
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	613b      	str	r3, [r7, #16]
   return(result);
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e6      	bne.n	800554a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005590:	bf00      	nop
 8005592:	3754      	adds	r7, #84	@ 0x54
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <atoi>:
 800559c:	220a      	movs	r2, #10
 800559e:	2100      	movs	r1, #0
 80055a0:	f000 b87a 	b.w	8005698 <strtol>

080055a4 <_strtol_l.constprop.0>:
 80055a4:	2b24      	cmp	r3, #36	@ 0x24
 80055a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055aa:	4686      	mov	lr, r0
 80055ac:	4690      	mov	r8, r2
 80055ae:	d801      	bhi.n	80055b4 <_strtol_l.constprop.0+0x10>
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d106      	bne.n	80055c2 <_strtol_l.constprop.0+0x1e>
 80055b4:	f000 f894 	bl	80056e0 <__errno>
 80055b8:	2316      	movs	r3, #22
 80055ba:	6003      	str	r3, [r0, #0]
 80055bc:	2000      	movs	r0, #0
 80055be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c2:	4834      	ldr	r0, [pc, #208]	@ (8005694 <_strtol_l.constprop.0+0xf0>)
 80055c4:	460d      	mov	r5, r1
 80055c6:	462a      	mov	r2, r5
 80055c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80055cc:	5d06      	ldrb	r6, [r0, r4]
 80055ce:	f016 0608 	ands.w	r6, r6, #8
 80055d2:	d1f8      	bne.n	80055c6 <_strtol_l.constprop.0+0x22>
 80055d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80055d6:	d12d      	bne.n	8005634 <_strtol_l.constprop.0+0x90>
 80055d8:	782c      	ldrb	r4, [r5, #0]
 80055da:	2601      	movs	r6, #1
 80055dc:	1c95      	adds	r5, r2, #2
 80055de:	f033 0210 	bics.w	r2, r3, #16
 80055e2:	d109      	bne.n	80055f8 <_strtol_l.constprop.0+0x54>
 80055e4:	2c30      	cmp	r4, #48	@ 0x30
 80055e6:	d12a      	bne.n	800563e <_strtol_l.constprop.0+0x9a>
 80055e8:	782a      	ldrb	r2, [r5, #0]
 80055ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80055ee:	2a58      	cmp	r2, #88	@ 0x58
 80055f0:	d125      	bne.n	800563e <_strtol_l.constprop.0+0x9a>
 80055f2:	786c      	ldrb	r4, [r5, #1]
 80055f4:	2310      	movs	r3, #16
 80055f6:	3502      	adds	r5, #2
 80055f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80055fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005600:	2200      	movs	r2, #0
 8005602:	fbbc f9f3 	udiv	r9, ip, r3
 8005606:	4610      	mov	r0, r2
 8005608:	fb03 ca19 	mls	sl, r3, r9, ip
 800560c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005610:	2f09      	cmp	r7, #9
 8005612:	d81b      	bhi.n	800564c <_strtol_l.constprop.0+0xa8>
 8005614:	463c      	mov	r4, r7
 8005616:	42a3      	cmp	r3, r4
 8005618:	dd27      	ble.n	800566a <_strtol_l.constprop.0+0xc6>
 800561a:	1c57      	adds	r7, r2, #1
 800561c:	d007      	beq.n	800562e <_strtol_l.constprop.0+0x8a>
 800561e:	4581      	cmp	r9, r0
 8005620:	d320      	bcc.n	8005664 <_strtol_l.constprop.0+0xc0>
 8005622:	d101      	bne.n	8005628 <_strtol_l.constprop.0+0x84>
 8005624:	45a2      	cmp	sl, r4
 8005626:	db1d      	blt.n	8005664 <_strtol_l.constprop.0+0xc0>
 8005628:	fb00 4003 	mla	r0, r0, r3, r4
 800562c:	2201      	movs	r2, #1
 800562e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005632:	e7eb      	b.n	800560c <_strtol_l.constprop.0+0x68>
 8005634:	2c2b      	cmp	r4, #43	@ 0x2b
 8005636:	bf04      	itt	eq
 8005638:	782c      	ldrbeq	r4, [r5, #0]
 800563a:	1c95      	addeq	r5, r2, #2
 800563c:	e7cf      	b.n	80055de <_strtol_l.constprop.0+0x3a>
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1da      	bne.n	80055f8 <_strtol_l.constprop.0+0x54>
 8005642:	2c30      	cmp	r4, #48	@ 0x30
 8005644:	bf0c      	ite	eq
 8005646:	2308      	moveq	r3, #8
 8005648:	230a      	movne	r3, #10
 800564a:	e7d5      	b.n	80055f8 <_strtol_l.constprop.0+0x54>
 800564c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005650:	2f19      	cmp	r7, #25
 8005652:	d801      	bhi.n	8005658 <_strtol_l.constprop.0+0xb4>
 8005654:	3c37      	subs	r4, #55	@ 0x37
 8005656:	e7de      	b.n	8005616 <_strtol_l.constprop.0+0x72>
 8005658:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800565c:	2f19      	cmp	r7, #25
 800565e:	d804      	bhi.n	800566a <_strtol_l.constprop.0+0xc6>
 8005660:	3c57      	subs	r4, #87	@ 0x57
 8005662:	e7d8      	b.n	8005616 <_strtol_l.constprop.0+0x72>
 8005664:	f04f 32ff 	mov.w	r2, #4294967295
 8005668:	e7e1      	b.n	800562e <_strtol_l.constprop.0+0x8a>
 800566a:	1c53      	adds	r3, r2, #1
 800566c:	d108      	bne.n	8005680 <_strtol_l.constprop.0+0xdc>
 800566e:	2322      	movs	r3, #34	@ 0x22
 8005670:	f8ce 3000 	str.w	r3, [lr]
 8005674:	4660      	mov	r0, ip
 8005676:	f1b8 0f00 	cmp.w	r8, #0
 800567a:	d0a0      	beq.n	80055be <_strtol_l.constprop.0+0x1a>
 800567c:	1e69      	subs	r1, r5, #1
 800567e:	e006      	b.n	800568e <_strtol_l.constprop.0+0xea>
 8005680:	b106      	cbz	r6, 8005684 <_strtol_l.constprop.0+0xe0>
 8005682:	4240      	negs	r0, r0
 8005684:	f1b8 0f00 	cmp.w	r8, #0
 8005688:	d099      	beq.n	80055be <_strtol_l.constprop.0+0x1a>
 800568a:	2a00      	cmp	r2, #0
 800568c:	d1f6      	bne.n	800567c <_strtol_l.constprop.0+0xd8>
 800568e:	f8c8 1000 	str.w	r1, [r8]
 8005692:	e794      	b.n	80055be <_strtol_l.constprop.0+0x1a>
 8005694:	08005971 	.word	0x08005971

08005698 <strtol>:
 8005698:	4613      	mov	r3, r2
 800569a:	460a      	mov	r2, r1
 800569c:	4601      	mov	r1, r0
 800569e:	4802      	ldr	r0, [pc, #8]	@ (80056a8 <strtol+0x10>)
 80056a0:	6800      	ldr	r0, [r0, #0]
 80056a2:	f7ff bf7f 	b.w	80055a4 <_strtol_l.constprop.0>
 80056a6:	bf00      	nop
 80056a8:	20000020 	.word	0x20000020

080056ac <memset>:
 80056ac:	4402      	add	r2, r0
 80056ae:	4603      	mov	r3, r0
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d100      	bne.n	80056b6 <memset+0xa>
 80056b4:	4770      	bx	lr
 80056b6:	f803 1b01 	strb.w	r1, [r3], #1
 80056ba:	e7f9      	b.n	80056b0 <memset+0x4>

080056bc <strncmp>:
 80056bc:	b510      	push	{r4, lr}
 80056be:	b16a      	cbz	r2, 80056dc <strncmp+0x20>
 80056c0:	3901      	subs	r1, #1
 80056c2:	1884      	adds	r4, r0, r2
 80056c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d103      	bne.n	80056d8 <strncmp+0x1c>
 80056d0:	42a0      	cmp	r0, r4
 80056d2:	d001      	beq.n	80056d8 <strncmp+0x1c>
 80056d4:	2a00      	cmp	r2, #0
 80056d6:	d1f5      	bne.n	80056c4 <strncmp+0x8>
 80056d8:	1ad0      	subs	r0, r2, r3
 80056da:	bd10      	pop	{r4, pc}
 80056dc:	4610      	mov	r0, r2
 80056de:	e7fc      	b.n	80056da <strncmp+0x1e>

080056e0 <__errno>:
 80056e0:	4b01      	ldr	r3, [pc, #4]	@ (80056e8 <__errno+0x8>)
 80056e2:	6818      	ldr	r0, [r3, #0]
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	20000020 	.word	0x20000020

080056ec <__libc_init_array>:
 80056ec:	b570      	push	{r4, r5, r6, lr}
 80056ee:	4d0d      	ldr	r5, [pc, #52]	@ (8005724 <__libc_init_array+0x38>)
 80056f0:	4c0d      	ldr	r4, [pc, #52]	@ (8005728 <__libc_init_array+0x3c>)
 80056f2:	1b64      	subs	r4, r4, r5
 80056f4:	10a4      	asrs	r4, r4, #2
 80056f6:	2600      	movs	r6, #0
 80056f8:	42a6      	cmp	r6, r4
 80056fa:	d109      	bne.n	8005710 <__libc_init_array+0x24>
 80056fc:	4d0b      	ldr	r5, [pc, #44]	@ (800572c <__libc_init_array+0x40>)
 80056fe:	4c0c      	ldr	r4, [pc, #48]	@ (8005730 <__libc_init_array+0x44>)
 8005700:	f000 f818 	bl	8005734 <_init>
 8005704:	1b64      	subs	r4, r4, r5
 8005706:	10a4      	asrs	r4, r4, #2
 8005708:	2600      	movs	r6, #0
 800570a:	42a6      	cmp	r6, r4
 800570c:	d105      	bne.n	800571a <__libc_init_array+0x2e>
 800570e:	bd70      	pop	{r4, r5, r6, pc}
 8005710:	f855 3b04 	ldr.w	r3, [r5], #4
 8005714:	4798      	blx	r3
 8005716:	3601      	adds	r6, #1
 8005718:	e7ee      	b.n	80056f8 <__libc_init_array+0xc>
 800571a:	f855 3b04 	ldr.w	r3, [r5], #4
 800571e:	4798      	blx	r3
 8005720:	3601      	adds	r6, #1
 8005722:	e7f2      	b.n	800570a <__libc_init_array+0x1e>
 8005724:	08005a7c 	.word	0x08005a7c
 8005728:	08005a7c 	.word	0x08005a7c
 800572c:	08005a7c 	.word	0x08005a7c
 8005730:	08005a80 	.word	0x08005a80

08005734 <_init>:
 8005734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005736:	bf00      	nop
 8005738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800573a:	bc08      	pop	{r3}
 800573c:	469e      	mov	lr, r3
 800573e:	4770      	bx	lr

08005740 <_fini>:
 8005740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005742:	bf00      	nop
 8005744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005746:	bc08      	pop	{r3}
 8005748:	469e      	mov	lr, r3
 800574a:	4770      	bx	lr

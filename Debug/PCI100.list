
PCI100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006afc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  08006cdc  08006cdc  00007cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072f8  080072f8  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  080072f8  080072f8  000082f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007300  08007300  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007300  08007300  00008300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007304  08007304  00008304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007308  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00021394  2000006c  08007374  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20021400  08007374  00009400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bac  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002edb  00000000  00000000  0001bc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  0001eb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b01  00000000  00000000  0001f988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024adf  00000000  00000000  00020489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015963  00000000  00000000  00044f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbe58  00000000  00000000  0005a8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136723  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004470  00000000  00000000  00136768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0013abd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006cc4 	.word	0x08006cc4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08006cc4 	.word	0x08006cc4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <bsp_cmd_find>:


bsp_cmdmap_t CMDS = {0};


message_handler_t bsp_cmd_find(const char *name) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]

	for (uint8_t i = 0; i < CMDS.length; ++i) {
 80005e8:	2300      	movs	r3, #0
 80005ea:	73fb      	strb	r3, [r7, #15]
 80005ec:	e01a      	b.n	8000624 <bsp_cmd_find+0x44>
		if (!strcmp(CMDS.arr[i].name, name)) {
 80005ee:	7bfa      	ldrb	r2, [r7, #15]
 80005f0:	4613      	mov	r3, r2
 80005f2:	015b      	lsls	r3, r3, #5
 80005f4:	4413      	add	r3, r2
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	4a10      	ldr	r2, [pc, #64]	@ (800063c <bsp_cmd_find+0x5c>)
 80005fa:	4413      	add	r3, r2
 80005fc:	6879      	ldr	r1, [r7, #4]
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff fe0e 	bl	8000220 <strcmp>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d109      	bne.n	800061e <bsp_cmd_find+0x3e>
			  return CMDS.arr[i].handle;
 800060a:	7bfa      	ldrb	r2, [r7, #15]
 800060c:	490b      	ldr	r1, [pc, #44]	@ (800063c <bsp_cmd_find+0x5c>)
 800060e:	4613      	mov	r3, r2
 8000610:	015b      	lsls	r3, r3, #5
 8000612:	4413      	add	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	440b      	add	r3, r1
 8000618:	3380      	adds	r3, #128	@ 0x80
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	e00a      	b.n	8000634 <bsp_cmd_find+0x54>
	for (uint8_t i = 0; i < CMDS.length; ++i) {
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	3301      	adds	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	7bfa      	ldrb	r2, [r7, #15]
 8000626:	4b05      	ldr	r3, [pc, #20]	@ (800063c <bsp_cmd_find+0x5c>)
 8000628:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	429a      	cmp	r2, r3
 8000630:	d3dd      	bcc.n	80005ee <bsp_cmd_find+0xe>
		  }
	  }
	return NULL;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000088 	.word	0x20000088

08000640 <bsp_cmd_push>:

uint8_t bsp_cmd_push(cmd_handler_t c) {
 8000640:	b084      	sub	sp, #16
 8000642:	b580      	push	{r7, lr}
 8000644:	af00      	add	r7, sp, #0
 8000646:	f107 0c08 	add.w	ip, r7, #8
 800064a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (CMDS.length == BSP_COMMANDS_MAX) {
 800064e:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <bsp_cmd_push+0x64>)
 8000650:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800065a:	d101      	bne.n	8000660 <bsp_cmd_push+0x20>
		return BSP_ERROR;
 800065c:	2301      	movs	r3, #1
 800065e:	e01a      	b.n	8000696 <bsp_cmd_push+0x56>
	}

	CMDS.arr[CMDS.length] = c;
 8000660:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <bsp_cmd_push+0x64>)
 8000662:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	490e      	ldr	r1, [pc, #56]	@ (80006a4 <bsp_cmd_push+0x64>)
 800066a:	4613      	mov	r3, r2
 800066c:	015b      	lsls	r3, r3, #5
 800066e:	4413      	add	r3, r2
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	440b      	add	r3, r1
 8000674:	4618      	mov	r0, r3
 8000676:	f107 0308 	add.w	r3, r7, #8
 800067a:	2284      	movs	r2, #132	@ 0x84
 800067c:	4619      	mov	r1, r3
 800067e:	f005 fcf4 	bl	800606a <memcpy>

	CMDS.length++;
 8000682:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <bsp_cmd_push+0x64>)
 8000684:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	3301      	adds	r3, #1
 800068c:	4a05      	ldr	r2, [pc, #20]	@ (80006a4 <bsp_cmd_push+0x64>)
 800068e:	f502 3204 	add.w	r2, r2, #135168	@ 0x21000
 8000692:	6013      	str	r3, [r2, #0]

	return BSP_OK;
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	46bd      	mov	sp, r7
 800069a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800069e:	b004      	add	sp, #16
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	20000088 	.word	0x20000088

080006a8 <bsp_message_handler>:

	return BSP_OK;
}


void bsp_message_handler(const char *message) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	f5ad 6d82 	sub.w	sp, sp, #1040	@ 0x410
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80006b4:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80006b8:	6018      	str	r0, [r3, #0]

	char message_copy[CLI_BUFFER_SIZE] = {0};
 80006ba:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80006be:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	3304      	adds	r3, #4
 80006c8:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f005 fbd9 	bl	8005e86 <memset>

	strcpy(message_copy, message);
 80006d4:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80006d8:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80006dc:	f107 0208 	add.w	r2, r7, #8
 80006e0:	6819      	ldr	r1, [r3, #0]
 80006e2:	4610      	mov	r0, r2
 80006e4:	f005 fcb9 	bl	800605a <strcpy>

	if (!strcmp(message_copy, "help")) {
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	491b      	ldr	r1, [pc, #108]	@ (800075c <bsp_message_handler+0xb4>)
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff fd96 	bl	8000220 <strcmp>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d113      	bne.n	8000722 <bsp_message_handler+0x7a>
		  cli_writeline(&huart1, "led <on/off>");
 80006fa:	4919      	ldr	r1, [pc, #100]	@ (8000760 <bsp_message_handler+0xb8>)
 80006fc:	4819      	ldr	r0, [pc, #100]	@ (8000764 <bsp_message_handler+0xbc>)
 80006fe:	f000 f951 	bl	80009a4 <cli_writeline>
		  cli_writeline(&huart1, "led blink <hz>");
 8000702:	4919      	ldr	r1, [pc, #100]	@ (8000768 <bsp_message_handler+0xc0>)
 8000704:	4817      	ldr	r0, [pc, #92]	@ (8000764 <bsp_message_handler+0xbc>)
 8000706:	f000 f94d 	bl	80009a4 <cli_writeline>
		  cli_writeline(&huart1, "led reset");
 800070a:	4918      	ldr	r1, [pc, #96]	@ (800076c <bsp_message_handler+0xc4>)
 800070c:	4815      	ldr	r0, [pc, #84]	@ (8000764 <bsp_message_handler+0xbc>)
 800070e:	f000 f949 	bl	80009a4 <cli_writeline>
		  cli_writeline(&huart1, "led get state");
 8000712:	4917      	ldr	r1, [pc, #92]	@ (8000770 <bsp_message_handler+0xc8>)
 8000714:	4813      	ldr	r0, [pc, #76]	@ (8000764 <bsp_message_handler+0xbc>)
 8000716:	f000 f945 	bl	80009a4 <cli_writeline>
		  cli_writeline(&huart1, "dac <id> write <value>");
 800071a:	4916      	ldr	r1, [pc, #88]	@ (8000774 <bsp_message_handler+0xcc>)
 800071c:	4811      	ldr	r0, [pc, #68]	@ (8000764 <bsp_message_handler+0xbc>)
 800071e:	f000 f941 	bl	80009a4 <cli_writeline>
	  }

	  const char *cmd_name = strtok(message_copy, CLI_WHITESPACE_DELIMITERS);
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	4914      	ldr	r1, [pc, #80]	@ (8000778 <bsp_message_handler+0xd0>)
 8000728:	4618      	mov	r0, r3
 800072a:	f005 fbc7 	bl	8005ebc <strtok>
 800072e:	f8c7 040c 	str.w	r0, [r7, #1036]	@ 0x40c

	  if (!cmd_name) {
 8000732:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8000736:	2b00      	cmp	r3, #0
 8000738:	d00a      	beq.n	8000750 <bsp_message_handler+0xa8>
		  return;
	  }

	  message_handler_t handle = bsp_cmd_find(cmd_name);
 800073a:	f8d7 040c 	ldr.w	r0, [r7, #1036]	@ 0x40c
 800073e:	f7ff ff4f 	bl	80005e0 <bsp_cmd_find>
 8000742:	f8c7 0408 	str.w	r0, [r7, #1032]	@ 0x408

//	  handle()

	  cli_writeline(&huart1, "error: command not found");
 8000746:	490d      	ldr	r1, [pc, #52]	@ (800077c <bsp_message_handler+0xd4>)
 8000748:	4806      	ldr	r0, [pc, #24]	@ (8000764 <bsp_message_handler+0xbc>)
 800074a:	f000 f92b 	bl	80009a4 <cli_writeline>
 800074e:	e000      	b.n	8000752 <bsp_message_handler+0xaa>
		  return;
 8000750:	bf00      	nop
}
 8000752:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	08006cdc 	.word	0x08006cdc
 8000760:	08006ce4 	.word	0x08006ce4
 8000764:	20021218 	.word	0x20021218
 8000768:	08006cf4 	.word	0x08006cf4
 800076c:	08006d04 	.word	0x08006d04
 8000770:	08006d10 	.word	0x08006d10
 8000774:	08006d20 	.word	0x08006d20
 8000778:	08006d38 	.word	0x08006d38
 800077c:	08006d3c 	.word	0x08006d3c

08000780 <bsp_config>:

// call this function before using any bsp cli functionality
void bsp_config() {
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b0e1      	sub	sp, #388	@ 0x184
 8000784:	af1e      	add	r7, sp, #120	@ 0x78
	cmd_handler_t led = {
 8000786:	4a19      	ldr	r2, [pc, #100]	@ (80007ec <bsp_config+0x6c>)
 8000788:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800078c:	4611      	mov	r1, r2
 800078e:	2284      	movs	r2, #132	@ 0x84
 8000790:	4618      	mov	r0, r3
 8000792:	f005 fc6a 	bl	800606a <memcpy>
			.name = "led",
			.handle = led_message_handler
	};
	cmd_handler_t dac = {
 8000796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800079a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800079e:	4a14      	ldr	r2, [pc, #80]	@ (80007f0 <bsp_config+0x70>)
 80007a0:	4618      	mov	r0, r3
 80007a2:	4611      	mov	r1, r2
 80007a4:	2384      	movs	r3, #132	@ 0x84
 80007a6:	461a      	mov	r2, r3
 80007a8:	f005 fc5f 	bl	800606a <memcpy>
			.name = "dac",
			.handle = dac_message_handler
	};
	bsp_cmd_push(led);
 80007ac:	4668      	mov	r0, sp
 80007ae:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80007b2:	2274      	movs	r2, #116	@ 0x74
 80007b4:	4619      	mov	r1, r3
 80007b6:	f005 fc58 	bl	800606a <memcpy>
 80007ba:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80007be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007c0:	f7ff ff3e 	bl	8000640 <bsp_cmd_push>
	bsp_cmd_push(dac);
 80007c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80007c8:	f5a3 7484 	sub.w	r4, r3, #264	@ 0x108
 80007cc:	4668      	mov	r0, sp
 80007ce:	f104 0310 	add.w	r3, r4, #16
 80007d2:	2274      	movs	r2, #116	@ 0x74
 80007d4:	4619      	mov	r1, r3
 80007d6:	f005 fc48 	bl	800606a <memcpy>
 80007da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007de:	f7ff ff2f 	bl	8000640 <bsp_cmd_push>
}
 80007e2:	bf00      	nop
 80007e4:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd90      	pop	{r4, r7, pc}
 80007ec:	08006d58 	.word	0x08006d58
 80007f0:	08006ddc 	.word	0x08006ddc

080007f4 <bsp_run>:

void bsp_run(cli_engine_t *engine) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	blink_led(BLINK_FREQ);
 80007fc:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <bsp_run+0x20>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4618      	mov	r0, r3
 8000802:	f000 f9d3 	bl	8000bac <blink_led>
	cli_process(engine);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f000 f87e 	bl	8000908 <cli_process>
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200210a0 	.word	0x200210a0

08000818 <engine_handle_nl>:
 */

#include "handlers.h"
#include <string.h>

void engine_handle_nl(cli_engine_t * const engine) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

	// getting rig of the `\r` character before delegating command handling
	engine->buf[engine->pos] = '\0';
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	4413      	add	r3, r2
 8000828:	2200      	movs	r2, #0
 800082a:	741a      	strb	r2, [r3, #16]

	cli_putnl(engine->huartx);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	4618      	mov	r0, r3
 8000832:	f000 f8db 	bl	80009ec <cli_putnl>

	// delegate command handling to the member handler
	engine->handle((const char *)engine->buf);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	3210      	adds	r2, #16
 800083e:	4610      	mov	r0, r2
 8000840:	4798      	blx	r3

	// flush the buffer, reset the position
	memset(engine->buf, 0, CLI_BUFFER_SIZE);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	3310      	adds	r3, #16
 8000846:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f005 fb1a 	bl	8005e86 <memset>
	engine->pos = 0;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
	engine->prompt_trigger = 1;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2201      	movs	r2, #1
 800085c:	701a      	strb	r2, [r3, #0]
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <engine_handle_backspace>:


void engine_handle_backspace(cli_engine_t * const engine) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	if (!engine->pos) {
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d020      	beq.n	80008ba <engine_handle_backspace+0x52>
		return;
	}
	engine->buf[engine->pos] = '\0';
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	4413      	add	r3, r2
 8000880:	2200      	movs	r2, #0
 8000882:	741a      	strb	r2, [r3, #16]
	engine->pos -= 1;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	1e5a      	subs	r2, r3, #1
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	60da      	str	r2, [r3, #12]
	HAL_UART_Transmit(engine->huartx, (const uint8_t *)"\b", 1, UART_TRANSMIT_TIMEOUT);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6858      	ldr	r0, [r3, #4]
 8000892:	2364      	movs	r3, #100	@ 0x64
 8000894:	2201      	movs	r2, #1
 8000896:	490b      	ldr	r1, [pc, #44]	@ (80008c4 <engine_handle_backspace+0x5c>)
 8000898:	f004 fbe8 	bl	800506c <HAL_UART_Transmit>
	HAL_UART_Transmit(engine->huartx, (const uint8_t *)" ", 1, UART_TRANSMIT_TIMEOUT);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6858      	ldr	r0, [r3, #4]
 80008a0:	2364      	movs	r3, #100	@ 0x64
 80008a2:	2201      	movs	r2, #1
 80008a4:	4908      	ldr	r1, [pc, #32]	@ (80008c8 <engine_handle_backspace+0x60>)
 80008a6:	f004 fbe1 	bl	800506c <HAL_UART_Transmit>
	HAL_UART_Transmit(engine->huartx, (const uint8_t *)"\b", 1, UART_TRANSMIT_TIMEOUT);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6858      	ldr	r0, [r3, #4]
 80008ae:	2364      	movs	r3, #100	@ 0x64
 80008b0:	2201      	movs	r2, #1
 80008b2:	4904      	ldr	r1, [pc, #16]	@ (80008c4 <engine_handle_backspace+0x5c>)
 80008b4:	f004 fbda 	bl	800506c <HAL_UART_Transmit>
 80008b8:	e000      	b.n	80008bc <engine_handle_backspace+0x54>
		return;
 80008ba:	bf00      	nop
}
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	08006e60 	.word	0x08006e60
 80008c8:	08006e64 	.word	0x08006e64

080008cc <make_cli_engine>:
#include "cli.h"
#include <string.h>
#include "../bsp/handlers/handlers.h"


void make_cli_engine(cli_engine_t *engine, UART_HandleTypeDef *huartx, message_handler_t handle) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]


	engine->handle = handle;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	609a      	str	r2, [r3, #8]
	engine ->huartx = huartx;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	68ba      	ldr	r2, [r7, #8]
 80008e2:	605a      	str	r2, [r3, #4]
	engine->prompt_trigger = 1;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]
	engine->pos = 0;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
	memset(engine->buf, 0, CLI_BUFFER_SIZE);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	3310      	adds	r3, #16
 80008f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f005 fac3 	bl	8005e86 <memset>
}
 8000900:	bf00      	nop
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <cli_process>:


void cli_process(cli_engine_t *engine) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  if (engine->prompt_trigger) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d008      	beq.n	800092a <cli_process+0x22>
	  engine->prompt_trigger = 0;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
	  cli_writeline(engine->huartx, PROMPT);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	491f      	ldr	r1, [pc, #124]	@ (80009a0 <cli_process+0x98>)
 8000924:	4618      	mov	r0, r3
 8000926:	f000 f83d 	bl	80009a4 <cli_writeline>
  }

  if (HAL_OK == HAL_UART_Receive(engine->huartx, engine->buf + engine->pos, 1, UART_RECEIVE_TIMEOUT)) {
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6858      	ldr	r0, [r3, #4]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f103 0210 	add.w	r2, r3, #16
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	18d1      	adds	r1, r2, r3
 800093a:	2364      	movs	r3, #100	@ 0x64
 800093c:	2201      	movs	r2, #1
 800093e:	f004 fc1e 	bl	800517e <HAL_UART_Receive>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d126      	bne.n	8000996 <cli_process+0x8e>
    if (engine->buf[engine->pos] == '\r') {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	4413      	add	r3, r2
 8000950:	7c1b      	ldrb	r3, [r3, #16]
 8000952:	2b0d      	cmp	r3, #13
 8000954:	d103      	bne.n	800095e <cli_process+0x56>
    	engine_handle_nl(engine);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff ff5e 	bl	8000818 <engine_handle_nl>
    else {
      HAL_UART_Transmit(engine->huartx, engine->buf + engine->pos, 1, UART_TRANSMIT_TIMEOUT);
      engine->pos += 1;
    }
  }
}
 800095c:	e01b      	b.n	8000996 <cli_process+0x8e>
    else if (engine->buf[engine->pos] == '\b') {
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	68db      	ldr	r3, [r3, #12]
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	7c1b      	ldrb	r3, [r3, #16]
 8000968:	2b08      	cmp	r3, #8
 800096a:	d103      	bne.n	8000974 <cli_process+0x6c>
    	engine_handle_backspace(engine);
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff ff7b 	bl	8000868 <engine_handle_backspace>
}
 8000972:	e010      	b.n	8000996 <cli_process+0x8e>
      HAL_UART_Transmit(engine->huartx, engine->buf + engine->pos, 1, UART_TRANSMIT_TIMEOUT);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6858      	ldr	r0, [r3, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f103 0210 	add.w	r2, r3, #16
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	18d1      	adds	r1, r2, r3
 8000984:	2364      	movs	r3, #100	@ 0x64
 8000986:	2201      	movs	r2, #1
 8000988:	f004 fb70 	bl	800506c <HAL_UART_Transmit>
      engine->pos += 1;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	1c5a      	adds	r2, r3, #1
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	60da      	str	r2, [r3, #12]
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	08006e68 	.word	0x08006e68

080009a4 <cli_writeline>:


void cli_writeline(UART_HandleTypeDef *huartx, const char *s) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
  cli_puts(huartx, s);
 80009ae:	6839      	ldr	r1, [r7, #0]
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f000 f807 	bl	80009c4 <cli_puts>
  cli_putnl(huartx);
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f000 f818 	bl	80009ec <cli_putnl>
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <cli_puts>:

void cli_puts(UART_HandleTypeDef *huartx, const char *s) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(huartx, (const uint8_t *)s, strlen(s), UART_TRANSMIT_TIMEOUT);
 80009ce:	6838      	ldr	r0, [r7, #0]
 80009d0:	f7ff fc30 	bl	8000234 <strlen>
 80009d4:	4603      	mov	r3, r0
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	2364      	movs	r3, #100	@ 0x64
 80009da:	6839      	ldr	r1, [r7, #0]
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f004 fb45 	bl	800506c <HAL_UART_Transmit>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <cli_putnl>:

void cli_putnl(UART_HandleTypeDef *huartx) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(huartx, (const uint8_t *)"\r\n", 2, UART_TRANSMIT_TIMEOUT);
 80009f4:	2364      	movs	r3, #100	@ 0x64
 80009f6:	2202      	movs	r2, #2
 80009f8:	4903      	ldr	r1, [pc, #12]	@ (8000a08 <cli_putnl+0x1c>)
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f004 fb36 	bl	800506c <HAL_UART_Transmit>
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	08006e74 	.word	0x08006e74

08000a0c <dac_write>:
#include <string.h>

extern UART_HandleTypeDef huart1;
extern DAC_HandleTypeDef hdac;

static void dac_write(uint32_t dac_id, uint16_t dac_value) {
 8000a0c:	b5b0      	push	{r4, r5, r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	460b      	mov	r3, r1
 8000a16:	807b      	strh	r3, [r7, #2]

	static DAC_HandleTypeDef dac_map[DAC_COUNT] = {0};

	dac_map[0] = hdac;
 8000a18:	4a0c      	ldr	r2, [pc, #48]	@ (8000a4c <dac_write+0x40>)
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <dac_write+0x44>)
 8000a1c:	4614      	mov	r4, r2
 8000a1e:	461d      	mov	r5, r3
 8000a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a24:	682b      	ldr	r3, [r5, #0]
 8000a26:	6023      	str	r3, [r4, #0]

	// mapping dac objects to id's with offset of 1. Dac with id 1 will be in the 0'th position.
	HAL_DAC_SetValue((dac_map + dac_id - 1), DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	4413      	add	r3, r2
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	3b14      	subs	r3, #20
 8000a34:	4a05      	ldr	r2, [pc, #20]	@ (8000a4c <dac_write+0x40>)
 8000a36:	1898      	adds	r0, r3, r2
 8000a38:	887b      	ldrh	r3, [r7, #2]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f001 fe3e 	bl	80026be <HAL_DAC_SetValue>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bdb0      	pop	{r4, r5, r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	2002108c 	.word	0x2002108c
 8000a50:	200210f0 	.word	0x200210f0

08000a54 <handle_write>:

static int8_t handle_write(const char *message) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	if (!message) {
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d102      	bne.n	8000a68 <handle_write+0x14>
		return -1;
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
 8000a66:	e048      	b.n	8000afa <handle_write+0xa6>
	}

	const char *strid = goto_word(message, ' ', 2);
 8000a68:	2202      	movs	r2, #2
 8000a6a:	2120      	movs	r1, #32
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f001 f871 	bl	8001b54 <goto_word>
 8000a72:	6178      	str	r0, [r7, #20]
	const char *strvalue = goto_word(message, ' ', 3);
 8000a74:	2203      	movs	r2, #3
 8000a76:	2120      	movs	r1, #32
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f001 f86b 	bl	8001b54 <goto_word>
 8000a7e:	6138      	str	r0, [r7, #16]

	if (NULL == strid || NULL == strvalue) {
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d002      	beq.n	8000a8c <handle_write+0x38>
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d105      	bne.n	8000a98 <handle_write+0x44>
		cli_writeline(&huart1, "error: invalid dac write command format. Type help for more details.");
 8000a8c:	491d      	ldr	r1, [pc, #116]	@ (8000b04 <handle_write+0xb0>)
 8000a8e:	481e      	ldr	r0, [pc, #120]	@ (8000b08 <handle_write+0xb4>)
 8000a90:	f7ff ff88 	bl	80009a4 <cli_writeline>
		return CLI_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	e030      	b.n	8000afa <handle_write+0xa6>
	}

	const uint32_t dac_id = atoi(strid);
 8000a98:	6978      	ldr	r0, [r7, #20]
 8000a9a:	f005 f867 	bl	8005b6c <atoi>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	60fb      	str	r3, [r7, #12]

	if (-1 == dac_id) {
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa8:	d105      	bne.n	8000ab6 <handle_write+0x62>
		cli_writeline(&huart1, "error: invalid dac id format. Available dac id's: [ 1 ]");
 8000aaa:	4918      	ldr	r1, [pc, #96]	@ (8000b0c <handle_write+0xb8>)
 8000aac:	4816      	ldr	r0, [pc, #88]	@ (8000b08 <handle_write+0xb4>)
 8000aae:	f7ff ff79 	bl	80009a4 <cli_writeline>
		return CLI_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e021      	b.n	8000afa <handle_write+0xa6>
	} else if (dac_id != 1) {
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d005      	beq.n	8000ac8 <handle_write+0x74>
		cli_writeline(&huart1, "error: invalid dac id value. Available dac id's: [ 1 ]");
 8000abc:	4914      	ldr	r1, [pc, #80]	@ (8000b10 <handle_write+0xbc>)
 8000abe:	4812      	ldr	r0, [pc, #72]	@ (8000b08 <handle_write+0xb4>)
 8000ac0:	f7ff ff70 	bl	80009a4 <cli_writeline>
		return CLI_ERROR;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e018      	b.n	8000afa <handle_write+0xa6>
	}


	const int32_t value = stouint(strvalue, ' ');
 8000ac8:	2120      	movs	r1, #32
 8000aca:	6938      	ldr	r0, [r7, #16]
 8000acc:	f000 fff0 	bl	8001ab0 <stouint>
 8000ad0:	60b8      	str	r0, [r7, #8]

    if (value > 0 && value < DAC12_MAX) {
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	dd0b      	ble.n	8000af0 <handle_write+0x9c>
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000ade:	da07      	bge.n	8000af0 <handle_write+0x9c>
      dac_write(dac_id, value);
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	68f8      	ldr	r0, [r7, #12]
 8000ae8:	f7ff ff90 	bl	8000a0c <dac_write>
      return CLI_ERROR;
 8000aec:	2301      	movs	r3, #1
 8000aee:	e004      	b.n	8000afa <handle_write+0xa6>
    }

    cli_writeline(&huart1, "error: invalid dac value format. Valid dac value range: [ 0 ... 4095 ].");
 8000af0:	4908      	ldr	r1, [pc, #32]	@ (8000b14 <handle_write+0xc0>)
 8000af2:	4805      	ldr	r0, [pc, #20]	@ (8000b08 <handle_write+0xb4>)
 8000af4:	f7ff ff56 	bl	80009a4 <cli_writeline>
	return CLI_OK;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	08006e78 	.word	0x08006e78
 8000b08:	20021218 	.word	0x20021218
 8000b0c:	08006ec0 	.word	0x08006ec0
 8000b10:	08006ef8 	.word	0x08006ef8
 8000b14:	08006f30 	.word	0x08006f30

08000b18 <dac_message_handler>:

void dac_message_handler(const char *message) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

  if (!strcmp(message, "help")) {
 8000b20:	490c      	ldr	r1, [pc, #48]	@ (8000b54 <dac_message_handler+0x3c>)
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff fb7c 	bl	8000220 <strcmp>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d104      	bne.n	8000b38 <dac_message_handler+0x20>
    cli_writeline(&huart1, "to set DAC value, type `dac write <value>`");
 8000b2e:	490a      	ldr	r1, [pc, #40]	@ (8000b58 <dac_message_handler+0x40>)
 8000b30:	480a      	ldr	r0, [pc, #40]	@ (8000b5c <dac_message_handler+0x44>)
 8000b32:	f7ff ff37 	bl	80009a4 <cli_writeline>

  else if (starts_with(message, "dac write ")) {
    handle_write(message);
  }

}
 8000b36:	e009      	b.n	8000b4c <dac_message_handler+0x34>
  else if (starts_with(message, "dac write ")) {
 8000b38:	4909      	ldr	r1, [pc, #36]	@ (8000b60 <dac_message_handler+0x48>)
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f000 fff2 	bl	8001b24 <starts_with>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <dac_message_handler+0x34>
    handle_write(message);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ff84 	bl	8000a54 <handle_write>
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	08006f78 	.word	0x08006f78
 8000b58:	08006f80 	.word	0x08006f80
 8000b5c:	20021218 	.word	0x20021218
 8000b60:	08006fac 	.word	0x08006fac

08000b64 <get_led_mode>:
uint8_t BLINK_MODE = BLINK_OFF;
uint8_t LED_STATE = LED_OFF;

static uint32_t start = 0;

static const char *get_led_mode(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  if (LED_STATE == LED_OFF) {
 8000b68:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <get_led_mode+0x34>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d101      	bne.n	8000b74 <get_led_mode+0x10>
	  return "off";
 8000b70:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <get_led_mode+0x38>)
 8000b72:	e00f      	b.n	8000b94 <get_led_mode+0x30>
  } else if (LED_STATE == LED_ON && BLINK_MODE == BLINK_OFF) {
 8000b74:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <get_led_mode+0x34>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d105      	bne.n	8000b88 <get_led_mode+0x24>
 8000b7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <get_led_mode+0x3c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d101      	bne.n	8000b88 <get_led_mode+0x24>
	  return "on";
 8000b84:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <get_led_mode+0x40>)
 8000b86:	e005      	b.n	8000b94 <get_led_mode+0x30>
  } else {
	  return static_itoa(BLINK_FREQ);
 8000b88:	4b07      	ldr	r3, [pc, #28]	@ (8000ba8 <get_led_mode+0x44>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f001 f81f 	bl	8001bd0 <static_itoa>
 8000b92:	4603      	mov	r3, r0
  }
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000001 	.word	0x20000001
 8000b9c:	08006fb8 	.word	0x08006fb8
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	08006fbc 	.word	0x08006fbc
 8000ba8:	200210a0 	.word	0x200210a0

08000bac <blink_led>:

void blink_led(const uint32_t frequency) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if (BLINK_MODE == BLINK_OFF) {
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf0 <blink_led+0x44>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d014      	beq.n	8000be6 <blink_led+0x3a>
    return;
  }
  const uint32_t current_tick = HAL_GetTick();
 8000bbc:	f001 f8dc 	bl	8001d78 <HAL_GetTick>
 8000bc0:	60f8      	str	r0, [r7, #12]
  if (current_tick >= start + frequency) {
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <blink_led+0x48>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d30b      	bcc.n	8000be8 <blink_led+0x3c>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 8000bd0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bd4:	4808      	ldr	r0, [pc, #32]	@ (8000bf8 <blink_led+0x4c>)
 8000bd6:	f002 fadc 	bl	8003192 <HAL_GPIO_TogglePin>
    start = HAL_GetTick();
 8000bda:	f001 f8cd 	bl	8001d78 <HAL_GetTick>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <blink_led+0x48>)
 8000be2:	6013      	str	r3, [r2, #0]
 8000be4:	e000      	b.n	8000be8 <blink_led+0x3c>
    return;
 8000be6:	bf00      	nop
  }
}
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	200210a4 	.word	0x200210a4
 8000bf8:	40020400 	.word	0x40020400

08000bfc <set_led_config>:

void set_led_config(void) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
  uint8_t input = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	71fb      	strb	r3, [r7, #7]

  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000c06:	2101      	movs	r1, #1
 8000c08:	4858      	ldr	r0, [pc, #352]	@ (8000d6c <set_led_config+0x170>)
 8000c0a:	f002 fa91 	bl	8003130 <HAL_GPIO_ReadPin>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	bf0c      	ite	eq
 8000c14:	2301      	moveq	r3, #1
 8000c16:	2300      	movne	r3, #0
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	b25a      	sxtb	r2, r3
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	b25b      	sxtb	r3, r3
 8000c24:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) << 1;
 8000c26:	2102      	movs	r1, #2
 8000c28:	4850      	ldr	r0, [pc, #320]	@ (8000d6c <set_led_config+0x170>)
 8000c2a:	f002 fa81 	bl	8003130 <HAL_GPIO_ReadPin>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d101      	bne.n	8000c38 <set_led_config+0x3c>
 8000c34:	2302      	movs	r3, #2
 8000c36:	e000      	b.n	8000c3a <set_led_config+0x3e>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	b25a      	sxtb	r2, r3
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	b25b      	sxtb	r3, r3
 8000c44:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) << 2;
 8000c46:	2104      	movs	r1, #4
 8000c48:	4848      	ldr	r0, [pc, #288]	@ (8000d6c <set_led_config+0x170>)
 8000c4a:	f002 fa71 	bl	8003130 <HAL_GPIO_ReadPin>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d101      	bne.n	8000c58 <set_led_config+0x5c>
 8000c54:	2304      	movs	r3, #4
 8000c56:	e000      	b.n	8000c5a <set_led_config+0x5e>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	b25a      	sxtb	r2, r3
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	b25b      	sxtb	r3, r3
 8000c64:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) << 3;
 8000c66:	2108      	movs	r1, #8
 8000c68:	4840      	ldr	r0, [pc, #256]	@ (8000d6c <set_led_config+0x170>)
 8000c6a:	f002 fa61 	bl	8003130 <HAL_GPIO_ReadPin>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d101      	bne.n	8000c78 <set_led_config+0x7c>
 8000c74:	2308      	movs	r3, #8
 8000c76:	e000      	b.n	8000c7a <set_led_config+0x7e>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	b25a      	sxtb	r2, r3
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	b25b      	sxtb	r3, r3
 8000c84:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) << 4;
 8000c86:	2110      	movs	r1, #16
 8000c88:	4838      	ldr	r0, [pc, #224]	@ (8000d6c <set_led_config+0x170>)
 8000c8a:	f002 fa51 	bl	8003130 <HAL_GPIO_ReadPin>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d101      	bne.n	8000c98 <set_led_config+0x9c>
 8000c94:	2310      	movs	r3, #16
 8000c96:	e000      	b.n	8000c9a <set_led_config+0x9e>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	b25a      	sxtb	r2, r3
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) << 5;
 8000ca6:	2120      	movs	r1, #32
 8000ca8:	4830      	ldr	r0, [pc, #192]	@ (8000d6c <set_led_config+0x170>)
 8000caa:	f002 fa41 	bl	8003130 <HAL_GPIO_ReadPin>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d101      	bne.n	8000cb8 <set_led_config+0xbc>
 8000cb4:	2320      	movs	r3, #32
 8000cb6:	e000      	b.n	8000cba <set_led_config+0xbe>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	b25a      	sxtb	r2, r3
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) << 6;
 8000cc6:	2140      	movs	r1, #64	@ 0x40
 8000cc8:	4828      	ldr	r0, [pc, #160]	@ (8000d6c <set_led_config+0x170>)
 8000cca:	f002 fa31 	bl	8003130 <HAL_GPIO_ReadPin>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d101      	bne.n	8000cd8 <set_led_config+0xdc>
 8000cd4:	2340      	movs	r3, #64	@ 0x40
 8000cd6:	e000      	b.n	8000cda <set_led_config+0xde>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	b25a      	sxtb	r2, r3
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	71fb      	strb	r3, [r7, #7]
  input |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) << 7;
 8000ce6:	2180      	movs	r1, #128	@ 0x80
 8000ce8:	4820      	ldr	r0, [pc, #128]	@ (8000d6c <set_led_config+0x170>)
 8000cea:	f002 fa21 	bl	8003130 <HAL_GPIO_ReadPin>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d101      	bne.n	8000cf8 <set_led_config+0xfc>
 8000cf4:	2380      	movs	r3, #128	@ 0x80
 8000cf6:	e000      	b.n	8000cfa <set_led_config+0xfe>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	b25a      	sxtb	r2, r3
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	b25b      	sxtb	r3, r3
 8000d04:	71fb      	strb	r3, [r7, #7]
    BLINK_50,
    BLINK_100,
    BLINK_1000,
  };

  switch (input) {
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2b08      	cmp	r3, #8
 8000d0a:	dc2b      	bgt.n	8000d64 <set_led_config+0x168>
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	da1e      	bge.n	8000d4e <set_led_config+0x152>
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d002      	beq.n	8000d1a <set_led_config+0x11e>
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d00d      	beq.n	8000d34 <set_led_config+0x138>
    break;
  case 2 ... 8:
    BLINK_MODE = BLINK_ON;
    BLINK_FREQ = fmap[input];
  }
}
 8000d18:	e024      	b.n	8000d64 <set_led_config+0x168>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d20:	4813      	ldr	r0, [pc, #76]	@ (8000d70 <set_led_config+0x174>)
 8000d22:	f002 fa1d 	bl	8003160 <HAL_GPIO_WritePin>
    BLINK_FREQ = 0;
 8000d26:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <set_led_config+0x178>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
    BLINK_MODE = BLINK_OFF;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <set_led_config+0x17c>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	701a      	strb	r2, [r3, #0]
    break;
 8000d32:	e017      	b.n	8000d64 <set_led_config+0x168>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d3a:	480d      	ldr	r0, [pc, #52]	@ (8000d70 <set_led_config+0x174>)
 8000d3c:	f002 fa10 	bl	8003160 <HAL_GPIO_WritePin>
    BLINK_FREQ = 1;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <set_led_config+0x178>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]
    BLINK_MODE = BLINK_ON;
 8000d46:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <set_led_config+0x17c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
    break;
 8000d4c:	e00a      	b.n	8000d64 <set_led_config+0x168>
    BLINK_MODE = BLINK_ON;
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <set_led_config+0x17c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
    BLINK_FREQ = fmap[input];
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	4a09      	ldr	r2, [pc, #36]	@ (8000d7c <set_led_config+0x180>)
 8000d58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b05      	ldr	r3, [pc, #20]	@ (8000d74 <set_led_config+0x178>)
 8000d60:	601a      	str	r2, [r3, #0]
}
 8000d62:	e7ff      	b.n	8000d64 <set_led_config+0x168>
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40020000 	.word	0x40020000
 8000d70:	40020400 	.word	0x40020400
 8000d74:	200210a0 	.word	0x200210a0
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	080070e0 	.word	0x080070e0

08000d80 <parse_set_expr>:

static int32_t parse_set_expr(const char* s) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if (!s) {
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d105      	bne.n	8000d9a <parse_set_expr+0x1a>
    return -1;
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d92:	e02a      	b.n	8000dea <parse_set_expr+0x6a>
  }
  while (*s && !isdigit((const uint8_t)*s)) {
    ++s;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3301      	adds	r3, #1
 8000d98:	607b      	str	r3, [r7, #4]
  while (*s && !isdigit((const uint8_t)*s)) {
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d009      	beq.n	8000db6 <parse_set_expr+0x36>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	3301      	adds	r3, #1
 8000da8:	4a12      	ldr	r2, [pc, #72]	@ (8000df4 <parse_set_expr+0x74>)
 8000daa:	4413      	add	r3, r2
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0ee      	beq.n	8000d94 <parse_set_expr+0x14>
  }
  const int32_t res = atoi(s);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f004 fed8 	bl	8005b6c <atoi>
 8000dbc:	60f8      	str	r0, [r7, #12]
  while (isdigit((const uint8_t)*s)) {
 8000dbe:	e002      	b.n	8000dc6 <parse_set_expr+0x46>
    ++s;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	607b      	str	r3, [r7, #4]
  while (isdigit((const uint8_t)*s)) {
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	4a09      	ldr	r2, [pc, #36]	@ (8000df4 <parse_set_expr+0x74>)
 8000dce:	4413      	add	r3, r2
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1f2      	bne.n	8000dc0 <parse_set_expr+0x40>
  }
  return (*s == '\0') ? res : -1;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d101      	bne.n	8000de6 <parse_set_expr+0x66>
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	e001      	b.n	8000dea <parse_set_expr+0x6a>
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	08007114 	.word	0x08007114

08000df8 <led_blink_handler>:


static uint8_t led_blink_handler(const int32_t val) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	if (val < 0) {
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	da05      	bge.n	8000e12 <led_blink_handler+0x1a>
		cli_writeline(&huart1, "error: bad frequency value: Available values are 1, 10, 20, 50, 100, 500, 1000");
 8000e06:	4927      	ldr	r1, [pc, #156]	@ (8000ea4 <led_blink_handler+0xac>)
 8000e08:	4827      	ldr	r0, [pc, #156]	@ (8000ea8 <led_blink_handler+0xb0>)
 8000e0a:	f7ff fdcb 	bl	80009a4 <cli_writeline>
		return CLI_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e043      	b.n	8000e9a <led_blink_handler+0xa2>
	}
	switch(val) {
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e18:	d023      	beq.n	8000e62 <led_blink_handler+0x6a>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e20:	dc36      	bgt.n	8000e90 <led_blink_handler+0x98>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e28:	d01b      	beq.n	8000e62 <led_blink_handler+0x6a>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e30:	dc2e      	bgt.n	8000e90 <led_blink_handler+0x98>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b64      	cmp	r3, #100	@ 0x64
 8000e36:	d014      	beq.n	8000e62 <led_blink_handler+0x6a>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b64      	cmp	r3, #100	@ 0x64
 8000e3c:	dc28      	bgt.n	8000e90 <led_blink_handler+0x98>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b32      	cmp	r3, #50	@ 0x32
 8000e42:	d00e      	beq.n	8000e62 <led_blink_handler+0x6a>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b32      	cmp	r3, #50	@ 0x32
 8000e48:	dc22      	bgt.n	8000e90 <led_blink_handler+0x98>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b14      	cmp	r3, #20
 8000e4e:	d008      	beq.n	8000e62 <led_blink_handler+0x6a>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b14      	cmp	r3, #20
 8000e54:	dc1c      	bgt.n	8000e90 <led_blink_handler+0x98>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d002      	beq.n	8000e62 <led_blink_handler+0x6a>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b0a      	cmp	r3, #10
 8000e60:	d116      	bne.n	8000e90 <led_blink_handler+0x98>
	case 20:
	case 50:
	case 100:
	case 500:
	case 1000:
		BLINK_MODE = BLINK_ON;
 8000e62:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <led_blink_handler+0xb4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
		LED_STATE = LED_ON;
 8000e68:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <led_blink_handler+0xb8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
		BLINK_FREQ = val;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a10      	ldr	r2, [pc, #64]	@ (8000eb4 <led_blink_handler+0xbc>)
 8000e72:	6013      	str	r3, [r2, #0]
		cli_puts(&huart1, "Led frequency set to ");
 8000e74:	4910      	ldr	r1, [pc, #64]	@ (8000eb8 <led_blink_handler+0xc0>)
 8000e76:	480c      	ldr	r0, [pc, #48]	@ (8000ea8 <led_blink_handler+0xb0>)
 8000e78:	f7ff fda4 	bl	80009c4 <cli_puts>
		cli_writeline(&huart1, get_led_mode());
 8000e7c:	f7ff fe72 	bl	8000b64 <get_led_mode>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4619      	mov	r1, r3
 8000e84:	4808      	ldr	r0, [pc, #32]	@ (8000ea8 <led_blink_handler+0xb0>)
 8000e86:	f7ff fd8d 	bl	80009a4 <cli_writeline>
		break;
 8000e8a:	bf00      	nop
	default:
		cli_writeline(&huart1, "error: frequency not supported");
		return CLI_ERROR;
	}

	return CLI_OK;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e004      	b.n	8000e9a <led_blink_handler+0xa2>
		cli_writeline(&huart1, "error: frequency not supported");
 8000e90:	490a      	ldr	r1, [pc, #40]	@ (8000ebc <led_blink_handler+0xc4>)
 8000e92:	4805      	ldr	r0, [pc, #20]	@ (8000ea8 <led_blink_handler+0xb0>)
 8000e94:	f7ff fd86 	bl	80009a4 <cli_writeline>
		return CLI_ERROR;
 8000e98:	2301      	movs	r3, #1
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	08006fc0 	.word	0x08006fc0
 8000ea8:	20021218 	.word	0x20021218
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20000001 	.word	0x20000001
 8000eb4:	200210a0 	.word	0x200210a0
 8000eb8:	08007010 	.word	0x08007010
 8000ebc:	08007028 	.word	0x08007028

08000ec0 <led_message_handler>:

void led_message_handler(const char *message) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

  if (!strcmp(message, "led on")) {
 8000ec8:	4931      	ldr	r1, [pc, #196]	@ (8000f90 <led_message_handler+0xd0>)
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff f9a8 	bl	8000220 <strcmp>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d110      	bne.n	8000ef8 <led_message_handler+0x38>
    BLINK_MODE = BLINK_OFF;
 8000ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8000f94 <led_message_handler+0xd4>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	701a      	strb	r2, [r3, #0]
    LED_STATE = LED_ON;
 8000edc:	4b2e      	ldr	r3, [pc, #184]	@ (8000f98 <led_message_handler+0xd8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ee8:	482c      	ldr	r0, [pc, #176]	@ (8000f9c <led_message_handler+0xdc>)
 8000eea:	f002 f939 	bl	8003160 <HAL_GPIO_WritePin>
    cli_writeline(&huart1, "Led is now on");
 8000eee:	492c      	ldr	r1, [pc, #176]	@ (8000fa0 <led_message_handler+0xe0>)
 8000ef0:	482c      	ldr	r0, [pc, #176]	@ (8000fa4 <led_message_handler+0xe4>)
 8000ef2:	f7ff fd57 	bl	80009a4 <cli_writeline>
  else if (!strcmp(message, "led get state")) {
    cli_puts(&huart1, "led mode is ");
    cli_writeline(&huart1, get_led_mode());
  }

}
 8000ef6:	e046      	b.n	8000f86 <led_message_handler+0xc6>
  else if (!strcmp(message, "led off")) {
 8000ef8:	492b      	ldr	r1, [pc, #172]	@ (8000fa8 <led_message_handler+0xe8>)
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff f990 	bl	8000220 <strcmp>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d110      	bne.n	8000f28 <led_message_handler+0x68>
    BLINK_MODE = BLINK_OFF;
 8000f06:	4b23      	ldr	r3, [pc, #140]	@ (8000f94 <led_message_handler+0xd4>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
    LED_STATE = LED_OFF;
 8000f0c:	4b22      	ldr	r3, [pc, #136]	@ (8000f98 <led_message_handler+0xd8>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000f12:	2201      	movs	r2, #1
 8000f14:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f18:	4820      	ldr	r0, [pc, #128]	@ (8000f9c <led_message_handler+0xdc>)
 8000f1a:	f002 f921 	bl	8003160 <HAL_GPIO_WritePin>
    cli_writeline(&huart1, "Led is now off");
 8000f1e:	4923      	ldr	r1, [pc, #140]	@ (8000fac <led_message_handler+0xec>)
 8000f20:	4820      	ldr	r0, [pc, #128]	@ (8000fa4 <led_message_handler+0xe4>)
 8000f22:	f7ff fd3f 	bl	80009a4 <cli_writeline>
}
 8000f26:	e02e      	b.n	8000f86 <led_message_handler+0xc6>
  else if (starts_with(message, "led blink ")) {
 8000f28:	4921      	ldr	r1, [pc, #132]	@ (8000fb0 <led_message_handler+0xf0>)
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 fdfa 	bl	8001b24 <starts_with>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d007      	beq.n	8000f46 <led_message_handler+0x86>
    led_blink_handler(parse_set_expr(message));
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ff22 	bl	8000d80 <parse_set_expr>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ff5a 	bl	8000df8 <led_blink_handler>
}
 8000f44:	e01f      	b.n	8000f86 <led_message_handler+0xc6>
  else if (!strcmp(message, "led reset")) {
 8000f46:	491b      	ldr	r1, [pc, #108]	@ (8000fb4 <led_message_handler+0xf4>)
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff f969 	bl	8000220 <strcmp>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d106      	bne.n	8000f62 <led_message_handler+0xa2>
    set_led_config();
 8000f54:	f7ff fe52 	bl	8000bfc <set_led_config>
    cli_writeline(&huart1, "led mode is now configured by physical switches");
 8000f58:	4917      	ldr	r1, [pc, #92]	@ (8000fb8 <led_message_handler+0xf8>)
 8000f5a:	4812      	ldr	r0, [pc, #72]	@ (8000fa4 <led_message_handler+0xe4>)
 8000f5c:	f7ff fd22 	bl	80009a4 <cli_writeline>
}
 8000f60:	e011      	b.n	8000f86 <led_message_handler+0xc6>
  else if (!strcmp(message, "led get state")) {
 8000f62:	4916      	ldr	r1, [pc, #88]	@ (8000fbc <led_message_handler+0xfc>)
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff f95b 	bl	8000220 <strcmp>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d10a      	bne.n	8000f86 <led_message_handler+0xc6>
    cli_puts(&huart1, "led mode is ");
 8000f70:	4913      	ldr	r1, [pc, #76]	@ (8000fc0 <led_message_handler+0x100>)
 8000f72:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <led_message_handler+0xe4>)
 8000f74:	f7ff fd26 	bl	80009c4 <cli_puts>
    cli_writeline(&huart1, get_led_mode());
 8000f78:	f7ff fdf4 	bl	8000b64 <get_led_mode>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4808      	ldr	r0, [pc, #32]	@ (8000fa4 <led_message_handler+0xe4>)
 8000f82:	f7ff fd0f 	bl	80009a4 <cli_writeline>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	08007048 	.word	0x08007048
 8000f94:	20000000 	.word	0x20000000
 8000f98:	20000001 	.word	0x20000001
 8000f9c:	40020400 	.word	0x40020400
 8000fa0:	08007050 	.word	0x08007050
 8000fa4:	20021218 	.word	0x20021218
 8000fa8:	08007060 	.word	0x08007060
 8000fac:	08007068 	.word	0x08007068
 8000fb0:	08007078 	.word	0x08007078
 8000fb4:	08007084 	.word	0x08007084
 8000fb8:	08007090 	.word	0x08007090
 8000fbc:	080070c0 	.word	0x080070c0
 8000fc0:	080070d0 	.word	0x080070d0

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	f5ad 6d82 	sub.w	sp, sp, #1040	@ 0x410
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000fcc:	f000 fa38 	bl	8001440 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd0:	f000 fe81 	bl	8001cd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd4:	f000 f826 	bl	8001024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd8:	f000 f992 	bl	8001300 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fdc:	f000 f96a 	bl	80012b4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000fe0:	f000 f8f8 	bl	80011d4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000fe4:	f000 f936 	bl	8001254 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000fe8:	f000 f878 	bl	80010dc <MX_ADC1_Init>
  MX_DAC_Init();
 8000fec:	f000 f8c8 	bl	8001180 <MX_DAC_Init>
  /* USER CODE BEGIN WHILE */

  // uint8_t TX_Buffer = 5;
  // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4809      	ldr	r0, [pc, #36]	@ (8001018 <main+0x54>)
 8000ff4:	f001 fb0c 	bl	8002610 <HAL_DAC_Start>
  set_led_config();
 8000ff8:	f7ff fe00 	bl	8000bfc <set_led_config>

  cli_engine_t engine;
  make_cli_engine(&engine, &huart1, bsp_message_handler);
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	4a07      	ldr	r2, [pc, #28]	@ (800101c <main+0x58>)
 8001000:	4907      	ldr	r1, [pc, #28]	@ (8001020 <main+0x5c>)
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fc62 	bl	80008cc <make_cli_engine>

  bsp_config();
 8001008:	f7ff fbba 	bl	8000780 <bsp_config>

  while (1)
  {
	  bsp_run(&engine);
 800100c:	463b      	mov	r3, r7
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fbf0 	bl	80007f4 <bsp_run>
 8001014:	e7fa      	b.n	800100c <main+0x48>
 8001016:	bf00      	nop
 8001018:	200210f0 	.word	0x200210f0
 800101c:	080006a9 	.word	0x080006a9
 8001020:	20021218 	.word	0x20021218

08001024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b094      	sub	sp, #80	@ 0x50
 8001028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102a:	f107 0320 	add.w	r3, r7, #32
 800102e:	2230      	movs	r2, #48	@ 0x30
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f004 ff27 	bl	8005e86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001048:	4b22      	ldr	r3, [pc, #136]	@ (80010d4 <SystemClock_Config+0xb0>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104c:	4a21      	ldr	r2, [pc, #132]	@ (80010d4 <SystemClock_Config+0xb0>)
 800104e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001052:	6413      	str	r3, [r2, #64]	@ 0x40
 8001054:	4b1f      	ldr	r3, [pc, #124]	@ (80010d4 <SystemClock_Config+0xb0>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001060:	4b1d      	ldr	r3, [pc, #116]	@ (80010d8 <SystemClock_Config+0xb4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001068:	4a1b      	ldr	r2, [pc, #108]	@ (80010d8 <SystemClock_Config+0xb4>)
 800106a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <SystemClock_Config+0xb4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800107c:	2302      	movs	r3, #2
 800107e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001080:	2301      	movs	r3, #1
 8001082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001084:	2310      	movs	r3, #16
 8001086:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001088:	2300      	movs	r3, #0
 800108a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108c:	f107 0320 	add.w	r3, r7, #32
 8001090:	4618      	mov	r0, r3
 8001092:	f002 ffc9 	bl	8004028 <HAL_RCC_OscConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800109c:	f000 f9fc 	bl	8001498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a0:	230f      	movs	r3, #15
 80010a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 fa58 	bl	8004570 <HAL_RCC_ClockConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010c6:	f000 f9e7 	bl	8001498 <Error_Handler>
  }
}
 80010ca:	bf00      	nop
 80010cc:	3750      	adds	r7, #80	@ 0x50
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40007000 	.word	0x40007000

080010dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010e2:	463b      	mov	r3, r7
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010ee:	4b21      	ldr	r3, [pc, #132]	@ (8001174 <MX_ADC1_Init+0x98>)
 80010f0:	4a21      	ldr	r2, [pc, #132]	@ (8001178 <MX_ADC1_Init+0x9c>)
 80010f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001174 <MX_ADC1_Init+0x98>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001174 <MX_ADC1_Init+0x98>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001100:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <MX_ADC1_Init+0x98>)
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001106:	4b1b      	ldr	r3, [pc, #108]	@ (8001174 <MX_ADC1_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800110c:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <MX_ADC1_Init+0x98>)
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001114:	4b17      	ldr	r3, [pc, #92]	@ (8001174 <MX_ADC1_Init+0x98>)
 8001116:	2200      	movs	r2, #0
 8001118:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800111a:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <MX_ADC1_Init+0x98>)
 800111c:	4a17      	ldr	r2, [pc, #92]	@ (800117c <MX_ADC1_Init+0xa0>)
 800111e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001120:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <MX_ADC1_Init+0x98>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001126:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <MX_ADC1_Init+0x98>)
 8001128:	2201      	movs	r2, #1
 800112a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800112c:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <MX_ADC1_Init+0x98>)
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001134:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <MX_ADC1_Init+0x98>)
 8001136:	2201      	movs	r2, #1
 8001138:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800113a:	480e      	ldr	r0, [pc, #56]	@ (8001174 <MX_ADC1_Init+0x98>)
 800113c:	f000 fe28 	bl	8001d90 <HAL_ADC_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001146:	f000 f9a7 	bl	8001498 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800114a:	230a      	movs	r3, #10
 800114c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800114e:	2301      	movs	r3, #1
 8001150:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	4619      	mov	r1, r3
 800115a:	4806      	ldr	r0, [pc, #24]	@ (8001174 <MX_ADC1_Init+0x98>)
 800115c:	f000 fe5c 	bl	8001e18 <HAL_ADC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001166:	f000 f997 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200210a8 	.word	0x200210a8
 8001178:	40012000 	.word	0x40012000
 800117c:	0f000001 	.word	0x0f000001

08001180 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001186:	463b      	mov	r3, r7
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800118e:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <MX_DAC_Init+0x4c>)
 8001190:	4a0f      	ldr	r2, [pc, #60]	@ (80011d0 <MX_DAC_Init+0x50>)
 8001192:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001194:	480d      	ldr	r0, [pc, #52]	@ (80011cc <MX_DAC_Init+0x4c>)
 8001196:	f001 fa19 	bl	80025cc <HAL_DAC_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011a0:	f000 f97a 	bl	8001498 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011ac:	463b      	mov	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	4619      	mov	r1, r3
 80011b2:	4806      	ldr	r0, [pc, #24]	@ (80011cc <MX_DAC_Init+0x4c>)
 80011b4:	f001 faad 	bl	8002712 <HAL_DAC_ConfigChannel>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011be:	f000 f96b 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200210f0 	.word	0x200210f0
 80011d0:	40007400 	.word	0x40007400

080011d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001248 <MX_I2C1_Init+0x74>)
 80011da:	4a1c      	ldr	r2, [pc, #112]	@ (800124c <MX_I2C1_Init+0x78>)
 80011dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80011de:	4b1a      	ldr	r3, [pc, #104]	@ (8001248 <MX_I2C1_Init+0x74>)
 80011e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001250 <MX_I2C1_Init+0x7c>)
 80011e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011e4:	4b18      	ldr	r3, [pc, #96]	@ (8001248 <MX_I2C1_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ea:	4b17      	ldr	r3, [pc, #92]	@ (8001248 <MX_I2C1_Init+0x74>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f0:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <MX_I2C1_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011f6:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <MX_I2C1_Init+0x74>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011fc:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <MX_I2C1_Init+0x74>)
 80011fe:	2200      	movs	r2, #0
 8001200:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001202:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <MX_I2C1_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001208:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <MX_I2C1_Init+0x74>)
 800120a:	2200      	movs	r2, #0
 800120c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800120e:	480e      	ldr	r0, [pc, #56]	@ (8001248 <MX_I2C1_Init+0x74>)
 8001210:	f001 ffda 	bl	80031c8 <HAL_I2C_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800121a:	f000 f93d 	bl	8001498 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800121e:	2100      	movs	r1, #0
 8001220:	4809      	ldr	r0, [pc, #36]	@ (8001248 <MX_I2C1_Init+0x74>)
 8001222:	f002 fe6a 	bl	8003efa <HAL_I2CEx_ConfigAnalogFilter>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800122c:	f000 f934 	bl	8001498 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001230:	2100      	movs	r1, #0
 8001232:	4805      	ldr	r0, [pc, #20]	@ (8001248 <MX_I2C1_Init+0x74>)
 8001234:	f002 feac 	bl	8003f90 <HAL_I2CEx_ConfigDigitalFilter>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800123e:	f000 f92b 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20021104 	.word	0x20021104
 800124c:	40005400 	.word	0x40005400
 8001250:	00303d5b 	.word	0x00303d5b

08001254 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <MX_USART1_UART_Init+0x58>)
 800125a:	4a15      	ldr	r2, [pc, #84]	@ (80012b0 <MX_USART1_UART_Init+0x5c>)
 800125c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800125e:	4b13      	ldr	r3, [pc, #76]	@ (80012ac <MX_USART1_UART_Init+0x58>)
 8001260:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001264:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <MX_USART1_UART_Init+0x58>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800126c:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <MX_USART1_UART_Init+0x58>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <MX_USART1_UART_Init+0x58>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001278:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <MX_USART1_UART_Init+0x58>)
 800127a:	220c      	movs	r2, #12
 800127c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127e:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <MX_USART1_UART_Init+0x58>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001284:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <MX_USART1_UART_Init+0x58>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800128a:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <MX_USART1_UART_Init+0x58>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <MX_USART1_UART_Init+0x58>)
 8001292:	2200      	movs	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001296:	4805      	ldr	r0, [pc, #20]	@ (80012ac <MX_USART1_UART_Init+0x58>)
 8001298:	f003 fe9a 	bl	8004fd0 <HAL_UART_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80012a2:	f000 f8f9 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20021218 	.word	0x20021218
 80012b0:	40011000 	.word	0x40011000

080012b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ba:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <MX_DMA_Init+0x48>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	4a0f      	ldr	r2, [pc, #60]	@ (80012fc <MX_DMA_Init+0x48>)
 80012c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c6:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <MX_DMA_Init+0x48>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	200b      	movs	r0, #11
 80012d8:	f001 f8c9 	bl	800246e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012dc:	200b      	movs	r0, #11
 80012de:	f001 f8e2 	bl	80024a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	2011      	movs	r0, #17
 80012e8:	f001 f8c1 	bl	800246e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80012ec:	2011      	movs	r0, #17
 80012ee:	f001 f8da 	bl	80024a6 <HAL_NVIC_EnableIRQ>

}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800

08001300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	@ 0x28
 8001304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001316:	4b46      	ldr	r3, [pc, #280]	@ (8001430 <MX_GPIO_Init+0x130>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a45      	ldr	r2, [pc, #276]	@ (8001430 <MX_GPIO_Init+0x130>)
 800131c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b43      	ldr	r3, [pc, #268]	@ (8001430 <MX_GPIO_Init+0x130>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	4b40      	ldr	r3, [pc, #256]	@ (8001430 <MX_GPIO_Init+0x130>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	4a3f      	ldr	r2, [pc, #252]	@ (8001430 <MX_GPIO_Init+0x130>)
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	6313      	str	r3, [r2, #48]	@ 0x30
 800133a:	4b3d      	ldr	r3, [pc, #244]	@ (8001430 <MX_GPIO_Init+0x130>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	4b3a      	ldr	r3, [pc, #232]	@ (8001430 <MX_GPIO_Init+0x130>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	4a39      	ldr	r2, [pc, #228]	@ (8001430 <MX_GPIO_Init+0x130>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6313      	str	r3, [r2, #48]	@ 0x30
 8001352:	4b37      	ldr	r3, [pc, #220]	@ (8001430 <MX_GPIO_Init+0x130>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135e:	4b34      	ldr	r3, [pc, #208]	@ (8001430 <MX_GPIO_Init+0x130>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	4a33      	ldr	r2, [pc, #204]	@ (8001430 <MX_GPIO_Init+0x130>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	6313      	str	r3, [r2, #48]	@ 0x30
 800136a:	4b31      	ldr	r3, [pc, #196]	@ (8001430 <MX_GPIO_Init+0x130>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	2104      	movs	r1, #4
 800137a:	482e      	ldr	r0, [pc, #184]	@ (8001434 <MX_GPIO_Init+0x134>)
 800137c:	f001 fef0 	bl	8003160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_ACT_LED_GPIO_Port, MCU_ACT_LED_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001386:	482c      	ldr	r0, [pc, #176]	@ (8001438 <MX_GPIO_Init+0x138>)
 8001388:	f001 feea 	bl	8003160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800138c:	2304      	movs	r3, #4
 800138e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001394:	2301      	movs	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4619      	mov	r1, r3
 80013a2:	4824      	ldr	r0, [pc, #144]	@ (8001434 <MX_GPIO_Init+0x134>)
 80013a4:	f001 fd28 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013a8:	2308      	movs	r3, #8
 80013aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	481e      	ldr	r0, [pc, #120]	@ (8001434 <MX_GPIO_Init+0x134>)
 80013bc:	f001 fd1c 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 80013c0:	23ee      	movs	r3, #238	@ 0xee
 80013c2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	481a      	ldr	r0, [pc, #104]	@ (800143c <MX_GPIO_Init+0x13c>)
 80013d4:	f001 fd10 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACT_LED_Pin */
  GPIO_InitStruct.Pin = MCU_ACT_LED_Pin;
 80013d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_ACT_LED_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	4811      	ldr	r0, [pc, #68]	@ (8001438 <MX_GPIO_Init+0x138>)
 80013f2:	f001 fd01 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	480a      	ldr	r0, [pc, #40]	@ (8001434 <MX_GPIO_Init+0x134>)
 800140c:	f001 fcf4 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001410:	2310      	movs	r3, #16
 8001412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001418:	2301      	movs	r3, #1
 800141a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	4805      	ldr	r0, [pc, #20]	@ (8001438 <MX_GPIO_Init+0x138>)
 8001424:	f001 fce8 	bl	8002df8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001428:	bf00      	nop
 800142a:	3728      	adds	r7, #40	@ 0x28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40023800 	.word	0x40023800
 8001434:	40020800 	.word	0x40020800
 8001438:	40020400 	.word	0x40020400
 800143c:	40020000 	.word	0x40020000

08001440 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001446:	463b      	mov	r3, r7
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001452:	f001 f843 	bl	80024dc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001456:	2301      	movs	r3, #1
 8001458:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800145a:	2300      	movs	r3, #0
 800145c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001462:	231f      	movs	r3, #31
 8001464:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001466:	2387      	movs	r3, #135	@ 0x87
 8001468:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800146a:	2300      	movs	r3, #0
 800146c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800146e:	2300      	movs	r3, #0
 8001470:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001472:	2301      	movs	r3, #1
 8001474:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001476:	2301      	movs	r3, #1
 8001478:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001482:	463b      	mov	r3, r7
 8001484:	4618      	mov	r0, r3
 8001486:	f001 f861 	bl	800254c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800148a:	2004      	movs	r0, #4
 800148c:	f001 f83e 	bl	800250c <HAL_MPU_Enable>

}
 8001490:	bf00      	nop
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149c:	b672      	cpsid	i
}
 800149e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <Error_Handler+0x8>

080014a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <HAL_MspInit+0x44>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	4a0e      	ldr	r2, [pc, #56]	@ (80014e8 <HAL_MspInit+0x44>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b6:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <HAL_MspInit+0x44>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c2:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <HAL_MspInit+0x44>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c6:	4a08      	ldr	r2, [pc, #32]	@ (80014e8 <HAL_MspInit+0x44>)
 80014c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ce:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_MspInit+0x44>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800

080014ec <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	@ 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a15      	ldr	r2, [pc, #84]	@ (8001560 <HAL_ADC_MspInit+0x74>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d123      	bne.n	8001556 <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800150e:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <HAL_ADC_MspInit+0x78>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001512:	4a14      	ldr	r2, [pc, #80]	@ (8001564 <HAL_ADC_MspInit+0x78>)
 8001514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001518:	6453      	str	r3, [r2, #68]	@ 0x44
 800151a:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <HAL_ADC_MspInit+0x78>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001526:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <HAL_ADC_MspInit+0x78>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a0e      	ldr	r2, [pc, #56]	@ (8001564 <HAL_ADC_MspInit+0x78>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <HAL_ADC_MspInit+0x78>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800153e:	2301      	movs	r3, #1
 8001540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001542:	2303      	movs	r3, #3
 8001544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	@ (8001568 <HAL_ADC_MspInit+0x7c>)
 8001552:	f001 fc51 	bl	8002df8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001556:	bf00      	nop
 8001558:	3728      	adds	r7, #40	@ 0x28
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40012000 	.word	0x40012000
 8001564:	40023800 	.word	0x40023800
 8001568:	40020800 	.word	0x40020800

0800156c <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	@ 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a15      	ldr	r2, [pc, #84]	@ (80015e0 <HAL_DAC_MspInit+0x74>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d123      	bne.n	80015d6 <HAL_DAC_MspInit+0x6a>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <HAL_DAC_MspInit+0x78>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	4a14      	ldr	r2, [pc, #80]	@ (80015e4 <HAL_DAC_MspInit+0x78>)
 8001594:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001598:	6413      	str	r3, [r2, #64]	@ 0x40
 800159a:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <HAL_DAC_MspInit+0x78>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <HAL_DAC_MspInit+0x78>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	4a0e      	ldr	r2, [pc, #56]	@ (80015e4 <HAL_DAC_MspInit+0x78>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b2:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <HAL_DAC_MspInit+0x78>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015be:	2310      	movs	r3, #16
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c2:	2303      	movs	r3, #3
 80015c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	4805      	ldr	r0, [pc, #20]	@ (80015e8 <HAL_DAC_MspInit+0x7c>)
 80015d2:	f001 fc11 	bl	8002df8 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 80015d6:	bf00      	nop
 80015d8:	3728      	adds	r7, #40	@ 0x28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40007400 	.word	0x40007400
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020000 	.word	0x40020000

080015ec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b0aa      	sub	sp, #168	@ 0xa8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2280      	movs	r2, #128	@ 0x80
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f004 fc3a 	bl	8005e86 <memset>
  if(hi2c->Instance==I2C1)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a58      	ldr	r2, [pc, #352]	@ (8001778 <HAL_I2C_MspInit+0x18c>)
 8001618:	4293      	cmp	r3, r2
 800161a:	f040 80a8 	bne.w	800176e <HAL_I2C_MspInit+0x182>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800161e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001622:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001624:	2300      	movs	r3, #0
 8001626:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4618      	mov	r0, r3
 800162e:	f003 f985 	bl	800493c <HAL_RCCEx_PeriphCLKConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001638:	f7ff ff2e 	bl	8001498 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163c:	4b4f      	ldr	r3, [pc, #316]	@ (800177c <HAL_I2C_MspInit+0x190>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001640:	4a4e      	ldr	r2, [pc, #312]	@ (800177c <HAL_I2C_MspInit+0x190>)
 8001642:	f043 0302 	orr.w	r3, r3, #2
 8001646:	6313      	str	r3, [r2, #48]	@ 0x30
 8001648:	4b4c      	ldr	r3, [pc, #304]	@ (800177c <HAL_I2C_MspInit+0x190>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001654:	23c0      	movs	r3, #192	@ 0xc0
 8001656:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800165a:	2312      	movs	r3, #18
 800165c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001660:	2301      	movs	r3, #1
 8001662:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800166c:	2304      	movs	r3, #4
 800166e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001676:	4619      	mov	r1, r3
 8001678:	4841      	ldr	r0, [pc, #260]	@ (8001780 <HAL_I2C_MspInit+0x194>)
 800167a:	f001 fbbd 	bl	8002df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800167e:	4b3f      	ldr	r3, [pc, #252]	@ (800177c <HAL_I2C_MspInit+0x190>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	4a3e      	ldr	r2, [pc, #248]	@ (800177c <HAL_I2C_MspInit+0x190>)
 8001684:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001688:	6413      	str	r3, [r2, #64]	@ 0x40
 800168a:	4b3c      	ldr	r3, [pc, #240]	@ (800177c <HAL_I2C_MspInit+0x190>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001696:	4b3b      	ldr	r3, [pc, #236]	@ (8001784 <HAL_I2C_MspInit+0x198>)
 8001698:	4a3b      	ldr	r2, [pc, #236]	@ (8001788 <HAL_I2C_MspInit+0x19c>)
 800169a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800169c:	4b39      	ldr	r3, [pc, #228]	@ (8001784 <HAL_I2C_MspInit+0x198>)
 800169e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016a2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016a4:	4b37      	ldr	r3, [pc, #220]	@ (8001784 <HAL_I2C_MspInit+0x198>)
 80016a6:	2240      	movs	r2, #64	@ 0x40
 80016a8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016aa:	4b36      	ldr	r3, [pc, #216]	@ (8001784 <HAL_I2C_MspInit+0x198>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016b0:	4b34      	ldr	r3, [pc, #208]	@ (8001784 <HAL_I2C_MspInit+0x198>)
 80016b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016b6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016b8:	4b32      	ldr	r3, [pc, #200]	@ (8001784 <HAL_I2C_MspInit+0x198>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016be:	4b31      	ldr	r3, [pc, #196]	@ (8001784 <HAL_I2C_MspInit+0x198>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80016c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001784 <HAL_I2C_MspInit+0x198>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001784 <HAL_I2C_MspInit+0x198>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001784 <HAL_I2C_MspInit+0x198>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80016d6:	482b      	ldr	r0, [pc, #172]	@ (8001784 <HAL_I2C_MspInit+0x198>)
 80016d8:	f001 f874 	bl	80027c4 <HAL_DMA_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 80016e2:	f7ff fed9 	bl	8001498 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a26      	ldr	r2, [pc, #152]	@ (8001784 <HAL_I2C_MspInit+0x198>)
 80016ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80016ec:	4a25      	ldr	r2, [pc, #148]	@ (8001784 <HAL_I2C_MspInit+0x198>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80016f2:	4b26      	ldr	r3, [pc, #152]	@ (800178c <HAL_I2C_MspInit+0x1a0>)
 80016f4:	4a26      	ldr	r2, [pc, #152]	@ (8001790 <HAL_I2C_MspInit+0x1a4>)
 80016f6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80016f8:	4b24      	ldr	r3, [pc, #144]	@ (800178c <HAL_I2C_MspInit+0x1a0>)
 80016fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016fe:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001700:	4b22      	ldr	r3, [pc, #136]	@ (800178c <HAL_I2C_MspInit+0x1a0>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001706:	4b21      	ldr	r3, [pc, #132]	@ (800178c <HAL_I2C_MspInit+0x1a0>)
 8001708:	2200      	movs	r2, #0
 800170a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800170c:	4b1f      	ldr	r3, [pc, #124]	@ (800178c <HAL_I2C_MspInit+0x1a0>)
 800170e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001712:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001714:	4b1d      	ldr	r3, [pc, #116]	@ (800178c <HAL_I2C_MspInit+0x1a0>)
 8001716:	2200      	movs	r2, #0
 8001718:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800171a:	4b1c      	ldr	r3, [pc, #112]	@ (800178c <HAL_I2C_MspInit+0x1a0>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001720:	4b1a      	ldr	r3, [pc, #104]	@ (800178c <HAL_I2C_MspInit+0x1a0>)
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001726:	4b19      	ldr	r3, [pc, #100]	@ (800178c <HAL_I2C_MspInit+0x1a0>)
 8001728:	2200      	movs	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800172c:	4b17      	ldr	r3, [pc, #92]	@ (800178c <HAL_I2C_MspInit+0x1a0>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001732:	4816      	ldr	r0, [pc, #88]	@ (800178c <HAL_I2C_MspInit+0x1a0>)
 8001734:	f001 f846 	bl	80027c4 <HAL_DMA_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_I2C_MspInit+0x156>
    {
      Error_Handler();
 800173e:	f7ff feab 	bl	8001498 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a11      	ldr	r2, [pc, #68]	@ (800178c <HAL_I2C_MspInit+0x1a0>)
 8001746:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001748:	4a10      	ldr	r2, [pc, #64]	@ (800178c <HAL_I2C_MspInit+0x1a0>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2100      	movs	r1, #0
 8001752:	201f      	movs	r0, #31
 8001754:	f000 fe8b 	bl	800246e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001758:	201f      	movs	r0, #31
 800175a:	f000 fea4 	bl	80024a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	2020      	movs	r0, #32
 8001764:	f000 fe83 	bl	800246e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001768:	2020      	movs	r0, #32
 800176a:	f000 fe9c 	bl	80024a6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800176e:	bf00      	nop
 8001770:	37a8      	adds	r7, #168	@ 0xa8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40005400 	.word	0x40005400
 800177c:	40023800 	.word	0x40023800
 8001780:	40020400 	.word	0x40020400
 8001784:	20021158 	.word	0x20021158
 8001788:	400260a0 	.word	0x400260a0
 800178c:	200211b8 	.word	0x200211b8
 8001790:	40026010 	.word	0x40026010

08001794 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b0aa      	sub	sp, #168	@ 0xa8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2280      	movs	r2, #128	@ 0x80
 80017b2:	2100      	movs	r1, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f004 fb66 	bl	8005e86 <memset>
  if(huart->Instance==USART1)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a21      	ldr	r2, [pc, #132]	@ (8001844 <HAL_UART_MspInit+0xb0>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d13b      	bne.n	800183c <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017c4:	2340      	movs	r3, #64	@ 0x40
 80017c6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017c8:	2300      	movs	r3, #0
 80017ca:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4618      	mov	r0, r3
 80017d2:	f003 f8b3 	bl	800493c <HAL_RCCEx_PeriphCLKConfig>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017dc:	f7ff fe5c 	bl	8001498 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017e0:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <HAL_UART_MspInit+0xb4>)
 80017e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e4:	4a18      	ldr	r2, [pc, #96]	@ (8001848 <HAL_UART_MspInit+0xb4>)
 80017e6:	f043 0310 	orr.w	r3, r3, #16
 80017ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ec:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <HAL_UART_MspInit+0xb4>)
 80017ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f8:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <HAL_UART_MspInit+0xb4>)
 80017fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fc:	4a12      	ldr	r2, [pc, #72]	@ (8001848 <HAL_UART_MspInit+0xb4>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6313      	str	r3, [r2, #48]	@ 0x30
 8001804:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <HAL_UART_MspInit+0xb4>)
 8001806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001810:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001814:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001824:	2303      	movs	r3, #3
 8001826:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800182a:	2307      	movs	r3, #7
 800182c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001834:	4619      	mov	r1, r3
 8001836:	4805      	ldr	r0, [pc, #20]	@ (800184c <HAL_UART_MspInit+0xb8>)
 8001838:	f001 fade 	bl	8002df8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800183c:	bf00      	nop
 800183e:	37a8      	adds	r7, #168	@ 0xa8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40011000 	.word	0x40011000
 8001848:	40023800 	.word	0x40023800
 800184c:	40020000 	.word	0x40020000

08001850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <NMI_Handler+0x4>

08001858 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <HardFault_Handler+0x4>

08001860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <MemManage_Handler+0x4>

08001868 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <BusFault_Handler+0x4>

08001870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <UsageFault_Handler+0x4>

08001878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a6:	f000 fa53 	bl	8001d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80018b4:	4802      	ldr	r0, [pc, #8]	@ (80018c0 <DMA1_Stream0_IRQHandler+0x10>)
 80018b6:	f001 f855 	bl	8002964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200211b8 	.word	0x200211b8

080018c4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80018c8:	4802      	ldr	r0, [pc, #8]	@ (80018d4 <DMA1_Stream6_IRQHandler+0x10>)
 80018ca:	f001 f84b 	bl	8002964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20021158 	.word	0x20021158

080018d8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80018dc:	4802      	ldr	r0, [pc, #8]	@ (80018e8 <I2C1_EV_IRQHandler+0x10>)
 80018de:	f001 fd0f 	bl	8003300 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20021104 	.word	0x20021104

080018ec <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80018f0:	4802      	ldr	r0, [pc, #8]	@ (80018fc <I2C1_ER_IRQHandler+0x10>)
 80018f2:	f001 fd1f 	bl	8003334 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20021104 	.word	0x20021104

08001900 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return 1;
 8001904:	2301      	movs	r3, #1
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <_kill>:

int _kill(int pid, int sig)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800191a:	f004 fb71 	bl	8006000 <__errno>
 800191e:	4603      	mov	r3, r0
 8001920:	2216      	movs	r2, #22
 8001922:	601a      	str	r2, [r3, #0]
  return -1;
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_exit>:

void _exit (int status)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001938:	f04f 31ff 	mov.w	r1, #4294967295
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ffe7 	bl	8001910 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001942:	bf00      	nop
 8001944:	e7fd      	b.n	8001942 <_exit+0x12>

08001946 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e00a      	b.n	800196e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001958:	f3af 8000 	nop.w
 800195c:	4601      	mov	r1, r0
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	60ba      	str	r2, [r7, #8]
 8001964:	b2ca      	uxtb	r2, r1
 8001966:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	3301      	adds	r3, #1
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	429a      	cmp	r2, r3
 8001974:	dbf0      	blt.n	8001958 <_read+0x12>
  }

  return len;
 8001976:	687b      	ldr	r3, [r7, #4]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	e009      	b.n	80019a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	1c5a      	adds	r2, r3, #1
 8001996:	60ba      	str	r2, [r7, #8]
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	3301      	adds	r3, #1
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	dbf1      	blt.n	8001992 <_write+0x12>
  }
  return len;
 80019ae:	687b      	ldr	r3, [r7, #4]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <_close>:

int _close(int file)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019e0:	605a      	str	r2, [r3, #4]
  return 0;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_isatty>:

int _isatty(int file)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019f8:	2301      	movs	r3, #1
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b085      	sub	sp, #20
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a28:	4a14      	ldr	r2, [pc, #80]	@ (8001a7c <_sbrk+0x5c>)
 8001a2a:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <_sbrk+0x60>)
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a34:	4b13      	ldr	r3, [pc, #76]	@ (8001a84 <_sbrk+0x64>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <_sbrk+0x64>)
 8001a3e:	4a12      	ldr	r2, [pc, #72]	@ (8001a88 <_sbrk+0x68>)
 8001a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a42:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d207      	bcs.n	8001a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a50:	f004 fad6 	bl	8006000 <__errno>
 8001a54:	4603      	mov	r3, r0
 8001a56:	220c      	movs	r2, #12
 8001a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5e:	e009      	b.n	8001a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a60:	4b08      	ldr	r3, [pc, #32]	@ (8001a84 <_sbrk+0x64>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a66:	4b07      	ldr	r3, [pc, #28]	@ (8001a84 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	4a05      	ldr	r2, [pc, #20]	@ (8001a84 <_sbrk+0x64>)
 8001a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a72:	68fb      	ldr	r3, [r7, #12]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20040000 	.word	0x20040000
 8001a80:	00000400 	.word	0x00000400
 8001a84:	200212a0 	.word	0x200212a0
 8001a88:	20021400 	.word	0x20021400

08001a8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a90:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <SystemInit+0x20>)
 8001a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a96:	4a05      	ldr	r2, [pc, #20]	@ (8001aac <SystemInit+0x20>)
 8001a98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <stouint>:
		str[i] = '\0';
		++i;
	}
}

int32_t stouint(const char* s, const char delimiter) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	70fb      	strb	r3, [r7, #3]
  if (!s) {
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d105      	bne.n	8001ace <stouint+0x1e>
    return -1;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac6:	e026      	b.n	8001b16 <stouint+0x66>
  }

  // skip all delimiters prior to the number
  while(*s == delimiter) {
	  ++s;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3301      	adds	r3, #1
 8001acc:	607b      	str	r3, [r7, #4]
  while(*s == delimiter) {
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	78fa      	ldrb	r2, [r7, #3]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d0f7      	beq.n	8001ac8 <stouint+0x18>
  }
  const int32_t res = atoi(s);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f004 f847 	bl	8005b6c <atoi>
 8001ade:	60f8      	str	r0, [r7, #12]
  while (isdigit((uint8_t)*s)) {
 8001ae0:	e002      	b.n	8001ae8 <stouint+0x38>
    ++s;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	607b      	str	r3, [r7, #4]
  while (isdigit((uint8_t)*s)) {
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	3301      	adds	r3, #1
 8001aee:	4a0c      	ldr	r2, [pc, #48]	@ (8001b20 <stouint+0x70>)
 8001af0:	4413      	add	r3, r2
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1f2      	bne.n	8001ae2 <stouint+0x32>
  }

  if (*s != '\0' && *s != delimiter) {
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d007      	beq.n	8001b14 <stouint+0x64>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	78fa      	ldrb	r2, [r7, #3]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d002      	beq.n	8001b14 <stouint+0x64>
	  return -1;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b12:	e000      	b.n	8001b16 <stouint+0x66>
  }

  return res;
 8001b14:	68fb      	ldr	r3, [r7, #12]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	08007114 	.word	0x08007114

08001b24 <starts_with>:

uint8_t starts_with(const char *s1, const char *s2) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  return (strncmp(s1, s2, strlen(s2)) == 0);
 8001b2e:	6838      	ldr	r0, [r7, #0]
 8001b30:	f7fe fb80 	bl	8000234 <strlen>
 8001b34:	4603      	mov	r3, r0
 8001b36:	461a      	mov	r2, r3
 8001b38:	6839      	ldr	r1, [r7, #0]
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f004 f9ab 	bl	8005e96 <strncmp>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	bf0c      	ite	eq
 8001b46:	2301      	moveq	r3, #1
 8001b48:	2300      	movne	r3, #0
 8001b4a:	b2db      	uxtb	r3, r3
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <goto_word>:

/*
 * returns a pointer to the n'th word in a string (starting from 0) delimited by a custom character
 * */
const char *goto_word(const char *s, const char delimiter, const uint32_t n) {
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	@ 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	72fb      	strb	r3, [r7, #11]
	if (!s) {
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <goto_word+0x18>
		return NULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e02b      	b.n	8001bc4 <goto_word+0x70>
	}

	uint8_t isspace = 1;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	77fb      	strb	r3, [r7, #31]

	uint32_t i = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61bb      	str	r3, [r7, #24]
	uint32_t word_count = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]

	while (s[i]) {
 8001b78:	e01d      	b.n	8001bb6 <goto_word+0x62>
		if (s[i] == delimiter) {
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	4413      	add	r3, r2
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	7afa      	ldrb	r2, [r7, #11]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d102      	bne.n	8001b8e <goto_word+0x3a>
			isspace = 1;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	77fb      	strb	r3, [r7, #31]
 8001b8c:	e007      	b.n	8001b9e <goto_word+0x4a>
		} else if (isspace) {
 8001b8e:	7ffb      	ldrb	r3, [r7, #31]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d004      	beq.n	8001b9e <goto_word+0x4a>
			isspace = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	77fb      	strb	r3, [r7, #31]
			++word_count;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
		}

		if (word_count == n + 1) {
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d103      	bne.n	8001bb0 <goto_word+0x5c>
			return s + i;
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	4413      	add	r3, r2
 8001bae:	e009      	b.n	8001bc4 <goto_word+0x70>
		}

		++i;
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	61bb      	str	r3, [r7, #24]
	while (s[i]) {
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	4413      	add	r3, r2
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1db      	bne.n	8001b7a <goto_word+0x26>
	}

	return NULL;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3724      	adds	r7, #36	@ 0x24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <static_itoa>:

const char *static_itoa(uint32_t n) {
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  static char res[UINT32_MAX_DIGITS + 1] = {0};
  uint8_t i = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	73fb      	strb	r3, [r7, #15]

  while (n > 9) {
 8001bdc:	e018      	b.n	8001c10 <static_itoa+0x40>
    res[i] = '0' + (n % 10);
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4b26      	ldr	r3, [pc, #152]	@ (8001c7c <static_itoa+0xac>)
 8001be2:	fba3 2301 	umull	r2, r3, r3, r1
 8001be6:	08da      	lsrs	r2, r3, #3
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	1aca      	subs	r2, r1, r3
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	3230      	adds	r2, #48	@ 0x30
 8001bf8:	b2d1      	uxtb	r1, r2
 8001bfa:	4a21      	ldr	r2, [pc, #132]	@ (8001c80 <static_itoa+0xb0>)
 8001bfc:	54d1      	strb	r1, [r2, r3]
    n /= 10;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a1e      	ldr	r2, [pc, #120]	@ (8001c7c <static_itoa+0xac>)
 8001c02:	fba2 2303 	umull	r2, r3, r2, r3
 8001c06:	08db      	lsrs	r3, r3, #3
 8001c08:	607b      	str	r3, [r7, #4]
    ++i;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
  while (n > 9) {
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b09      	cmp	r3, #9
 8001c14:	d8e3      	bhi.n	8001bde <static_itoa+0xe>
  }
  res[i] = '0' + n;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	3230      	adds	r2, #48	@ 0x30
 8001c1e:	b2d1      	uxtb	r1, r2
 8001c20:	4a17      	ldr	r2, [pc, #92]	@ (8001c80 <static_itoa+0xb0>)
 8001c22:	54d1      	strb	r1, [r2, r3]
  res[i + 1] = '\0';
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	3301      	adds	r3, #1
 8001c28:	4a15      	ldr	r2, [pc, #84]	@ (8001c80 <static_itoa+0xb0>)
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	54d1      	strb	r1, [r2, r3]

  for (int8_t j = 0; j < i; ++j, --i) {
 8001c2e:	2300      	movs	r3, #0
 8001c30:	73bb      	strb	r3, [r7, #14]
 8001c32:	e016      	b.n	8001c62 <static_itoa+0x92>
    const char t = res[j];
 8001c34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c38:	4a11      	ldr	r2, [pc, #68]	@ (8001c80 <static_itoa+0xb0>)
 8001c3a:	5cd3      	ldrb	r3, [r2, r3]
 8001c3c:	737b      	strb	r3, [r7, #13]
    res[j] = res[i];
 8001c3e:	7bfa      	ldrb	r2, [r7, #15]
 8001c40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c44:	490e      	ldr	r1, [pc, #56]	@ (8001c80 <static_itoa+0xb0>)
 8001c46:	5c89      	ldrb	r1, [r1, r2]
 8001c48:	4a0d      	ldr	r2, [pc, #52]	@ (8001c80 <static_itoa+0xb0>)
 8001c4a:	54d1      	strb	r1, [r2, r3]
    res[i] = t;
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	490c      	ldr	r1, [pc, #48]	@ (8001c80 <static_itoa+0xb0>)
 8001c50:	7b7a      	ldrb	r2, [r7, #13]
 8001c52:	54ca      	strb	r2, [r1, r3]
  for (int8_t j = 0; j < i; ++j, --i) {
 8001c54:	7bbb      	ldrb	r3, [r7, #14]
 8001c56:	3301      	adds	r3, #1
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	73bb      	strb	r3, [r7, #14]
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	73fb      	strb	r3, [r7, #15]
 8001c62:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	dbe3      	blt.n	8001c34 <static_itoa+0x64>
  }

  return res;
 8001c6c:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <static_itoa+0xb0>)
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	cccccccd 	.word	0xcccccccd
 8001c80:	200212a4 	.word	0x200212a4

08001c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8001c88:	f7ff ff00 	bl	8001a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c8c:	480c      	ldr	r0, [pc, #48]	@ (8001cc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c8e:	490d      	ldr	r1, [pc, #52]	@ (8001cc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c90:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c94:	e002      	b.n	8001c9c <LoopCopyDataInit>

08001c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c9a:	3304      	adds	r3, #4

08001c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca0:	d3f9      	bcc.n	8001c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ccc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ca4:	4c0a      	ldr	r4, [pc, #40]	@ (8001cd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca8:	e001      	b.n	8001cae <LoopFillZerobss>

08001caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cac:	3204      	adds	r2, #4

08001cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb0:	d3fb      	bcc.n	8001caa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cb2:	f004 f9ab 	bl	800600c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cb6:	f7ff f985 	bl	8000fc4 <main>
  bx  lr    
 8001cba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cbc:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001cc8:	08007308 	.word	0x08007308
  ldr r2, =_sbss
 8001ccc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001cd0:	20021400 	.word	0x20021400

08001cd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cd4:	e7fe      	b.n	8001cd4 <ADC_IRQHandler>

08001cd6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cda:	2003      	movs	r0, #3
 8001cdc:	f000 fbbc 	bl	8002458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ce0:	200f      	movs	r0, #15
 8001ce2:	f000 f805 	bl	8001cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce6:	f7ff fbdd 	bl	80014a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf8:	4b12      	ldr	r3, [pc, #72]	@ (8001d44 <HAL_InitTick+0x54>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b12      	ldr	r3, [pc, #72]	@ (8001d48 <HAL_InitTick+0x58>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	4619      	mov	r1, r3
 8001d02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 fbd7 	bl	80024c2 <HAL_SYSTICK_Config>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00e      	b.n	8001d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b0f      	cmp	r3, #15
 8001d22:	d80a      	bhi.n	8001d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d24:	2200      	movs	r2, #0
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2c:	f000 fb9f 	bl	800246e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d30:	4a06      	ldr	r2, [pc, #24]	@ (8001d4c <HAL_InitTick+0x5c>)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	e000      	b.n	8001d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000004 	.word	0x20000004
 8001d48:	2000000c 	.word	0x2000000c
 8001d4c:	20000008 	.word	0x20000008

08001d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d54:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <HAL_IncTick+0x20>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <HAL_IncTick+0x24>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	4a04      	ldr	r2, [pc, #16]	@ (8001d74 <HAL_IncTick+0x24>)
 8001d62:	6013      	str	r3, [r2, #0]
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	2000000c 	.word	0x2000000c
 8001d74:	200212b0 	.word	0x200212b0

08001d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	@ (8001d8c <HAL_GetTick+0x14>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	200212b0 	.word	0x200212b0

08001d90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e031      	b.n	8001e0a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff fb9c 	bl	80014ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d116      	bne.n	8001dfc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dd2:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <HAL_ADC_Init+0x84>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	f043 0202 	orr.w	r2, r3, #2
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f970 	bl	80020c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	f023 0303 	bic.w	r3, r3, #3
 8001df2:	f043 0201 	orr.w	r2, r3, #1
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001dfa:	e001      	b.n	8001e00 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	ffffeefd 	.word	0xffffeefd

08001e18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x1c>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e136      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x28a>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b09      	cmp	r3, #9
 8001e42:	d93a      	bls.n	8001eba <HAL_ADC_ConfigChannel+0xa2>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e4c:	d035      	beq.n	8001eba <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68d9      	ldr	r1, [r3, #12]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4413      	add	r3, r2
 8001e62:	3b1e      	subs	r3, #30
 8001e64:	2207      	movs	r2, #7
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	400a      	ands	r2, r1
 8001e72:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a8d      	ldr	r2, [pc, #564]	@ (80020b0 <HAL_ADC_ConfigChannel+0x298>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d10a      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68d9      	ldr	r1, [r3, #12]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	061a      	lsls	r2, r3, #24
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e92:	e035      	b.n	8001f00 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68d9      	ldr	r1, [r3, #12]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4403      	add	r3, r0
 8001eac:	3b1e      	subs	r3, #30
 8001eae:	409a      	lsls	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eb8:	e022      	b.n	8001f00 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6919      	ldr	r1, [r3, #16]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4613      	mov	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4413      	add	r3, r2
 8001ece:	2207      	movs	r2, #7
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43da      	mvns	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	400a      	ands	r2, r1
 8001edc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6919      	ldr	r1, [r3, #16]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4403      	add	r3, r0
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b06      	cmp	r3, #6
 8001f06:	d824      	bhi.n	8001f52 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	3b05      	subs	r3, #5
 8001f1a:	221f      	movs	r2, #31
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43da      	mvns	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	400a      	ands	r2, r1
 8001f28:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	4618      	mov	r0, r3
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	3b05      	subs	r3, #5
 8001f44:	fa00 f203 	lsl.w	r2, r0, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f50:	e04c      	b.n	8001fec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b0c      	cmp	r3, #12
 8001f58:	d824      	bhi.n	8001fa4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	3b23      	subs	r3, #35	@ 0x23
 8001f6c:	221f      	movs	r2, #31
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43da      	mvns	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	400a      	ands	r2, r1
 8001f7a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	4618      	mov	r0, r3
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	3b23      	subs	r3, #35	@ 0x23
 8001f96:	fa00 f203 	lsl.w	r2, r0, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fa2:	e023      	b.n	8001fec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3b41      	subs	r3, #65	@ 0x41
 8001fb6:	221f      	movs	r2, #31
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43da      	mvns	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	400a      	ands	r2, r1
 8001fc4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	3b41      	subs	r3, #65	@ 0x41
 8001fe0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a30      	ldr	r2, [pc, #192]	@ (80020b4 <HAL_ADC_ConfigChannel+0x29c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d10a      	bne.n	800200c <HAL_ADC_ConfigChannel+0x1f4>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001ffe:	d105      	bne.n	800200c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002000:	4b2d      	ldr	r3, [pc, #180]	@ (80020b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	4a2c      	ldr	r2, [pc, #176]	@ (80020b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002006:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800200a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a28      	ldr	r2, [pc, #160]	@ (80020b4 <HAL_ADC_ConfigChannel+0x29c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d10f      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x21e>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2b12      	cmp	r3, #18
 800201c:	d10b      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800201e:	4b26      	ldr	r3, [pc, #152]	@ (80020b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	4a25      	ldr	r2, [pc, #148]	@ (80020b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002024:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002028:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800202a:	4b23      	ldr	r3, [pc, #140]	@ (80020b8 <HAL_ADC_ConfigChannel+0x2a0>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4a22      	ldr	r2, [pc, #136]	@ (80020b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002030:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002034:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1e      	ldr	r2, [pc, #120]	@ (80020b4 <HAL_ADC_ConfigChannel+0x29c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d12b      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x280>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a1a      	ldr	r2, [pc, #104]	@ (80020b0 <HAL_ADC_ConfigChannel+0x298>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d003      	beq.n	8002052 <HAL_ADC_ConfigChannel+0x23a>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b11      	cmp	r3, #17
 8002050:	d122      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002052:	4b19      	ldr	r3, [pc, #100]	@ (80020b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4a18      	ldr	r2, [pc, #96]	@ (80020b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002058:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800205c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800205e:	4b16      	ldr	r3, [pc, #88]	@ (80020b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4a15      	ldr	r2, [pc, #84]	@ (80020b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002064:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002068:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a10      	ldr	r2, [pc, #64]	@ (80020b0 <HAL_ADC_ConfigChannel+0x298>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d111      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002074:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <HAL_ADC_ConfigChannel+0x2a4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a11      	ldr	r2, [pc, #68]	@ (80020c0 <HAL_ADC_ConfigChannel+0x2a8>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	0c9a      	lsrs	r2, r3, #18
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800208a:	e002      	b.n	8002092 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	3b01      	subs	r3, #1
 8002090:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1f9      	bne.n	800208c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	10000012 	.word	0x10000012
 80020b4:	40012000 	.word	0x40012000
 80020b8:	40012300 	.word	0x40012300
 80020bc:	20000004 	.word	0x20000004
 80020c0:	431bde83 	.word	0x431bde83

080020c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80020cc:	4b78      	ldr	r3, [pc, #480]	@ (80022b0 <ADC_Init+0x1ec>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4a77      	ldr	r2, [pc, #476]	@ (80022b0 <ADC_Init+0x1ec>)
 80020d2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80020d6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80020d8:	4b75      	ldr	r3, [pc, #468]	@ (80022b0 <ADC_Init+0x1ec>)
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4973      	ldr	r1, [pc, #460]	@ (80022b0 <ADC_Init+0x1ec>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6859      	ldr	r1, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	021a      	lsls	r2, r3, #8
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002118:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6859      	ldr	r1, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800213a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6899      	ldr	r1, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002152:	4a58      	ldr	r2, [pc, #352]	@ (80022b4 <ADC_Init+0x1f0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d022      	beq.n	800219e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002166:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6899      	ldr	r1, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002188:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6899      	ldr	r1, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	e00f      	b.n	80021be <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0202 	bic.w	r2, r2, #2
 80021cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6899      	ldr	r1, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	005a      	lsls	r2, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01b      	beq.n	8002224 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800220a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6859      	ldr	r1, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002216:	3b01      	subs	r3, #1
 8002218:	035a      	lsls	r2, r3, #13
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	e007      	b.n	8002234 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002232:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002242:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	3b01      	subs	r3, #1
 8002250:	051a      	lsls	r2, r3, #20
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002268:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6899      	ldr	r1, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002276:	025a      	lsls	r2, r3, #9
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800228e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6899      	ldr	r1, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	029a      	lsls	r2, r3, #10
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	609a      	str	r2, [r3, #8]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	40012300 	.word	0x40012300
 80022b4:	0f000001 	.word	0x0f000001

080022b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c8:	4b0b      	ldr	r3, [pc, #44]	@ (80022f8 <__NVIC_SetPriorityGrouping+0x40>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022d4:	4013      	ands	r3, r2
 80022d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022e0:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <__NVIC_SetPriorityGrouping+0x44>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e6:	4a04      	ldr	r2, [pc, #16]	@ (80022f8 <__NVIC_SetPriorityGrouping+0x40>)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	60d3      	str	r3, [r2, #12]
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	e000ed00 	.word	0xe000ed00
 80022fc:	05fa0000 	.word	0x05fa0000

08002300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002304:	4b04      	ldr	r3, [pc, #16]	@ (8002318 <__NVIC_GetPriorityGrouping+0x18>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	0a1b      	lsrs	r3, r3, #8
 800230a:	f003 0307 	and.w	r3, r3, #7
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	2b00      	cmp	r3, #0
 800232c:	db0b      	blt.n	8002346 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	f003 021f 	and.w	r2, r3, #31
 8002334:	4907      	ldr	r1, [pc, #28]	@ (8002354 <__NVIC_EnableIRQ+0x38>)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	2001      	movs	r0, #1
 800233e:	fa00 f202 	lsl.w	r2, r0, r2
 8002342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000e100 	.word	0xe000e100

08002358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	6039      	str	r1, [r7, #0]
 8002362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002368:	2b00      	cmp	r3, #0
 800236a:	db0a      	blt.n	8002382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	b2da      	uxtb	r2, r3
 8002370:	490c      	ldr	r1, [pc, #48]	@ (80023a4 <__NVIC_SetPriority+0x4c>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	0112      	lsls	r2, r2, #4
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	440b      	add	r3, r1
 800237c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002380:	e00a      	b.n	8002398 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	b2da      	uxtb	r2, r3
 8002386:	4908      	ldr	r1, [pc, #32]	@ (80023a8 <__NVIC_SetPriority+0x50>)
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	3b04      	subs	r3, #4
 8002390:	0112      	lsls	r2, r2, #4
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	440b      	add	r3, r1
 8002396:	761a      	strb	r2, [r3, #24]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000e100 	.word	0xe000e100
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	@ 0x24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f1c3 0307 	rsb	r3, r3, #7
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	bf28      	it	cs
 80023ca:	2304      	movcs	r3, #4
 80023cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3304      	adds	r3, #4
 80023d2:	2b06      	cmp	r3, #6
 80023d4:	d902      	bls.n	80023dc <NVIC_EncodePriority+0x30>
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3b03      	subs	r3, #3
 80023da:	e000      	b.n	80023de <NVIC_EncodePriority+0x32>
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	f04f 32ff 	mov.w	r2, #4294967295
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43da      	mvns	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	401a      	ands	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f4:	f04f 31ff 	mov.w	r1, #4294967295
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	fa01 f303 	lsl.w	r3, r1, r3
 80023fe:	43d9      	mvns	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002404:	4313      	orrs	r3, r2
         );
}
 8002406:	4618      	mov	r0, r3
 8002408:	3724      	adds	r7, #36	@ 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002424:	d301      	bcc.n	800242a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002426:	2301      	movs	r3, #1
 8002428:	e00f      	b.n	800244a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242a:	4a0a      	ldr	r2, [pc, #40]	@ (8002454 <SysTick_Config+0x40>)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3b01      	subs	r3, #1
 8002430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002432:	210f      	movs	r1, #15
 8002434:	f04f 30ff 	mov.w	r0, #4294967295
 8002438:	f7ff ff8e 	bl	8002358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800243c:	4b05      	ldr	r3, [pc, #20]	@ (8002454 <SysTick_Config+0x40>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002442:	4b04      	ldr	r3, [pc, #16]	@ (8002454 <SysTick_Config+0x40>)
 8002444:	2207      	movs	r2, #7
 8002446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	e000e010 	.word	0xe000e010

08002458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff ff29 	bl	80022b8 <__NVIC_SetPriorityGrouping>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800246e:	b580      	push	{r7, lr}
 8002470:	b086      	sub	sp, #24
 8002472:	af00      	add	r7, sp, #0
 8002474:	4603      	mov	r3, r0
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	607a      	str	r2, [r7, #4]
 800247a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002480:	f7ff ff3e 	bl	8002300 <__NVIC_GetPriorityGrouping>
 8002484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	6978      	ldr	r0, [r7, #20]
 800248c:	f7ff ff8e 	bl	80023ac <NVIC_EncodePriority>
 8002490:	4602      	mov	r2, r0
 8002492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002496:	4611      	mov	r1, r2
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ff5d 	bl	8002358 <__NVIC_SetPriority>
}
 800249e:	bf00      	nop
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff31 	bl	800231c <__NVIC_EnableIRQ>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff ffa2 	bl	8002414 <SysTick_Config>
 80024d0:	4603      	mov	r3, r0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80024e0:	f3bf 8f5f 	dmb	sy
}
 80024e4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80024e6:	4b07      	ldr	r3, [pc, #28]	@ (8002504 <HAL_MPU_Disable+0x28>)
 80024e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ea:	4a06      	ldr	r2, [pc, #24]	@ (8002504 <HAL_MPU_Disable+0x28>)
 80024ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024f0:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80024f2:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <HAL_MPU_Disable+0x2c>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	605a      	str	r2, [r3, #4]
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000ed00 	.word	0xe000ed00
 8002508:	e000ed90 	.word	0xe000ed90

0800250c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002514:	4a0b      	ldr	r2, [pc, #44]	@ (8002544 <HAL_MPU_Enable+0x38>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800251e:	4b0a      	ldr	r3, [pc, #40]	@ (8002548 <HAL_MPU_Enable+0x3c>)
 8002520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002522:	4a09      	ldr	r2, [pc, #36]	@ (8002548 <HAL_MPU_Enable+0x3c>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002528:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800252a:	f3bf 8f4f 	dsb	sy
}
 800252e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002530:	f3bf 8f6f 	isb	sy
}
 8002534:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000ed90 	.word	0xe000ed90
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	785a      	ldrb	r2, [r3, #1]
 8002558:	4b1b      	ldr	r3, [pc, #108]	@ (80025c8 <HAL_MPU_ConfigRegion+0x7c>)
 800255a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800255c:	4b1a      	ldr	r3, [pc, #104]	@ (80025c8 <HAL_MPU_ConfigRegion+0x7c>)
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	4a19      	ldr	r2, [pc, #100]	@ (80025c8 <HAL_MPU_ConfigRegion+0x7c>)
 8002562:	f023 0301 	bic.w	r3, r3, #1
 8002566:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002568:	4a17      	ldr	r2, [pc, #92]	@ (80025c8 <HAL_MPU_ConfigRegion+0x7c>)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	7b1b      	ldrb	r3, [r3, #12]
 8002574:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	7adb      	ldrb	r3, [r3, #11]
 800257a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800257c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	7a9b      	ldrb	r3, [r3, #10]
 8002582:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002584:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	7b5b      	ldrb	r3, [r3, #13]
 800258a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800258c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	7b9b      	ldrb	r3, [r3, #14]
 8002592:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002594:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	7bdb      	ldrb	r3, [r3, #15]
 800259a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800259c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	7a5b      	ldrb	r3, [r3, #9]
 80025a2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80025a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	7a1b      	ldrb	r3, [r3, #8]
 80025aa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80025ac:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	7812      	ldrb	r2, [r2, #0]
 80025b2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025b4:	4a04      	ldr	r2, [pc, #16]	@ (80025c8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025b6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025b8:	6113      	str	r3, [r2, #16]
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000ed90 	.word	0xe000ed90

080025cc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e014      	b.n	8002608 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	791b      	ldrb	r3, [r3, #4]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d105      	bne.n	80025f4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fe ffbc 	bl	800156c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e046      	b.n	80026b2 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	795b      	ldrb	r3, [r3, #5]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_DAC_Start+0x20>
 800262c:	2302      	movs	r3, #2
 800262e:	e040      	b.n	80026b2 <HAL_DAC_Start+0xa2>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2202      	movs	r2, #2
 800263a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6819      	ldr	r1, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	f003 0310 	and.w	r3, r3, #16
 8002648:	2201      	movs	r2, #1
 800264a:	409a      	lsls	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10f      	bne.n	800267a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002664:	2b3c      	cmp	r3, #60	@ 0x3c
 8002666:	d11d      	bne.n	80026a4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	e014      	b.n	80026a4 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	f003 0310 	and.w	r3, r3, #16
 800268a:	213c      	movs	r1, #60	@ 0x3c
 800268c:	fa01 f303 	lsl.w	r3, r1, r3
 8002690:	429a      	cmp	r2, r3
 8002692:	d107      	bne.n	80026a4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0202 	orr.w	r2, r2, #2
 80026a2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80026be:	b480      	push	{r7}
 80026c0:	b087      	sub	sp, #28
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e015      	b.n	8002706 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d105      	bne.n	80026f2 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4413      	add	r3, r2
 80026ec:	3308      	adds	r3, #8
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	e004      	b.n	80026fc <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4413      	add	r3, r2
 80026f8:	3314      	adds	r3, #20
 80026fa:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	461a      	mov	r2, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	371c      	adds	r7, #28
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002712:	b480      	push	{r7}
 8002714:	b089      	sub	sp, #36	@ 0x24
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <HAL_DAC_ConfigChannel+0x1c>
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e042      	b.n	80027b8 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	795b      	ldrb	r3, [r3, #5]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_DAC_ConfigChannel+0x2c>
 800273a:	2302      	movs	r3, #2
 800273c:	e03c      	b.n	80027b8 <HAL_DAC_ConfigChannel+0xa6>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2202      	movs	r2, #2
 8002748:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f003 0310 	and.w	r3, r3, #16
 8002758:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4313      	orrs	r3, r2
 8002772:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6819      	ldr	r1, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	22c0      	movs	r2, #192	@ 0xc0
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43da      	mvns	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	400a      	ands	r2, r1
 80027a8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80027b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3724      	adds	r7, #36	@ 0x24
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027d0:	f7ff fad2 	bl	8001d78 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e099      	b.n	8002914 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2202      	movs	r2, #2
 80027e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0201 	bic.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002800:	e00f      	b.n	8002822 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002802:	f7ff fab9 	bl	8001d78 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b05      	cmp	r3, #5
 800280e:	d908      	bls.n	8002822 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2203      	movs	r2, #3
 800281a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e078      	b.n	8002914 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1e8      	bne.n	8002802 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	4b38      	ldr	r3, [pc, #224]	@ (800291c <HAL_DMA_Init+0x158>)
 800283c:	4013      	ands	r3, r2
 800283e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800284e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800285a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002866:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4313      	orrs	r3, r2
 8002872:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002878:	2b04      	cmp	r3, #4
 800287a:	d107      	bne.n	800288c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002884:	4313      	orrs	r3, r2
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4313      	orrs	r3, r2
 800288a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f023 0307 	bic.w	r3, r3, #7
 80028a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d117      	bne.n	80028e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	4313      	orrs	r3, r2
 80028be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00e      	beq.n	80028e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 fa19 	bl	8002d00 <DMA_CheckFifoParam>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2240      	movs	r2, #64	@ 0x40
 80028d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80028e2:	2301      	movs	r3, #1
 80028e4:	e016      	b.n	8002914 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f9d0 	bl	8002c94 <DMA_CalcBaseAndBitshift>
 80028f4:	4603      	mov	r3, r0
 80028f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028fc:	223f      	movs	r2, #63	@ 0x3f
 80028fe:	409a      	lsls	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	e010803f 	.word	0xe010803f

08002920 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d004      	beq.n	800293e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2280      	movs	r2, #128	@ 0x80
 8002938:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e00c      	b.n	8002958 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2205      	movs	r2, #5
 8002942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0201 	bic.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002970:	4b8e      	ldr	r3, [pc, #568]	@ (8002bac <HAL_DMA_IRQHandler+0x248>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a8e      	ldr	r2, [pc, #568]	@ (8002bb0 <HAL_DMA_IRQHandler+0x24c>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	0a9b      	lsrs	r3, r3, #10
 800297c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002982:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298e:	2208      	movs	r2, #8
 8002990:	409a      	lsls	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4013      	ands	r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d01a      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d013      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0204 	bic.w	r2, r2, #4
 80029b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029bc:	2208      	movs	r2, #8
 80029be:	409a      	lsls	r2, r3
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c8:	f043 0201 	orr.w	r2, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d4:	2201      	movs	r2, #1
 80029d6:	409a      	lsls	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d012      	beq.n	8002a06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00b      	beq.n	8002a06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f2:	2201      	movs	r2, #1
 80029f4:	409a      	lsls	r2, r3
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029fe:	f043 0202 	orr.w	r2, r3, #2
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d012      	beq.n	8002a3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00b      	beq.n	8002a3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a28:	2204      	movs	r2, #4
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a34:	f043 0204 	orr.w	r2, r3, #4
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a40:	2210      	movs	r2, #16
 8002a42:	409a      	lsls	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d043      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d03c      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5e:	2210      	movs	r2, #16
 8002a60:	409a      	lsls	r2, r3
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d018      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d108      	bne.n	8002a94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d024      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
 8002a92:	e01f      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01b      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	4798      	blx	r3
 8002aa4:	e016      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d107      	bne.n	8002ac4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0208 	bic.w	r2, r2, #8
 8002ac2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad8:	2220      	movs	r2, #32
 8002ada:	409a      	lsls	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 808f 	beq.w	8002c04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 8087 	beq.w	8002c04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afa:	2220      	movs	r2, #32
 8002afc:	409a      	lsls	r2, r3
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b05      	cmp	r3, #5
 8002b0c:	d136      	bne.n	8002b7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0216 	bic.w	r2, r2, #22
 8002b1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695a      	ldr	r2, [r3, #20]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d103      	bne.n	8002b3e <HAL_DMA_IRQHandler+0x1da>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d007      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0208 	bic.w	r2, r2, #8
 8002b4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b52:	223f      	movs	r2, #63	@ 0x3f
 8002b54:	409a      	lsls	r2, r3
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d07e      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	4798      	blx	r3
        }
        return;
 8002b7a:	e079      	b.n	8002c70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d01d      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10d      	bne.n	8002bb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d031      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	4798      	blx	r3
 8002ba8:	e02c      	b.n	8002c04 <HAL_DMA_IRQHandler+0x2a0>
 8002baa:	bf00      	nop
 8002bac:	20000004 	.word	0x20000004
 8002bb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d023      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	4798      	blx	r3
 8002bc4:	e01e      	b.n	8002c04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10f      	bne.n	8002bf4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0210 	bic.w	r2, r2, #16
 8002be2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d032      	beq.n	8002c72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d022      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2205      	movs	r2, #5
 8002c1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0201 	bic.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	3301      	adds	r3, #1
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d307      	bcc.n	8002c4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f2      	bne.n	8002c30 <HAL_DMA_IRQHandler+0x2cc>
 8002c4a:	e000      	b.n	8002c4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d005      	beq.n	8002c72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	4798      	blx	r3
 8002c6e:	e000      	b.n	8002c72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c70:	bf00      	nop
    }
  }
}
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c86:	b2db      	uxtb	r3, r3
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	3b10      	subs	r3, #16
 8002ca4:	4a13      	ldr	r2, [pc, #76]	@ (8002cf4 <DMA_CalcBaseAndBitshift+0x60>)
 8002ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8002caa:	091b      	lsrs	r3, r3, #4
 8002cac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cae:	4a12      	ldr	r2, [pc, #72]	@ (8002cf8 <DMA_CalcBaseAndBitshift+0x64>)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b03      	cmp	r3, #3
 8002cc0:	d908      	bls.n	8002cd4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002cfc <DMA_CalcBaseAndBitshift+0x68>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	1d1a      	adds	r2, r3, #4
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cd2:	e006      	b.n	8002ce2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b08      	ldr	r3, [pc, #32]	@ (8002cfc <DMA_CalcBaseAndBitshift+0x68>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	aaaaaaab 	.word	0xaaaaaaab
 8002cf8:	0800710c 	.word	0x0800710c
 8002cfc:	fffffc00 	.word	0xfffffc00

08002d00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d11f      	bne.n	8002d5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	d856      	bhi.n	8002dce <DMA_CheckFifoParam+0xce>
 8002d20:	a201      	add	r2, pc, #4	@ (adr r2, 8002d28 <DMA_CheckFifoParam+0x28>)
 8002d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d26:	bf00      	nop
 8002d28:	08002d39 	.word	0x08002d39
 8002d2c:	08002d4b 	.word	0x08002d4b
 8002d30:	08002d39 	.word	0x08002d39
 8002d34:	08002dcf 	.word	0x08002dcf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d046      	beq.n	8002dd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d48:	e043      	b.n	8002dd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d52:	d140      	bne.n	8002dd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d58:	e03d      	b.n	8002dd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d62:	d121      	bne.n	8002da8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d837      	bhi.n	8002dda <DMA_CheckFifoParam+0xda>
 8002d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d70 <DMA_CheckFifoParam+0x70>)
 8002d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d70:	08002d81 	.word	0x08002d81
 8002d74:	08002d87 	.word	0x08002d87
 8002d78:	08002d81 	.word	0x08002d81
 8002d7c:	08002d99 	.word	0x08002d99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
      break;
 8002d84:	e030      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d025      	beq.n	8002dde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d96:	e022      	b.n	8002dde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002da0:	d11f      	bne.n	8002de2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002da6:	e01c      	b.n	8002de2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d903      	bls.n	8002db6 <DMA_CheckFifoParam+0xb6>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d003      	beq.n	8002dbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002db4:	e018      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]
      break;
 8002dba:	e015      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00e      	beq.n	8002de6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	73fb      	strb	r3, [r7, #15]
      break;
 8002dcc:	e00b      	b.n	8002de6 <DMA_CheckFifoParam+0xe6>
      break;
 8002dce:	bf00      	nop
 8002dd0:	e00a      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dd2:	bf00      	nop
 8002dd4:	e008      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dd6:	bf00      	nop
 8002dd8:	e006      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dda:	bf00      	nop
 8002ddc:	e004      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dde:	bf00      	nop
 8002de0:	e002      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002de2:	bf00      	nop
 8002de4:	e000      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
      break;
 8002de6:	bf00      	nop
    }
  } 
  
  return status; 
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop

08002df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b089      	sub	sp, #36	@ 0x24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
 8002e16:	e169      	b.n	80030ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e18:	2201      	movs	r2, #1
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	f040 8158 	bne.w	80030e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d005      	beq.n	8002e4e <HAL_GPIO_Init+0x56>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d130      	bne.n	8002eb0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	2203      	movs	r2, #3
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4013      	ands	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e84:	2201      	movs	r2, #1
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	f003 0201 	and.w	r2, r3, #1
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d017      	beq.n	8002eec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d123      	bne.n	8002f40 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	08da      	lsrs	r2, r3, #3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3208      	adds	r2, #8
 8002f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	220f      	movs	r2, #15
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	691a      	ldr	r2, [r3, #16]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	08da      	lsrs	r2, r3, #3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3208      	adds	r2, #8
 8002f3a:	69b9      	ldr	r1, [r7, #24]
 8002f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0203 	and.w	r2, r3, #3
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 80b2 	beq.w	80030e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f82:	4b60      	ldr	r3, [pc, #384]	@ (8003104 <HAL_GPIO_Init+0x30c>)
 8002f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f86:	4a5f      	ldr	r2, [pc, #380]	@ (8003104 <HAL_GPIO_Init+0x30c>)
 8002f88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f8e:	4b5d      	ldr	r3, [pc, #372]	@ (8003104 <HAL_GPIO_Init+0x30c>)
 8002f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f9a:	4a5b      	ldr	r2, [pc, #364]	@ (8003108 <HAL_GPIO_Init+0x310>)
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	089b      	lsrs	r3, r3, #2
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	220f      	movs	r2, #15
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a52      	ldr	r2, [pc, #328]	@ (800310c <HAL_GPIO_Init+0x314>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d02b      	beq.n	800301e <HAL_GPIO_Init+0x226>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a51      	ldr	r2, [pc, #324]	@ (8003110 <HAL_GPIO_Init+0x318>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d025      	beq.n	800301a <HAL_GPIO_Init+0x222>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a50      	ldr	r2, [pc, #320]	@ (8003114 <HAL_GPIO_Init+0x31c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d01f      	beq.n	8003016 <HAL_GPIO_Init+0x21e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a4f      	ldr	r2, [pc, #316]	@ (8003118 <HAL_GPIO_Init+0x320>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d019      	beq.n	8003012 <HAL_GPIO_Init+0x21a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a4e      	ldr	r2, [pc, #312]	@ (800311c <HAL_GPIO_Init+0x324>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d013      	beq.n	800300e <HAL_GPIO_Init+0x216>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a4d      	ldr	r2, [pc, #308]	@ (8003120 <HAL_GPIO_Init+0x328>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00d      	beq.n	800300a <HAL_GPIO_Init+0x212>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a4c      	ldr	r2, [pc, #304]	@ (8003124 <HAL_GPIO_Init+0x32c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d007      	beq.n	8003006 <HAL_GPIO_Init+0x20e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a4b      	ldr	r2, [pc, #300]	@ (8003128 <HAL_GPIO_Init+0x330>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d101      	bne.n	8003002 <HAL_GPIO_Init+0x20a>
 8002ffe:	2307      	movs	r3, #7
 8003000:	e00e      	b.n	8003020 <HAL_GPIO_Init+0x228>
 8003002:	2308      	movs	r3, #8
 8003004:	e00c      	b.n	8003020 <HAL_GPIO_Init+0x228>
 8003006:	2306      	movs	r3, #6
 8003008:	e00a      	b.n	8003020 <HAL_GPIO_Init+0x228>
 800300a:	2305      	movs	r3, #5
 800300c:	e008      	b.n	8003020 <HAL_GPIO_Init+0x228>
 800300e:	2304      	movs	r3, #4
 8003010:	e006      	b.n	8003020 <HAL_GPIO_Init+0x228>
 8003012:	2303      	movs	r3, #3
 8003014:	e004      	b.n	8003020 <HAL_GPIO_Init+0x228>
 8003016:	2302      	movs	r3, #2
 8003018:	e002      	b.n	8003020 <HAL_GPIO_Init+0x228>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <HAL_GPIO_Init+0x228>
 800301e:	2300      	movs	r3, #0
 8003020:	69fa      	ldr	r2, [r7, #28]
 8003022:	f002 0203 	and.w	r2, r2, #3
 8003026:	0092      	lsls	r2, r2, #2
 8003028:	4093      	lsls	r3, r2
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4313      	orrs	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003030:	4935      	ldr	r1, [pc, #212]	@ (8003108 <HAL_GPIO_Init+0x310>)
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	089b      	lsrs	r3, r3, #2
 8003036:	3302      	adds	r3, #2
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800303e:	4b3b      	ldr	r3, [pc, #236]	@ (800312c <HAL_GPIO_Init+0x334>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	43db      	mvns	r3, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4013      	ands	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003062:	4a32      	ldr	r2, [pc, #200]	@ (800312c <HAL_GPIO_Init+0x334>)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003068:	4b30      	ldr	r3, [pc, #192]	@ (800312c <HAL_GPIO_Init+0x334>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800308c:	4a27      	ldr	r2, [pc, #156]	@ (800312c <HAL_GPIO_Init+0x334>)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003092:	4b26      	ldr	r3, [pc, #152]	@ (800312c <HAL_GPIO_Init+0x334>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	43db      	mvns	r3, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4013      	ands	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030b6:	4a1d      	ldr	r2, [pc, #116]	@ (800312c <HAL_GPIO_Init+0x334>)
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030bc:	4b1b      	ldr	r3, [pc, #108]	@ (800312c <HAL_GPIO_Init+0x334>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030e0:	4a12      	ldr	r2, [pc, #72]	@ (800312c <HAL_GPIO_Init+0x334>)
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3301      	adds	r3, #1
 80030ea:	61fb      	str	r3, [r7, #28]
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	2b0f      	cmp	r3, #15
 80030f0:	f67f ae92 	bls.w	8002e18 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80030f4:	bf00      	nop
 80030f6:	bf00      	nop
 80030f8:	3724      	adds	r7, #36	@ 0x24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800
 8003108:	40013800 	.word	0x40013800
 800310c:	40020000 	.word	0x40020000
 8003110:	40020400 	.word	0x40020400
 8003114:	40020800 	.word	0x40020800
 8003118:	40020c00 	.word	0x40020c00
 800311c:	40021000 	.word	0x40021000
 8003120:	40021400 	.word	0x40021400
 8003124:	40021800 	.word	0x40021800
 8003128:	40021c00 	.word	0x40021c00
 800312c:	40013c00 	.word	0x40013c00

08003130 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	887b      	ldrh	r3, [r7, #2]
 8003142:	4013      	ands	r3, r2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003148:	2301      	movs	r3, #1
 800314a:	73fb      	strb	r3, [r7, #15]
 800314c:	e001      	b.n	8003152 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800314e:	2300      	movs	r3, #0
 8003150:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003152:	7bfb      	ldrb	r3, [r7, #15]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]
 800316c:	4613      	mov	r3, r2
 800316e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003170:	787b      	ldrb	r3, [r7, #1]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003176:	887a      	ldrh	r2, [r7, #2]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800317c:	e003      	b.n	8003186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800317e:	887b      	ldrh	r3, [r7, #2]
 8003180:	041a      	lsls	r2, r3, #16
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	619a      	str	r2, [r3, #24]
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003192:	b480      	push	{r7}
 8003194:	b085      	sub	sp, #20
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	460b      	mov	r3, r1
 800319c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031a4:	887a      	ldrh	r2, [r7, #2]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4013      	ands	r3, r2
 80031aa:	041a      	lsls	r2, r3, #16
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	43d9      	mvns	r1, r3
 80031b0:	887b      	ldrh	r3, [r7, #2]
 80031b2:	400b      	ands	r3, r1
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	619a      	str	r2, [r3, #24]
}
 80031ba:	bf00      	nop
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e08b      	b.n	80032f2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7fe f9fc 	bl	80015ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2224      	movs	r2, #36	@ 0x24
 80031f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0201 	bic.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003218:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003228:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d107      	bne.n	8003242 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	e006      	b.n	8003250 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800324e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d108      	bne.n	800326a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003266:	605a      	str	r2, [r3, #4]
 8003268:	e007      	b.n	800327a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003278:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6859      	ldr	r1, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4b1d      	ldr	r3, [pc, #116]	@ (80032fc <HAL_I2C_Init+0x134>)
 8003286:	430b      	orrs	r3, r1
 8003288:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003298:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691a      	ldr	r2, [r3, #16]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69d9      	ldr	r1, [r3, #28]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1a      	ldr	r2, [r3, #32]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	02008000 	.word	0x02008000

08003300 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	68f9      	ldr	r1, [r7, #12]
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4798      	blx	r3
  }
}
 800332c:	bf00      	nop
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00f      	beq.n	8003376 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003364:	f043 0201 	orr.w	r2, r3, #1
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003374:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00f      	beq.n	80033a0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338e:	f043 0208 	orr.w	r2, r3, #8
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800339e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00f      	beq.n	80033ca <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b8:	f043 0202 	orr.w	r2, r3, #2
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033c8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 030b 	and.w	r3, r3, #11
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80033da:	68f9      	ldr	r1, [r7, #12]
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 fbd5 	bl	8003b8c <I2C_ITError>
  }
}
 80033e2:	bf00      	nop
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	460b      	mov	r3, r1
 800341c:	70fb      	strb	r3, [r7, #3]
 800341e:	4613      	mov	r3, r2
 8003420:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b086      	sub	sp, #24
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003486:	2b01      	cmp	r3, #1
 8003488:	d101      	bne.n	800348e <I2C_Slave_ISR_IT+0x24>
 800348a:	2302      	movs	r3, #2
 800348c:	e0e2      	b.n	8003654 <I2C_Slave_ISR_IT+0x1ea>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f003 0320 	and.w	r3, r3, #32
 800349c:	2b00      	cmp	r3, #0
 800349e:	d009      	beq.n	80034b4 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d004      	beq.n	80034b4 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80034aa:	6939      	ldr	r1, [r7, #16]
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f9b5 	bl	800381c <I2C_ITSlaveCplt>
 80034b2:	e0ca      	b.n	800364a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f003 0310 	and.w	r3, r3, #16
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d04b      	beq.n	8003556 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d046      	beq.n	8003556 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d128      	bne.n	8003524 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b28      	cmp	r3, #40	@ 0x28
 80034dc:	d108      	bne.n	80034f0 <I2C_Slave_ISR_IT+0x86>
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034e4:	d104      	bne.n	80034f0 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80034e6:	6939      	ldr	r1, [r7, #16]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 fafb 	bl	8003ae4 <I2C_ITListenCplt>
 80034ee:	e031      	b.n	8003554 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b29      	cmp	r3, #41	@ 0x29
 80034fa:	d10e      	bne.n	800351a <I2C_Slave_ISR_IT+0xb0>
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003502:	d00a      	beq.n	800351a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2210      	movs	r2, #16
 800350a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 fc54 	bl	8003dba <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f926 	bl	8003764 <I2C_ITSlaveSeqCplt>
 8003518:	e01c      	b.n	8003554 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2210      	movs	r2, #16
 8003520:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003522:	e08f      	b.n	8003644 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2210      	movs	r2, #16
 800352a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003530:	f043 0204 	orr.w	r2, r3, #4
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <I2C_Slave_ISR_IT+0xdc>
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003544:	d17e      	bne.n	8003644 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354a:	4619      	mov	r1, r3
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 fb1d 	bl	8003b8c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003552:	e077      	b.n	8003644 <I2C_Slave_ISR_IT+0x1da>
 8003554:	e076      	b.n	8003644 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d02f      	beq.n	80035c0 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003566:	2b00      	cmp	r3, #0
 8003568:	d02a      	beq.n	80035c0 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d018      	beq.n	80035a6 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359c:	b29b      	uxth	r3, r3
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d14b      	bne.n	8003648 <I2C_Slave_ISR_IT+0x1de>
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035b6:	d047      	beq.n	8003648 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 f8d3 	bl	8003764 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80035be:	e043      	b.n	8003648 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d009      	beq.n	80035de <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d004      	beq.n	80035de <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80035d4:	6939      	ldr	r1, [r7, #16]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f840 	bl	800365c <I2C_ITAddrCplt>
 80035dc:	e035      	b.n	800364a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d030      	beq.n	800364a <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d02b      	beq.n	800364a <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d018      	beq.n	800362e <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003600:	781a      	ldrb	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800362c:	e00d      	b.n	800364a <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003634:	d002      	beq.n	800363c <I2C_Slave_ISR_IT+0x1d2>
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d106      	bne.n	800364a <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f891 	bl	8003764 <I2C_ITSlaveSeqCplt>
 8003642:	e002      	b.n	800364a <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003644:	bf00      	nop
 8003646:	e000      	b.n	800364a <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8003648:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003672:	2b28      	cmp	r3, #40	@ 0x28
 8003674:	d16a      	bne.n	800374c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	0c1b      	lsrs	r3, r3, #16
 800367e:	b2db      	uxtb	r3, r3
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	0c1b      	lsrs	r3, r3, #16
 800368e:	b29b      	uxth	r3, r3
 8003690:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003694:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	b29b      	uxth	r3, r3
 800369e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036a2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80036b0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d138      	bne.n	800372c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80036ba:	897b      	ldrh	r3, [r7, #10]
 80036bc:	09db      	lsrs	r3, r3, #7
 80036be:	b29a      	uxth	r2, r3
 80036c0:	89bb      	ldrh	r3, [r7, #12]
 80036c2:	4053      	eors	r3, r2
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	f003 0306 	and.w	r3, r3, #6
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d11c      	bne.n	8003708 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80036ce:	897b      	ldrh	r3, [r7, #10]
 80036d0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d13b      	bne.n	800375c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2208      	movs	r2, #8
 80036f0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80036fa:	89ba      	ldrh	r2, [r7, #12]
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	4619      	mov	r1, r3
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff fe86 	bl	8003412 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003706:	e029      	b.n	800375c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003708:	893b      	ldrh	r3, [r7, #8]
 800370a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800370c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fb94 	bl	8003e3e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800371e:	89ba      	ldrh	r2, [r7, #12]
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	4619      	mov	r1, r3
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff fe74 	bl	8003412 <HAL_I2C_AddrCallback>
}
 800372a:	e017      	b.n	800375c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800372c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fb84 	bl	8003e3e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800373e:	89ba      	ldrh	r2, [r7, #12]
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	4619      	mov	r1, r3
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff fe64 	bl	8003412 <HAL_I2C_AddrCallback>
}
 800374a:	e007      	b.n	800375c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2208      	movs	r2, #8
 8003752:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800375c:	bf00      	nop
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	e00c      	b.n	80037b2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d007      	beq.n	80037b2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037b0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b29      	cmp	r3, #41	@ 0x29
 80037bc:	d112      	bne.n	80037e4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2228      	movs	r2, #40	@ 0x28
 80037c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2221      	movs	r2, #33	@ 0x21
 80037ca:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80037cc:	2101      	movs	r1, #1
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fb35 	bl	8003e3e <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff fe04 	bl	80033ea <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80037e2:	e017      	b.n	8003814 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80037ee:	d111      	bne.n	8003814 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2228      	movs	r2, #40	@ 0x28
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2222      	movs	r2, #34	@ 0x22
 80037fc:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80037fe:	2102      	movs	r1, #2
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fb1c 	bl	8003e3e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff fdf5 	bl	80033fe <HAL_I2C_SlaveRxCpltCallback>
}
 8003814:	bf00      	nop
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003836:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800383e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2220      	movs	r2, #32
 8003846:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003848:	7afb      	ldrb	r3, [r7, #11]
 800384a:	2b21      	cmp	r3, #33	@ 0x21
 800384c:	d002      	beq.n	8003854 <I2C_ITSlaveCplt+0x38>
 800384e:	7afb      	ldrb	r3, [r7, #11]
 8003850:	2b29      	cmp	r3, #41	@ 0x29
 8003852:	d108      	bne.n	8003866 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003854:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 faf0 	bl	8003e3e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2221      	movs	r2, #33	@ 0x21
 8003862:	631a      	str	r2, [r3, #48]	@ 0x30
 8003864:	e019      	b.n	800389a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003866:	7afb      	ldrb	r3, [r7, #11]
 8003868:	2b22      	cmp	r3, #34	@ 0x22
 800386a:	d002      	beq.n	8003872 <I2C_ITSlaveCplt+0x56>
 800386c:	7afb      	ldrb	r3, [r7, #11]
 800386e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003870:	d108      	bne.n	8003884 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003872:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fae1 	bl	8003e3e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2222      	movs	r2, #34	@ 0x22
 8003880:	631a      	str	r2, [r3, #48]	@ 0x30
 8003882:	e00a      	b.n	800389a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003884:	7afb      	ldrb	r3, [r7, #11]
 8003886:	2b28      	cmp	r3, #40	@ 0x28
 8003888:	d107      	bne.n	800389a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800388a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fad5 	bl	8003e3e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038a8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6859      	ldr	r1, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	4b89      	ldr	r3, [pc, #548]	@ (8003adc <I2C_ITSlaveCplt+0x2c0>)
 80038b6:	400b      	ands	r3, r1
 80038b8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fa7d 	bl	8003dba <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d013      	beq.n	80038f2 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80038d8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d01f      	beq.n	8003922 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038f0:	e017      	b.n	8003922 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d012      	beq.n	8003922 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800390a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003910:	2b00      	cmp	r3, #0
 8003912:	d006      	beq.n	8003922 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	b29a      	uxth	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	d020      	beq.n	800396e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f023 0304 	bic.w	r3, r3, #4
 8003932:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00c      	beq.n	800396e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397c:	f043 0204 	orr.w	r2, r3, #4
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	2b00      	cmp	r3, #0
 800398c:	d049      	beq.n	8003a22 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003994:	2b00      	cmp	r3, #0
 8003996:	d044      	beq.n	8003a22 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d128      	bne.n	80039f4 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b28      	cmp	r3, #40	@ 0x28
 80039ac:	d108      	bne.n	80039c0 <I2C_ITSlaveCplt+0x1a4>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039b4:	d104      	bne.n	80039c0 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80039b6:	6979      	ldr	r1, [r7, #20]
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f893 	bl	8003ae4 <I2C_ITListenCplt>
 80039be:	e030      	b.n	8003a22 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b29      	cmp	r3, #41	@ 0x29
 80039ca:	d10e      	bne.n	80039ea <I2C_ITSlaveCplt+0x1ce>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039d2:	d00a      	beq.n	80039ea <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2210      	movs	r2, #16
 80039da:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f9ec 	bl	8003dba <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff febe 	bl	8003764 <I2C_ITSlaveSeqCplt>
 80039e8:	e01b      	b.n	8003a22 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2210      	movs	r2, #16
 80039f0:	61da      	str	r2, [r3, #28]
 80039f2:	e016      	b.n	8003a22 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2210      	movs	r2, #16
 80039fa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a00:	f043 0204 	orr.w	r2, r3, #4
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <I2C_ITSlaveCplt+0x1fa>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a14:	d105      	bne.n	8003a22 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f8b5 	bl	8003b8c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d010      	beq.n	8003a5a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f8a4 	bl	8003b8c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b28      	cmp	r3, #40	@ 0x28
 8003a4e:	d141      	bne.n	8003ad4 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003a50:	6979      	ldr	r1, [r7, #20]
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f846 	bl	8003ae4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a58:	e03c      	b.n	8003ad4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a62:	d014      	beq.n	8003a8e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff fe7d 	bl	8003764 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ae0 <I2C_ITSlaveCplt+0x2c4>)
 8003a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff fcd1 	bl	800342e <HAL_I2C_ListenCpltCallback>
}
 8003a8c:	e022      	b.n	8003ad4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b22      	cmp	r3, #34	@ 0x22
 8003a98:	d10e      	bne.n	8003ab8 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff fca4 	bl	80033fe <HAL_I2C_SlaveRxCpltCallback>
}
 8003ab6:	e00d      	b.n	8003ad4 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff fc8b 	bl	80033ea <HAL_I2C_SlaveTxCpltCallback>
}
 8003ad4:	bf00      	nop
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	fe00e800 	.word	0xfe00e800
 8003ae0:	ffff0000 	.word	0xffff0000

08003ae4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a25      	ldr	r2, [pc, #148]	@ (8003b88 <I2C_ITListenCplt+0xa4>)
 8003af2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2220      	movs	r2, #32
 8003afe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d022      	beq.n	8003b60 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d012      	beq.n	8003b60 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b58:	f043 0204 	orr.w	r2, r3, #4
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b60:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f96a 	bl	8003e3e <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2210      	movs	r2, #16
 8003b70:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7ff fc57 	bl	800342e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	ffff0000 	.word	0xffff0000

08003b8c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b9c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a6d      	ldr	r2, [pc, #436]	@ (8003d60 <I2C_ITError+0x1d4>)
 8003baa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	2b28      	cmp	r3, #40	@ 0x28
 8003bc2:	d005      	beq.n	8003bd0 <I2C_ITError+0x44>
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	2b29      	cmp	r3, #41	@ 0x29
 8003bc8:	d002      	beq.n	8003bd0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
 8003bcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bce:	d10b      	bne.n	8003be8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003bd0:	2103      	movs	r1, #3
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f933 	bl	8003e3e <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2228      	movs	r2, #40	@ 0x28
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a60      	ldr	r2, [pc, #384]	@ (8003d64 <I2C_ITError+0x1d8>)
 8003be4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003be6:	e030      	b.n	8003c4a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003be8:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f926 	bl	8003e3e <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f8e1 	bl	8003dba <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b60      	cmp	r3, #96	@ 0x60
 8003c02:	d01f      	beq.n	8003c44 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	d114      	bne.n	8003c44 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	2b10      	cmp	r3, #16
 8003c26:	d109      	bne.n	8003c3c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2210      	movs	r2, #16
 8003c2e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c34:	f043 0204 	orr.w	r2, r3, #4
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2220      	movs	r2, #32
 8003c42:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d039      	beq.n	8003ccc <I2C_ITError+0x140>
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b11      	cmp	r3, #17
 8003c5c:	d002      	beq.n	8003c64 <I2C_ITError+0xd8>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b21      	cmp	r3, #33	@ 0x21
 8003c62:	d133      	bne.n	8003ccc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c72:	d107      	bne.n	8003c84 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c82:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fe fff5 	bl	8002c78 <HAL_DMA_GetState>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d017      	beq.n	8003cc4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c98:	4a33      	ldr	r2, [pc, #204]	@ (8003d68 <I2C_ITError+0x1dc>)
 8003c9a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fe fe39 	bl	8002920 <HAL_DMA_Abort_IT>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d04d      	beq.n	8003d50 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003cc2:	e045      	b.n	8003d50 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f851 	bl	8003d6c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003cca:	e041      	b.n	8003d50 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d039      	beq.n	8003d48 <I2C_ITError+0x1bc>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b12      	cmp	r3, #18
 8003cd8:	d002      	beq.n	8003ce0 <I2C_ITError+0x154>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b22      	cmp	r3, #34	@ 0x22
 8003cde:	d133      	bne.n	8003d48 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cee:	d107      	bne.n	8003d00 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cfe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fe ffb7 	bl	8002c78 <HAL_DMA_GetState>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d017      	beq.n	8003d40 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d14:	4a14      	ldr	r2, [pc, #80]	@ (8003d68 <I2C_ITError+0x1dc>)
 8003d16:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fe fdfb 	bl	8002920 <HAL_DMA_Abort_IT>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d011      	beq.n	8003d54 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d3e:	e009      	b.n	8003d54 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f813 	bl	8003d6c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d46:	e005      	b.n	8003d54 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f80f 	bl	8003d6c <I2C_TreatErrorCallback>
  }
}
 8003d4e:	e002      	b.n	8003d56 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d50:	bf00      	nop
 8003d52:	e000      	b.n	8003d56 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d54:	bf00      	nop
}
 8003d56:	bf00      	nop
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	ffff0000 	.word	0xffff0000
 8003d64:	0800346b 	.word	0x0800346b
 8003d68:	08003e03 	.word	0x08003e03

08003d6c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b60      	cmp	r3, #96	@ 0x60
 8003d7e:	d10e      	bne.n	8003d9e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff fb5d 	bl	8003456 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d9c:	e009      	b.n	8003db2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff fb48 	bl	8003442 <HAL_I2C_ErrorCallback>
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d103      	bne.n	8003dd8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d007      	beq.n	8003df6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699a      	ldr	r2, [r3, #24]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f042 0201 	orr.w	r2, r2, #1
 8003df4:	619a      	str	r2, [r3, #24]
  }
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b084      	sub	sp, #16
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f7ff ff9b 	bl	8003d6c <I2C_TreatErrorCallback>
}
 8003e36:	bf00      	nop
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b085      	sub	sp, #20
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	460b      	mov	r3, r1
 8003e48:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003e4e:	887b      	ldrh	r3, [r7, #2]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00f      	beq.n	8003e78 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003e5e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003e6c:	2b28      	cmp	r3, #40	@ 0x28
 8003e6e:	d003      	beq.n	8003e78 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003e76:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003e78:	887b      	ldrh	r3, [r7, #2]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00f      	beq.n	8003ea2 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003e88:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003e96:	2b28      	cmp	r3, #40	@ 0x28
 8003e98:	d003      	beq.n	8003ea2 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003ea0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003ea2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	da03      	bge.n	8003eb2 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003eb0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003eb2:	887b      	ldrh	r3, [r7, #2]
 8003eb4:	2b10      	cmp	r3, #16
 8003eb6:	d103      	bne.n	8003ec0 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003ebe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003ec0:	887b      	ldrh	r3, [r7, #2]
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	d103      	bne.n	8003ece <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f043 0320 	orr.w	r3, r3, #32
 8003ecc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003ece:	887b      	ldrh	r3, [r7, #2]
 8003ed0:	2b40      	cmp	r3, #64	@ 0x40
 8003ed2:	d103      	bne.n	8003edc <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003eda:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6819      	ldr	r1, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	43da      	mvns	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	400a      	ands	r2, r1
 8003eec:	601a      	str	r2, [r3, #0]
}
 8003eee:	bf00      	nop
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	d138      	bne.n	8003f82 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e032      	b.n	8003f84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2224      	movs	r2, #36	@ 0x24
 8003f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0201 	bic.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f4c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6819      	ldr	r1, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f042 0201 	orr.w	r2, r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	e000      	b.n	8003f84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f82:	2302      	movs	r3, #2
  }
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	d139      	bne.n	800401a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e033      	b.n	800401c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2224      	movs	r2, #36	@ 0x24
 8003fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0201 	bic.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003fe2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	021b      	lsls	r3, r3, #8
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0201 	orr.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2220      	movs	r2, #32
 800400a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	e000      	b.n	800401c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800401a:	2302      	movs	r3, #2
  }
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004030:	2300      	movs	r3, #0
 8004032:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e291      	b.n	8004562 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 8087 	beq.w	800415a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800404c:	4b96      	ldr	r3, [pc, #600]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 030c 	and.w	r3, r3, #12
 8004054:	2b04      	cmp	r3, #4
 8004056:	d00c      	beq.n	8004072 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004058:	4b93      	ldr	r3, [pc, #588]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f003 030c 	and.w	r3, r3, #12
 8004060:	2b08      	cmp	r3, #8
 8004062:	d112      	bne.n	800408a <HAL_RCC_OscConfig+0x62>
 8004064:	4b90      	ldr	r3, [pc, #576]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800406c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004070:	d10b      	bne.n	800408a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004072:	4b8d      	ldr	r3, [pc, #564]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d06c      	beq.n	8004158 <HAL_RCC_OscConfig+0x130>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d168      	bne.n	8004158 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e26b      	b.n	8004562 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004092:	d106      	bne.n	80040a2 <HAL_RCC_OscConfig+0x7a>
 8004094:	4b84      	ldr	r3, [pc, #528]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a83      	ldr	r2, [pc, #524]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 800409a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	e02e      	b.n	8004100 <HAL_RCC_OscConfig+0xd8>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10c      	bne.n	80040c4 <HAL_RCC_OscConfig+0x9c>
 80040aa:	4b7f      	ldr	r3, [pc, #508]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a7e      	ldr	r2, [pc, #504]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 80040b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	4b7c      	ldr	r3, [pc, #496]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a7b      	ldr	r2, [pc, #492]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 80040bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e01d      	b.n	8004100 <HAL_RCC_OscConfig+0xd8>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCC_OscConfig+0xc0>
 80040ce:	4b76      	ldr	r3, [pc, #472]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a75      	ldr	r2, [pc, #468]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 80040d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	4b73      	ldr	r3, [pc, #460]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a72      	ldr	r2, [pc, #456]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 80040e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	e00b      	b.n	8004100 <HAL_RCC_OscConfig+0xd8>
 80040e8:	4b6f      	ldr	r3, [pc, #444]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a6e      	ldr	r2, [pc, #440]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 80040ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	4b6c      	ldr	r3, [pc, #432]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a6b      	ldr	r2, [pc, #428]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 80040fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d013      	beq.n	8004130 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7fd fe36 	bl	8001d78 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004110:	f7fd fe32 	bl	8001d78 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b64      	cmp	r3, #100	@ 0x64
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e21f      	b.n	8004562 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004122:	4b61      	ldr	r3, [pc, #388]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0f0      	beq.n	8004110 <HAL_RCC_OscConfig+0xe8>
 800412e:	e014      	b.n	800415a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004130:	f7fd fe22 	bl	8001d78 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004138:	f7fd fe1e 	bl	8001d78 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b64      	cmp	r3, #100	@ 0x64
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e20b      	b.n	8004562 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800414a:	4b57      	ldr	r3, [pc, #348]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0x110>
 8004156:	e000      	b.n	800415a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d069      	beq.n	800423a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004166:	4b50      	ldr	r3, [pc, #320]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00b      	beq.n	800418a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004172:	4b4d      	ldr	r3, [pc, #308]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 030c 	and.w	r3, r3, #12
 800417a:	2b08      	cmp	r3, #8
 800417c:	d11c      	bne.n	80041b8 <HAL_RCC_OscConfig+0x190>
 800417e:	4b4a      	ldr	r3, [pc, #296]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d116      	bne.n	80041b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800418a:	4b47      	ldr	r3, [pc, #284]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d005      	beq.n	80041a2 <HAL_RCC_OscConfig+0x17a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d001      	beq.n	80041a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e1df      	b.n	8004562 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a2:	4b41      	ldr	r3, [pc, #260]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	493d      	ldr	r1, [pc, #244]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b6:	e040      	b.n	800423a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d023      	beq.n	8004208 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041c0:	4b39      	ldr	r3, [pc, #228]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a38      	ldr	r2, [pc, #224]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041cc:	f7fd fdd4 	bl	8001d78 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d4:	f7fd fdd0 	bl	8001d78 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e1bd      	b.n	8004562 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e6:	4b30      	ldr	r3, [pc, #192]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f2:	4b2d      	ldr	r3, [pc, #180]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4929      	ldr	r1, [pc, #164]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 8004202:	4313      	orrs	r3, r2
 8004204:	600b      	str	r3, [r1, #0]
 8004206:	e018      	b.n	800423a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004208:	4b27      	ldr	r3, [pc, #156]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a26      	ldr	r2, [pc, #152]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 800420e:	f023 0301 	bic.w	r3, r3, #1
 8004212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004214:	f7fd fdb0 	bl	8001d78 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800421c:	f7fd fdac 	bl	8001d78 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e199      	b.n	8004562 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800422e:	4b1e      	ldr	r3, [pc, #120]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d038      	beq.n	80042b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d019      	beq.n	8004282 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800424e:	4b16      	ldr	r3, [pc, #88]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 8004250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004252:	4a15      	ldr	r2, [pc, #84]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425a:	f7fd fd8d 	bl	8001d78 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004262:	f7fd fd89 	bl	8001d78 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e176      	b.n	8004562 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004274:	4b0c      	ldr	r3, [pc, #48]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 8004276:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0f0      	beq.n	8004262 <HAL_RCC_OscConfig+0x23a>
 8004280:	e01a      	b.n	80042b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004282:	4b09      	ldr	r3, [pc, #36]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 8004284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004286:	4a08      	ldr	r2, [pc, #32]	@ (80042a8 <HAL_RCC_OscConfig+0x280>)
 8004288:	f023 0301 	bic.w	r3, r3, #1
 800428c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428e:	f7fd fd73 	bl	8001d78 <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004294:	e00a      	b.n	80042ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004296:	f7fd fd6f 	bl	8001d78 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d903      	bls.n	80042ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e15c      	b.n	8004562 <HAL_RCC_OscConfig+0x53a>
 80042a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ac:	4b91      	ldr	r3, [pc, #580]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 80042ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1ee      	bne.n	8004296 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 80a4 	beq.w	800440e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042c6:	4b8b      	ldr	r3, [pc, #556]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 80042c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10d      	bne.n	80042ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d2:	4b88      	ldr	r3, [pc, #544]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 80042d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d6:	4a87      	ldr	r2, [pc, #540]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 80042d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80042de:	4b85      	ldr	r3, [pc, #532]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 80042e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042e6:	60bb      	str	r3, [r7, #8]
 80042e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ea:	2301      	movs	r3, #1
 80042ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042ee:	4b82      	ldr	r3, [pc, #520]	@ (80044f8 <HAL_RCC_OscConfig+0x4d0>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d118      	bne.n	800432c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80042fa:	4b7f      	ldr	r3, [pc, #508]	@ (80044f8 <HAL_RCC_OscConfig+0x4d0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a7e      	ldr	r2, [pc, #504]	@ (80044f8 <HAL_RCC_OscConfig+0x4d0>)
 8004300:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004306:	f7fd fd37 	bl	8001d78 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800430c:	e008      	b.n	8004320 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800430e:	f7fd fd33 	bl	8001d78 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b64      	cmp	r3, #100	@ 0x64
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e120      	b.n	8004562 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004320:	4b75      	ldr	r3, [pc, #468]	@ (80044f8 <HAL_RCC_OscConfig+0x4d0>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0f0      	beq.n	800430e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d106      	bne.n	8004342 <HAL_RCC_OscConfig+0x31a>
 8004334:	4b6f      	ldr	r3, [pc, #444]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 8004336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004338:	4a6e      	ldr	r2, [pc, #440]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004340:	e02d      	b.n	800439e <HAL_RCC_OscConfig+0x376>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10c      	bne.n	8004364 <HAL_RCC_OscConfig+0x33c>
 800434a:	4b6a      	ldr	r3, [pc, #424]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434e:	4a69      	ldr	r2, [pc, #420]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 8004350:	f023 0301 	bic.w	r3, r3, #1
 8004354:	6713      	str	r3, [r2, #112]	@ 0x70
 8004356:	4b67      	ldr	r3, [pc, #412]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 8004358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800435a:	4a66      	ldr	r2, [pc, #408]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 800435c:	f023 0304 	bic.w	r3, r3, #4
 8004360:	6713      	str	r3, [r2, #112]	@ 0x70
 8004362:	e01c      	b.n	800439e <HAL_RCC_OscConfig+0x376>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2b05      	cmp	r3, #5
 800436a:	d10c      	bne.n	8004386 <HAL_RCC_OscConfig+0x35e>
 800436c:	4b61      	ldr	r3, [pc, #388]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 800436e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004370:	4a60      	ldr	r2, [pc, #384]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 8004372:	f043 0304 	orr.w	r3, r3, #4
 8004376:	6713      	str	r3, [r2, #112]	@ 0x70
 8004378:	4b5e      	ldr	r3, [pc, #376]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 800437a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800437c:	4a5d      	ldr	r2, [pc, #372]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 800437e:	f043 0301 	orr.w	r3, r3, #1
 8004382:	6713      	str	r3, [r2, #112]	@ 0x70
 8004384:	e00b      	b.n	800439e <HAL_RCC_OscConfig+0x376>
 8004386:	4b5b      	ldr	r3, [pc, #364]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 8004388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438a:	4a5a      	ldr	r2, [pc, #360]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 800438c:	f023 0301 	bic.w	r3, r3, #1
 8004390:	6713      	str	r3, [r2, #112]	@ 0x70
 8004392:	4b58      	ldr	r3, [pc, #352]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004396:	4a57      	ldr	r2, [pc, #348]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 8004398:	f023 0304 	bic.w	r3, r3, #4
 800439c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d015      	beq.n	80043d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a6:	f7fd fce7 	bl	8001d78 <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ac:	e00a      	b.n	80043c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ae:	f7fd fce3 	bl	8001d78 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043bc:	4293      	cmp	r3, r2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e0ce      	b.n	8004562 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c4:	4b4b      	ldr	r3, [pc, #300]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 80043c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0ee      	beq.n	80043ae <HAL_RCC_OscConfig+0x386>
 80043d0:	e014      	b.n	80043fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d2:	f7fd fcd1 	bl	8001d78 <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043d8:	e00a      	b.n	80043f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043da:	f7fd fccd 	bl	8001d78 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e0b8      	b.n	8004562 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f0:	4b40      	ldr	r3, [pc, #256]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 80043f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1ee      	bne.n	80043da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043fc:	7dfb      	ldrb	r3, [r7, #23]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d105      	bne.n	800440e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004402:	4b3c      	ldr	r3, [pc, #240]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 8004404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004406:	4a3b      	ldr	r2, [pc, #236]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 8004408:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800440c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 80a4 	beq.w	8004560 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004418:	4b36      	ldr	r3, [pc, #216]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 030c 	and.w	r3, r3, #12
 8004420:	2b08      	cmp	r3, #8
 8004422:	d06b      	beq.n	80044fc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	2b02      	cmp	r3, #2
 800442a:	d149      	bne.n	80044c0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800442c:	4b31      	ldr	r3, [pc, #196]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a30      	ldr	r2, [pc, #192]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 8004432:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fd fc9e 	bl	8001d78 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004440:	f7fd fc9a 	bl	8001d78 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e087      	b.n	8004562 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004452:	4b28      	ldr	r3, [pc, #160]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69da      	ldr	r2, [r3, #28]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446c:	019b      	lsls	r3, r3, #6
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004474:	085b      	lsrs	r3, r3, #1
 8004476:	3b01      	subs	r3, #1
 8004478:	041b      	lsls	r3, r3, #16
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004480:	061b      	lsls	r3, r3, #24
 8004482:	4313      	orrs	r3, r2
 8004484:	4a1b      	ldr	r2, [pc, #108]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 8004486:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800448a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800448c:	4b19      	ldr	r3, [pc, #100]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a18      	ldr	r2, [pc, #96]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 8004492:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004498:	f7fd fc6e 	bl	8001d78 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a0:	f7fd fc6a 	bl	8001d78 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e057      	b.n	8004562 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b2:	4b10      	ldr	r3, [pc, #64]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCC_OscConfig+0x478>
 80044be:	e04f      	b.n	8004560 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c0:	4b0c      	ldr	r3, [pc, #48]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a0b      	ldr	r2, [pc, #44]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 80044c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044cc:	f7fd fc54 	bl	8001d78 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d4:	f7fd fc50 	bl	8001d78 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e03d      	b.n	8004562 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e6:	4b03      	ldr	r3, [pc, #12]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x4ac>
 80044f2:	e035      	b.n	8004560 <HAL_RCC_OscConfig+0x538>
 80044f4:	40023800 	.word	0x40023800
 80044f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80044fc:	4b1b      	ldr	r3, [pc, #108]	@ (800456c <HAL_RCC_OscConfig+0x544>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d028      	beq.n	800455c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004514:	429a      	cmp	r2, r3
 8004516:	d121      	bne.n	800455c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004522:	429a      	cmp	r2, r3
 8004524:	d11a      	bne.n	800455c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800452c:	4013      	ands	r3, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004532:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004534:	4293      	cmp	r3, r2
 8004536:	d111      	bne.n	800455c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	3b01      	subs	r3, #1
 8004546:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004548:	429a      	cmp	r2, r3
 800454a:	d107      	bne.n	800455c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004556:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004558:	429a      	cmp	r2, r3
 800455a:	d001      	beq.n	8004560 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40023800 	.word	0x40023800

08004570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e0d0      	b.n	800472a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004588:	4b6a      	ldr	r3, [pc, #424]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d910      	bls.n	80045b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004596:	4b67      	ldr	r3, [pc, #412]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f023 020f 	bic.w	r2, r3, #15
 800459e:	4965      	ldr	r1, [pc, #404]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a6:	4b63      	ldr	r3, [pc, #396]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d001      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e0b8      	b.n	800472a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d020      	beq.n	8004606 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045d0:	4b59      	ldr	r3, [pc, #356]	@ (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	4a58      	ldr	r2, [pc, #352]	@ (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 80045d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80045da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045e8:	4b53      	ldr	r3, [pc, #332]	@ (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	4a52      	ldr	r2, [pc, #328]	@ (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 80045ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80045f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045f4:	4b50      	ldr	r3, [pc, #320]	@ (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	494d      	ldr	r1, [pc, #308]	@ (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 8004602:	4313      	orrs	r3, r2
 8004604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d040      	beq.n	8004694 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d107      	bne.n	800462a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461a:	4b47      	ldr	r3, [pc, #284]	@ (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d115      	bne.n	8004652 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e07f      	b.n	800472a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d107      	bne.n	8004642 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004632:	4b41      	ldr	r3, [pc, #260]	@ (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d109      	bne.n	8004652 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e073      	b.n	800472a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004642:	4b3d      	ldr	r3, [pc, #244]	@ (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e06b      	b.n	800472a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004652:	4b39      	ldr	r3, [pc, #228]	@ (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f023 0203 	bic.w	r2, r3, #3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	4936      	ldr	r1, [pc, #216]	@ (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 8004660:	4313      	orrs	r3, r2
 8004662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004664:	f7fd fb88 	bl	8001d78 <HAL_GetTick>
 8004668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466a:	e00a      	b.n	8004682 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800466c:	f7fd fb84 	bl	8001d78 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800467a:	4293      	cmp	r3, r2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e053      	b.n	800472a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004682:	4b2d      	ldr	r3, [pc, #180]	@ (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 020c 	and.w	r2, r3, #12
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	429a      	cmp	r2, r3
 8004692:	d1eb      	bne.n	800466c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004694:	4b27      	ldr	r3, [pc, #156]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 030f 	and.w	r3, r3, #15
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d210      	bcs.n	80046c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a2:	4b24      	ldr	r3, [pc, #144]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f023 020f 	bic.w	r2, r3, #15
 80046aa:	4922      	ldr	r1, [pc, #136]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b2:	4b20      	ldr	r3, [pc, #128]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d001      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e032      	b.n	800472a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d008      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046d0:	4b19      	ldr	r3, [pc, #100]	@ (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4916      	ldr	r1, [pc, #88]	@ (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d009      	beq.n	8004702 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046ee:	4b12      	ldr	r3, [pc, #72]	@ (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	490e      	ldr	r1, [pc, #56]	@ (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004702:	f000 f821 	bl	8004748 <HAL_RCC_GetSysClockFreq>
 8004706:	4602      	mov	r2, r0
 8004708:	4b0b      	ldr	r3, [pc, #44]	@ (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	091b      	lsrs	r3, r3, #4
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	490a      	ldr	r1, [pc, #40]	@ (800473c <HAL_RCC_ClockConfig+0x1cc>)
 8004714:	5ccb      	ldrb	r3, [r1, r3]
 8004716:	fa22 f303 	lsr.w	r3, r2, r3
 800471a:	4a09      	ldr	r2, [pc, #36]	@ (8004740 <HAL_RCC_ClockConfig+0x1d0>)
 800471c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800471e:	4b09      	ldr	r3, [pc, #36]	@ (8004744 <HAL_RCC_ClockConfig+0x1d4>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f7fd fae4 	bl	8001cf0 <HAL_InitTick>

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40023c00 	.word	0x40023c00
 8004738:	40023800 	.word	0x40023800
 800473c:	080070f4 	.word	0x080070f4
 8004740:	20000004 	.word	0x20000004
 8004744:	20000008 	.word	0x20000008

08004748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800474c:	b090      	sub	sp, #64	@ 0x40
 800474e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004750:	2300      	movs	r3, #0
 8004752:	637b      	str	r3, [r7, #52]	@ 0x34
 8004754:	2300      	movs	r3, #0
 8004756:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004758:	2300      	movs	r3, #0
 800475a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004760:	4b59      	ldr	r3, [pc, #356]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 030c 	and.w	r3, r3, #12
 8004768:	2b08      	cmp	r3, #8
 800476a:	d00d      	beq.n	8004788 <HAL_RCC_GetSysClockFreq+0x40>
 800476c:	2b08      	cmp	r3, #8
 800476e:	f200 80a1 	bhi.w	80048b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <HAL_RCC_GetSysClockFreq+0x34>
 8004776:	2b04      	cmp	r3, #4
 8004778:	d003      	beq.n	8004782 <HAL_RCC_GetSysClockFreq+0x3a>
 800477a:	e09b      	b.n	80048b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800477c:	4b53      	ldr	r3, [pc, #332]	@ (80048cc <HAL_RCC_GetSysClockFreq+0x184>)
 800477e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004780:	e09b      	b.n	80048ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004782:	4b53      	ldr	r3, [pc, #332]	@ (80048d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004784:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004786:	e098      	b.n	80048ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004788:	4b4f      	ldr	r3, [pc, #316]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004790:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004792:	4b4d      	ldr	r3, [pc, #308]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d028      	beq.n	80047f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800479e:	4b4a      	ldr	r3, [pc, #296]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	099b      	lsrs	r3, r3, #6
 80047a4:	2200      	movs	r2, #0
 80047a6:	623b      	str	r3, [r7, #32]
 80047a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80047b0:	2100      	movs	r1, #0
 80047b2:	4b47      	ldr	r3, [pc, #284]	@ (80048d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80047b4:	fb03 f201 	mul.w	r2, r3, r1
 80047b8:	2300      	movs	r3, #0
 80047ba:	fb00 f303 	mul.w	r3, r0, r3
 80047be:	4413      	add	r3, r2
 80047c0:	4a43      	ldr	r2, [pc, #268]	@ (80048d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80047c2:	fba0 1202 	umull	r1, r2, r0, r2
 80047c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047c8:	460a      	mov	r2, r1
 80047ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80047cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047ce:	4413      	add	r3, r2
 80047d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d4:	2200      	movs	r2, #0
 80047d6:	61bb      	str	r3, [r7, #24]
 80047d8:	61fa      	str	r2, [r7, #28]
 80047da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80047e2:	f7fb fd85 	bl	80002f0 <__aeabi_uldivmod>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4613      	mov	r3, r2
 80047ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047ee:	e053      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047f0:	4b35      	ldr	r3, [pc, #212]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	099b      	lsrs	r3, r3, #6
 80047f6:	2200      	movs	r2, #0
 80047f8:	613b      	str	r3, [r7, #16]
 80047fa:	617a      	str	r2, [r7, #20]
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004802:	f04f 0b00 	mov.w	fp, #0
 8004806:	4652      	mov	r2, sl
 8004808:	465b      	mov	r3, fp
 800480a:	f04f 0000 	mov.w	r0, #0
 800480e:	f04f 0100 	mov.w	r1, #0
 8004812:	0159      	lsls	r1, r3, #5
 8004814:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004818:	0150      	lsls	r0, r2, #5
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	ebb2 080a 	subs.w	r8, r2, sl
 8004822:	eb63 090b 	sbc.w	r9, r3, fp
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004832:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004836:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800483a:	ebb2 0408 	subs.w	r4, r2, r8
 800483e:	eb63 0509 	sbc.w	r5, r3, r9
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	00eb      	lsls	r3, r5, #3
 800484c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004850:	00e2      	lsls	r2, r4, #3
 8004852:	4614      	mov	r4, r2
 8004854:	461d      	mov	r5, r3
 8004856:	eb14 030a 	adds.w	r3, r4, sl
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	eb45 030b 	adc.w	r3, r5, fp
 8004860:	607b      	str	r3, [r7, #4]
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800486e:	4629      	mov	r1, r5
 8004870:	028b      	lsls	r3, r1, #10
 8004872:	4621      	mov	r1, r4
 8004874:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004878:	4621      	mov	r1, r4
 800487a:	028a      	lsls	r2, r1, #10
 800487c:	4610      	mov	r0, r2
 800487e:	4619      	mov	r1, r3
 8004880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004882:	2200      	movs	r2, #0
 8004884:	60bb      	str	r3, [r7, #8]
 8004886:	60fa      	str	r2, [r7, #12]
 8004888:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800488c:	f7fb fd30 	bl	80002f0 <__aeabi_uldivmod>
 8004890:	4602      	mov	r2, r0
 8004892:	460b      	mov	r3, r1
 8004894:	4613      	mov	r3, r2
 8004896:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004898:	4b0b      	ldr	r3, [pc, #44]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	0c1b      	lsrs	r3, r3, #16
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	3301      	adds	r3, #1
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80048a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80048aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048b2:	e002      	b.n	80048ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048b4:	4b05      	ldr	r3, [pc, #20]	@ (80048cc <HAL_RCC_GetSysClockFreq+0x184>)
 80048b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3740      	adds	r7, #64	@ 0x40
 80048c0:	46bd      	mov	sp, r7
 80048c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800
 80048cc:	00f42400 	.word	0x00f42400
 80048d0:	017d7840 	.word	0x017d7840

080048d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048d8:	4b03      	ldr	r3, [pc, #12]	@ (80048e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048da:	681b      	ldr	r3, [r3, #0]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	20000004 	.word	0x20000004

080048ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048f0:	f7ff fff0 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4b05      	ldr	r3, [pc, #20]	@ (800490c <HAL_RCC_GetPCLK1Freq+0x20>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	0a9b      	lsrs	r3, r3, #10
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	4903      	ldr	r1, [pc, #12]	@ (8004910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004902:	5ccb      	ldrb	r3, [r1, r3]
 8004904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004908:	4618      	mov	r0, r3
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40023800 	.word	0x40023800
 8004910:	08007104 	.word	0x08007104

08004914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004918:	f7ff ffdc 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 800491c:	4602      	mov	r2, r0
 800491e:	4b05      	ldr	r3, [pc, #20]	@ (8004934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	0b5b      	lsrs	r3, r3, #13
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	4903      	ldr	r1, [pc, #12]	@ (8004938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800492a:	5ccb      	ldrb	r3, [r1, r3]
 800492c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004930:	4618      	mov	r0, r3
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40023800 	.word	0x40023800
 8004938:	08007104 	.word	0x08007104

0800493c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800494c:	2300      	movs	r3, #0
 800494e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004950:	2300      	movs	r3, #0
 8004952:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d012      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004960:	4b65      	ldr	r3, [pc, #404]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	4a64      	ldr	r2, [pc, #400]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004966:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800496a:	6093      	str	r3, [r2, #8]
 800496c:	4b62      	ldr	r3, [pc, #392]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004974:	4960      	ldr	r1, [pc, #384]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004976:	4313      	orrs	r3, r2
 8004978:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8004982:	2301      	movs	r3, #1
 8004984:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d017      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004992:	4b59      	ldr	r3, [pc, #356]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004994:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004998:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049a0:	4955      	ldr	r1, [pc, #340]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049b0:	d101      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80049b2:	2301      	movs	r3, #1
 80049b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80049be:	2301      	movs	r3, #1
 80049c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d017      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049ce:	4b4a      	ldr	r3, [pc, #296]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049d4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049dc:	4946      	ldr	r1, [pc, #280]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049ec:	d101      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80049ee:	2301      	movs	r3, #1
 80049f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80049fa:	2301      	movs	r3, #1
 80049fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 808b 	beq.w	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a10:	4a39      	ldr	r2, [pc, #228]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a16:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a18:	4b37      	ldr	r3, [pc, #220]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a24:	4b35      	ldr	r3, [pc, #212]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a34      	ldr	r2, [pc, #208]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a30:	f7fd f9a2 	bl	8001d78 <HAL_GetTick>
 8004a34:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a38:	f7fd f99e 	bl	8001d78 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b64      	cmp	r3, #100	@ 0x64
 8004a44:	d901      	bls.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e2bc      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0f0      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a56:	4b28      	ldr	r3, [pc, #160]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a5e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d035      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d02e      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a74:	4b20      	ldr	r3, [pc, #128]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a7c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a82:	4a1d      	ldr	r2, [pc, #116]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a88:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a94:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004a96:	4a18      	ldr	r2, [pc, #96]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a9c:	4b16      	ldr	r3, [pc, #88]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d114      	bne.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa8:	f7fd f966 	bl	8001d78 <HAL_GetTick>
 8004aac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aae:	e00a      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab0:	f7fd f962 	bl	8001d78 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e27e      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0ee      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ada:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ade:	d111      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8004ae0:	4b05      	ldr	r3, [pc, #20]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004aec:	4b04      	ldr	r3, [pc, #16]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004aee:	400b      	ands	r3, r1
 8004af0:	4901      	ldr	r1, [pc, #4]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	608b      	str	r3, [r1, #8]
 8004af6:	e00b      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004af8:	40023800 	.word	0x40023800
 8004afc:	40007000 	.word	0x40007000
 8004b00:	0ffffcff 	.word	0x0ffffcff
 8004b04:	4ba4      	ldr	r3, [pc, #656]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	4aa3      	ldr	r2, [pc, #652]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b0a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004b0e:	6093      	str	r3, [r2, #8]
 8004b10:	4ba1      	ldr	r3, [pc, #644]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b12:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b1c:	499e      	ldr	r1, [pc, #632]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0310 	and.w	r3, r3, #16
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d010      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b2e:	4b9a      	ldr	r3, [pc, #616]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b34:	4a98      	ldr	r2, [pc, #608]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004b3e:	4b96      	ldr	r3, [pc, #600]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b40:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b48:	4993      	ldr	r1, [pc, #588]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b5c:	4b8e      	ldr	r3, [pc, #568]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b62:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b6a:	498b      	ldr	r1, [pc, #556]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b7e:	4b86      	ldr	r3, [pc, #536]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b84:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b8c:	4982      	ldr	r1, [pc, #520]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ba0:	4b7d      	ldr	r3, [pc, #500]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ba6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bae:	497a      	ldr	r1, [pc, #488]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bc2:	4b75      	ldr	r3, [pc, #468]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bc8:	f023 0203 	bic.w	r2, r3, #3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd0:	4971      	ldr	r1, [pc, #452]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004be4:	4b6c      	ldr	r3, [pc, #432]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bea:	f023 020c 	bic.w	r2, r3, #12
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf2:	4969      	ldr	r1, [pc, #420]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c06:	4b64      	ldr	r3, [pc, #400]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c0c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c14:	4960      	ldr	r1, [pc, #384]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c28:	4b5b      	ldr	r3, [pc, #364]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c2e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c36:	4958      	ldr	r1, [pc, #352]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c4a:	4b53      	ldr	r3, [pc, #332]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c58:	494f      	ldr	r1, [pc, #316]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004c6c:	4b4a      	ldr	r3, [pc, #296]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c72:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c7a:	4947      	ldr	r1, [pc, #284]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004c8e:	4b42      	ldr	r3, [pc, #264]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c94:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c9c:	493e      	ldr	r1, [pc, #248]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004cb0:	4b39      	ldr	r3, [pc, #228]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cb6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cbe:	4936      	ldr	r1, [pc, #216]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d011      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004cd2:	4b31      	ldr	r3, [pc, #196]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ce0:	492d      	ldr	r1, [pc, #180]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cf0:	d101      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d02:	4b25      	ldr	r3, [pc, #148]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d08:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d10:	4921      	ldr	r1, [pc, #132]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00a      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d24:	4b1c      	ldr	r3, [pc, #112]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d32:	4919      	ldr	r1, [pc, #100]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004d46:	4b14      	ldr	r3, [pc, #80]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d4c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d54:	4910      	ldr	r1, [pc, #64]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d006      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 809d 	beq.w	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d70:	4b09      	ldr	r3, [pc, #36]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a08      	ldr	r2, [pc, #32]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d7c:	f7fc fffc 	bl	8001d78 <HAL_GetTick>
 8004d80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d82:	e00b      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d84:	f7fc fff8 	bl	8001d78 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b64      	cmp	r3, #100	@ 0x64
 8004d90:	d904      	bls.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e116      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004d96:	bf00      	nop
 8004d98:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d9c:	4b8b      	ldr	r3, [pc, #556]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1ed      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d017      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d113      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004dbc:	4b83      	ldr	r3, [pc, #524]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dc2:	0e1b      	lsrs	r3, r3, #24
 8004dc4:	f003 030f 	and.w	r3, r3, #15
 8004dc8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	019a      	lsls	r2, r3, #6
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	061b      	lsls	r3, r3, #24
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	071b      	lsls	r3, r3, #28
 8004ddc:	497b      	ldr	r1, [pc, #492]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d004      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004df4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004df8:	d00a      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d024      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e0e:	d11f      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e10:	4b6e      	ldr	r3, [pc, #440]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e16:	0f1b      	lsrs	r3, r3, #28
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	019a      	lsls	r2, r3, #6
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	061b      	lsls	r3, r3, #24
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	071b      	lsls	r3, r3, #28
 8004e30:	4966      	ldr	r1, [pc, #408]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e38:	4b64      	ldr	r3, [pc, #400]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e3e:	f023 021f 	bic.w	r2, r3, #31
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	4960      	ldr	r1, [pc, #384]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00d      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	019a      	lsls	r2, r3, #6
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	061b      	lsls	r3, r3, #24
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	071b      	lsls	r3, r3, #28
 8004e70:	4956      	ldr	r1, [pc, #344]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e78:	4b54      	ldr	r3, [pc, #336]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a53      	ldr	r2, [pc, #332]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004e7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e84:	f7fc ff78 	bl	8001d78 <HAL_GetTick>
 8004e88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e8c:	f7fc ff74 	bl	8001d78 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b64      	cmp	r3, #100	@ 0x64
 8004e98:	d901      	bls.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e092      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e9e:	4b4b      	ldr	r3, [pc, #300]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0f0      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	f040 8088 	bne.w	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004eb2:	4b46      	ldr	r3, [pc, #280]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a45      	ldr	r2, [pc, #276]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004eb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ebe:	f7fc ff5b 	bl	8001d78 <HAL_GetTick>
 8004ec2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ec6:	f7fc ff57 	bl	8001d78 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b64      	cmp	r3, #100	@ 0x64
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e075      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ed8:	4b3c      	ldr	r3, [pc, #240]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ee0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ee4:	d0ef      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d009      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d024      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d120      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f14:	0c1b      	lsrs	r3, r3, #16
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	019a      	lsls	r2, r3, #6
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	041b      	lsls	r3, r3, #16
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	061b      	lsls	r3, r3, #24
 8004f2e:	4927      	ldr	r1, [pc, #156]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f36:	4b25      	ldr	r3, [pc, #148]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f3c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	3b01      	subs	r3, #1
 8004f46:	021b      	lsls	r3, r3, #8
 8004f48:	4920      	ldr	r1, [pc, #128]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d018      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x652>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f64:	d113      	bne.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f66:	4b19      	ldr	r3, [pc, #100]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f6c:	0e1b      	lsrs	r3, r3, #24
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	019a      	lsls	r2, r3, #6
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	041b      	lsls	r3, r3, #16
 8004f80:	431a      	orrs	r2, r3
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	061b      	lsls	r3, r3, #24
 8004f86:	4911      	ldr	r1, [pc, #68]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a0e      	ldr	r2, [pc, #56]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004f94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f9a:	f7fc feed 	bl	8001d78 <HAL_GetTick>
 8004f9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fa2:	f7fc fee9 	bl	8001d78 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b64      	cmp	r3, #100	@ 0x64
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e007      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fb4:	4b05      	ldr	r3, [pc, #20]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fc0:	d1ef      	bne.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3720      	adds	r7, #32
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40023800 	.word	0x40023800

08004fd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e040      	b.n	8005064 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fc fbce 	bl	8001794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2224      	movs	r2, #36	@ 0x24
 8004ffc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0201 	bic.w	r2, r2, #1
 800500c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 fbde 	bl	80057d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f977 	bl	8005310 <UART_SetConfig>
 8005022:	4603      	mov	r3, r0
 8005024:	2b01      	cmp	r3, #1
 8005026:	d101      	bne.n	800502c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e01b      	b.n	8005064 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800503a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689a      	ldr	r2, [r3, #8]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800504a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0201 	orr.w	r2, r2, #1
 800505a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 fc5d 	bl	800591c <UART_CheckIdleState>
 8005062:	4603      	mov	r3, r0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08a      	sub	sp, #40	@ 0x28
 8005070:	af02      	add	r7, sp, #8
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	603b      	str	r3, [r7, #0]
 8005078:	4613      	mov	r3, r2
 800507a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005080:	2b20      	cmp	r3, #32
 8005082:	d177      	bne.n	8005174 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d002      	beq.n	8005090 <HAL_UART_Transmit+0x24>
 800508a:	88fb      	ldrh	r3, [r7, #6]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e070      	b.n	8005176 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2221      	movs	r2, #33	@ 0x21
 80050a0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050a2:	f7fc fe69 	bl	8001d78 <HAL_GetTick>
 80050a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	88fa      	ldrh	r2, [r7, #6]
 80050ac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	88fa      	ldrh	r2, [r7, #6]
 80050b4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050c0:	d108      	bne.n	80050d4 <HAL_UART_Transmit+0x68>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d104      	bne.n	80050d4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	61bb      	str	r3, [r7, #24]
 80050d2:	e003      	b.n	80050dc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050d8:	2300      	movs	r3, #0
 80050da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050dc:	e02f      	b.n	800513e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2200      	movs	r2, #0
 80050e6:	2180      	movs	r1, #128	@ 0x80
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 fc6e 	bl	80059ca <UART_WaitOnFlagUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d004      	beq.n	80050fe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2220      	movs	r2, #32
 80050f8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e03b      	b.n	8005176 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10b      	bne.n	800511c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005112:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	3302      	adds	r3, #2
 8005118:	61bb      	str	r3, [r7, #24]
 800511a:	e007      	b.n	800512c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	781a      	ldrb	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	3301      	adds	r3, #1
 800512a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005132:	b29b      	uxth	r3, r3
 8005134:	3b01      	subs	r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005144:	b29b      	uxth	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1c9      	bne.n	80050de <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2200      	movs	r2, #0
 8005152:	2140      	movs	r1, #64	@ 0x40
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 fc38 	bl	80059ca <UART_WaitOnFlagUntilTimeout>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d004      	beq.n	800516a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2220      	movs	r2, #32
 8005164:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e005      	b.n	8005176 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2220      	movs	r2, #32
 800516e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005170:	2300      	movs	r3, #0
 8005172:	e000      	b.n	8005176 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005174:	2302      	movs	r3, #2
  }
}
 8005176:	4618      	mov	r0, r3
 8005178:	3720      	adds	r7, #32
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b08a      	sub	sp, #40	@ 0x28
 8005182:	af02      	add	r7, sp, #8
 8005184:	60f8      	str	r0, [r7, #12]
 8005186:	60b9      	str	r1, [r7, #8]
 8005188:	603b      	str	r3, [r7, #0]
 800518a:	4613      	mov	r3, r2
 800518c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005194:	2b20      	cmp	r3, #32
 8005196:	f040 80b5 	bne.w	8005304 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <HAL_UART_Receive+0x28>
 80051a0:	88fb      	ldrh	r3, [r7, #6]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e0ad      	b.n	8005306 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2222      	movs	r2, #34	@ 0x22
 80051b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051c0:	f7fc fdda 	bl	8001d78 <HAL_GetTick>
 80051c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	88fa      	ldrh	r2, [r7, #6]
 80051ca:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	88fa      	ldrh	r2, [r7, #6]
 80051d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051de:	d10e      	bne.n	80051fe <HAL_UART_Receive+0x80>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d105      	bne.n	80051f4 <HAL_UART_Receive+0x76>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80051ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80051f2:	e02d      	b.n	8005250 <HAL_UART_Receive+0xd2>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	22ff      	movs	r2, #255	@ 0xff
 80051f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80051fc:	e028      	b.n	8005250 <HAL_UART_Receive+0xd2>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10d      	bne.n	8005222 <HAL_UART_Receive+0xa4>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d104      	bne.n	8005218 <HAL_UART_Receive+0x9a>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	22ff      	movs	r2, #255	@ 0xff
 8005212:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005216:	e01b      	b.n	8005250 <HAL_UART_Receive+0xd2>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	227f      	movs	r2, #127	@ 0x7f
 800521c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005220:	e016      	b.n	8005250 <HAL_UART_Receive+0xd2>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800522a:	d10d      	bne.n	8005248 <HAL_UART_Receive+0xca>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d104      	bne.n	800523e <HAL_UART_Receive+0xc0>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	227f      	movs	r2, #127	@ 0x7f
 8005238:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800523c:	e008      	b.n	8005250 <HAL_UART_Receive+0xd2>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	223f      	movs	r2, #63	@ 0x3f
 8005242:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005246:	e003      	b.n	8005250 <HAL_UART_Receive+0xd2>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005256:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005260:	d108      	bne.n	8005274 <HAL_UART_Receive+0xf6>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d104      	bne.n	8005274 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800526a:	2300      	movs	r3, #0
 800526c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	61bb      	str	r3, [r7, #24]
 8005272:	e003      	b.n	800527c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005278:	2300      	movs	r3, #0
 800527a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800527c:	e036      	b.n	80052ec <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2200      	movs	r2, #0
 8005286:	2120      	movs	r1, #32
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 fb9e 	bl	80059ca <UART_WaitOnFlagUntilTimeout>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d005      	beq.n	80052a0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2220      	movs	r2, #32
 8005298:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e032      	b.n	8005306 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10c      	bne.n	80052c0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	8a7b      	ldrh	r3, [r7, #18]
 80052b0:	4013      	ands	r3, r2
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	3302      	adds	r3, #2
 80052bc:	61bb      	str	r3, [r7, #24]
 80052be:	e00c      	b.n	80052da <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	8a7b      	ldrh	r3, [r7, #18]
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	4013      	ands	r3, r2
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	3301      	adds	r3, #1
 80052d8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1c2      	bne.n	800527e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8005300:	2300      	movs	r3, #0
 8005302:	e000      	b.n	8005306 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8005304:	2302      	movs	r3, #2
  }
}
 8005306:	4618      	mov	r0, r3
 8005308:	3720      	adds	r7, #32
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005318:	2300      	movs	r3, #0
 800531a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	431a      	orrs	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	4313      	orrs	r3, r2
 8005332:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	4ba6      	ldr	r3, [pc, #664]	@ (80055d4 <UART_SetConfig+0x2c4>)
 800533c:	4013      	ands	r3, r2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6812      	ldr	r2, [r2, #0]
 8005342:	6979      	ldr	r1, [r7, #20]
 8005344:	430b      	orrs	r3, r1
 8005346:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	430a      	orrs	r2, r1
 8005380:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a94      	ldr	r2, [pc, #592]	@ (80055d8 <UART_SetConfig+0x2c8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d120      	bne.n	80053ce <UART_SetConfig+0xbe>
 800538c:	4b93      	ldr	r3, [pc, #588]	@ (80055dc <UART_SetConfig+0x2cc>)
 800538e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	2b03      	cmp	r3, #3
 8005398:	d816      	bhi.n	80053c8 <UART_SetConfig+0xb8>
 800539a:	a201      	add	r2, pc, #4	@ (adr r2, 80053a0 <UART_SetConfig+0x90>)
 800539c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a0:	080053b1 	.word	0x080053b1
 80053a4:	080053bd 	.word	0x080053bd
 80053a8:	080053b7 	.word	0x080053b7
 80053ac:	080053c3 	.word	0x080053c3
 80053b0:	2301      	movs	r3, #1
 80053b2:	77fb      	strb	r3, [r7, #31]
 80053b4:	e150      	b.n	8005658 <UART_SetConfig+0x348>
 80053b6:	2302      	movs	r3, #2
 80053b8:	77fb      	strb	r3, [r7, #31]
 80053ba:	e14d      	b.n	8005658 <UART_SetConfig+0x348>
 80053bc:	2304      	movs	r3, #4
 80053be:	77fb      	strb	r3, [r7, #31]
 80053c0:	e14a      	b.n	8005658 <UART_SetConfig+0x348>
 80053c2:	2308      	movs	r3, #8
 80053c4:	77fb      	strb	r3, [r7, #31]
 80053c6:	e147      	b.n	8005658 <UART_SetConfig+0x348>
 80053c8:	2310      	movs	r3, #16
 80053ca:	77fb      	strb	r3, [r7, #31]
 80053cc:	e144      	b.n	8005658 <UART_SetConfig+0x348>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a83      	ldr	r2, [pc, #524]	@ (80055e0 <UART_SetConfig+0x2d0>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d132      	bne.n	800543e <UART_SetConfig+0x12e>
 80053d8:	4b80      	ldr	r3, [pc, #512]	@ (80055dc <UART_SetConfig+0x2cc>)
 80053da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053de:	f003 030c 	and.w	r3, r3, #12
 80053e2:	2b0c      	cmp	r3, #12
 80053e4:	d828      	bhi.n	8005438 <UART_SetConfig+0x128>
 80053e6:	a201      	add	r2, pc, #4	@ (adr r2, 80053ec <UART_SetConfig+0xdc>)
 80053e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ec:	08005421 	.word	0x08005421
 80053f0:	08005439 	.word	0x08005439
 80053f4:	08005439 	.word	0x08005439
 80053f8:	08005439 	.word	0x08005439
 80053fc:	0800542d 	.word	0x0800542d
 8005400:	08005439 	.word	0x08005439
 8005404:	08005439 	.word	0x08005439
 8005408:	08005439 	.word	0x08005439
 800540c:	08005427 	.word	0x08005427
 8005410:	08005439 	.word	0x08005439
 8005414:	08005439 	.word	0x08005439
 8005418:	08005439 	.word	0x08005439
 800541c:	08005433 	.word	0x08005433
 8005420:	2300      	movs	r3, #0
 8005422:	77fb      	strb	r3, [r7, #31]
 8005424:	e118      	b.n	8005658 <UART_SetConfig+0x348>
 8005426:	2302      	movs	r3, #2
 8005428:	77fb      	strb	r3, [r7, #31]
 800542a:	e115      	b.n	8005658 <UART_SetConfig+0x348>
 800542c:	2304      	movs	r3, #4
 800542e:	77fb      	strb	r3, [r7, #31]
 8005430:	e112      	b.n	8005658 <UART_SetConfig+0x348>
 8005432:	2308      	movs	r3, #8
 8005434:	77fb      	strb	r3, [r7, #31]
 8005436:	e10f      	b.n	8005658 <UART_SetConfig+0x348>
 8005438:	2310      	movs	r3, #16
 800543a:	77fb      	strb	r3, [r7, #31]
 800543c:	e10c      	b.n	8005658 <UART_SetConfig+0x348>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a68      	ldr	r2, [pc, #416]	@ (80055e4 <UART_SetConfig+0x2d4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d120      	bne.n	800548a <UART_SetConfig+0x17a>
 8005448:	4b64      	ldr	r3, [pc, #400]	@ (80055dc <UART_SetConfig+0x2cc>)
 800544a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800544e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005452:	2b30      	cmp	r3, #48	@ 0x30
 8005454:	d013      	beq.n	800547e <UART_SetConfig+0x16e>
 8005456:	2b30      	cmp	r3, #48	@ 0x30
 8005458:	d814      	bhi.n	8005484 <UART_SetConfig+0x174>
 800545a:	2b20      	cmp	r3, #32
 800545c:	d009      	beq.n	8005472 <UART_SetConfig+0x162>
 800545e:	2b20      	cmp	r3, #32
 8005460:	d810      	bhi.n	8005484 <UART_SetConfig+0x174>
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <UART_SetConfig+0x15c>
 8005466:	2b10      	cmp	r3, #16
 8005468:	d006      	beq.n	8005478 <UART_SetConfig+0x168>
 800546a:	e00b      	b.n	8005484 <UART_SetConfig+0x174>
 800546c:	2300      	movs	r3, #0
 800546e:	77fb      	strb	r3, [r7, #31]
 8005470:	e0f2      	b.n	8005658 <UART_SetConfig+0x348>
 8005472:	2302      	movs	r3, #2
 8005474:	77fb      	strb	r3, [r7, #31]
 8005476:	e0ef      	b.n	8005658 <UART_SetConfig+0x348>
 8005478:	2304      	movs	r3, #4
 800547a:	77fb      	strb	r3, [r7, #31]
 800547c:	e0ec      	b.n	8005658 <UART_SetConfig+0x348>
 800547e:	2308      	movs	r3, #8
 8005480:	77fb      	strb	r3, [r7, #31]
 8005482:	e0e9      	b.n	8005658 <UART_SetConfig+0x348>
 8005484:	2310      	movs	r3, #16
 8005486:	77fb      	strb	r3, [r7, #31]
 8005488:	e0e6      	b.n	8005658 <UART_SetConfig+0x348>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a56      	ldr	r2, [pc, #344]	@ (80055e8 <UART_SetConfig+0x2d8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d120      	bne.n	80054d6 <UART_SetConfig+0x1c6>
 8005494:	4b51      	ldr	r3, [pc, #324]	@ (80055dc <UART_SetConfig+0x2cc>)
 8005496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800549a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800549e:	2bc0      	cmp	r3, #192	@ 0xc0
 80054a0:	d013      	beq.n	80054ca <UART_SetConfig+0x1ba>
 80054a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80054a4:	d814      	bhi.n	80054d0 <UART_SetConfig+0x1c0>
 80054a6:	2b80      	cmp	r3, #128	@ 0x80
 80054a8:	d009      	beq.n	80054be <UART_SetConfig+0x1ae>
 80054aa:	2b80      	cmp	r3, #128	@ 0x80
 80054ac:	d810      	bhi.n	80054d0 <UART_SetConfig+0x1c0>
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <UART_SetConfig+0x1a8>
 80054b2:	2b40      	cmp	r3, #64	@ 0x40
 80054b4:	d006      	beq.n	80054c4 <UART_SetConfig+0x1b4>
 80054b6:	e00b      	b.n	80054d0 <UART_SetConfig+0x1c0>
 80054b8:	2300      	movs	r3, #0
 80054ba:	77fb      	strb	r3, [r7, #31]
 80054bc:	e0cc      	b.n	8005658 <UART_SetConfig+0x348>
 80054be:	2302      	movs	r3, #2
 80054c0:	77fb      	strb	r3, [r7, #31]
 80054c2:	e0c9      	b.n	8005658 <UART_SetConfig+0x348>
 80054c4:	2304      	movs	r3, #4
 80054c6:	77fb      	strb	r3, [r7, #31]
 80054c8:	e0c6      	b.n	8005658 <UART_SetConfig+0x348>
 80054ca:	2308      	movs	r3, #8
 80054cc:	77fb      	strb	r3, [r7, #31]
 80054ce:	e0c3      	b.n	8005658 <UART_SetConfig+0x348>
 80054d0:	2310      	movs	r3, #16
 80054d2:	77fb      	strb	r3, [r7, #31]
 80054d4:	e0c0      	b.n	8005658 <UART_SetConfig+0x348>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a44      	ldr	r2, [pc, #272]	@ (80055ec <UART_SetConfig+0x2dc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d125      	bne.n	800552c <UART_SetConfig+0x21c>
 80054e0:	4b3e      	ldr	r3, [pc, #248]	@ (80055dc <UART_SetConfig+0x2cc>)
 80054e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054ee:	d017      	beq.n	8005520 <UART_SetConfig+0x210>
 80054f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054f4:	d817      	bhi.n	8005526 <UART_SetConfig+0x216>
 80054f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054fa:	d00b      	beq.n	8005514 <UART_SetConfig+0x204>
 80054fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005500:	d811      	bhi.n	8005526 <UART_SetConfig+0x216>
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <UART_SetConfig+0x1fe>
 8005506:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800550a:	d006      	beq.n	800551a <UART_SetConfig+0x20a>
 800550c:	e00b      	b.n	8005526 <UART_SetConfig+0x216>
 800550e:	2300      	movs	r3, #0
 8005510:	77fb      	strb	r3, [r7, #31]
 8005512:	e0a1      	b.n	8005658 <UART_SetConfig+0x348>
 8005514:	2302      	movs	r3, #2
 8005516:	77fb      	strb	r3, [r7, #31]
 8005518:	e09e      	b.n	8005658 <UART_SetConfig+0x348>
 800551a:	2304      	movs	r3, #4
 800551c:	77fb      	strb	r3, [r7, #31]
 800551e:	e09b      	b.n	8005658 <UART_SetConfig+0x348>
 8005520:	2308      	movs	r3, #8
 8005522:	77fb      	strb	r3, [r7, #31]
 8005524:	e098      	b.n	8005658 <UART_SetConfig+0x348>
 8005526:	2310      	movs	r3, #16
 8005528:	77fb      	strb	r3, [r7, #31]
 800552a:	e095      	b.n	8005658 <UART_SetConfig+0x348>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a2f      	ldr	r2, [pc, #188]	@ (80055f0 <UART_SetConfig+0x2e0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d125      	bne.n	8005582 <UART_SetConfig+0x272>
 8005536:	4b29      	ldr	r3, [pc, #164]	@ (80055dc <UART_SetConfig+0x2cc>)
 8005538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800553c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005540:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005544:	d017      	beq.n	8005576 <UART_SetConfig+0x266>
 8005546:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800554a:	d817      	bhi.n	800557c <UART_SetConfig+0x26c>
 800554c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005550:	d00b      	beq.n	800556a <UART_SetConfig+0x25a>
 8005552:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005556:	d811      	bhi.n	800557c <UART_SetConfig+0x26c>
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <UART_SetConfig+0x254>
 800555c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005560:	d006      	beq.n	8005570 <UART_SetConfig+0x260>
 8005562:	e00b      	b.n	800557c <UART_SetConfig+0x26c>
 8005564:	2301      	movs	r3, #1
 8005566:	77fb      	strb	r3, [r7, #31]
 8005568:	e076      	b.n	8005658 <UART_SetConfig+0x348>
 800556a:	2302      	movs	r3, #2
 800556c:	77fb      	strb	r3, [r7, #31]
 800556e:	e073      	b.n	8005658 <UART_SetConfig+0x348>
 8005570:	2304      	movs	r3, #4
 8005572:	77fb      	strb	r3, [r7, #31]
 8005574:	e070      	b.n	8005658 <UART_SetConfig+0x348>
 8005576:	2308      	movs	r3, #8
 8005578:	77fb      	strb	r3, [r7, #31]
 800557a:	e06d      	b.n	8005658 <UART_SetConfig+0x348>
 800557c:	2310      	movs	r3, #16
 800557e:	77fb      	strb	r3, [r7, #31]
 8005580:	e06a      	b.n	8005658 <UART_SetConfig+0x348>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a1b      	ldr	r2, [pc, #108]	@ (80055f4 <UART_SetConfig+0x2e4>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d138      	bne.n	80055fe <UART_SetConfig+0x2ee>
 800558c:	4b13      	ldr	r3, [pc, #76]	@ (80055dc <UART_SetConfig+0x2cc>)
 800558e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005592:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005596:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800559a:	d017      	beq.n	80055cc <UART_SetConfig+0x2bc>
 800559c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80055a0:	d82a      	bhi.n	80055f8 <UART_SetConfig+0x2e8>
 80055a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055a6:	d00b      	beq.n	80055c0 <UART_SetConfig+0x2b0>
 80055a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055ac:	d824      	bhi.n	80055f8 <UART_SetConfig+0x2e8>
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <UART_SetConfig+0x2aa>
 80055b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055b6:	d006      	beq.n	80055c6 <UART_SetConfig+0x2b6>
 80055b8:	e01e      	b.n	80055f8 <UART_SetConfig+0x2e8>
 80055ba:	2300      	movs	r3, #0
 80055bc:	77fb      	strb	r3, [r7, #31]
 80055be:	e04b      	b.n	8005658 <UART_SetConfig+0x348>
 80055c0:	2302      	movs	r3, #2
 80055c2:	77fb      	strb	r3, [r7, #31]
 80055c4:	e048      	b.n	8005658 <UART_SetConfig+0x348>
 80055c6:	2304      	movs	r3, #4
 80055c8:	77fb      	strb	r3, [r7, #31]
 80055ca:	e045      	b.n	8005658 <UART_SetConfig+0x348>
 80055cc:	2308      	movs	r3, #8
 80055ce:	77fb      	strb	r3, [r7, #31]
 80055d0:	e042      	b.n	8005658 <UART_SetConfig+0x348>
 80055d2:	bf00      	nop
 80055d4:	efff69f3 	.word	0xefff69f3
 80055d8:	40011000 	.word	0x40011000
 80055dc:	40023800 	.word	0x40023800
 80055e0:	40004400 	.word	0x40004400
 80055e4:	40004800 	.word	0x40004800
 80055e8:	40004c00 	.word	0x40004c00
 80055ec:	40005000 	.word	0x40005000
 80055f0:	40011400 	.word	0x40011400
 80055f4:	40007800 	.word	0x40007800
 80055f8:	2310      	movs	r3, #16
 80055fa:	77fb      	strb	r3, [r7, #31]
 80055fc:	e02c      	b.n	8005658 <UART_SetConfig+0x348>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a72      	ldr	r2, [pc, #456]	@ (80057cc <UART_SetConfig+0x4bc>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d125      	bne.n	8005654 <UART_SetConfig+0x344>
 8005608:	4b71      	ldr	r3, [pc, #452]	@ (80057d0 <UART_SetConfig+0x4c0>)
 800560a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800560e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005612:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005616:	d017      	beq.n	8005648 <UART_SetConfig+0x338>
 8005618:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800561c:	d817      	bhi.n	800564e <UART_SetConfig+0x33e>
 800561e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005622:	d00b      	beq.n	800563c <UART_SetConfig+0x32c>
 8005624:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005628:	d811      	bhi.n	800564e <UART_SetConfig+0x33e>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <UART_SetConfig+0x326>
 800562e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005632:	d006      	beq.n	8005642 <UART_SetConfig+0x332>
 8005634:	e00b      	b.n	800564e <UART_SetConfig+0x33e>
 8005636:	2300      	movs	r3, #0
 8005638:	77fb      	strb	r3, [r7, #31]
 800563a:	e00d      	b.n	8005658 <UART_SetConfig+0x348>
 800563c:	2302      	movs	r3, #2
 800563e:	77fb      	strb	r3, [r7, #31]
 8005640:	e00a      	b.n	8005658 <UART_SetConfig+0x348>
 8005642:	2304      	movs	r3, #4
 8005644:	77fb      	strb	r3, [r7, #31]
 8005646:	e007      	b.n	8005658 <UART_SetConfig+0x348>
 8005648:	2308      	movs	r3, #8
 800564a:	77fb      	strb	r3, [r7, #31]
 800564c:	e004      	b.n	8005658 <UART_SetConfig+0x348>
 800564e:	2310      	movs	r3, #16
 8005650:	77fb      	strb	r3, [r7, #31]
 8005652:	e001      	b.n	8005658 <UART_SetConfig+0x348>
 8005654:	2310      	movs	r3, #16
 8005656:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005660:	d15b      	bne.n	800571a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005662:	7ffb      	ldrb	r3, [r7, #31]
 8005664:	2b08      	cmp	r3, #8
 8005666:	d828      	bhi.n	80056ba <UART_SetConfig+0x3aa>
 8005668:	a201      	add	r2, pc, #4	@ (adr r2, 8005670 <UART_SetConfig+0x360>)
 800566a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566e:	bf00      	nop
 8005670:	08005695 	.word	0x08005695
 8005674:	0800569d 	.word	0x0800569d
 8005678:	080056a5 	.word	0x080056a5
 800567c:	080056bb 	.word	0x080056bb
 8005680:	080056ab 	.word	0x080056ab
 8005684:	080056bb 	.word	0x080056bb
 8005688:	080056bb 	.word	0x080056bb
 800568c:	080056bb 	.word	0x080056bb
 8005690:	080056b3 	.word	0x080056b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005694:	f7ff f92a 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 8005698:	61b8      	str	r0, [r7, #24]
        break;
 800569a:	e013      	b.n	80056c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800569c:	f7ff f93a 	bl	8004914 <HAL_RCC_GetPCLK2Freq>
 80056a0:	61b8      	str	r0, [r7, #24]
        break;
 80056a2:	e00f      	b.n	80056c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056a4:	4b4b      	ldr	r3, [pc, #300]	@ (80057d4 <UART_SetConfig+0x4c4>)
 80056a6:	61bb      	str	r3, [r7, #24]
        break;
 80056a8:	e00c      	b.n	80056c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056aa:	f7ff f84d 	bl	8004748 <HAL_RCC_GetSysClockFreq>
 80056ae:	61b8      	str	r0, [r7, #24]
        break;
 80056b0:	e008      	b.n	80056c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056b6:	61bb      	str	r3, [r7, #24]
        break;
 80056b8:	e004      	b.n	80056c4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	77bb      	strb	r3, [r7, #30]
        break;
 80056c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d074      	beq.n	80057b4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	005a      	lsls	r2, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	085b      	lsrs	r3, r3, #1
 80056d4:	441a      	add	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	fbb2 f3f3 	udiv	r3, r2, r3
 80056de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	2b0f      	cmp	r3, #15
 80056e4:	d916      	bls.n	8005714 <UART_SetConfig+0x404>
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056ec:	d212      	bcs.n	8005714 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	f023 030f 	bic.w	r3, r3, #15
 80056f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	085b      	lsrs	r3, r3, #1
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	f003 0307 	and.w	r3, r3, #7
 8005702:	b29a      	uxth	r2, r3
 8005704:	89fb      	ldrh	r3, [r7, #14]
 8005706:	4313      	orrs	r3, r2
 8005708:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	89fa      	ldrh	r2, [r7, #14]
 8005710:	60da      	str	r2, [r3, #12]
 8005712:	e04f      	b.n	80057b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	77bb      	strb	r3, [r7, #30]
 8005718:	e04c      	b.n	80057b4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800571a:	7ffb      	ldrb	r3, [r7, #31]
 800571c:	2b08      	cmp	r3, #8
 800571e:	d828      	bhi.n	8005772 <UART_SetConfig+0x462>
 8005720:	a201      	add	r2, pc, #4	@ (adr r2, 8005728 <UART_SetConfig+0x418>)
 8005722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005726:	bf00      	nop
 8005728:	0800574d 	.word	0x0800574d
 800572c:	08005755 	.word	0x08005755
 8005730:	0800575d 	.word	0x0800575d
 8005734:	08005773 	.word	0x08005773
 8005738:	08005763 	.word	0x08005763
 800573c:	08005773 	.word	0x08005773
 8005740:	08005773 	.word	0x08005773
 8005744:	08005773 	.word	0x08005773
 8005748:	0800576b 	.word	0x0800576b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800574c:	f7ff f8ce 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 8005750:	61b8      	str	r0, [r7, #24]
        break;
 8005752:	e013      	b.n	800577c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005754:	f7ff f8de 	bl	8004914 <HAL_RCC_GetPCLK2Freq>
 8005758:	61b8      	str	r0, [r7, #24]
        break;
 800575a:	e00f      	b.n	800577c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800575c:	4b1d      	ldr	r3, [pc, #116]	@ (80057d4 <UART_SetConfig+0x4c4>)
 800575e:	61bb      	str	r3, [r7, #24]
        break;
 8005760:	e00c      	b.n	800577c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005762:	f7fe fff1 	bl	8004748 <HAL_RCC_GetSysClockFreq>
 8005766:	61b8      	str	r0, [r7, #24]
        break;
 8005768:	e008      	b.n	800577c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800576a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800576e:	61bb      	str	r3, [r7, #24]
        break;
 8005770:	e004      	b.n	800577c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	77bb      	strb	r3, [r7, #30]
        break;
 800577a:	bf00      	nop
    }

    if (pclk != 0U)
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d018      	beq.n	80057b4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	085a      	lsrs	r2, r3, #1
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	441a      	add	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	fbb2 f3f3 	udiv	r3, r2, r3
 8005794:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	2b0f      	cmp	r3, #15
 800579a:	d909      	bls.n	80057b0 <UART_SetConfig+0x4a0>
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057a2:	d205      	bcs.n	80057b0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	60da      	str	r2, [r3, #12]
 80057ae:	e001      	b.n	80057b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80057c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3720      	adds	r7, #32
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	40007c00 	.word	0x40007c00
 80057d0:	40023800 	.word	0x40023800
 80057d4:	00f42400 	.word	0x00f42400

080057d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586c:	f003 0310 	and.w	r3, r3, #16
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588e:	f003 0320 	and.w	r3, r3, #32
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d01a      	beq.n	80058ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058d6:	d10a      	bne.n	80058ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00a      	beq.n	8005910 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	605a      	str	r2, [r3, #4]
  }
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b08c      	sub	sp, #48	@ 0x30
 8005920:	af02      	add	r7, sp, #8
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800592c:	f7fc fa24 	bl	8001d78 <HAL_GetTick>
 8005930:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0308 	and.w	r3, r3, #8
 800593c:	2b08      	cmp	r3, #8
 800593e:	d12e      	bne.n	800599e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005940:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005948:	2200      	movs	r2, #0
 800594a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f83b 	bl	80059ca <UART_WaitOnFlagUntilTimeout>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d021      	beq.n	800599e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	e853 3f00 	ldrex	r3, [r3]
 8005966:	60fb      	str	r3, [r7, #12]
   return(result);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800596e:	623b      	str	r3, [r7, #32]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	461a      	mov	r2, r3
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	61fb      	str	r3, [r7, #28]
 800597a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597c:	69b9      	ldr	r1, [r7, #24]
 800597e:	69fa      	ldr	r2, [r7, #28]
 8005980:	e841 2300 	strex	r3, r2, [r1]
 8005984:	617b      	str	r3, [r7, #20]
   return(result);
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e6      	bne.n	800595a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2220      	movs	r2, #32
 8005990:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e011      	b.n	80059c2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3728      	adds	r7, #40	@ 0x28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b084      	sub	sp, #16
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	60f8      	str	r0, [r7, #12]
 80059d2:	60b9      	str	r1, [r7, #8]
 80059d4:	603b      	str	r3, [r7, #0]
 80059d6:	4613      	mov	r3, r2
 80059d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059da:	e04f      	b.n	8005a7c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e2:	d04b      	beq.n	8005a7c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059e4:	f7fc f9c8 	bl	8001d78 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d302      	bcc.n	80059fa <UART_WaitOnFlagUntilTimeout+0x30>
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e04e      	b.n	8005a9c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d037      	beq.n	8005a7c <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b80      	cmp	r3, #128	@ 0x80
 8005a10:	d034      	beq.n	8005a7c <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2b40      	cmp	r3, #64	@ 0x40
 8005a16:	d031      	beq.n	8005a7c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	2b08      	cmp	r3, #8
 8005a24:	d110      	bne.n	8005a48 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2208      	movs	r2, #8
 8005a2c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 f838 	bl	8005aa4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2208      	movs	r2, #8
 8005a38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e029      	b.n	8005a9c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a56:	d111      	bne.n	8005a7c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a60:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f000 f81e 	bl	8005aa4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e00f      	b.n	8005a9c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	69da      	ldr	r2, [r3, #28]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	4013      	ands	r3, r2
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	bf0c      	ite	eq
 8005a8c:	2301      	moveq	r3, #1
 8005a8e:	2300      	movne	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	461a      	mov	r2, r3
 8005a94:	79fb      	ldrb	r3, [r7, #7]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d0a0      	beq.n	80059dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b095      	sub	sp, #84	@ 0x54
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab4:	e853 3f00 	ldrex	r3, [r3]
 8005ab8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005abc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ac0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aca:	643b      	str	r3, [r7, #64]	@ 0x40
 8005acc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ad0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e6      	bne.n	8005aac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	f023 0301 	bic.w	r3, r3, #1
 8005af4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3308      	adds	r3, #8
 8005afc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005afe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1e5      	bne.n	8005ade <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d118      	bne.n	8005b4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	e853 3f00 	ldrex	r3, [r3]
 8005b26:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f023 0310 	bic.w	r3, r3, #16
 8005b2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	461a      	mov	r2, r3
 8005b36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b38:	61bb      	str	r3, [r7, #24]
 8005b3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3c:	6979      	ldr	r1, [r7, #20]
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	e841 2300 	strex	r3, r2, [r1]
 8005b44:	613b      	str	r3, [r7, #16]
   return(result);
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1e6      	bne.n	8005b1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b60:	bf00      	nop
 8005b62:	3754      	adds	r7, #84	@ 0x54
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <atoi>:
 8005b6c:	220a      	movs	r2, #10
 8005b6e:	2100      	movs	r1, #0
 8005b70:	f000 b87a 	b.w	8005c68 <strtol>

08005b74 <_strtol_l.constprop.0>:
 8005b74:	2b24      	cmp	r3, #36	@ 0x24
 8005b76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b7a:	4686      	mov	lr, r0
 8005b7c:	4690      	mov	r8, r2
 8005b7e:	d801      	bhi.n	8005b84 <_strtol_l.constprop.0+0x10>
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d106      	bne.n	8005b92 <_strtol_l.constprop.0+0x1e>
 8005b84:	f000 fa3c 	bl	8006000 <__errno>
 8005b88:	2316      	movs	r3, #22
 8005b8a:	6003      	str	r3, [r0, #0]
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b92:	4834      	ldr	r0, [pc, #208]	@ (8005c64 <_strtol_l.constprop.0+0xf0>)
 8005b94:	460d      	mov	r5, r1
 8005b96:	462a      	mov	r2, r5
 8005b98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b9c:	5d06      	ldrb	r6, [r0, r4]
 8005b9e:	f016 0608 	ands.w	r6, r6, #8
 8005ba2:	d1f8      	bne.n	8005b96 <_strtol_l.constprop.0+0x22>
 8005ba4:	2c2d      	cmp	r4, #45	@ 0x2d
 8005ba6:	d12d      	bne.n	8005c04 <_strtol_l.constprop.0+0x90>
 8005ba8:	782c      	ldrb	r4, [r5, #0]
 8005baa:	2601      	movs	r6, #1
 8005bac:	1c95      	adds	r5, r2, #2
 8005bae:	f033 0210 	bics.w	r2, r3, #16
 8005bb2:	d109      	bne.n	8005bc8 <_strtol_l.constprop.0+0x54>
 8005bb4:	2c30      	cmp	r4, #48	@ 0x30
 8005bb6:	d12a      	bne.n	8005c0e <_strtol_l.constprop.0+0x9a>
 8005bb8:	782a      	ldrb	r2, [r5, #0]
 8005bba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005bbe:	2a58      	cmp	r2, #88	@ 0x58
 8005bc0:	d125      	bne.n	8005c0e <_strtol_l.constprop.0+0x9a>
 8005bc2:	786c      	ldrb	r4, [r5, #1]
 8005bc4:	2310      	movs	r3, #16
 8005bc6:	3502      	adds	r5, #2
 8005bc8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005bcc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	fbbc f9f3 	udiv	r9, ip, r3
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	fb03 ca19 	mls	sl, r3, r9, ip
 8005bdc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005be0:	2f09      	cmp	r7, #9
 8005be2:	d81b      	bhi.n	8005c1c <_strtol_l.constprop.0+0xa8>
 8005be4:	463c      	mov	r4, r7
 8005be6:	42a3      	cmp	r3, r4
 8005be8:	dd27      	ble.n	8005c3a <_strtol_l.constprop.0+0xc6>
 8005bea:	1c57      	adds	r7, r2, #1
 8005bec:	d007      	beq.n	8005bfe <_strtol_l.constprop.0+0x8a>
 8005bee:	4581      	cmp	r9, r0
 8005bf0:	d320      	bcc.n	8005c34 <_strtol_l.constprop.0+0xc0>
 8005bf2:	d101      	bne.n	8005bf8 <_strtol_l.constprop.0+0x84>
 8005bf4:	45a2      	cmp	sl, r4
 8005bf6:	db1d      	blt.n	8005c34 <_strtol_l.constprop.0+0xc0>
 8005bf8:	fb00 4003 	mla	r0, r0, r3, r4
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c02:	e7eb      	b.n	8005bdc <_strtol_l.constprop.0+0x68>
 8005c04:	2c2b      	cmp	r4, #43	@ 0x2b
 8005c06:	bf04      	itt	eq
 8005c08:	782c      	ldrbeq	r4, [r5, #0]
 8005c0a:	1c95      	addeq	r5, r2, #2
 8005c0c:	e7cf      	b.n	8005bae <_strtol_l.constprop.0+0x3a>
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1da      	bne.n	8005bc8 <_strtol_l.constprop.0+0x54>
 8005c12:	2c30      	cmp	r4, #48	@ 0x30
 8005c14:	bf0c      	ite	eq
 8005c16:	2308      	moveq	r3, #8
 8005c18:	230a      	movne	r3, #10
 8005c1a:	e7d5      	b.n	8005bc8 <_strtol_l.constprop.0+0x54>
 8005c1c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005c20:	2f19      	cmp	r7, #25
 8005c22:	d801      	bhi.n	8005c28 <_strtol_l.constprop.0+0xb4>
 8005c24:	3c37      	subs	r4, #55	@ 0x37
 8005c26:	e7de      	b.n	8005be6 <_strtol_l.constprop.0+0x72>
 8005c28:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005c2c:	2f19      	cmp	r7, #25
 8005c2e:	d804      	bhi.n	8005c3a <_strtol_l.constprop.0+0xc6>
 8005c30:	3c57      	subs	r4, #87	@ 0x57
 8005c32:	e7d8      	b.n	8005be6 <_strtol_l.constprop.0+0x72>
 8005c34:	f04f 32ff 	mov.w	r2, #4294967295
 8005c38:	e7e1      	b.n	8005bfe <_strtol_l.constprop.0+0x8a>
 8005c3a:	1c53      	adds	r3, r2, #1
 8005c3c:	d108      	bne.n	8005c50 <_strtol_l.constprop.0+0xdc>
 8005c3e:	2322      	movs	r3, #34	@ 0x22
 8005c40:	f8ce 3000 	str.w	r3, [lr]
 8005c44:	4660      	mov	r0, ip
 8005c46:	f1b8 0f00 	cmp.w	r8, #0
 8005c4a:	d0a0      	beq.n	8005b8e <_strtol_l.constprop.0+0x1a>
 8005c4c:	1e69      	subs	r1, r5, #1
 8005c4e:	e006      	b.n	8005c5e <_strtol_l.constprop.0+0xea>
 8005c50:	b106      	cbz	r6, 8005c54 <_strtol_l.constprop.0+0xe0>
 8005c52:	4240      	negs	r0, r0
 8005c54:	f1b8 0f00 	cmp.w	r8, #0
 8005c58:	d099      	beq.n	8005b8e <_strtol_l.constprop.0+0x1a>
 8005c5a:	2a00      	cmp	r2, #0
 8005c5c:	d1f6      	bne.n	8005c4c <_strtol_l.constprop.0+0xd8>
 8005c5e:	f8c8 1000 	str.w	r1, [r8]
 8005c62:	e794      	b.n	8005b8e <_strtol_l.constprop.0+0x1a>
 8005c64:	08007115 	.word	0x08007115

08005c68 <strtol>:
 8005c68:	4613      	mov	r3, r2
 8005c6a:	460a      	mov	r2, r1
 8005c6c:	4601      	mov	r1, r0
 8005c6e:	4802      	ldr	r0, [pc, #8]	@ (8005c78 <strtol+0x10>)
 8005c70:	6800      	ldr	r0, [r0, #0]
 8005c72:	f7ff bf7f 	b.w	8005b74 <_strtol_l.constprop.0>
 8005c76:	bf00      	nop
 8005c78:	2000001c 	.word	0x2000001c

08005c7c <std>:
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	b510      	push	{r4, lr}
 8005c80:	4604      	mov	r4, r0
 8005c82:	e9c0 3300 	strd	r3, r3, [r0]
 8005c86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c8a:	6083      	str	r3, [r0, #8]
 8005c8c:	8181      	strh	r1, [r0, #12]
 8005c8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005c90:	81c2      	strh	r2, [r0, #14]
 8005c92:	6183      	str	r3, [r0, #24]
 8005c94:	4619      	mov	r1, r3
 8005c96:	2208      	movs	r2, #8
 8005c98:	305c      	adds	r0, #92	@ 0x5c
 8005c9a:	f000 f8f4 	bl	8005e86 <memset>
 8005c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005cd4 <std+0x58>)
 8005ca0:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8005cd8 <std+0x5c>)
 8005ca4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8005cdc <std+0x60>)
 8005ca8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005caa:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce0 <std+0x64>)
 8005cac:	6323      	str	r3, [r4, #48]	@ 0x30
 8005cae:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce4 <std+0x68>)
 8005cb0:	6224      	str	r4, [r4, #32]
 8005cb2:	429c      	cmp	r4, r3
 8005cb4:	d006      	beq.n	8005cc4 <std+0x48>
 8005cb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005cba:	4294      	cmp	r4, r2
 8005cbc:	d002      	beq.n	8005cc4 <std+0x48>
 8005cbe:	33d0      	adds	r3, #208	@ 0xd0
 8005cc0:	429c      	cmp	r4, r3
 8005cc2:	d105      	bne.n	8005cd0 <std+0x54>
 8005cc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ccc:	f000 b9c2 	b.w	8006054 <__retarget_lock_init_recursive>
 8005cd0:	bd10      	pop	{r4, pc}
 8005cd2:	bf00      	nop
 8005cd4:	08005e01 	.word	0x08005e01
 8005cd8:	08005e23 	.word	0x08005e23
 8005cdc:	08005e5b 	.word	0x08005e5b
 8005ce0:	08005e7f 	.word	0x08005e7f
 8005ce4:	200212b4 	.word	0x200212b4

08005ce8 <stdio_exit_handler>:
 8005ce8:	4a02      	ldr	r2, [pc, #8]	@ (8005cf4 <stdio_exit_handler+0xc>)
 8005cea:	4903      	ldr	r1, [pc, #12]	@ (8005cf8 <stdio_exit_handler+0x10>)
 8005cec:	4803      	ldr	r0, [pc, #12]	@ (8005cfc <stdio_exit_handler+0x14>)
 8005cee:	f000 b869 	b.w	8005dc4 <_fwalk_sglue>
 8005cf2:	bf00      	nop
 8005cf4:	20000010 	.word	0x20000010
 8005cf8:	080063cd 	.word	0x080063cd
 8005cfc:	20000020 	.word	0x20000020

08005d00 <cleanup_stdio>:
 8005d00:	6841      	ldr	r1, [r0, #4]
 8005d02:	4b0c      	ldr	r3, [pc, #48]	@ (8005d34 <cleanup_stdio+0x34>)
 8005d04:	4299      	cmp	r1, r3
 8005d06:	b510      	push	{r4, lr}
 8005d08:	4604      	mov	r4, r0
 8005d0a:	d001      	beq.n	8005d10 <cleanup_stdio+0x10>
 8005d0c:	f000 fb5e 	bl	80063cc <_fflush_r>
 8005d10:	68a1      	ldr	r1, [r4, #8]
 8005d12:	4b09      	ldr	r3, [pc, #36]	@ (8005d38 <cleanup_stdio+0x38>)
 8005d14:	4299      	cmp	r1, r3
 8005d16:	d002      	beq.n	8005d1e <cleanup_stdio+0x1e>
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f000 fb57 	bl	80063cc <_fflush_r>
 8005d1e:	68e1      	ldr	r1, [r4, #12]
 8005d20:	4b06      	ldr	r3, [pc, #24]	@ (8005d3c <cleanup_stdio+0x3c>)
 8005d22:	4299      	cmp	r1, r3
 8005d24:	d004      	beq.n	8005d30 <cleanup_stdio+0x30>
 8005d26:	4620      	mov	r0, r4
 8005d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d2c:	f000 bb4e 	b.w	80063cc <_fflush_r>
 8005d30:	bd10      	pop	{r4, pc}
 8005d32:	bf00      	nop
 8005d34:	200212b4 	.word	0x200212b4
 8005d38:	2002131c 	.word	0x2002131c
 8005d3c:	20021384 	.word	0x20021384

08005d40 <global_stdio_init.part.0>:
 8005d40:	b510      	push	{r4, lr}
 8005d42:	4b0b      	ldr	r3, [pc, #44]	@ (8005d70 <global_stdio_init.part.0+0x30>)
 8005d44:	4c0b      	ldr	r4, [pc, #44]	@ (8005d74 <global_stdio_init.part.0+0x34>)
 8005d46:	4a0c      	ldr	r2, [pc, #48]	@ (8005d78 <global_stdio_init.part.0+0x38>)
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	2104      	movs	r1, #4
 8005d50:	f7ff ff94 	bl	8005c7c <std>
 8005d54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d58:	2201      	movs	r2, #1
 8005d5a:	2109      	movs	r1, #9
 8005d5c:	f7ff ff8e 	bl	8005c7c <std>
 8005d60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d64:	2202      	movs	r2, #2
 8005d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d6a:	2112      	movs	r1, #18
 8005d6c:	f7ff bf86 	b.w	8005c7c <std>
 8005d70:	200213ec 	.word	0x200213ec
 8005d74:	200212b4 	.word	0x200212b4
 8005d78:	08005ce9 	.word	0x08005ce9

08005d7c <__sfp_lock_acquire>:
 8005d7c:	4801      	ldr	r0, [pc, #4]	@ (8005d84 <__sfp_lock_acquire+0x8>)
 8005d7e:	f000 b96a 	b.w	8006056 <__retarget_lock_acquire_recursive>
 8005d82:	bf00      	nop
 8005d84:	200213f5 	.word	0x200213f5

08005d88 <__sfp_lock_release>:
 8005d88:	4801      	ldr	r0, [pc, #4]	@ (8005d90 <__sfp_lock_release+0x8>)
 8005d8a:	f000 b965 	b.w	8006058 <__retarget_lock_release_recursive>
 8005d8e:	bf00      	nop
 8005d90:	200213f5 	.word	0x200213f5

08005d94 <__sinit>:
 8005d94:	b510      	push	{r4, lr}
 8005d96:	4604      	mov	r4, r0
 8005d98:	f7ff fff0 	bl	8005d7c <__sfp_lock_acquire>
 8005d9c:	6a23      	ldr	r3, [r4, #32]
 8005d9e:	b11b      	cbz	r3, 8005da8 <__sinit+0x14>
 8005da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005da4:	f7ff bff0 	b.w	8005d88 <__sfp_lock_release>
 8005da8:	4b04      	ldr	r3, [pc, #16]	@ (8005dbc <__sinit+0x28>)
 8005daa:	6223      	str	r3, [r4, #32]
 8005dac:	4b04      	ldr	r3, [pc, #16]	@ (8005dc0 <__sinit+0x2c>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1f5      	bne.n	8005da0 <__sinit+0xc>
 8005db4:	f7ff ffc4 	bl	8005d40 <global_stdio_init.part.0>
 8005db8:	e7f2      	b.n	8005da0 <__sinit+0xc>
 8005dba:	bf00      	nop
 8005dbc:	08005d01 	.word	0x08005d01
 8005dc0:	200213ec 	.word	0x200213ec

08005dc4 <_fwalk_sglue>:
 8005dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dc8:	4607      	mov	r7, r0
 8005dca:	4688      	mov	r8, r1
 8005dcc:	4614      	mov	r4, r2
 8005dce:	2600      	movs	r6, #0
 8005dd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005dd4:	f1b9 0901 	subs.w	r9, r9, #1
 8005dd8:	d505      	bpl.n	8005de6 <_fwalk_sglue+0x22>
 8005dda:	6824      	ldr	r4, [r4, #0]
 8005ddc:	2c00      	cmp	r4, #0
 8005dde:	d1f7      	bne.n	8005dd0 <_fwalk_sglue+0xc>
 8005de0:	4630      	mov	r0, r6
 8005de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005de6:	89ab      	ldrh	r3, [r5, #12]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d907      	bls.n	8005dfc <_fwalk_sglue+0x38>
 8005dec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005df0:	3301      	adds	r3, #1
 8005df2:	d003      	beq.n	8005dfc <_fwalk_sglue+0x38>
 8005df4:	4629      	mov	r1, r5
 8005df6:	4638      	mov	r0, r7
 8005df8:	47c0      	blx	r8
 8005dfa:	4306      	orrs	r6, r0
 8005dfc:	3568      	adds	r5, #104	@ 0x68
 8005dfe:	e7e9      	b.n	8005dd4 <_fwalk_sglue+0x10>

08005e00 <__sread>:
 8005e00:	b510      	push	{r4, lr}
 8005e02:	460c      	mov	r4, r1
 8005e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e08:	f000 f8d6 	bl	8005fb8 <_read_r>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	bfab      	itete	ge
 8005e10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e12:	89a3      	ldrhlt	r3, [r4, #12]
 8005e14:	181b      	addge	r3, r3, r0
 8005e16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e1a:	bfac      	ite	ge
 8005e1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e1e:	81a3      	strhlt	r3, [r4, #12]
 8005e20:	bd10      	pop	{r4, pc}

08005e22 <__swrite>:
 8005e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e26:	461f      	mov	r7, r3
 8005e28:	898b      	ldrh	r3, [r1, #12]
 8005e2a:	05db      	lsls	r3, r3, #23
 8005e2c:	4605      	mov	r5, r0
 8005e2e:	460c      	mov	r4, r1
 8005e30:	4616      	mov	r6, r2
 8005e32:	d505      	bpl.n	8005e40 <__swrite+0x1e>
 8005e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e38:	2302      	movs	r3, #2
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f000 f8aa 	bl	8005f94 <_lseek_r>
 8005e40:	89a3      	ldrh	r3, [r4, #12]
 8005e42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e4a:	81a3      	strh	r3, [r4, #12]
 8005e4c:	4632      	mov	r2, r6
 8005e4e:	463b      	mov	r3, r7
 8005e50:	4628      	mov	r0, r5
 8005e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e56:	f000 b8c1 	b.w	8005fdc <_write_r>

08005e5a <__sseek>:
 8005e5a:	b510      	push	{r4, lr}
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e62:	f000 f897 	bl	8005f94 <_lseek_r>
 8005e66:	1c43      	adds	r3, r0, #1
 8005e68:	89a3      	ldrh	r3, [r4, #12]
 8005e6a:	bf15      	itete	ne
 8005e6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e76:	81a3      	strheq	r3, [r4, #12]
 8005e78:	bf18      	it	ne
 8005e7a:	81a3      	strhne	r3, [r4, #12]
 8005e7c:	bd10      	pop	{r4, pc}

08005e7e <__sclose>:
 8005e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e82:	f000 b877 	b.w	8005f74 <_close_r>

08005e86 <memset>:
 8005e86:	4402      	add	r2, r0
 8005e88:	4603      	mov	r3, r0
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d100      	bne.n	8005e90 <memset+0xa>
 8005e8e:	4770      	bx	lr
 8005e90:	f803 1b01 	strb.w	r1, [r3], #1
 8005e94:	e7f9      	b.n	8005e8a <memset+0x4>

08005e96 <strncmp>:
 8005e96:	b510      	push	{r4, lr}
 8005e98:	b16a      	cbz	r2, 8005eb6 <strncmp+0x20>
 8005e9a:	3901      	subs	r1, #1
 8005e9c:	1884      	adds	r4, r0, r2
 8005e9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ea2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d103      	bne.n	8005eb2 <strncmp+0x1c>
 8005eaa:	42a0      	cmp	r0, r4
 8005eac:	d001      	beq.n	8005eb2 <strncmp+0x1c>
 8005eae:	2a00      	cmp	r2, #0
 8005eb0:	d1f5      	bne.n	8005e9e <strncmp+0x8>
 8005eb2:	1ad0      	subs	r0, r2, r3
 8005eb4:	bd10      	pop	{r4, pc}
 8005eb6:	4610      	mov	r0, r2
 8005eb8:	e7fc      	b.n	8005eb4 <strncmp+0x1e>
	...

08005ebc <strtok>:
 8005ebc:	4b16      	ldr	r3, [pc, #88]	@ (8005f18 <strtok+0x5c>)
 8005ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec2:	681f      	ldr	r7, [r3, #0]
 8005ec4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8005ec6:	4605      	mov	r5, r0
 8005ec8:	460e      	mov	r6, r1
 8005eca:	b9ec      	cbnz	r4, 8005f08 <strtok+0x4c>
 8005ecc:	2050      	movs	r0, #80	@ 0x50
 8005ece:	f000 f943 	bl	8006158 <malloc>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	6478      	str	r0, [r7, #68]	@ 0x44
 8005ed6:	b920      	cbnz	r0, 8005ee2 <strtok+0x26>
 8005ed8:	4b10      	ldr	r3, [pc, #64]	@ (8005f1c <strtok+0x60>)
 8005eda:	4811      	ldr	r0, [pc, #68]	@ (8005f20 <strtok+0x64>)
 8005edc:	215b      	movs	r1, #91	@ 0x5b
 8005ede:	f000 f8d3 	bl	8006088 <__assert_func>
 8005ee2:	e9c0 4400 	strd	r4, r4, [r0]
 8005ee6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005eea:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005eee:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8005ef2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8005ef6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8005efa:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8005efe:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8005f02:	6184      	str	r4, [r0, #24]
 8005f04:	7704      	strb	r4, [r0, #28]
 8005f06:	6244      	str	r4, [r0, #36]	@ 0x24
 8005f08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f0a:	4631      	mov	r1, r6
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f14:	f000 b806 	b.w	8005f24 <__strtok_r>
 8005f18:	2000001c 	.word	0x2000001c
 8005f1c:	08007215 	.word	0x08007215
 8005f20:	0800722c 	.word	0x0800722c

08005f24 <__strtok_r>:
 8005f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f26:	4604      	mov	r4, r0
 8005f28:	b908      	cbnz	r0, 8005f2e <__strtok_r+0xa>
 8005f2a:	6814      	ldr	r4, [r2, #0]
 8005f2c:	b144      	cbz	r4, 8005f40 <__strtok_r+0x1c>
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005f34:	460f      	mov	r7, r1
 8005f36:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005f3a:	b91e      	cbnz	r6, 8005f44 <__strtok_r+0x20>
 8005f3c:	b965      	cbnz	r5, 8005f58 <__strtok_r+0x34>
 8005f3e:	6015      	str	r5, [r2, #0]
 8005f40:	2000      	movs	r0, #0
 8005f42:	e005      	b.n	8005f50 <__strtok_r+0x2c>
 8005f44:	42b5      	cmp	r5, r6
 8005f46:	d1f6      	bne.n	8005f36 <__strtok_r+0x12>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1f0      	bne.n	8005f2e <__strtok_r+0xa>
 8005f4c:	6014      	str	r4, [r2, #0]
 8005f4e:	7003      	strb	r3, [r0, #0]
 8005f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f52:	461c      	mov	r4, r3
 8005f54:	e00c      	b.n	8005f70 <__strtok_r+0x4c>
 8005f56:	b915      	cbnz	r5, 8005f5e <__strtok_r+0x3a>
 8005f58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005f5c:	460e      	mov	r6, r1
 8005f5e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005f62:	42ab      	cmp	r3, r5
 8005f64:	d1f7      	bne.n	8005f56 <__strtok_r+0x32>
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d0f3      	beq.n	8005f52 <__strtok_r+0x2e>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005f70:	6014      	str	r4, [r2, #0]
 8005f72:	e7ed      	b.n	8005f50 <__strtok_r+0x2c>

08005f74 <_close_r>:
 8005f74:	b538      	push	{r3, r4, r5, lr}
 8005f76:	4d06      	ldr	r5, [pc, #24]	@ (8005f90 <_close_r+0x1c>)
 8005f78:	2300      	movs	r3, #0
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	4608      	mov	r0, r1
 8005f7e:	602b      	str	r3, [r5, #0]
 8005f80:	f7fb fd1a 	bl	80019b8 <_close>
 8005f84:	1c43      	adds	r3, r0, #1
 8005f86:	d102      	bne.n	8005f8e <_close_r+0x1a>
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	b103      	cbz	r3, 8005f8e <_close_r+0x1a>
 8005f8c:	6023      	str	r3, [r4, #0]
 8005f8e:	bd38      	pop	{r3, r4, r5, pc}
 8005f90:	200213f0 	.word	0x200213f0

08005f94 <_lseek_r>:
 8005f94:	b538      	push	{r3, r4, r5, lr}
 8005f96:	4d07      	ldr	r5, [pc, #28]	@ (8005fb4 <_lseek_r+0x20>)
 8005f98:	4604      	mov	r4, r0
 8005f9a:	4608      	mov	r0, r1
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	602a      	str	r2, [r5, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f7fb fd2f 	bl	8001a06 <_lseek>
 8005fa8:	1c43      	adds	r3, r0, #1
 8005faa:	d102      	bne.n	8005fb2 <_lseek_r+0x1e>
 8005fac:	682b      	ldr	r3, [r5, #0]
 8005fae:	b103      	cbz	r3, 8005fb2 <_lseek_r+0x1e>
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}
 8005fb4:	200213f0 	.word	0x200213f0

08005fb8 <_read_r>:
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	4d07      	ldr	r5, [pc, #28]	@ (8005fd8 <_read_r+0x20>)
 8005fbc:	4604      	mov	r4, r0
 8005fbe:	4608      	mov	r0, r1
 8005fc0:	4611      	mov	r1, r2
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	602a      	str	r2, [r5, #0]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f7fb fcbd 	bl	8001946 <_read>
 8005fcc:	1c43      	adds	r3, r0, #1
 8005fce:	d102      	bne.n	8005fd6 <_read_r+0x1e>
 8005fd0:	682b      	ldr	r3, [r5, #0]
 8005fd2:	b103      	cbz	r3, 8005fd6 <_read_r+0x1e>
 8005fd4:	6023      	str	r3, [r4, #0]
 8005fd6:	bd38      	pop	{r3, r4, r5, pc}
 8005fd8:	200213f0 	.word	0x200213f0

08005fdc <_write_r>:
 8005fdc:	b538      	push	{r3, r4, r5, lr}
 8005fde:	4d07      	ldr	r5, [pc, #28]	@ (8005ffc <_write_r+0x20>)
 8005fe0:	4604      	mov	r4, r0
 8005fe2:	4608      	mov	r0, r1
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	602a      	str	r2, [r5, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	f7fb fcc8 	bl	8001980 <_write>
 8005ff0:	1c43      	adds	r3, r0, #1
 8005ff2:	d102      	bne.n	8005ffa <_write_r+0x1e>
 8005ff4:	682b      	ldr	r3, [r5, #0]
 8005ff6:	b103      	cbz	r3, 8005ffa <_write_r+0x1e>
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	bd38      	pop	{r3, r4, r5, pc}
 8005ffc:	200213f0 	.word	0x200213f0

08006000 <__errno>:
 8006000:	4b01      	ldr	r3, [pc, #4]	@ (8006008 <__errno+0x8>)
 8006002:	6818      	ldr	r0, [r3, #0]
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	2000001c 	.word	0x2000001c

0800600c <__libc_init_array>:
 800600c:	b570      	push	{r4, r5, r6, lr}
 800600e:	4d0d      	ldr	r5, [pc, #52]	@ (8006044 <__libc_init_array+0x38>)
 8006010:	4c0d      	ldr	r4, [pc, #52]	@ (8006048 <__libc_init_array+0x3c>)
 8006012:	1b64      	subs	r4, r4, r5
 8006014:	10a4      	asrs	r4, r4, #2
 8006016:	2600      	movs	r6, #0
 8006018:	42a6      	cmp	r6, r4
 800601a:	d109      	bne.n	8006030 <__libc_init_array+0x24>
 800601c:	4d0b      	ldr	r5, [pc, #44]	@ (800604c <__libc_init_array+0x40>)
 800601e:	4c0c      	ldr	r4, [pc, #48]	@ (8006050 <__libc_init_array+0x44>)
 8006020:	f000 fe50 	bl	8006cc4 <_init>
 8006024:	1b64      	subs	r4, r4, r5
 8006026:	10a4      	asrs	r4, r4, #2
 8006028:	2600      	movs	r6, #0
 800602a:	42a6      	cmp	r6, r4
 800602c:	d105      	bne.n	800603a <__libc_init_array+0x2e>
 800602e:	bd70      	pop	{r4, r5, r6, pc}
 8006030:	f855 3b04 	ldr.w	r3, [r5], #4
 8006034:	4798      	blx	r3
 8006036:	3601      	adds	r6, #1
 8006038:	e7ee      	b.n	8006018 <__libc_init_array+0xc>
 800603a:	f855 3b04 	ldr.w	r3, [r5], #4
 800603e:	4798      	blx	r3
 8006040:	3601      	adds	r6, #1
 8006042:	e7f2      	b.n	800602a <__libc_init_array+0x1e>
 8006044:	08007300 	.word	0x08007300
 8006048:	08007300 	.word	0x08007300
 800604c:	08007300 	.word	0x08007300
 8006050:	08007304 	.word	0x08007304

08006054 <__retarget_lock_init_recursive>:
 8006054:	4770      	bx	lr

08006056 <__retarget_lock_acquire_recursive>:
 8006056:	4770      	bx	lr

08006058 <__retarget_lock_release_recursive>:
 8006058:	4770      	bx	lr

0800605a <strcpy>:
 800605a:	4603      	mov	r3, r0
 800605c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006060:	f803 2b01 	strb.w	r2, [r3], #1
 8006064:	2a00      	cmp	r2, #0
 8006066:	d1f9      	bne.n	800605c <strcpy+0x2>
 8006068:	4770      	bx	lr

0800606a <memcpy>:
 800606a:	440a      	add	r2, r1
 800606c:	4291      	cmp	r1, r2
 800606e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006072:	d100      	bne.n	8006076 <memcpy+0xc>
 8006074:	4770      	bx	lr
 8006076:	b510      	push	{r4, lr}
 8006078:	f811 4b01 	ldrb.w	r4, [r1], #1
 800607c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006080:	4291      	cmp	r1, r2
 8006082:	d1f9      	bne.n	8006078 <memcpy+0xe>
 8006084:	bd10      	pop	{r4, pc}
	...

08006088 <__assert_func>:
 8006088:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800608a:	4614      	mov	r4, r2
 800608c:	461a      	mov	r2, r3
 800608e:	4b09      	ldr	r3, [pc, #36]	@ (80060b4 <__assert_func+0x2c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4605      	mov	r5, r0
 8006094:	68d8      	ldr	r0, [r3, #12]
 8006096:	b954      	cbnz	r4, 80060ae <__assert_func+0x26>
 8006098:	4b07      	ldr	r3, [pc, #28]	@ (80060b8 <__assert_func+0x30>)
 800609a:	461c      	mov	r4, r3
 800609c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80060a0:	9100      	str	r1, [sp, #0]
 80060a2:	462b      	mov	r3, r5
 80060a4:	4905      	ldr	r1, [pc, #20]	@ (80060bc <__assert_func+0x34>)
 80060a6:	f000 f9b9 	bl	800641c <fiprintf>
 80060aa:	f000 f9d9 	bl	8006460 <abort>
 80060ae:	4b04      	ldr	r3, [pc, #16]	@ (80060c0 <__assert_func+0x38>)
 80060b0:	e7f4      	b.n	800609c <__assert_func+0x14>
 80060b2:	bf00      	nop
 80060b4:	2000001c 	.word	0x2000001c
 80060b8:	080072c1 	.word	0x080072c1
 80060bc:	08007293 	.word	0x08007293
 80060c0:	08007286 	.word	0x08007286

080060c4 <_free_r>:
 80060c4:	b538      	push	{r3, r4, r5, lr}
 80060c6:	4605      	mov	r5, r0
 80060c8:	2900      	cmp	r1, #0
 80060ca:	d041      	beq.n	8006150 <_free_r+0x8c>
 80060cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060d0:	1f0c      	subs	r4, r1, #4
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	bfb8      	it	lt
 80060d6:	18e4      	addlt	r4, r4, r3
 80060d8:	f000 f8e8 	bl	80062ac <__malloc_lock>
 80060dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006154 <_free_r+0x90>)
 80060de:	6813      	ldr	r3, [r2, #0]
 80060e0:	b933      	cbnz	r3, 80060f0 <_free_r+0x2c>
 80060e2:	6063      	str	r3, [r4, #4]
 80060e4:	6014      	str	r4, [r2, #0]
 80060e6:	4628      	mov	r0, r5
 80060e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060ec:	f000 b8e4 	b.w	80062b8 <__malloc_unlock>
 80060f0:	42a3      	cmp	r3, r4
 80060f2:	d908      	bls.n	8006106 <_free_r+0x42>
 80060f4:	6820      	ldr	r0, [r4, #0]
 80060f6:	1821      	adds	r1, r4, r0
 80060f8:	428b      	cmp	r3, r1
 80060fa:	bf01      	itttt	eq
 80060fc:	6819      	ldreq	r1, [r3, #0]
 80060fe:	685b      	ldreq	r3, [r3, #4]
 8006100:	1809      	addeq	r1, r1, r0
 8006102:	6021      	streq	r1, [r4, #0]
 8006104:	e7ed      	b.n	80060e2 <_free_r+0x1e>
 8006106:	461a      	mov	r2, r3
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	b10b      	cbz	r3, 8006110 <_free_r+0x4c>
 800610c:	42a3      	cmp	r3, r4
 800610e:	d9fa      	bls.n	8006106 <_free_r+0x42>
 8006110:	6811      	ldr	r1, [r2, #0]
 8006112:	1850      	adds	r0, r2, r1
 8006114:	42a0      	cmp	r0, r4
 8006116:	d10b      	bne.n	8006130 <_free_r+0x6c>
 8006118:	6820      	ldr	r0, [r4, #0]
 800611a:	4401      	add	r1, r0
 800611c:	1850      	adds	r0, r2, r1
 800611e:	4283      	cmp	r3, r0
 8006120:	6011      	str	r1, [r2, #0]
 8006122:	d1e0      	bne.n	80060e6 <_free_r+0x22>
 8006124:	6818      	ldr	r0, [r3, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	6053      	str	r3, [r2, #4]
 800612a:	4408      	add	r0, r1
 800612c:	6010      	str	r0, [r2, #0]
 800612e:	e7da      	b.n	80060e6 <_free_r+0x22>
 8006130:	d902      	bls.n	8006138 <_free_r+0x74>
 8006132:	230c      	movs	r3, #12
 8006134:	602b      	str	r3, [r5, #0]
 8006136:	e7d6      	b.n	80060e6 <_free_r+0x22>
 8006138:	6820      	ldr	r0, [r4, #0]
 800613a:	1821      	adds	r1, r4, r0
 800613c:	428b      	cmp	r3, r1
 800613e:	bf04      	itt	eq
 8006140:	6819      	ldreq	r1, [r3, #0]
 8006142:	685b      	ldreq	r3, [r3, #4]
 8006144:	6063      	str	r3, [r4, #4]
 8006146:	bf04      	itt	eq
 8006148:	1809      	addeq	r1, r1, r0
 800614a:	6021      	streq	r1, [r4, #0]
 800614c:	6054      	str	r4, [r2, #4]
 800614e:	e7ca      	b.n	80060e6 <_free_r+0x22>
 8006150:	bd38      	pop	{r3, r4, r5, pc}
 8006152:	bf00      	nop
 8006154:	200213fc 	.word	0x200213fc

08006158 <malloc>:
 8006158:	4b02      	ldr	r3, [pc, #8]	@ (8006164 <malloc+0xc>)
 800615a:	4601      	mov	r1, r0
 800615c:	6818      	ldr	r0, [r3, #0]
 800615e:	f000 b825 	b.w	80061ac <_malloc_r>
 8006162:	bf00      	nop
 8006164:	2000001c 	.word	0x2000001c

08006168 <sbrk_aligned>:
 8006168:	b570      	push	{r4, r5, r6, lr}
 800616a:	4e0f      	ldr	r6, [pc, #60]	@ (80061a8 <sbrk_aligned+0x40>)
 800616c:	460c      	mov	r4, r1
 800616e:	6831      	ldr	r1, [r6, #0]
 8006170:	4605      	mov	r5, r0
 8006172:	b911      	cbnz	r1, 800617a <sbrk_aligned+0x12>
 8006174:	f000 f964 	bl	8006440 <_sbrk_r>
 8006178:	6030      	str	r0, [r6, #0]
 800617a:	4621      	mov	r1, r4
 800617c:	4628      	mov	r0, r5
 800617e:	f000 f95f 	bl	8006440 <_sbrk_r>
 8006182:	1c43      	adds	r3, r0, #1
 8006184:	d103      	bne.n	800618e <sbrk_aligned+0x26>
 8006186:	f04f 34ff 	mov.w	r4, #4294967295
 800618a:	4620      	mov	r0, r4
 800618c:	bd70      	pop	{r4, r5, r6, pc}
 800618e:	1cc4      	adds	r4, r0, #3
 8006190:	f024 0403 	bic.w	r4, r4, #3
 8006194:	42a0      	cmp	r0, r4
 8006196:	d0f8      	beq.n	800618a <sbrk_aligned+0x22>
 8006198:	1a21      	subs	r1, r4, r0
 800619a:	4628      	mov	r0, r5
 800619c:	f000 f950 	bl	8006440 <_sbrk_r>
 80061a0:	3001      	adds	r0, #1
 80061a2:	d1f2      	bne.n	800618a <sbrk_aligned+0x22>
 80061a4:	e7ef      	b.n	8006186 <sbrk_aligned+0x1e>
 80061a6:	bf00      	nop
 80061a8:	200213f8 	.word	0x200213f8

080061ac <_malloc_r>:
 80061ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061b0:	1ccd      	adds	r5, r1, #3
 80061b2:	f025 0503 	bic.w	r5, r5, #3
 80061b6:	3508      	adds	r5, #8
 80061b8:	2d0c      	cmp	r5, #12
 80061ba:	bf38      	it	cc
 80061bc:	250c      	movcc	r5, #12
 80061be:	2d00      	cmp	r5, #0
 80061c0:	4606      	mov	r6, r0
 80061c2:	db01      	blt.n	80061c8 <_malloc_r+0x1c>
 80061c4:	42a9      	cmp	r1, r5
 80061c6:	d904      	bls.n	80061d2 <_malloc_r+0x26>
 80061c8:	230c      	movs	r3, #12
 80061ca:	6033      	str	r3, [r6, #0]
 80061cc:	2000      	movs	r0, #0
 80061ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80062a8 <_malloc_r+0xfc>
 80061d6:	f000 f869 	bl	80062ac <__malloc_lock>
 80061da:	f8d8 3000 	ldr.w	r3, [r8]
 80061de:	461c      	mov	r4, r3
 80061e0:	bb44      	cbnz	r4, 8006234 <_malloc_r+0x88>
 80061e2:	4629      	mov	r1, r5
 80061e4:	4630      	mov	r0, r6
 80061e6:	f7ff ffbf 	bl	8006168 <sbrk_aligned>
 80061ea:	1c43      	adds	r3, r0, #1
 80061ec:	4604      	mov	r4, r0
 80061ee:	d158      	bne.n	80062a2 <_malloc_r+0xf6>
 80061f0:	f8d8 4000 	ldr.w	r4, [r8]
 80061f4:	4627      	mov	r7, r4
 80061f6:	2f00      	cmp	r7, #0
 80061f8:	d143      	bne.n	8006282 <_malloc_r+0xd6>
 80061fa:	2c00      	cmp	r4, #0
 80061fc:	d04b      	beq.n	8006296 <_malloc_r+0xea>
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	4639      	mov	r1, r7
 8006202:	4630      	mov	r0, r6
 8006204:	eb04 0903 	add.w	r9, r4, r3
 8006208:	f000 f91a 	bl	8006440 <_sbrk_r>
 800620c:	4581      	cmp	r9, r0
 800620e:	d142      	bne.n	8006296 <_malloc_r+0xea>
 8006210:	6821      	ldr	r1, [r4, #0]
 8006212:	1a6d      	subs	r5, r5, r1
 8006214:	4629      	mov	r1, r5
 8006216:	4630      	mov	r0, r6
 8006218:	f7ff ffa6 	bl	8006168 <sbrk_aligned>
 800621c:	3001      	adds	r0, #1
 800621e:	d03a      	beq.n	8006296 <_malloc_r+0xea>
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	442b      	add	r3, r5
 8006224:	6023      	str	r3, [r4, #0]
 8006226:	f8d8 3000 	ldr.w	r3, [r8]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	bb62      	cbnz	r2, 8006288 <_malloc_r+0xdc>
 800622e:	f8c8 7000 	str.w	r7, [r8]
 8006232:	e00f      	b.n	8006254 <_malloc_r+0xa8>
 8006234:	6822      	ldr	r2, [r4, #0]
 8006236:	1b52      	subs	r2, r2, r5
 8006238:	d420      	bmi.n	800627c <_malloc_r+0xd0>
 800623a:	2a0b      	cmp	r2, #11
 800623c:	d917      	bls.n	800626e <_malloc_r+0xc2>
 800623e:	1961      	adds	r1, r4, r5
 8006240:	42a3      	cmp	r3, r4
 8006242:	6025      	str	r5, [r4, #0]
 8006244:	bf18      	it	ne
 8006246:	6059      	strne	r1, [r3, #4]
 8006248:	6863      	ldr	r3, [r4, #4]
 800624a:	bf08      	it	eq
 800624c:	f8c8 1000 	streq.w	r1, [r8]
 8006250:	5162      	str	r2, [r4, r5]
 8006252:	604b      	str	r3, [r1, #4]
 8006254:	4630      	mov	r0, r6
 8006256:	f000 f82f 	bl	80062b8 <__malloc_unlock>
 800625a:	f104 000b 	add.w	r0, r4, #11
 800625e:	1d23      	adds	r3, r4, #4
 8006260:	f020 0007 	bic.w	r0, r0, #7
 8006264:	1ac2      	subs	r2, r0, r3
 8006266:	bf1c      	itt	ne
 8006268:	1a1b      	subne	r3, r3, r0
 800626a:	50a3      	strne	r3, [r4, r2]
 800626c:	e7af      	b.n	80061ce <_malloc_r+0x22>
 800626e:	6862      	ldr	r2, [r4, #4]
 8006270:	42a3      	cmp	r3, r4
 8006272:	bf0c      	ite	eq
 8006274:	f8c8 2000 	streq.w	r2, [r8]
 8006278:	605a      	strne	r2, [r3, #4]
 800627a:	e7eb      	b.n	8006254 <_malloc_r+0xa8>
 800627c:	4623      	mov	r3, r4
 800627e:	6864      	ldr	r4, [r4, #4]
 8006280:	e7ae      	b.n	80061e0 <_malloc_r+0x34>
 8006282:	463c      	mov	r4, r7
 8006284:	687f      	ldr	r7, [r7, #4]
 8006286:	e7b6      	b.n	80061f6 <_malloc_r+0x4a>
 8006288:	461a      	mov	r2, r3
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	42a3      	cmp	r3, r4
 800628e:	d1fb      	bne.n	8006288 <_malloc_r+0xdc>
 8006290:	2300      	movs	r3, #0
 8006292:	6053      	str	r3, [r2, #4]
 8006294:	e7de      	b.n	8006254 <_malloc_r+0xa8>
 8006296:	230c      	movs	r3, #12
 8006298:	6033      	str	r3, [r6, #0]
 800629a:	4630      	mov	r0, r6
 800629c:	f000 f80c 	bl	80062b8 <__malloc_unlock>
 80062a0:	e794      	b.n	80061cc <_malloc_r+0x20>
 80062a2:	6005      	str	r5, [r0, #0]
 80062a4:	e7d6      	b.n	8006254 <_malloc_r+0xa8>
 80062a6:	bf00      	nop
 80062a8:	200213fc 	.word	0x200213fc

080062ac <__malloc_lock>:
 80062ac:	4801      	ldr	r0, [pc, #4]	@ (80062b4 <__malloc_lock+0x8>)
 80062ae:	f7ff bed2 	b.w	8006056 <__retarget_lock_acquire_recursive>
 80062b2:	bf00      	nop
 80062b4:	200213f4 	.word	0x200213f4

080062b8 <__malloc_unlock>:
 80062b8:	4801      	ldr	r0, [pc, #4]	@ (80062c0 <__malloc_unlock+0x8>)
 80062ba:	f7ff becd 	b.w	8006058 <__retarget_lock_release_recursive>
 80062be:	bf00      	nop
 80062c0:	200213f4 	.word	0x200213f4

080062c4 <__sflush_r>:
 80062c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062cc:	0716      	lsls	r6, r2, #28
 80062ce:	4605      	mov	r5, r0
 80062d0:	460c      	mov	r4, r1
 80062d2:	d454      	bmi.n	800637e <__sflush_r+0xba>
 80062d4:	684b      	ldr	r3, [r1, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	dc02      	bgt.n	80062e0 <__sflush_r+0x1c>
 80062da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80062dc:	2b00      	cmp	r3, #0
 80062de:	dd48      	ble.n	8006372 <__sflush_r+0xae>
 80062e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062e2:	2e00      	cmp	r6, #0
 80062e4:	d045      	beq.n	8006372 <__sflush_r+0xae>
 80062e6:	2300      	movs	r3, #0
 80062e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80062ec:	682f      	ldr	r7, [r5, #0]
 80062ee:	6a21      	ldr	r1, [r4, #32]
 80062f0:	602b      	str	r3, [r5, #0]
 80062f2:	d030      	beq.n	8006356 <__sflush_r+0x92>
 80062f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80062f6:	89a3      	ldrh	r3, [r4, #12]
 80062f8:	0759      	lsls	r1, r3, #29
 80062fa:	d505      	bpl.n	8006308 <__sflush_r+0x44>
 80062fc:	6863      	ldr	r3, [r4, #4]
 80062fe:	1ad2      	subs	r2, r2, r3
 8006300:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006302:	b10b      	cbz	r3, 8006308 <__sflush_r+0x44>
 8006304:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006306:	1ad2      	subs	r2, r2, r3
 8006308:	2300      	movs	r3, #0
 800630a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800630c:	6a21      	ldr	r1, [r4, #32]
 800630e:	4628      	mov	r0, r5
 8006310:	47b0      	blx	r6
 8006312:	1c43      	adds	r3, r0, #1
 8006314:	89a3      	ldrh	r3, [r4, #12]
 8006316:	d106      	bne.n	8006326 <__sflush_r+0x62>
 8006318:	6829      	ldr	r1, [r5, #0]
 800631a:	291d      	cmp	r1, #29
 800631c:	d82b      	bhi.n	8006376 <__sflush_r+0xb2>
 800631e:	4a2a      	ldr	r2, [pc, #168]	@ (80063c8 <__sflush_r+0x104>)
 8006320:	410a      	asrs	r2, r1
 8006322:	07d6      	lsls	r6, r2, #31
 8006324:	d427      	bmi.n	8006376 <__sflush_r+0xb2>
 8006326:	2200      	movs	r2, #0
 8006328:	6062      	str	r2, [r4, #4]
 800632a:	04d9      	lsls	r1, r3, #19
 800632c:	6922      	ldr	r2, [r4, #16]
 800632e:	6022      	str	r2, [r4, #0]
 8006330:	d504      	bpl.n	800633c <__sflush_r+0x78>
 8006332:	1c42      	adds	r2, r0, #1
 8006334:	d101      	bne.n	800633a <__sflush_r+0x76>
 8006336:	682b      	ldr	r3, [r5, #0]
 8006338:	b903      	cbnz	r3, 800633c <__sflush_r+0x78>
 800633a:	6560      	str	r0, [r4, #84]	@ 0x54
 800633c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800633e:	602f      	str	r7, [r5, #0]
 8006340:	b1b9      	cbz	r1, 8006372 <__sflush_r+0xae>
 8006342:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006346:	4299      	cmp	r1, r3
 8006348:	d002      	beq.n	8006350 <__sflush_r+0x8c>
 800634a:	4628      	mov	r0, r5
 800634c:	f7ff feba 	bl	80060c4 <_free_r>
 8006350:	2300      	movs	r3, #0
 8006352:	6363      	str	r3, [r4, #52]	@ 0x34
 8006354:	e00d      	b.n	8006372 <__sflush_r+0xae>
 8006356:	2301      	movs	r3, #1
 8006358:	4628      	mov	r0, r5
 800635a:	47b0      	blx	r6
 800635c:	4602      	mov	r2, r0
 800635e:	1c50      	adds	r0, r2, #1
 8006360:	d1c9      	bne.n	80062f6 <__sflush_r+0x32>
 8006362:	682b      	ldr	r3, [r5, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d0c6      	beq.n	80062f6 <__sflush_r+0x32>
 8006368:	2b1d      	cmp	r3, #29
 800636a:	d001      	beq.n	8006370 <__sflush_r+0xac>
 800636c:	2b16      	cmp	r3, #22
 800636e:	d11e      	bne.n	80063ae <__sflush_r+0xea>
 8006370:	602f      	str	r7, [r5, #0]
 8006372:	2000      	movs	r0, #0
 8006374:	e022      	b.n	80063bc <__sflush_r+0xf8>
 8006376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800637a:	b21b      	sxth	r3, r3
 800637c:	e01b      	b.n	80063b6 <__sflush_r+0xf2>
 800637e:	690f      	ldr	r7, [r1, #16]
 8006380:	2f00      	cmp	r7, #0
 8006382:	d0f6      	beq.n	8006372 <__sflush_r+0xae>
 8006384:	0793      	lsls	r3, r2, #30
 8006386:	680e      	ldr	r6, [r1, #0]
 8006388:	bf08      	it	eq
 800638a:	694b      	ldreq	r3, [r1, #20]
 800638c:	600f      	str	r7, [r1, #0]
 800638e:	bf18      	it	ne
 8006390:	2300      	movne	r3, #0
 8006392:	eba6 0807 	sub.w	r8, r6, r7
 8006396:	608b      	str	r3, [r1, #8]
 8006398:	f1b8 0f00 	cmp.w	r8, #0
 800639c:	dde9      	ble.n	8006372 <__sflush_r+0xae>
 800639e:	6a21      	ldr	r1, [r4, #32]
 80063a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80063a2:	4643      	mov	r3, r8
 80063a4:	463a      	mov	r2, r7
 80063a6:	4628      	mov	r0, r5
 80063a8:	47b0      	blx	r6
 80063aa:	2800      	cmp	r0, #0
 80063ac:	dc08      	bgt.n	80063c0 <__sflush_r+0xfc>
 80063ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063b6:	81a3      	strh	r3, [r4, #12]
 80063b8:	f04f 30ff 	mov.w	r0, #4294967295
 80063bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063c0:	4407      	add	r7, r0
 80063c2:	eba8 0800 	sub.w	r8, r8, r0
 80063c6:	e7e7      	b.n	8006398 <__sflush_r+0xd4>
 80063c8:	dfbffffe 	.word	0xdfbffffe

080063cc <_fflush_r>:
 80063cc:	b538      	push	{r3, r4, r5, lr}
 80063ce:	690b      	ldr	r3, [r1, #16]
 80063d0:	4605      	mov	r5, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	b913      	cbnz	r3, 80063dc <_fflush_r+0x10>
 80063d6:	2500      	movs	r5, #0
 80063d8:	4628      	mov	r0, r5
 80063da:	bd38      	pop	{r3, r4, r5, pc}
 80063dc:	b118      	cbz	r0, 80063e6 <_fflush_r+0x1a>
 80063de:	6a03      	ldr	r3, [r0, #32]
 80063e0:	b90b      	cbnz	r3, 80063e6 <_fflush_r+0x1a>
 80063e2:	f7ff fcd7 	bl	8005d94 <__sinit>
 80063e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0f3      	beq.n	80063d6 <_fflush_r+0xa>
 80063ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80063f0:	07d0      	lsls	r0, r2, #31
 80063f2:	d404      	bmi.n	80063fe <_fflush_r+0x32>
 80063f4:	0599      	lsls	r1, r3, #22
 80063f6:	d402      	bmi.n	80063fe <_fflush_r+0x32>
 80063f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063fa:	f7ff fe2c 	bl	8006056 <__retarget_lock_acquire_recursive>
 80063fe:	4628      	mov	r0, r5
 8006400:	4621      	mov	r1, r4
 8006402:	f7ff ff5f 	bl	80062c4 <__sflush_r>
 8006406:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006408:	07da      	lsls	r2, r3, #31
 800640a:	4605      	mov	r5, r0
 800640c:	d4e4      	bmi.n	80063d8 <_fflush_r+0xc>
 800640e:	89a3      	ldrh	r3, [r4, #12]
 8006410:	059b      	lsls	r3, r3, #22
 8006412:	d4e1      	bmi.n	80063d8 <_fflush_r+0xc>
 8006414:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006416:	f7ff fe1f 	bl	8006058 <__retarget_lock_release_recursive>
 800641a:	e7dd      	b.n	80063d8 <_fflush_r+0xc>

0800641c <fiprintf>:
 800641c:	b40e      	push	{r1, r2, r3}
 800641e:	b503      	push	{r0, r1, lr}
 8006420:	4601      	mov	r1, r0
 8006422:	ab03      	add	r3, sp, #12
 8006424:	4805      	ldr	r0, [pc, #20]	@ (800643c <fiprintf+0x20>)
 8006426:	f853 2b04 	ldr.w	r2, [r3], #4
 800642a:	6800      	ldr	r0, [r0, #0]
 800642c:	9301      	str	r3, [sp, #4]
 800642e:	f000 f847 	bl	80064c0 <_vfiprintf_r>
 8006432:	b002      	add	sp, #8
 8006434:	f85d eb04 	ldr.w	lr, [sp], #4
 8006438:	b003      	add	sp, #12
 800643a:	4770      	bx	lr
 800643c:	2000001c 	.word	0x2000001c

08006440 <_sbrk_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	4d06      	ldr	r5, [pc, #24]	@ (800645c <_sbrk_r+0x1c>)
 8006444:	2300      	movs	r3, #0
 8006446:	4604      	mov	r4, r0
 8006448:	4608      	mov	r0, r1
 800644a:	602b      	str	r3, [r5, #0]
 800644c:	f7fb fae8 	bl	8001a20 <_sbrk>
 8006450:	1c43      	adds	r3, r0, #1
 8006452:	d102      	bne.n	800645a <_sbrk_r+0x1a>
 8006454:	682b      	ldr	r3, [r5, #0]
 8006456:	b103      	cbz	r3, 800645a <_sbrk_r+0x1a>
 8006458:	6023      	str	r3, [r4, #0]
 800645a:	bd38      	pop	{r3, r4, r5, pc}
 800645c:	200213f0 	.word	0x200213f0

08006460 <abort>:
 8006460:	b508      	push	{r3, lr}
 8006462:	2006      	movs	r0, #6
 8006464:	f000 fb8e 	bl	8006b84 <raise>
 8006468:	2001      	movs	r0, #1
 800646a:	f7fb fa61 	bl	8001930 <_exit>

0800646e <__sfputc_r>:
 800646e:	6893      	ldr	r3, [r2, #8]
 8006470:	3b01      	subs	r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	b410      	push	{r4}
 8006476:	6093      	str	r3, [r2, #8]
 8006478:	da08      	bge.n	800648c <__sfputc_r+0x1e>
 800647a:	6994      	ldr	r4, [r2, #24]
 800647c:	42a3      	cmp	r3, r4
 800647e:	db01      	blt.n	8006484 <__sfputc_r+0x16>
 8006480:	290a      	cmp	r1, #10
 8006482:	d103      	bne.n	800648c <__sfputc_r+0x1e>
 8006484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006488:	f000 bac0 	b.w	8006a0c <__swbuf_r>
 800648c:	6813      	ldr	r3, [r2, #0]
 800648e:	1c58      	adds	r0, r3, #1
 8006490:	6010      	str	r0, [r2, #0]
 8006492:	7019      	strb	r1, [r3, #0]
 8006494:	4608      	mov	r0, r1
 8006496:	f85d 4b04 	ldr.w	r4, [sp], #4
 800649a:	4770      	bx	lr

0800649c <__sfputs_r>:
 800649c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649e:	4606      	mov	r6, r0
 80064a0:	460f      	mov	r7, r1
 80064a2:	4614      	mov	r4, r2
 80064a4:	18d5      	adds	r5, r2, r3
 80064a6:	42ac      	cmp	r4, r5
 80064a8:	d101      	bne.n	80064ae <__sfputs_r+0x12>
 80064aa:	2000      	movs	r0, #0
 80064ac:	e007      	b.n	80064be <__sfputs_r+0x22>
 80064ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064b2:	463a      	mov	r2, r7
 80064b4:	4630      	mov	r0, r6
 80064b6:	f7ff ffda 	bl	800646e <__sfputc_r>
 80064ba:	1c43      	adds	r3, r0, #1
 80064bc:	d1f3      	bne.n	80064a6 <__sfputs_r+0xa>
 80064be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080064c0 <_vfiprintf_r>:
 80064c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c4:	460d      	mov	r5, r1
 80064c6:	b09d      	sub	sp, #116	@ 0x74
 80064c8:	4614      	mov	r4, r2
 80064ca:	4698      	mov	r8, r3
 80064cc:	4606      	mov	r6, r0
 80064ce:	b118      	cbz	r0, 80064d8 <_vfiprintf_r+0x18>
 80064d0:	6a03      	ldr	r3, [r0, #32]
 80064d2:	b90b      	cbnz	r3, 80064d8 <_vfiprintf_r+0x18>
 80064d4:	f7ff fc5e 	bl	8005d94 <__sinit>
 80064d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064da:	07d9      	lsls	r1, r3, #31
 80064dc:	d405      	bmi.n	80064ea <_vfiprintf_r+0x2a>
 80064de:	89ab      	ldrh	r3, [r5, #12]
 80064e0:	059a      	lsls	r2, r3, #22
 80064e2:	d402      	bmi.n	80064ea <_vfiprintf_r+0x2a>
 80064e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064e6:	f7ff fdb6 	bl	8006056 <__retarget_lock_acquire_recursive>
 80064ea:	89ab      	ldrh	r3, [r5, #12]
 80064ec:	071b      	lsls	r3, r3, #28
 80064ee:	d501      	bpl.n	80064f4 <_vfiprintf_r+0x34>
 80064f0:	692b      	ldr	r3, [r5, #16]
 80064f2:	b99b      	cbnz	r3, 800651c <_vfiprintf_r+0x5c>
 80064f4:	4629      	mov	r1, r5
 80064f6:	4630      	mov	r0, r6
 80064f8:	f000 fac6 	bl	8006a88 <__swsetup_r>
 80064fc:	b170      	cbz	r0, 800651c <_vfiprintf_r+0x5c>
 80064fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006500:	07dc      	lsls	r4, r3, #31
 8006502:	d504      	bpl.n	800650e <_vfiprintf_r+0x4e>
 8006504:	f04f 30ff 	mov.w	r0, #4294967295
 8006508:	b01d      	add	sp, #116	@ 0x74
 800650a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650e:	89ab      	ldrh	r3, [r5, #12]
 8006510:	0598      	lsls	r0, r3, #22
 8006512:	d4f7      	bmi.n	8006504 <_vfiprintf_r+0x44>
 8006514:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006516:	f7ff fd9f 	bl	8006058 <__retarget_lock_release_recursive>
 800651a:	e7f3      	b.n	8006504 <_vfiprintf_r+0x44>
 800651c:	2300      	movs	r3, #0
 800651e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006520:	2320      	movs	r3, #32
 8006522:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006526:	f8cd 800c 	str.w	r8, [sp, #12]
 800652a:	2330      	movs	r3, #48	@ 0x30
 800652c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80066dc <_vfiprintf_r+0x21c>
 8006530:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006534:	f04f 0901 	mov.w	r9, #1
 8006538:	4623      	mov	r3, r4
 800653a:	469a      	mov	sl, r3
 800653c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006540:	b10a      	cbz	r2, 8006546 <_vfiprintf_r+0x86>
 8006542:	2a25      	cmp	r2, #37	@ 0x25
 8006544:	d1f9      	bne.n	800653a <_vfiprintf_r+0x7a>
 8006546:	ebba 0b04 	subs.w	fp, sl, r4
 800654a:	d00b      	beq.n	8006564 <_vfiprintf_r+0xa4>
 800654c:	465b      	mov	r3, fp
 800654e:	4622      	mov	r2, r4
 8006550:	4629      	mov	r1, r5
 8006552:	4630      	mov	r0, r6
 8006554:	f7ff ffa2 	bl	800649c <__sfputs_r>
 8006558:	3001      	adds	r0, #1
 800655a:	f000 80a7 	beq.w	80066ac <_vfiprintf_r+0x1ec>
 800655e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006560:	445a      	add	r2, fp
 8006562:	9209      	str	r2, [sp, #36]	@ 0x24
 8006564:	f89a 3000 	ldrb.w	r3, [sl]
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 809f 	beq.w	80066ac <_vfiprintf_r+0x1ec>
 800656e:	2300      	movs	r3, #0
 8006570:	f04f 32ff 	mov.w	r2, #4294967295
 8006574:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006578:	f10a 0a01 	add.w	sl, sl, #1
 800657c:	9304      	str	r3, [sp, #16]
 800657e:	9307      	str	r3, [sp, #28]
 8006580:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006584:	931a      	str	r3, [sp, #104]	@ 0x68
 8006586:	4654      	mov	r4, sl
 8006588:	2205      	movs	r2, #5
 800658a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800658e:	4853      	ldr	r0, [pc, #332]	@ (80066dc <_vfiprintf_r+0x21c>)
 8006590:	f7f9 fe5e 	bl	8000250 <memchr>
 8006594:	9a04      	ldr	r2, [sp, #16]
 8006596:	b9d8      	cbnz	r0, 80065d0 <_vfiprintf_r+0x110>
 8006598:	06d1      	lsls	r1, r2, #27
 800659a:	bf44      	itt	mi
 800659c:	2320      	movmi	r3, #32
 800659e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065a2:	0713      	lsls	r3, r2, #28
 80065a4:	bf44      	itt	mi
 80065a6:	232b      	movmi	r3, #43	@ 0x2b
 80065a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065ac:	f89a 3000 	ldrb.w	r3, [sl]
 80065b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80065b2:	d015      	beq.n	80065e0 <_vfiprintf_r+0x120>
 80065b4:	9a07      	ldr	r2, [sp, #28]
 80065b6:	4654      	mov	r4, sl
 80065b8:	2000      	movs	r0, #0
 80065ba:	f04f 0c0a 	mov.w	ip, #10
 80065be:	4621      	mov	r1, r4
 80065c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065c4:	3b30      	subs	r3, #48	@ 0x30
 80065c6:	2b09      	cmp	r3, #9
 80065c8:	d94b      	bls.n	8006662 <_vfiprintf_r+0x1a2>
 80065ca:	b1b0      	cbz	r0, 80065fa <_vfiprintf_r+0x13a>
 80065cc:	9207      	str	r2, [sp, #28]
 80065ce:	e014      	b.n	80065fa <_vfiprintf_r+0x13a>
 80065d0:	eba0 0308 	sub.w	r3, r0, r8
 80065d4:	fa09 f303 	lsl.w	r3, r9, r3
 80065d8:	4313      	orrs	r3, r2
 80065da:	9304      	str	r3, [sp, #16]
 80065dc:	46a2      	mov	sl, r4
 80065de:	e7d2      	b.n	8006586 <_vfiprintf_r+0xc6>
 80065e0:	9b03      	ldr	r3, [sp, #12]
 80065e2:	1d19      	adds	r1, r3, #4
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	9103      	str	r1, [sp, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	bfbb      	ittet	lt
 80065ec:	425b      	neglt	r3, r3
 80065ee:	f042 0202 	orrlt.w	r2, r2, #2
 80065f2:	9307      	strge	r3, [sp, #28]
 80065f4:	9307      	strlt	r3, [sp, #28]
 80065f6:	bfb8      	it	lt
 80065f8:	9204      	strlt	r2, [sp, #16]
 80065fa:	7823      	ldrb	r3, [r4, #0]
 80065fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80065fe:	d10a      	bne.n	8006616 <_vfiprintf_r+0x156>
 8006600:	7863      	ldrb	r3, [r4, #1]
 8006602:	2b2a      	cmp	r3, #42	@ 0x2a
 8006604:	d132      	bne.n	800666c <_vfiprintf_r+0x1ac>
 8006606:	9b03      	ldr	r3, [sp, #12]
 8006608:	1d1a      	adds	r2, r3, #4
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	9203      	str	r2, [sp, #12]
 800660e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006612:	3402      	adds	r4, #2
 8006614:	9305      	str	r3, [sp, #20]
 8006616:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80066ec <_vfiprintf_r+0x22c>
 800661a:	7821      	ldrb	r1, [r4, #0]
 800661c:	2203      	movs	r2, #3
 800661e:	4650      	mov	r0, sl
 8006620:	f7f9 fe16 	bl	8000250 <memchr>
 8006624:	b138      	cbz	r0, 8006636 <_vfiprintf_r+0x176>
 8006626:	9b04      	ldr	r3, [sp, #16]
 8006628:	eba0 000a 	sub.w	r0, r0, sl
 800662c:	2240      	movs	r2, #64	@ 0x40
 800662e:	4082      	lsls	r2, r0
 8006630:	4313      	orrs	r3, r2
 8006632:	3401      	adds	r4, #1
 8006634:	9304      	str	r3, [sp, #16]
 8006636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800663a:	4829      	ldr	r0, [pc, #164]	@ (80066e0 <_vfiprintf_r+0x220>)
 800663c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006640:	2206      	movs	r2, #6
 8006642:	f7f9 fe05 	bl	8000250 <memchr>
 8006646:	2800      	cmp	r0, #0
 8006648:	d03f      	beq.n	80066ca <_vfiprintf_r+0x20a>
 800664a:	4b26      	ldr	r3, [pc, #152]	@ (80066e4 <_vfiprintf_r+0x224>)
 800664c:	bb1b      	cbnz	r3, 8006696 <_vfiprintf_r+0x1d6>
 800664e:	9b03      	ldr	r3, [sp, #12]
 8006650:	3307      	adds	r3, #7
 8006652:	f023 0307 	bic.w	r3, r3, #7
 8006656:	3308      	adds	r3, #8
 8006658:	9303      	str	r3, [sp, #12]
 800665a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800665c:	443b      	add	r3, r7
 800665e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006660:	e76a      	b.n	8006538 <_vfiprintf_r+0x78>
 8006662:	fb0c 3202 	mla	r2, ip, r2, r3
 8006666:	460c      	mov	r4, r1
 8006668:	2001      	movs	r0, #1
 800666a:	e7a8      	b.n	80065be <_vfiprintf_r+0xfe>
 800666c:	2300      	movs	r3, #0
 800666e:	3401      	adds	r4, #1
 8006670:	9305      	str	r3, [sp, #20]
 8006672:	4619      	mov	r1, r3
 8006674:	f04f 0c0a 	mov.w	ip, #10
 8006678:	4620      	mov	r0, r4
 800667a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800667e:	3a30      	subs	r2, #48	@ 0x30
 8006680:	2a09      	cmp	r2, #9
 8006682:	d903      	bls.n	800668c <_vfiprintf_r+0x1cc>
 8006684:	2b00      	cmp	r3, #0
 8006686:	d0c6      	beq.n	8006616 <_vfiprintf_r+0x156>
 8006688:	9105      	str	r1, [sp, #20]
 800668a:	e7c4      	b.n	8006616 <_vfiprintf_r+0x156>
 800668c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006690:	4604      	mov	r4, r0
 8006692:	2301      	movs	r3, #1
 8006694:	e7f0      	b.n	8006678 <_vfiprintf_r+0x1b8>
 8006696:	ab03      	add	r3, sp, #12
 8006698:	9300      	str	r3, [sp, #0]
 800669a:	462a      	mov	r2, r5
 800669c:	4b12      	ldr	r3, [pc, #72]	@ (80066e8 <_vfiprintf_r+0x228>)
 800669e:	a904      	add	r1, sp, #16
 80066a0:	4630      	mov	r0, r6
 80066a2:	f3af 8000 	nop.w
 80066a6:	4607      	mov	r7, r0
 80066a8:	1c78      	adds	r0, r7, #1
 80066aa:	d1d6      	bne.n	800665a <_vfiprintf_r+0x19a>
 80066ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80066ae:	07d9      	lsls	r1, r3, #31
 80066b0:	d405      	bmi.n	80066be <_vfiprintf_r+0x1fe>
 80066b2:	89ab      	ldrh	r3, [r5, #12]
 80066b4:	059a      	lsls	r2, r3, #22
 80066b6:	d402      	bmi.n	80066be <_vfiprintf_r+0x1fe>
 80066b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066ba:	f7ff fccd 	bl	8006058 <__retarget_lock_release_recursive>
 80066be:	89ab      	ldrh	r3, [r5, #12]
 80066c0:	065b      	lsls	r3, r3, #25
 80066c2:	f53f af1f 	bmi.w	8006504 <_vfiprintf_r+0x44>
 80066c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066c8:	e71e      	b.n	8006508 <_vfiprintf_r+0x48>
 80066ca:	ab03      	add	r3, sp, #12
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	462a      	mov	r2, r5
 80066d0:	4b05      	ldr	r3, [pc, #20]	@ (80066e8 <_vfiprintf_r+0x228>)
 80066d2:	a904      	add	r1, sp, #16
 80066d4:	4630      	mov	r0, r6
 80066d6:	f000 f879 	bl	80067cc <_printf_i>
 80066da:	e7e4      	b.n	80066a6 <_vfiprintf_r+0x1e6>
 80066dc:	080072c2 	.word	0x080072c2
 80066e0:	080072cc 	.word	0x080072cc
 80066e4:	00000000 	.word	0x00000000
 80066e8:	0800649d 	.word	0x0800649d
 80066ec:	080072c8 	.word	0x080072c8

080066f0 <_printf_common>:
 80066f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f4:	4616      	mov	r6, r2
 80066f6:	4698      	mov	r8, r3
 80066f8:	688a      	ldr	r2, [r1, #8]
 80066fa:	690b      	ldr	r3, [r1, #16]
 80066fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006700:	4293      	cmp	r3, r2
 8006702:	bfb8      	it	lt
 8006704:	4613      	movlt	r3, r2
 8006706:	6033      	str	r3, [r6, #0]
 8006708:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800670c:	4607      	mov	r7, r0
 800670e:	460c      	mov	r4, r1
 8006710:	b10a      	cbz	r2, 8006716 <_printf_common+0x26>
 8006712:	3301      	adds	r3, #1
 8006714:	6033      	str	r3, [r6, #0]
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	0699      	lsls	r1, r3, #26
 800671a:	bf42      	ittt	mi
 800671c:	6833      	ldrmi	r3, [r6, #0]
 800671e:	3302      	addmi	r3, #2
 8006720:	6033      	strmi	r3, [r6, #0]
 8006722:	6825      	ldr	r5, [r4, #0]
 8006724:	f015 0506 	ands.w	r5, r5, #6
 8006728:	d106      	bne.n	8006738 <_printf_common+0x48>
 800672a:	f104 0a19 	add.w	sl, r4, #25
 800672e:	68e3      	ldr	r3, [r4, #12]
 8006730:	6832      	ldr	r2, [r6, #0]
 8006732:	1a9b      	subs	r3, r3, r2
 8006734:	42ab      	cmp	r3, r5
 8006736:	dc26      	bgt.n	8006786 <_printf_common+0x96>
 8006738:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800673c:	6822      	ldr	r2, [r4, #0]
 800673e:	3b00      	subs	r3, #0
 8006740:	bf18      	it	ne
 8006742:	2301      	movne	r3, #1
 8006744:	0692      	lsls	r2, r2, #26
 8006746:	d42b      	bmi.n	80067a0 <_printf_common+0xb0>
 8006748:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800674c:	4641      	mov	r1, r8
 800674e:	4638      	mov	r0, r7
 8006750:	47c8      	blx	r9
 8006752:	3001      	adds	r0, #1
 8006754:	d01e      	beq.n	8006794 <_printf_common+0xa4>
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	6922      	ldr	r2, [r4, #16]
 800675a:	f003 0306 	and.w	r3, r3, #6
 800675e:	2b04      	cmp	r3, #4
 8006760:	bf02      	ittt	eq
 8006762:	68e5      	ldreq	r5, [r4, #12]
 8006764:	6833      	ldreq	r3, [r6, #0]
 8006766:	1aed      	subeq	r5, r5, r3
 8006768:	68a3      	ldr	r3, [r4, #8]
 800676a:	bf0c      	ite	eq
 800676c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006770:	2500      	movne	r5, #0
 8006772:	4293      	cmp	r3, r2
 8006774:	bfc4      	itt	gt
 8006776:	1a9b      	subgt	r3, r3, r2
 8006778:	18ed      	addgt	r5, r5, r3
 800677a:	2600      	movs	r6, #0
 800677c:	341a      	adds	r4, #26
 800677e:	42b5      	cmp	r5, r6
 8006780:	d11a      	bne.n	80067b8 <_printf_common+0xc8>
 8006782:	2000      	movs	r0, #0
 8006784:	e008      	b.n	8006798 <_printf_common+0xa8>
 8006786:	2301      	movs	r3, #1
 8006788:	4652      	mov	r2, sl
 800678a:	4641      	mov	r1, r8
 800678c:	4638      	mov	r0, r7
 800678e:	47c8      	blx	r9
 8006790:	3001      	adds	r0, #1
 8006792:	d103      	bne.n	800679c <_printf_common+0xac>
 8006794:	f04f 30ff 	mov.w	r0, #4294967295
 8006798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800679c:	3501      	adds	r5, #1
 800679e:	e7c6      	b.n	800672e <_printf_common+0x3e>
 80067a0:	18e1      	adds	r1, r4, r3
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	2030      	movs	r0, #48	@ 0x30
 80067a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067aa:	4422      	add	r2, r4
 80067ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067b4:	3302      	adds	r3, #2
 80067b6:	e7c7      	b.n	8006748 <_printf_common+0x58>
 80067b8:	2301      	movs	r3, #1
 80067ba:	4622      	mov	r2, r4
 80067bc:	4641      	mov	r1, r8
 80067be:	4638      	mov	r0, r7
 80067c0:	47c8      	blx	r9
 80067c2:	3001      	adds	r0, #1
 80067c4:	d0e6      	beq.n	8006794 <_printf_common+0xa4>
 80067c6:	3601      	adds	r6, #1
 80067c8:	e7d9      	b.n	800677e <_printf_common+0x8e>
	...

080067cc <_printf_i>:
 80067cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067d0:	7e0f      	ldrb	r7, [r1, #24]
 80067d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067d4:	2f78      	cmp	r7, #120	@ 0x78
 80067d6:	4691      	mov	r9, r2
 80067d8:	4680      	mov	r8, r0
 80067da:	460c      	mov	r4, r1
 80067dc:	469a      	mov	sl, r3
 80067de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067e2:	d807      	bhi.n	80067f4 <_printf_i+0x28>
 80067e4:	2f62      	cmp	r7, #98	@ 0x62
 80067e6:	d80a      	bhi.n	80067fe <_printf_i+0x32>
 80067e8:	2f00      	cmp	r7, #0
 80067ea:	f000 80d2 	beq.w	8006992 <_printf_i+0x1c6>
 80067ee:	2f58      	cmp	r7, #88	@ 0x58
 80067f0:	f000 80b9 	beq.w	8006966 <_printf_i+0x19a>
 80067f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067fc:	e03a      	b.n	8006874 <_printf_i+0xa8>
 80067fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006802:	2b15      	cmp	r3, #21
 8006804:	d8f6      	bhi.n	80067f4 <_printf_i+0x28>
 8006806:	a101      	add	r1, pc, #4	@ (adr r1, 800680c <_printf_i+0x40>)
 8006808:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800680c:	08006865 	.word	0x08006865
 8006810:	08006879 	.word	0x08006879
 8006814:	080067f5 	.word	0x080067f5
 8006818:	080067f5 	.word	0x080067f5
 800681c:	080067f5 	.word	0x080067f5
 8006820:	080067f5 	.word	0x080067f5
 8006824:	08006879 	.word	0x08006879
 8006828:	080067f5 	.word	0x080067f5
 800682c:	080067f5 	.word	0x080067f5
 8006830:	080067f5 	.word	0x080067f5
 8006834:	080067f5 	.word	0x080067f5
 8006838:	08006979 	.word	0x08006979
 800683c:	080068a3 	.word	0x080068a3
 8006840:	08006933 	.word	0x08006933
 8006844:	080067f5 	.word	0x080067f5
 8006848:	080067f5 	.word	0x080067f5
 800684c:	0800699b 	.word	0x0800699b
 8006850:	080067f5 	.word	0x080067f5
 8006854:	080068a3 	.word	0x080068a3
 8006858:	080067f5 	.word	0x080067f5
 800685c:	080067f5 	.word	0x080067f5
 8006860:	0800693b 	.word	0x0800693b
 8006864:	6833      	ldr	r3, [r6, #0]
 8006866:	1d1a      	adds	r2, r3, #4
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6032      	str	r2, [r6, #0]
 800686c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006870:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006874:	2301      	movs	r3, #1
 8006876:	e09d      	b.n	80069b4 <_printf_i+0x1e8>
 8006878:	6833      	ldr	r3, [r6, #0]
 800687a:	6820      	ldr	r0, [r4, #0]
 800687c:	1d19      	adds	r1, r3, #4
 800687e:	6031      	str	r1, [r6, #0]
 8006880:	0606      	lsls	r6, r0, #24
 8006882:	d501      	bpl.n	8006888 <_printf_i+0xbc>
 8006884:	681d      	ldr	r5, [r3, #0]
 8006886:	e003      	b.n	8006890 <_printf_i+0xc4>
 8006888:	0645      	lsls	r5, r0, #25
 800688a:	d5fb      	bpl.n	8006884 <_printf_i+0xb8>
 800688c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006890:	2d00      	cmp	r5, #0
 8006892:	da03      	bge.n	800689c <_printf_i+0xd0>
 8006894:	232d      	movs	r3, #45	@ 0x2d
 8006896:	426d      	negs	r5, r5
 8006898:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800689c:	4859      	ldr	r0, [pc, #356]	@ (8006a04 <_printf_i+0x238>)
 800689e:	230a      	movs	r3, #10
 80068a0:	e011      	b.n	80068c6 <_printf_i+0xfa>
 80068a2:	6821      	ldr	r1, [r4, #0]
 80068a4:	6833      	ldr	r3, [r6, #0]
 80068a6:	0608      	lsls	r0, r1, #24
 80068a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80068ac:	d402      	bmi.n	80068b4 <_printf_i+0xe8>
 80068ae:	0649      	lsls	r1, r1, #25
 80068b0:	bf48      	it	mi
 80068b2:	b2ad      	uxthmi	r5, r5
 80068b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80068b6:	4853      	ldr	r0, [pc, #332]	@ (8006a04 <_printf_i+0x238>)
 80068b8:	6033      	str	r3, [r6, #0]
 80068ba:	bf14      	ite	ne
 80068bc:	230a      	movne	r3, #10
 80068be:	2308      	moveq	r3, #8
 80068c0:	2100      	movs	r1, #0
 80068c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068c6:	6866      	ldr	r6, [r4, #4]
 80068c8:	60a6      	str	r6, [r4, #8]
 80068ca:	2e00      	cmp	r6, #0
 80068cc:	bfa2      	ittt	ge
 80068ce:	6821      	ldrge	r1, [r4, #0]
 80068d0:	f021 0104 	bicge.w	r1, r1, #4
 80068d4:	6021      	strge	r1, [r4, #0]
 80068d6:	b90d      	cbnz	r5, 80068dc <_printf_i+0x110>
 80068d8:	2e00      	cmp	r6, #0
 80068da:	d04b      	beq.n	8006974 <_printf_i+0x1a8>
 80068dc:	4616      	mov	r6, r2
 80068de:	fbb5 f1f3 	udiv	r1, r5, r3
 80068e2:	fb03 5711 	mls	r7, r3, r1, r5
 80068e6:	5dc7      	ldrb	r7, [r0, r7]
 80068e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068ec:	462f      	mov	r7, r5
 80068ee:	42bb      	cmp	r3, r7
 80068f0:	460d      	mov	r5, r1
 80068f2:	d9f4      	bls.n	80068de <_printf_i+0x112>
 80068f4:	2b08      	cmp	r3, #8
 80068f6:	d10b      	bne.n	8006910 <_printf_i+0x144>
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	07df      	lsls	r7, r3, #31
 80068fc:	d508      	bpl.n	8006910 <_printf_i+0x144>
 80068fe:	6923      	ldr	r3, [r4, #16]
 8006900:	6861      	ldr	r1, [r4, #4]
 8006902:	4299      	cmp	r1, r3
 8006904:	bfde      	ittt	le
 8006906:	2330      	movle	r3, #48	@ 0x30
 8006908:	f806 3c01 	strble.w	r3, [r6, #-1]
 800690c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006910:	1b92      	subs	r2, r2, r6
 8006912:	6122      	str	r2, [r4, #16]
 8006914:	f8cd a000 	str.w	sl, [sp]
 8006918:	464b      	mov	r3, r9
 800691a:	aa03      	add	r2, sp, #12
 800691c:	4621      	mov	r1, r4
 800691e:	4640      	mov	r0, r8
 8006920:	f7ff fee6 	bl	80066f0 <_printf_common>
 8006924:	3001      	adds	r0, #1
 8006926:	d14a      	bne.n	80069be <_printf_i+0x1f2>
 8006928:	f04f 30ff 	mov.w	r0, #4294967295
 800692c:	b004      	add	sp, #16
 800692e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	f043 0320 	orr.w	r3, r3, #32
 8006938:	6023      	str	r3, [r4, #0]
 800693a:	4833      	ldr	r0, [pc, #204]	@ (8006a08 <_printf_i+0x23c>)
 800693c:	2778      	movs	r7, #120	@ 0x78
 800693e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	6831      	ldr	r1, [r6, #0]
 8006946:	061f      	lsls	r7, r3, #24
 8006948:	f851 5b04 	ldr.w	r5, [r1], #4
 800694c:	d402      	bmi.n	8006954 <_printf_i+0x188>
 800694e:	065f      	lsls	r7, r3, #25
 8006950:	bf48      	it	mi
 8006952:	b2ad      	uxthmi	r5, r5
 8006954:	6031      	str	r1, [r6, #0]
 8006956:	07d9      	lsls	r1, r3, #31
 8006958:	bf44      	itt	mi
 800695a:	f043 0320 	orrmi.w	r3, r3, #32
 800695e:	6023      	strmi	r3, [r4, #0]
 8006960:	b11d      	cbz	r5, 800696a <_printf_i+0x19e>
 8006962:	2310      	movs	r3, #16
 8006964:	e7ac      	b.n	80068c0 <_printf_i+0xf4>
 8006966:	4827      	ldr	r0, [pc, #156]	@ (8006a04 <_printf_i+0x238>)
 8006968:	e7e9      	b.n	800693e <_printf_i+0x172>
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	f023 0320 	bic.w	r3, r3, #32
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	e7f6      	b.n	8006962 <_printf_i+0x196>
 8006974:	4616      	mov	r6, r2
 8006976:	e7bd      	b.n	80068f4 <_printf_i+0x128>
 8006978:	6833      	ldr	r3, [r6, #0]
 800697a:	6825      	ldr	r5, [r4, #0]
 800697c:	6961      	ldr	r1, [r4, #20]
 800697e:	1d18      	adds	r0, r3, #4
 8006980:	6030      	str	r0, [r6, #0]
 8006982:	062e      	lsls	r6, r5, #24
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	d501      	bpl.n	800698c <_printf_i+0x1c0>
 8006988:	6019      	str	r1, [r3, #0]
 800698a:	e002      	b.n	8006992 <_printf_i+0x1c6>
 800698c:	0668      	lsls	r0, r5, #25
 800698e:	d5fb      	bpl.n	8006988 <_printf_i+0x1bc>
 8006990:	8019      	strh	r1, [r3, #0]
 8006992:	2300      	movs	r3, #0
 8006994:	6123      	str	r3, [r4, #16]
 8006996:	4616      	mov	r6, r2
 8006998:	e7bc      	b.n	8006914 <_printf_i+0x148>
 800699a:	6833      	ldr	r3, [r6, #0]
 800699c:	1d1a      	adds	r2, r3, #4
 800699e:	6032      	str	r2, [r6, #0]
 80069a0:	681e      	ldr	r6, [r3, #0]
 80069a2:	6862      	ldr	r2, [r4, #4]
 80069a4:	2100      	movs	r1, #0
 80069a6:	4630      	mov	r0, r6
 80069a8:	f7f9 fc52 	bl	8000250 <memchr>
 80069ac:	b108      	cbz	r0, 80069b2 <_printf_i+0x1e6>
 80069ae:	1b80      	subs	r0, r0, r6
 80069b0:	6060      	str	r0, [r4, #4]
 80069b2:	6863      	ldr	r3, [r4, #4]
 80069b4:	6123      	str	r3, [r4, #16]
 80069b6:	2300      	movs	r3, #0
 80069b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069bc:	e7aa      	b.n	8006914 <_printf_i+0x148>
 80069be:	6923      	ldr	r3, [r4, #16]
 80069c0:	4632      	mov	r2, r6
 80069c2:	4649      	mov	r1, r9
 80069c4:	4640      	mov	r0, r8
 80069c6:	47d0      	blx	sl
 80069c8:	3001      	adds	r0, #1
 80069ca:	d0ad      	beq.n	8006928 <_printf_i+0x15c>
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	079b      	lsls	r3, r3, #30
 80069d0:	d413      	bmi.n	80069fa <_printf_i+0x22e>
 80069d2:	68e0      	ldr	r0, [r4, #12]
 80069d4:	9b03      	ldr	r3, [sp, #12]
 80069d6:	4298      	cmp	r0, r3
 80069d8:	bfb8      	it	lt
 80069da:	4618      	movlt	r0, r3
 80069dc:	e7a6      	b.n	800692c <_printf_i+0x160>
 80069de:	2301      	movs	r3, #1
 80069e0:	4632      	mov	r2, r6
 80069e2:	4649      	mov	r1, r9
 80069e4:	4640      	mov	r0, r8
 80069e6:	47d0      	blx	sl
 80069e8:	3001      	adds	r0, #1
 80069ea:	d09d      	beq.n	8006928 <_printf_i+0x15c>
 80069ec:	3501      	adds	r5, #1
 80069ee:	68e3      	ldr	r3, [r4, #12]
 80069f0:	9903      	ldr	r1, [sp, #12]
 80069f2:	1a5b      	subs	r3, r3, r1
 80069f4:	42ab      	cmp	r3, r5
 80069f6:	dcf2      	bgt.n	80069de <_printf_i+0x212>
 80069f8:	e7eb      	b.n	80069d2 <_printf_i+0x206>
 80069fa:	2500      	movs	r5, #0
 80069fc:	f104 0619 	add.w	r6, r4, #25
 8006a00:	e7f5      	b.n	80069ee <_printf_i+0x222>
 8006a02:	bf00      	nop
 8006a04:	080072d3 	.word	0x080072d3
 8006a08:	080072e4 	.word	0x080072e4

08006a0c <__swbuf_r>:
 8006a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0e:	460e      	mov	r6, r1
 8006a10:	4614      	mov	r4, r2
 8006a12:	4605      	mov	r5, r0
 8006a14:	b118      	cbz	r0, 8006a1e <__swbuf_r+0x12>
 8006a16:	6a03      	ldr	r3, [r0, #32]
 8006a18:	b90b      	cbnz	r3, 8006a1e <__swbuf_r+0x12>
 8006a1a:	f7ff f9bb 	bl	8005d94 <__sinit>
 8006a1e:	69a3      	ldr	r3, [r4, #24]
 8006a20:	60a3      	str	r3, [r4, #8]
 8006a22:	89a3      	ldrh	r3, [r4, #12]
 8006a24:	071a      	lsls	r2, r3, #28
 8006a26:	d501      	bpl.n	8006a2c <__swbuf_r+0x20>
 8006a28:	6923      	ldr	r3, [r4, #16]
 8006a2a:	b943      	cbnz	r3, 8006a3e <__swbuf_r+0x32>
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	4628      	mov	r0, r5
 8006a30:	f000 f82a 	bl	8006a88 <__swsetup_r>
 8006a34:	b118      	cbz	r0, 8006a3e <__swbuf_r+0x32>
 8006a36:	f04f 37ff 	mov.w	r7, #4294967295
 8006a3a:	4638      	mov	r0, r7
 8006a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	6922      	ldr	r2, [r4, #16]
 8006a42:	1a98      	subs	r0, r3, r2
 8006a44:	6963      	ldr	r3, [r4, #20]
 8006a46:	b2f6      	uxtb	r6, r6
 8006a48:	4283      	cmp	r3, r0
 8006a4a:	4637      	mov	r7, r6
 8006a4c:	dc05      	bgt.n	8006a5a <__swbuf_r+0x4e>
 8006a4e:	4621      	mov	r1, r4
 8006a50:	4628      	mov	r0, r5
 8006a52:	f7ff fcbb 	bl	80063cc <_fflush_r>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d1ed      	bne.n	8006a36 <__swbuf_r+0x2a>
 8006a5a:	68a3      	ldr	r3, [r4, #8]
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	60a3      	str	r3, [r4, #8]
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	6022      	str	r2, [r4, #0]
 8006a66:	701e      	strb	r6, [r3, #0]
 8006a68:	6962      	ldr	r2, [r4, #20]
 8006a6a:	1c43      	adds	r3, r0, #1
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d004      	beq.n	8006a7a <__swbuf_r+0x6e>
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	07db      	lsls	r3, r3, #31
 8006a74:	d5e1      	bpl.n	8006a3a <__swbuf_r+0x2e>
 8006a76:	2e0a      	cmp	r6, #10
 8006a78:	d1df      	bne.n	8006a3a <__swbuf_r+0x2e>
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	f7ff fca5 	bl	80063cc <_fflush_r>
 8006a82:	2800      	cmp	r0, #0
 8006a84:	d0d9      	beq.n	8006a3a <__swbuf_r+0x2e>
 8006a86:	e7d6      	b.n	8006a36 <__swbuf_r+0x2a>

08006a88 <__swsetup_r>:
 8006a88:	b538      	push	{r3, r4, r5, lr}
 8006a8a:	4b29      	ldr	r3, [pc, #164]	@ (8006b30 <__swsetup_r+0xa8>)
 8006a8c:	4605      	mov	r5, r0
 8006a8e:	6818      	ldr	r0, [r3, #0]
 8006a90:	460c      	mov	r4, r1
 8006a92:	b118      	cbz	r0, 8006a9c <__swsetup_r+0x14>
 8006a94:	6a03      	ldr	r3, [r0, #32]
 8006a96:	b90b      	cbnz	r3, 8006a9c <__swsetup_r+0x14>
 8006a98:	f7ff f97c 	bl	8005d94 <__sinit>
 8006a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aa0:	0719      	lsls	r1, r3, #28
 8006aa2:	d422      	bmi.n	8006aea <__swsetup_r+0x62>
 8006aa4:	06da      	lsls	r2, r3, #27
 8006aa6:	d407      	bmi.n	8006ab8 <__swsetup_r+0x30>
 8006aa8:	2209      	movs	r2, #9
 8006aaa:	602a      	str	r2, [r5, #0]
 8006aac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ab0:	81a3      	strh	r3, [r4, #12]
 8006ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab6:	e033      	b.n	8006b20 <__swsetup_r+0x98>
 8006ab8:	0758      	lsls	r0, r3, #29
 8006aba:	d512      	bpl.n	8006ae2 <__swsetup_r+0x5a>
 8006abc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006abe:	b141      	cbz	r1, 8006ad2 <__swsetup_r+0x4a>
 8006ac0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ac4:	4299      	cmp	r1, r3
 8006ac6:	d002      	beq.n	8006ace <__swsetup_r+0x46>
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f7ff fafb 	bl	80060c4 <_free_r>
 8006ace:	2300      	movs	r3, #0
 8006ad0:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ad2:	89a3      	ldrh	r3, [r4, #12]
 8006ad4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006ad8:	81a3      	strh	r3, [r4, #12]
 8006ada:	2300      	movs	r3, #0
 8006adc:	6063      	str	r3, [r4, #4]
 8006ade:	6923      	ldr	r3, [r4, #16]
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	89a3      	ldrh	r3, [r4, #12]
 8006ae4:	f043 0308 	orr.w	r3, r3, #8
 8006ae8:	81a3      	strh	r3, [r4, #12]
 8006aea:	6923      	ldr	r3, [r4, #16]
 8006aec:	b94b      	cbnz	r3, 8006b02 <__swsetup_r+0x7a>
 8006aee:	89a3      	ldrh	r3, [r4, #12]
 8006af0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006af8:	d003      	beq.n	8006b02 <__swsetup_r+0x7a>
 8006afa:	4621      	mov	r1, r4
 8006afc:	4628      	mov	r0, r5
 8006afe:	f000 f883 	bl	8006c08 <__smakebuf_r>
 8006b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b06:	f013 0201 	ands.w	r2, r3, #1
 8006b0a:	d00a      	beq.n	8006b22 <__swsetup_r+0x9a>
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	60a2      	str	r2, [r4, #8]
 8006b10:	6962      	ldr	r2, [r4, #20]
 8006b12:	4252      	negs	r2, r2
 8006b14:	61a2      	str	r2, [r4, #24]
 8006b16:	6922      	ldr	r2, [r4, #16]
 8006b18:	b942      	cbnz	r2, 8006b2c <__swsetup_r+0xa4>
 8006b1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006b1e:	d1c5      	bne.n	8006aac <__swsetup_r+0x24>
 8006b20:	bd38      	pop	{r3, r4, r5, pc}
 8006b22:	0799      	lsls	r1, r3, #30
 8006b24:	bf58      	it	pl
 8006b26:	6962      	ldrpl	r2, [r4, #20]
 8006b28:	60a2      	str	r2, [r4, #8]
 8006b2a:	e7f4      	b.n	8006b16 <__swsetup_r+0x8e>
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	e7f7      	b.n	8006b20 <__swsetup_r+0x98>
 8006b30:	2000001c 	.word	0x2000001c

08006b34 <_raise_r>:
 8006b34:	291f      	cmp	r1, #31
 8006b36:	b538      	push	{r3, r4, r5, lr}
 8006b38:	4605      	mov	r5, r0
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	d904      	bls.n	8006b48 <_raise_r+0x14>
 8006b3e:	2316      	movs	r3, #22
 8006b40:	6003      	str	r3, [r0, #0]
 8006b42:	f04f 30ff 	mov.w	r0, #4294967295
 8006b46:	bd38      	pop	{r3, r4, r5, pc}
 8006b48:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006b4a:	b112      	cbz	r2, 8006b52 <_raise_r+0x1e>
 8006b4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b50:	b94b      	cbnz	r3, 8006b66 <_raise_r+0x32>
 8006b52:	4628      	mov	r0, r5
 8006b54:	f000 f830 	bl	8006bb8 <_getpid_r>
 8006b58:	4622      	mov	r2, r4
 8006b5a:	4601      	mov	r1, r0
 8006b5c:	4628      	mov	r0, r5
 8006b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b62:	f000 b817 	b.w	8006b94 <_kill_r>
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d00a      	beq.n	8006b80 <_raise_r+0x4c>
 8006b6a:	1c59      	adds	r1, r3, #1
 8006b6c:	d103      	bne.n	8006b76 <_raise_r+0x42>
 8006b6e:	2316      	movs	r3, #22
 8006b70:	6003      	str	r3, [r0, #0]
 8006b72:	2001      	movs	r0, #1
 8006b74:	e7e7      	b.n	8006b46 <_raise_r+0x12>
 8006b76:	2100      	movs	r1, #0
 8006b78:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	4798      	blx	r3
 8006b80:	2000      	movs	r0, #0
 8006b82:	e7e0      	b.n	8006b46 <_raise_r+0x12>

08006b84 <raise>:
 8006b84:	4b02      	ldr	r3, [pc, #8]	@ (8006b90 <raise+0xc>)
 8006b86:	4601      	mov	r1, r0
 8006b88:	6818      	ldr	r0, [r3, #0]
 8006b8a:	f7ff bfd3 	b.w	8006b34 <_raise_r>
 8006b8e:	bf00      	nop
 8006b90:	2000001c 	.word	0x2000001c

08006b94 <_kill_r>:
 8006b94:	b538      	push	{r3, r4, r5, lr}
 8006b96:	4d07      	ldr	r5, [pc, #28]	@ (8006bb4 <_kill_r+0x20>)
 8006b98:	2300      	movs	r3, #0
 8006b9a:	4604      	mov	r4, r0
 8006b9c:	4608      	mov	r0, r1
 8006b9e:	4611      	mov	r1, r2
 8006ba0:	602b      	str	r3, [r5, #0]
 8006ba2:	f7fa feb5 	bl	8001910 <_kill>
 8006ba6:	1c43      	adds	r3, r0, #1
 8006ba8:	d102      	bne.n	8006bb0 <_kill_r+0x1c>
 8006baa:	682b      	ldr	r3, [r5, #0]
 8006bac:	b103      	cbz	r3, 8006bb0 <_kill_r+0x1c>
 8006bae:	6023      	str	r3, [r4, #0]
 8006bb0:	bd38      	pop	{r3, r4, r5, pc}
 8006bb2:	bf00      	nop
 8006bb4:	200213f0 	.word	0x200213f0

08006bb8 <_getpid_r>:
 8006bb8:	f7fa bea2 	b.w	8001900 <_getpid>

08006bbc <__swhatbuf_r>:
 8006bbc:	b570      	push	{r4, r5, r6, lr}
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bc4:	2900      	cmp	r1, #0
 8006bc6:	b096      	sub	sp, #88	@ 0x58
 8006bc8:	4615      	mov	r5, r2
 8006bca:	461e      	mov	r6, r3
 8006bcc:	da0d      	bge.n	8006bea <__swhatbuf_r+0x2e>
 8006bce:	89a3      	ldrh	r3, [r4, #12]
 8006bd0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006bd4:	f04f 0100 	mov.w	r1, #0
 8006bd8:	bf14      	ite	ne
 8006bda:	2340      	movne	r3, #64	@ 0x40
 8006bdc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006be0:	2000      	movs	r0, #0
 8006be2:	6031      	str	r1, [r6, #0]
 8006be4:	602b      	str	r3, [r5, #0]
 8006be6:	b016      	add	sp, #88	@ 0x58
 8006be8:	bd70      	pop	{r4, r5, r6, pc}
 8006bea:	466a      	mov	r2, sp
 8006bec:	f000 f848 	bl	8006c80 <_fstat_r>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	dbec      	blt.n	8006bce <__swhatbuf_r+0x12>
 8006bf4:	9901      	ldr	r1, [sp, #4]
 8006bf6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006bfa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006bfe:	4259      	negs	r1, r3
 8006c00:	4159      	adcs	r1, r3
 8006c02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c06:	e7eb      	b.n	8006be0 <__swhatbuf_r+0x24>

08006c08 <__smakebuf_r>:
 8006c08:	898b      	ldrh	r3, [r1, #12]
 8006c0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c0c:	079d      	lsls	r5, r3, #30
 8006c0e:	4606      	mov	r6, r0
 8006c10:	460c      	mov	r4, r1
 8006c12:	d507      	bpl.n	8006c24 <__smakebuf_r+0x1c>
 8006c14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	6123      	str	r3, [r4, #16]
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	6163      	str	r3, [r4, #20]
 8006c20:	b003      	add	sp, #12
 8006c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c24:	ab01      	add	r3, sp, #4
 8006c26:	466a      	mov	r2, sp
 8006c28:	f7ff ffc8 	bl	8006bbc <__swhatbuf_r>
 8006c2c:	9f00      	ldr	r7, [sp, #0]
 8006c2e:	4605      	mov	r5, r0
 8006c30:	4639      	mov	r1, r7
 8006c32:	4630      	mov	r0, r6
 8006c34:	f7ff faba 	bl	80061ac <_malloc_r>
 8006c38:	b948      	cbnz	r0, 8006c4e <__smakebuf_r+0x46>
 8006c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c3e:	059a      	lsls	r2, r3, #22
 8006c40:	d4ee      	bmi.n	8006c20 <__smakebuf_r+0x18>
 8006c42:	f023 0303 	bic.w	r3, r3, #3
 8006c46:	f043 0302 	orr.w	r3, r3, #2
 8006c4a:	81a3      	strh	r3, [r4, #12]
 8006c4c:	e7e2      	b.n	8006c14 <__smakebuf_r+0xc>
 8006c4e:	89a3      	ldrh	r3, [r4, #12]
 8006c50:	6020      	str	r0, [r4, #0]
 8006c52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c56:	81a3      	strh	r3, [r4, #12]
 8006c58:	9b01      	ldr	r3, [sp, #4]
 8006c5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006c5e:	b15b      	cbz	r3, 8006c78 <__smakebuf_r+0x70>
 8006c60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c64:	4630      	mov	r0, r6
 8006c66:	f000 f81d 	bl	8006ca4 <_isatty_r>
 8006c6a:	b128      	cbz	r0, 8006c78 <__smakebuf_r+0x70>
 8006c6c:	89a3      	ldrh	r3, [r4, #12]
 8006c6e:	f023 0303 	bic.w	r3, r3, #3
 8006c72:	f043 0301 	orr.w	r3, r3, #1
 8006c76:	81a3      	strh	r3, [r4, #12]
 8006c78:	89a3      	ldrh	r3, [r4, #12]
 8006c7a:	431d      	orrs	r5, r3
 8006c7c:	81a5      	strh	r5, [r4, #12]
 8006c7e:	e7cf      	b.n	8006c20 <__smakebuf_r+0x18>

08006c80 <_fstat_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4d07      	ldr	r5, [pc, #28]	@ (8006ca0 <_fstat_r+0x20>)
 8006c84:	2300      	movs	r3, #0
 8006c86:	4604      	mov	r4, r0
 8006c88:	4608      	mov	r0, r1
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	602b      	str	r3, [r5, #0]
 8006c8e:	f7fa fe9f 	bl	80019d0 <_fstat>
 8006c92:	1c43      	adds	r3, r0, #1
 8006c94:	d102      	bne.n	8006c9c <_fstat_r+0x1c>
 8006c96:	682b      	ldr	r3, [r5, #0]
 8006c98:	b103      	cbz	r3, 8006c9c <_fstat_r+0x1c>
 8006c9a:	6023      	str	r3, [r4, #0]
 8006c9c:	bd38      	pop	{r3, r4, r5, pc}
 8006c9e:	bf00      	nop
 8006ca0:	200213f0 	.word	0x200213f0

08006ca4 <_isatty_r>:
 8006ca4:	b538      	push	{r3, r4, r5, lr}
 8006ca6:	4d06      	ldr	r5, [pc, #24]	@ (8006cc0 <_isatty_r+0x1c>)
 8006ca8:	2300      	movs	r3, #0
 8006caa:	4604      	mov	r4, r0
 8006cac:	4608      	mov	r0, r1
 8006cae:	602b      	str	r3, [r5, #0]
 8006cb0:	f7fa fe9e 	bl	80019f0 <_isatty>
 8006cb4:	1c43      	adds	r3, r0, #1
 8006cb6:	d102      	bne.n	8006cbe <_isatty_r+0x1a>
 8006cb8:	682b      	ldr	r3, [r5, #0]
 8006cba:	b103      	cbz	r3, 8006cbe <_isatty_r+0x1a>
 8006cbc:	6023      	str	r3, [r4, #0]
 8006cbe:	bd38      	pop	{r3, r4, r5, pc}
 8006cc0:	200213f0 	.word	0x200213f0

08006cc4 <_init>:
 8006cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc6:	bf00      	nop
 8006cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cca:	bc08      	pop	{r3}
 8006ccc:	469e      	mov	lr, r3
 8006cce:	4770      	bx	lr

08006cd0 <_fini>:
 8006cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd2:	bf00      	nop
 8006cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cd6:	bc08      	pop	{r3}
 8006cd8:	469e      	mov	lr, r3
 8006cda:	4770      	bx	lr


tyom_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004de4  080001e0  080001e0  000011e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004fc4  08004fc4  00005fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fe4  08004fe4  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004fe4  08004fe4  00005fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fec  08004fec  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fec  08004fec  00005fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ff0  08004ff0  00005ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004ff4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000000c  08005000  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08005000  00006224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1ea  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c4  00000000  00000000  00015226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  000172f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000977  00000000  00000000  00017f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001f69  00000000  00000000  0001888f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a44  00000000  00000000  0001a7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d59c6  00000000  00000000  0002b23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00100c02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000327c  00000000  00000000  00100c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00103ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004fac 	.word	0x08004fac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000010 	.word	0x20000010
 800021c:	08004fac 	.word	0x08004fac

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000516:	f000 fa2d 	bl	8000974 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fcc6 	bl	8000eaa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f81b 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f987 	bl	8000834 <MX_GPIO_Init>
  MX_DMA_Init();
 8000526:	f000 f95f 	bl	80007e8 <MX_DMA_Init>
  MX_I2C1_Init();
 800052a:	f000 f8ed 	bl	8000708 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800052e:	f000 f92b 	bl	8000788 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000532:	f000 f86d 	bl	8000610 <MX_ADC1_Init>
  MX_DAC_Init();
 8000536:	f000 f8bd 	bl	80006b4 <MX_DAC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t TX_Buffer = 5;
 800053a:	2305      	movs	r3, #5
 800053c:	71fb      	strb	r3, [r7, #7]
//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);

  while (1)
  {

    HAL_I2C_Master_Transmit(&hi2c1, PEX_SLAVE_ADDRESS, &TX_Buffer, sizeof(TX_Buffer), 1000);
 800053e:	1dfa      	adds	r2, r7, #7
 8000540:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	2301      	movs	r3, #1
 8000548:	21bc      	movs	r1, #188	@ 0xbc
 800054a:	4802      	ldr	r0, [pc, #8]	@ (8000554 <main+0x44>)
 800054c:	f001 ff10 	bl	8002370 <HAL_I2C_Master_Transmit>
 8000550:	e7f5      	b.n	800053e <main+0x2e>
 8000552:	bf00      	nop
 8000554:	20000084 	.word	0x20000084

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	@ 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	@ 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f004 fcf4 	bl	8004f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	4b22      	ldr	r3, [pc, #136]	@ (8000608 <SystemClock_Config+0xb0>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000580:	4a21      	ldr	r2, [pc, #132]	@ (8000608 <SystemClock_Config+0xb0>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	@ 0x40
 8000588:	4b1f      	ldr	r3, [pc, #124]	@ (8000608 <SystemClock_Config+0xb0>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000594:	4b1d      	ldr	r3, [pc, #116]	@ (800060c <SystemClock_Config+0xb4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800059c:	4a1b      	ldr	r2, [pc, #108]	@ (800060c <SystemClock_Config+0xb4>)
 800059e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b19      	ldr	r3, [pc, #100]	@ (800060c <SystemClock_Config+0xb4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b0:	2302      	movs	r3, #2
 80005b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b4:	2301      	movs	r3, #1
 80005b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b8:	2310      	movs	r3, #16
 80005ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005bc:	2300      	movs	r3, #0
 80005be:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0320 	add.w	r3, r7, #32
 80005c4:	4618      	mov	r0, r3
 80005c6:	f003 f875 	bl	80036b4 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80005d0:	f000 f9fc 	bl	80009cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d8:	2300      	movs	r3, #0
 80005da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 fb04 	bl	8003bfc <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005fa:	f000 f9e7 	bl	80009cc <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3750      	adds	r7, #80	@ 0x50
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000616:	463b      	mov	r3, r7
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000622:	4b21      	ldr	r3, [pc, #132]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000624:	4a21      	ldr	r2, [pc, #132]	@ (80006ac <MX_ADC1_Init+0x9c>)
 8000626:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <MX_ADC1_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062e:	4b1e      	ldr	r3, [pc, #120]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000634:	4b1c      	ldr	r3, [pc, #112]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063a:	4b1b      	ldr	r3, [pc, #108]	@ (80006a8 <MX_ADC1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000640:	4b19      	ldr	r3, [pc, #100]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000642:	2200      	movs	r2, #0
 8000644:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000648:	4b17      	ldr	r3, [pc, #92]	@ (80006a8 <MX_ADC1_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064e:	4b16      	ldr	r3, [pc, #88]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000650:	4a17      	ldr	r2, [pc, #92]	@ (80006b0 <MX_ADC1_Init+0xa0>)
 8000652:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000654:	4b14      	ldr	r3, [pc, #80]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800065a:	4b13      	ldr	r3, [pc, #76]	@ (80006a8 <MX_ADC1_Init+0x98>)
 800065c:	2201      	movs	r2, #1
 800065e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000660:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000668:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <MX_ADC1_Init+0x98>)
 800066a:	2201      	movs	r2, #1
 800066c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066e:	480e      	ldr	r0, [pc, #56]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000670:	f000 fc78 	bl	8000f64 <HAL_ADC_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800067a:	f000 f9a7 	bl	80009cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800067e:	230a      	movs	r3, #10
 8000680:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000682:	2301      	movs	r3, #1
 8000684:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068a:	463b      	mov	r3, r7
 800068c:	4619      	mov	r1, r3
 800068e:	4806      	ldr	r0, [pc, #24]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000690:	f000 fcac 	bl	8000fec <HAL_ADC_ConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800069a:	f000 f997 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000028 	.word	0x20000028
 80006ac:	40012000 	.word	0x40012000
 80006b0:	0f000001 	.word	0x0f000001

080006b4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006ba:	463b      	mov	r3, r7
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <MX_DAC_Init+0x4c>)
 80006c4:	4a0f      	ldr	r2, [pc, #60]	@ (8000704 <MX_DAC_Init+0x50>)
 80006c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80006c8:	480d      	ldr	r0, [pc, #52]	@ (8000700 <MX_DAC_Init+0x4c>)
 80006ca:	f001 f869 	bl	80017a0 <HAL_DAC_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80006d4:	f000 f97a 	bl	80009cc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006d8:	2300      	movs	r3, #0
 80006da:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006e0:	463b      	mov	r3, r7
 80006e2:	2200      	movs	r2, #0
 80006e4:	4619      	mov	r1, r3
 80006e6:	4806      	ldr	r0, [pc, #24]	@ (8000700 <MX_DAC_Init+0x4c>)
 80006e8:	f001 f87c 	bl	80017e4 <HAL_DAC_ConfigChannel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80006f2:	f000 f96b 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000070 	.word	0x20000070
 8000704:	40007400 	.word	0x40007400

08000708 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800070c:	4b1b      	ldr	r3, [pc, #108]	@ (800077c <MX_I2C1_Init+0x74>)
 800070e:	4a1c      	ldr	r2, [pc, #112]	@ (8000780 <MX_I2C1_Init+0x78>)
 8000710:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000712:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <MX_I2C1_Init+0x74>)
 8000714:	4a1b      	ldr	r2, [pc, #108]	@ (8000784 <MX_I2C1_Init+0x7c>)
 8000716:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000718:	4b18      	ldr	r3, [pc, #96]	@ (800077c <MX_I2C1_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071e:	4b17      	ldr	r3, [pc, #92]	@ (800077c <MX_I2C1_Init+0x74>)
 8000720:	2201      	movs	r2, #1
 8000722:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000724:	4b15      	ldr	r3, [pc, #84]	@ (800077c <MX_I2C1_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800072a:	4b14      	ldr	r3, [pc, #80]	@ (800077c <MX_I2C1_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <MX_I2C1_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_I2C1_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_I2C1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000742:	480e      	ldr	r0, [pc, #56]	@ (800077c <MX_I2C1_Init+0x74>)
 8000744:	f001 fd78 	bl	8002238 <HAL_I2C_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800074e:	f000 f93d 	bl	80009cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000752:	2100      	movs	r1, #0
 8000754:	4809      	ldr	r0, [pc, #36]	@ (800077c <MX_I2C1_Init+0x74>)
 8000756:	f002 ff15 	bl	8003584 <HAL_I2CEx_ConfigAnalogFilter>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000760:	f000 f934 	bl	80009cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000764:	2100      	movs	r1, #0
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_I2C1_Init+0x74>)
 8000768:	f002 ff57 	bl	800361a <HAL_I2CEx_ConfigDigitalFilter>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000772:	f000 f92b 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000084 	.word	0x20000084
 8000780:	40005400 	.word	0x40005400
 8000784:	00303d5b 	.word	0x00303d5b

08000788 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800078c:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 800078e:	4a15      	ldr	r2, [pc, #84]	@ (80007e4 <MX_USART1_UART_Init+0x5c>)
 8000790:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000792:	4b13      	ldr	r3, [pc, #76]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007be:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 80007cc:	f003 ff46 	bl	800465c <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007d6:	f000 f8f9 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000198 	.word	0x20000198
 80007e4:	40011000 	.word	0x40011000

080007e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ee:	4b10      	ldr	r3, [pc, #64]	@ (8000830 <MX_DMA_Init+0x48>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000830 <MX_DMA_Init+0x48>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <MX_DMA_Init+0x48>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	200b      	movs	r0, #11
 800080c:	f000 ff19 	bl	8001642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000810:	200b      	movs	r0, #11
 8000812:	f000 ff32 	bl	800167a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	2011      	movs	r0, #17
 800081c:	f000 ff11 	bl	8001642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000820:	2011      	movs	r0, #17
 8000822:	f000 ff2a 	bl	800167a <HAL_NVIC_EnableIRQ>

}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	@ 0x28
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	4b46      	ldr	r3, [pc, #280]	@ (8000964 <MX_GPIO_Init+0x130>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a45      	ldr	r2, [pc, #276]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b43      	ldr	r3, [pc, #268]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	4b40      	ldr	r3, [pc, #256]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a3f      	ldr	r2, [pc, #252]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b3d      	ldr	r3, [pc, #244]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b3a      	ldr	r3, [pc, #232]	@ (8000964 <MX_GPIO_Init+0x130>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a39      	ldr	r2, [pc, #228]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b37      	ldr	r3, [pc, #220]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	4b34      	ldr	r3, [pc, #208]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a33      	ldr	r2, [pc, #204]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b31      	ldr	r3, [pc, #196]	@ (8000964 <MX_GPIO_Init+0x130>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2104      	movs	r1, #4
 80008ae:	482e      	ldr	r0, [pc, #184]	@ (8000968 <MX_GPIO_Init+0x134>)
 80008b0:	f001 fca8 	bl	8002204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_ACT_LED_GPIO_Port, MCU_ACT_LED_Pin, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008ba:	482c      	ldr	r0, [pc, #176]	@ (800096c <MX_GPIO_Init+0x138>)
 80008bc:	f001 fca2 	bl	8002204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008c0:	2304      	movs	r3, #4
 80008c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	4824      	ldr	r0, [pc, #144]	@ (8000968 <MX_GPIO_Init+0x134>)
 80008d8:	f001 faf8 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008dc:	2308      	movs	r3, #8
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	481e      	ldr	r0, [pc, #120]	@ (8000968 <MX_GPIO_Init+0x134>)
 80008f0:	f001 faec 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 80008f4:	23ee      	movs	r3, #238	@ 0xee
 80008f6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	481a      	ldr	r0, [pc, #104]	@ (8000970 <MX_GPIO_Init+0x13c>)
 8000908:	f001 fae0 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACT_LED_Pin */
  GPIO_InitStruct.Pin = MCU_ACT_LED_Pin;
 800090c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000916:	2301      	movs	r3, #1
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_ACT_LED_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	4811      	ldr	r0, [pc, #68]	@ (800096c <MX_GPIO_Init+0x138>)
 8000926:	f001 fad1 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800092a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800092e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	480a      	ldr	r0, [pc, #40]	@ (8000968 <MX_GPIO_Init+0x134>)
 8000940:	f001 fac4 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000944:	2310      	movs	r3, #16
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800094c:	2301      	movs	r3, #1
 800094e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4619      	mov	r1, r3
 8000956:	4805      	ldr	r0, [pc, #20]	@ (800096c <MX_GPIO_Init+0x138>)
 8000958:	f001 fab8 	bl	8001ecc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800095c:	bf00      	nop
 800095e:	3728      	adds	r7, #40	@ 0x28
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	40020800 	.word	0x40020800
 800096c:	40020400 	.word	0x40020400
 8000970:	40020000 	.word	0x40020000

08000974 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800097a:	463b      	mov	r3, r7
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000986:	f000 fe93 	bl	80016b0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800098a:	2301      	movs	r3, #1
 800098c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800098e:	2300      	movs	r3, #0
 8000990:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000996:	231f      	movs	r3, #31
 8000998:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800099a:	2387      	movs	r3, #135	@ 0x87
 800099c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800099e:	2300      	movs	r3, #0
 80009a0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80009a2:	2300      	movs	r3, #0
 80009a4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009a6:	2301      	movs	r3, #1
 80009a8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80009aa:	2301      	movs	r3, #1
 80009ac:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009b6:	463b      	mov	r3, r7
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 feb1 	bl	8001720 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009be:	2004      	movs	r0, #4
 80009c0:	f000 fe8e 	bl	80016e0 <HAL_MPU_Enable>

}
 80009c4:	bf00      	nop
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
}
 80009d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <Error_Handler+0x8>

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <HAL_MspInit+0x44>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e2:	4a0e      	ldr	r2, [pc, #56]	@ (8000a1c <HAL_MspInit+0x44>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ea:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <HAL_MspInit+0x44>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <HAL_MspInit+0x44>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fa:	4a08      	ldr	r2, [pc, #32]	@ (8000a1c <HAL_MspInit+0x44>)
 80009fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a02:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <HAL_MspInit+0x44>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800

08000a20 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	@ 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a15      	ldr	r2, [pc, #84]	@ (8000a94 <HAL_ADC_MspInit+0x74>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d123      	bne.n	8000a8a <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a42:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <HAL_ADC_MspInit+0x78>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a46:	4a14      	ldr	r2, [pc, #80]	@ (8000a98 <HAL_ADC_MspInit+0x78>)
 8000a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a4e:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <HAL_ADC_MspInit+0x78>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <HAL_ADC_MspInit+0x78>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a98 <HAL_ADC_MspInit+0x78>)
 8000a60:	f043 0304 	orr.w	r3, r3, #4
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <HAL_ADC_MspInit+0x78>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a72:	2301      	movs	r3, #1
 8000a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a76:	2303      	movs	r3, #3
 8000a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <HAL_ADC_MspInit+0x7c>)
 8000a86:	f001 fa21 	bl	8001ecc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	@ 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40012000 	.word	0x40012000
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020800 	.word	0x40020800

08000aa0 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	@ 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a15      	ldr	r2, [pc, #84]	@ (8000b14 <HAL_DAC_MspInit+0x74>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d123      	bne.n	8000b0a <HAL_DAC_MspInit+0x6a>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000ac2:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <HAL_DAC_MspInit+0x78>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	4a14      	ldr	r2, [pc, #80]	@ (8000b18 <HAL_DAC_MspInit+0x78>)
 8000ac8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ace:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <HAL_DAC_MspInit+0x78>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <HAL_DAC_MspInit+0x78>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	4a0e      	ldr	r2, [pc, #56]	@ (8000b18 <HAL_DAC_MspInit+0x78>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <HAL_DAC_MspInit+0x78>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000af2:	2310      	movs	r3, #16
 8000af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af6:	2303      	movs	r3, #3
 8000af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <HAL_DAC_MspInit+0x7c>)
 8000b06:	f001 f9e1 	bl	8001ecc <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8000b0a:	bf00      	nop
 8000b0c:	3728      	adds	r7, #40	@ 0x28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40007400 	.word	0x40007400
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020000 	.word	0x40020000

08000b20 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b0aa      	sub	sp, #168	@ 0xa8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2280      	movs	r2, #128	@ 0x80
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f004 fa07 	bl	8004f54 <memset>
  if(hi2c->Instance==I2C1)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a58      	ldr	r2, [pc, #352]	@ (8000cac <HAL_I2C_MspInit+0x18c>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	f040 80a8 	bne.w	8000ca2 <HAL_I2C_MspInit+0x182>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b52:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b56:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4618      	mov	r0, r3
 8000b62:	f003 fa31 	bl	8003fc8 <HAL_RCCEx_PeriphCLKConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000b6c:	f7ff ff2e 	bl	80009cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b70:	4b4f      	ldr	r3, [pc, #316]	@ (8000cb0 <HAL_I2C_MspInit+0x190>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b74:	4a4e      	ldr	r2, [pc, #312]	@ (8000cb0 <HAL_I2C_MspInit+0x190>)
 8000b76:	f043 0302 	orr.w	r3, r3, #2
 8000b7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7c:	4b4c      	ldr	r3, [pc, #304]	@ (8000cb0 <HAL_I2C_MspInit+0x190>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b80:	f003 0302 	and.w	r3, r3, #2
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b88:	23c0      	movs	r3, #192	@ 0xc0
 8000b8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b8e:	2312      	movs	r3, #18
 8000b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000baa:	4619      	mov	r1, r3
 8000bac:	4841      	ldr	r0, [pc, #260]	@ (8000cb4 <HAL_I2C_MspInit+0x194>)
 8000bae:	f001 f98d 	bl	8001ecc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bb2:	4b3f      	ldr	r3, [pc, #252]	@ (8000cb0 <HAL_I2C_MspInit+0x190>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb6:	4a3e      	ldr	r2, [pc, #248]	@ (8000cb0 <HAL_I2C_MspInit+0x190>)
 8000bb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bbe:	4b3c      	ldr	r3, [pc, #240]	@ (8000cb0 <HAL_I2C_MspInit+0x190>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000bca:	4b3b      	ldr	r3, [pc, #236]	@ (8000cb8 <HAL_I2C_MspInit+0x198>)
 8000bcc:	4a3b      	ldr	r2, [pc, #236]	@ (8000cbc <HAL_I2C_MspInit+0x19c>)
 8000bce:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000bd0:	4b39      	ldr	r3, [pc, #228]	@ (8000cb8 <HAL_I2C_MspInit+0x198>)
 8000bd2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000bd6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bd8:	4b37      	ldr	r3, [pc, #220]	@ (8000cb8 <HAL_I2C_MspInit+0x198>)
 8000bda:	2240      	movs	r2, #64	@ 0x40
 8000bdc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bde:	4b36      	ldr	r3, [pc, #216]	@ (8000cb8 <HAL_I2C_MspInit+0x198>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000be4:	4b34      	ldr	r3, [pc, #208]	@ (8000cb8 <HAL_I2C_MspInit+0x198>)
 8000be6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bea:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bec:	4b32      	ldr	r3, [pc, #200]	@ (8000cb8 <HAL_I2C_MspInit+0x198>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bf2:	4b31      	ldr	r3, [pc, #196]	@ (8000cb8 <HAL_I2C_MspInit+0x198>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000bf8:	4b2f      	ldr	r3, [pc, #188]	@ (8000cb8 <HAL_I2C_MspInit+0x198>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bfe:	4b2e      	ldr	r3, [pc, #184]	@ (8000cb8 <HAL_I2C_MspInit+0x198>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c04:	4b2c      	ldr	r3, [pc, #176]	@ (8000cb8 <HAL_I2C_MspInit+0x198>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000c0a:	482b      	ldr	r0, [pc, #172]	@ (8000cb8 <HAL_I2C_MspInit+0x198>)
 8000c0c:	f000 fe44 	bl	8001898 <HAL_DMA_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 8000c16:	f7ff fed9 	bl	80009cc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a26      	ldr	r2, [pc, #152]	@ (8000cb8 <HAL_I2C_MspInit+0x198>)
 8000c1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c20:	4a25      	ldr	r2, [pc, #148]	@ (8000cb8 <HAL_I2C_MspInit+0x198>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000c26:	4b26      	ldr	r3, [pc, #152]	@ (8000cc0 <HAL_I2C_MspInit+0x1a0>)
 8000c28:	4a26      	ldr	r2, [pc, #152]	@ (8000cc4 <HAL_I2C_MspInit+0x1a4>)
 8000c2a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000c2c:	4b24      	ldr	r3, [pc, #144]	@ (8000cc0 <HAL_I2C_MspInit+0x1a0>)
 8000c2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c32:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c34:	4b22      	ldr	r3, [pc, #136]	@ (8000cc0 <HAL_I2C_MspInit+0x1a0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c3a:	4b21      	ldr	r3, [pc, #132]	@ (8000cc0 <HAL_I2C_MspInit+0x1a0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c40:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc0 <HAL_I2C_MspInit+0x1a0>)
 8000c42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c46:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c48:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc0 <HAL_I2C_MspInit+0x1a0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <HAL_I2C_MspInit+0x1a0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000c54:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc0 <HAL_I2C_MspInit+0x1a0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	@ (8000cc0 <HAL_I2C_MspInit+0x1a0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c60:	4b17      	ldr	r3, [pc, #92]	@ (8000cc0 <HAL_I2C_MspInit+0x1a0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000c66:	4816      	ldr	r0, [pc, #88]	@ (8000cc0 <HAL_I2C_MspInit+0x1a0>)
 8000c68:	f000 fe16 	bl	8001898 <HAL_DMA_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_I2C_MspInit+0x156>
    {
      Error_Handler();
 8000c72:	f7ff feab 	bl	80009cc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a11      	ldr	r2, [pc, #68]	@ (8000cc0 <HAL_I2C_MspInit+0x1a0>)
 8000c7a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c7c:	4a10      	ldr	r2, [pc, #64]	@ (8000cc0 <HAL_I2C_MspInit+0x1a0>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	201f      	movs	r0, #31
 8000c88:	f000 fcdb 	bl	8001642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c8c:	201f      	movs	r0, #31
 8000c8e:	f000 fcf4 	bl	800167a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	2020      	movs	r0, #32
 8000c98:	f000 fcd3 	bl	8001642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c9c:	2020      	movs	r0, #32
 8000c9e:	f000 fcec 	bl	800167a <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ca2:	bf00      	nop
 8000ca4:	37a8      	adds	r7, #168	@ 0xa8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40005400 	.word	0x40005400
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020400 	.word	0x40020400
 8000cb8:	200000d8 	.word	0x200000d8
 8000cbc:	400260a0 	.word	0x400260a0
 8000cc0:	20000138 	.word	0x20000138
 8000cc4:	40026010 	.word	0x40026010

08000cc8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b0aa      	sub	sp, #168	@ 0xa8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2280      	movs	r2, #128	@ 0x80
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f004 f933 	bl	8004f54 <memset>
  if(huart->Instance==USART1)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a21      	ldr	r2, [pc, #132]	@ (8000d78 <HAL_UART_MspInit+0xb0>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d13b      	bne.n	8000d70 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cf8:	2340      	movs	r3, #64	@ 0x40
 8000cfa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4618      	mov	r0, r3
 8000d06:	f003 f95f 	bl	8003fc8 <HAL_RCCEx_PeriphCLKConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d10:	f7ff fe5c 	bl	80009cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d14:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <HAL_UART_MspInit+0xb4>)
 8000d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d18:	4a18      	ldr	r2, [pc, #96]	@ (8000d7c <HAL_UART_MspInit+0xb4>)
 8000d1a:	f043 0310 	orr.w	r3, r3, #16
 8000d1e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d20:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <HAL_UART_MspInit+0xb4>)
 8000d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d24:	f003 0310 	and.w	r3, r3, #16
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2c:	4b13      	ldr	r3, [pc, #76]	@ (8000d7c <HAL_UART_MspInit+0xb4>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d30:	4a12      	ldr	r2, [pc, #72]	@ (8000d7c <HAL_UART_MspInit+0xb4>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d38:	4b10      	ldr	r3, [pc, #64]	@ (8000d7c <HAL_UART_MspInit+0xb4>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d44:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d5e:	2307      	movs	r3, #7
 8000d60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d64:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <HAL_UART_MspInit+0xb8>)
 8000d6c:	f001 f8ae 	bl	8001ecc <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d70:	bf00      	nop
 8000d72:	37a8      	adds	r7, #168	@ 0xa8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40011000 	.word	0x40011000
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <NMI_Handler+0x4>

08000d8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <UsageFault_Handler+0x4>

08000dac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dda:	f000 f8a3 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000de8:	4802      	ldr	r0, [pc, #8]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x10>)
 8000dea:	f000 fe25 	bl	8001a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000138 	.word	0x20000138

08000df8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000dfc:	4802      	ldr	r0, [pc, #8]	@ (8000e08 <DMA1_Stream6_IRQHandler+0x10>)
 8000dfe:	f000 fe1b 	bl	8001a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200000d8 	.word	0x200000d8

08000e0c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000e10:	4802      	ldr	r0, [pc, #8]	@ (8000e1c <I2C1_EV_IRQHandler+0x10>)
 8000e12:	f001 fbc5 	bl	80025a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000084 	.word	0x20000084

08000e20 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000e24:	4802      	ldr	r0, [pc, #8]	@ (8000e30 <I2C1_ER_IRQHandler+0x10>)
 8000e26:	f001 fbd5 	bl	80025d4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000084 	.word	0x20000084

08000e34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <SystemInit+0x20>)
 8000e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e3e:	4a05      	ldr	r2, [pc, #20]	@ (8000e54 <SystemInit+0x20>)
 8000e40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000e5c:	f7ff ffea 	bl	8000e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e60:	480c      	ldr	r0, [pc, #48]	@ (8000e94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e62:	490d      	ldr	r1, [pc, #52]	@ (8000e98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e64:	4a0d      	ldr	r2, [pc, #52]	@ (8000e9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e86:	f004 f86d 	bl	8004f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8a:	f7ff fb41 	bl	8000510 <main>
  bx  lr    
 8000e8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e90:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e9c:	08004ff4 	.word	0x08004ff4
  ldr r2, =_sbss
 8000ea0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ea4:	20000224 	.word	0x20000224

08000ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC_IRQHandler>

08000eaa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eae:	2003      	movs	r0, #3
 8000eb0:	f000 fbbc 	bl	800162c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb4:	200f      	movs	r0, #15
 8000eb6:	f000 f805 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eba:	f7ff fd8d 	bl	80009d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <HAL_InitTick+0x54>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_InitTick+0x58>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fbd7 	bl	8001696 <HAL_SYSTICK_Config>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00e      	b.n	8000f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d80a      	bhi.n	8000f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f000 fb9f 	bl	8001642 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4a06      	ldr	r2, [pc, #24]	@ (8000f20 <HAL_InitTick+0x5c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_IncTick+0x20>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <HAL_IncTick+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <HAL_IncTick+0x24>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000220 	.word	0x20000220

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	@ (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000220 	.word	0x20000220

08000f64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e031      	b.n	8000fde <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d109      	bne.n	8000f96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff fd4c 	bl	8000a20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	f003 0310 	and.w	r3, r3, #16
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d116      	bne.n	8000fd0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fa6:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <HAL_ADC_Init+0x84>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	f043 0202 	orr.w	r2, r3, #2
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f970 	bl	8001298 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc2:	f023 0303 	bic.w	r3, r3, #3
 8000fc6:	f043 0201 	orr.w	r2, r3, #1
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fce:	e001      	b.n	8000fd4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	ffffeefd 	.word	0xffffeefd

08000fec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001000:	2b01      	cmp	r3, #1
 8001002:	d101      	bne.n	8001008 <HAL_ADC_ConfigChannel+0x1c>
 8001004:	2302      	movs	r3, #2
 8001006:	e136      	b.n	8001276 <HAL_ADC_ConfigChannel+0x28a>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2201      	movs	r2, #1
 800100c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b09      	cmp	r3, #9
 8001016:	d93a      	bls.n	800108e <HAL_ADC_ConfigChannel+0xa2>
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001020:	d035      	beq.n	800108e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68d9      	ldr	r1, [r3, #12]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	b29b      	uxth	r3, r3
 800102e:	461a      	mov	r2, r3
 8001030:	4613      	mov	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	3b1e      	subs	r3, #30
 8001038:	2207      	movs	r2, #7
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	400a      	ands	r2, r1
 8001046:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a8d      	ldr	r2, [pc, #564]	@ (8001284 <HAL_ADC_ConfigChannel+0x298>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d10a      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68d9      	ldr	r1, [r3, #12]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	061a      	lsls	r2, r3, #24
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	430a      	orrs	r2, r1
 8001064:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001066:	e035      	b.n	80010d4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	68d9      	ldr	r1, [r3, #12]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	b29b      	uxth	r3, r3
 8001078:	4618      	mov	r0, r3
 800107a:	4603      	mov	r3, r0
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4403      	add	r3, r0
 8001080:	3b1e      	subs	r3, #30
 8001082:	409a      	lsls	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	430a      	orrs	r2, r1
 800108a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800108c:	e022      	b.n	80010d4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6919      	ldr	r1, [r3, #16]
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	b29b      	uxth	r3, r3
 800109a:	461a      	mov	r2, r3
 800109c:	4613      	mov	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	4413      	add	r3, r2
 80010a2:	2207      	movs	r2, #7
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43da      	mvns	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	400a      	ands	r2, r1
 80010b0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6919      	ldr	r1, [r3, #16]
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	4603      	mov	r3, r0
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4403      	add	r3, r0
 80010ca:	409a      	lsls	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	430a      	orrs	r2, r1
 80010d2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2b06      	cmp	r3, #6
 80010da:	d824      	bhi.n	8001126 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	3b05      	subs	r3, #5
 80010ee:	221f      	movs	r2, #31
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43da      	mvns	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	400a      	ands	r2, r1
 80010fc:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	b29b      	uxth	r3, r3
 800110a:	4618      	mov	r0, r3
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	3b05      	subs	r3, #5
 8001118:	fa00 f203 	lsl.w	r2, r0, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	430a      	orrs	r2, r1
 8001122:	635a      	str	r2, [r3, #52]	@ 0x34
 8001124:	e04c      	b.n	80011c0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b0c      	cmp	r3, #12
 800112c:	d824      	bhi.n	8001178 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	3b23      	subs	r3, #35	@ 0x23
 8001140:	221f      	movs	r2, #31
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43da      	mvns	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	400a      	ands	r2, r1
 800114e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	b29b      	uxth	r3, r3
 800115c:	4618      	mov	r0, r3
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	3b23      	subs	r3, #35	@ 0x23
 800116a:	fa00 f203 	lsl.w	r2, r0, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	430a      	orrs	r2, r1
 8001174:	631a      	str	r2, [r3, #48]	@ 0x30
 8001176:	e023      	b.n	80011c0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	3b41      	subs	r3, #65	@ 0x41
 800118a:	221f      	movs	r2, #31
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43da      	mvns	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	400a      	ands	r2, r1
 8001198:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	3b41      	subs	r3, #65	@ 0x41
 80011b4:	fa00 f203 	lsl.w	r2, r0, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	430a      	orrs	r2, r1
 80011be:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a30      	ldr	r2, [pc, #192]	@ (8001288 <HAL_ADC_ConfigChannel+0x29c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d10a      	bne.n	80011e0 <HAL_ADC_ConfigChannel+0x1f4>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80011d2:	d105      	bne.n	80011e0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80011d4:	4b2d      	ldr	r3, [pc, #180]	@ (800128c <HAL_ADC_ConfigChannel+0x2a0>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	4a2c      	ldr	r2, [pc, #176]	@ (800128c <HAL_ADC_ConfigChannel+0x2a0>)
 80011da:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80011de:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a28      	ldr	r2, [pc, #160]	@ (8001288 <HAL_ADC_ConfigChannel+0x29c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d10f      	bne.n	800120a <HAL_ADC_ConfigChannel+0x21e>
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b12      	cmp	r3, #18
 80011f0:	d10b      	bne.n	800120a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80011f2:	4b26      	ldr	r3, [pc, #152]	@ (800128c <HAL_ADC_ConfigChannel+0x2a0>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	4a25      	ldr	r2, [pc, #148]	@ (800128c <HAL_ADC_ConfigChannel+0x2a0>)
 80011f8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80011fc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80011fe:	4b23      	ldr	r3, [pc, #140]	@ (800128c <HAL_ADC_ConfigChannel+0x2a0>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	4a22      	ldr	r2, [pc, #136]	@ (800128c <HAL_ADC_ConfigChannel+0x2a0>)
 8001204:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001208:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a1e      	ldr	r2, [pc, #120]	@ (8001288 <HAL_ADC_ConfigChannel+0x29c>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d12b      	bne.n	800126c <HAL_ADC_ConfigChannel+0x280>
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a1a      	ldr	r2, [pc, #104]	@ (8001284 <HAL_ADC_ConfigChannel+0x298>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d003      	beq.n	8001226 <HAL_ADC_ConfigChannel+0x23a>
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b11      	cmp	r3, #17
 8001224:	d122      	bne.n	800126c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001226:	4b19      	ldr	r3, [pc, #100]	@ (800128c <HAL_ADC_ConfigChannel+0x2a0>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	4a18      	ldr	r2, [pc, #96]	@ (800128c <HAL_ADC_ConfigChannel+0x2a0>)
 800122c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001230:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001232:	4b16      	ldr	r3, [pc, #88]	@ (800128c <HAL_ADC_ConfigChannel+0x2a0>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4a15      	ldr	r2, [pc, #84]	@ (800128c <HAL_ADC_ConfigChannel+0x2a0>)
 8001238:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800123c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a10      	ldr	r2, [pc, #64]	@ (8001284 <HAL_ADC_ConfigChannel+0x298>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d111      	bne.n	800126c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001248:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <HAL_ADC_ConfigChannel+0x2a4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a11      	ldr	r2, [pc, #68]	@ (8001294 <HAL_ADC_ConfigChannel+0x2a8>)
 800124e:	fba2 2303 	umull	r2, r3, r2, r3
 8001252:	0c9a      	lsrs	r2, r3, #18
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800125e:	e002      	b.n	8001266 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	3b01      	subs	r3, #1
 8001264:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1f9      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	10000012 	.word	0x10000012
 8001288:	40012000 	.word	0x40012000
 800128c:	40012300 	.word	0x40012300
 8001290:	20000000 	.word	0x20000000
 8001294:	431bde83 	.word	0x431bde83

08001298 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80012a0:	4b78      	ldr	r3, [pc, #480]	@ (8001484 <ADC_Init+0x1ec>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	4a77      	ldr	r2, [pc, #476]	@ (8001484 <ADC_Init+0x1ec>)
 80012a6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80012aa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80012ac:	4b75      	ldr	r3, [pc, #468]	@ (8001484 <ADC_Init+0x1ec>)
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	4973      	ldr	r1, [pc, #460]	@ (8001484 <ADC_Init+0x1ec>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6859      	ldr	r1, [r3, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	021a      	lsls	r2, r3, #8
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80012ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6859      	ldr	r1, [r3, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800130e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6899      	ldr	r1, [r3, #8]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001326:	4a58      	ldr	r2, [pc, #352]	@ (8001488 <ADC_Init+0x1f0>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d022      	beq.n	8001372 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800133a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6899      	ldr	r1, [r3, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800135c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6899      	ldr	r1, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	e00f      	b.n	8001392 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001380:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001390:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0202 	bic.w	r2, r2, #2
 80013a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6899      	ldr	r1, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	005a      	lsls	r2, r3, #1
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d01b      	beq.n	80013f8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80013de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6859      	ldr	r1, [r3, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ea:	3b01      	subs	r3, #1
 80013ec:	035a      	lsls	r2, r3, #13
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	e007      	b.n	8001408 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001406:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001416:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	3b01      	subs	r3, #1
 8001424:	051a      	lsls	r2, r3, #20
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800143c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6899      	ldr	r1, [r3, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800144a:	025a      	lsls	r2, r3, #9
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001462:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6899      	ldr	r1, [r3, #8]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	029a      	lsls	r2, r3, #10
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	609a      	str	r2, [r3, #8]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	40012300 	.word	0x40012300
 8001488:	0f000001 	.word	0x0f000001

0800148c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800149c:	4b0b      	ldr	r3, [pc, #44]	@ (80014cc <__NVIC_SetPriorityGrouping+0x40>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014a8:	4013      	ands	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014b4:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ba:	4a04      	ldr	r2, [pc, #16]	@ (80014cc <__NVIC_SetPriorityGrouping+0x40>)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	60d3      	str	r3, [r2, #12]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000ed00 	.word	0xe000ed00
 80014d0:	05fa0000 	.word	0x05fa0000

080014d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d8:	4b04      	ldr	r3, [pc, #16]	@ (80014ec <__NVIC_GetPriorityGrouping+0x18>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	f003 0307 	and.w	r3, r3, #7
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	db0b      	blt.n	800151a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	f003 021f 	and.w	r2, r3, #31
 8001508:	4907      	ldr	r1, [pc, #28]	@ (8001528 <__NVIC_EnableIRQ+0x38>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	095b      	lsrs	r3, r3, #5
 8001510:	2001      	movs	r0, #1
 8001512:	fa00 f202 	lsl.w	r2, r0, r2
 8001516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000e100 	.word	0xe000e100

0800152c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	6039      	str	r1, [r7, #0]
 8001536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153c:	2b00      	cmp	r3, #0
 800153e:	db0a      	blt.n	8001556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	b2da      	uxtb	r2, r3
 8001544:	490c      	ldr	r1, [pc, #48]	@ (8001578 <__NVIC_SetPriority+0x4c>)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	0112      	lsls	r2, r2, #4
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	440b      	add	r3, r1
 8001550:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001554:	e00a      	b.n	800156c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4908      	ldr	r1, [pc, #32]	@ (800157c <__NVIC_SetPriority+0x50>)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	3b04      	subs	r3, #4
 8001564:	0112      	lsls	r2, r2, #4
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	440b      	add	r3, r1
 800156a:	761a      	strb	r2, [r3, #24]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000e100 	.word	0xe000e100
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001580:	b480      	push	{r7}
 8001582:	b089      	sub	sp, #36	@ 0x24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f1c3 0307 	rsb	r3, r3, #7
 800159a:	2b04      	cmp	r3, #4
 800159c:	bf28      	it	cs
 800159e:	2304      	movcs	r3, #4
 80015a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3304      	adds	r3, #4
 80015a6:	2b06      	cmp	r3, #6
 80015a8:	d902      	bls.n	80015b0 <NVIC_EncodePriority+0x30>
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3b03      	subs	r3, #3
 80015ae:	e000      	b.n	80015b2 <NVIC_EncodePriority+0x32>
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	f04f 32ff 	mov.w	r2, #4294967295
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43da      	mvns	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	401a      	ands	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c8:	f04f 31ff 	mov.w	r1, #4294967295
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	43d9      	mvns	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	4313      	orrs	r3, r2
         );
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3724      	adds	r7, #36	@ 0x24
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015f8:	d301      	bcc.n	80015fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00f      	b.n	800161e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001628 <SysTick_Config+0x40>)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001606:	210f      	movs	r1, #15
 8001608:	f04f 30ff 	mov.w	r0, #4294967295
 800160c:	f7ff ff8e 	bl	800152c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001610:	4b05      	ldr	r3, [pc, #20]	@ (8001628 <SysTick_Config+0x40>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001616:	4b04      	ldr	r3, [pc, #16]	@ (8001628 <SysTick_Config+0x40>)
 8001618:	2207      	movs	r2, #7
 800161a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	e000e010 	.word	0xe000e010

0800162c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ff29 	bl	800148c <__NVIC_SetPriorityGrouping>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001642:	b580      	push	{r7, lr}
 8001644:	b086      	sub	sp, #24
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001654:	f7ff ff3e 	bl	80014d4 <__NVIC_GetPriorityGrouping>
 8001658:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	6978      	ldr	r0, [r7, #20]
 8001660:	f7ff ff8e 	bl	8001580 <NVIC_EncodePriority>
 8001664:	4602      	mov	r2, r0
 8001666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff5d 	bl	800152c <__NVIC_SetPriority>
}
 8001672:	bf00      	nop
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff31 	bl	80014f0 <__NVIC_EnableIRQ>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ffa2 	bl	80015e8 <SysTick_Config>
 80016a4:	4603      	mov	r3, r0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80016b4:	f3bf 8f5f 	dmb	sy
}
 80016b8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80016ba:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <HAL_MPU_Disable+0x28>)
 80016bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016be:	4a06      	ldr	r2, [pc, #24]	@ (80016d8 <HAL_MPU_Disable+0x28>)
 80016c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016c4:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80016c6:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <HAL_MPU_Disable+0x2c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	605a      	str	r2, [r3, #4]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000ed00 	.word	0xe000ed00
 80016dc:	e000ed90 	.word	0xe000ed90

080016e0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80016e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001718 <HAL_MPU_Enable+0x38>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80016f2:	4b0a      	ldr	r3, [pc, #40]	@ (800171c <HAL_MPU_Enable+0x3c>)
 80016f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f6:	4a09      	ldr	r2, [pc, #36]	@ (800171c <HAL_MPU_Enable+0x3c>)
 80016f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016fc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80016fe:	f3bf 8f4f 	dsb	sy
}
 8001702:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001704:	f3bf 8f6f 	isb	sy
}
 8001708:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed90 	.word	0xe000ed90
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	785a      	ldrb	r2, [r3, #1]
 800172c:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <HAL_MPU_ConfigRegion+0x7c>)
 800172e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001730:	4b1a      	ldr	r3, [pc, #104]	@ (800179c <HAL_MPU_ConfigRegion+0x7c>)
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	4a19      	ldr	r2, [pc, #100]	@ (800179c <HAL_MPU_ConfigRegion+0x7c>)
 8001736:	f023 0301 	bic.w	r3, r3, #1
 800173a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800173c:	4a17      	ldr	r2, [pc, #92]	@ (800179c <HAL_MPU_ConfigRegion+0x7c>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	7b1b      	ldrb	r3, [r3, #12]
 8001748:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	7adb      	ldrb	r3, [r3, #11]
 800174e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001750:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	7a9b      	ldrb	r3, [r3, #10]
 8001756:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001758:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	7b5b      	ldrb	r3, [r3, #13]
 800175e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001760:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7b9b      	ldrb	r3, [r3, #14]
 8001766:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001768:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7bdb      	ldrb	r3, [r3, #15]
 800176e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001770:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7a5b      	ldrb	r3, [r3, #9]
 8001776:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001778:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7a1b      	ldrb	r3, [r3, #8]
 800177e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001780:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	7812      	ldrb	r2, [r2, #0]
 8001786:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001788:	4a04      	ldr	r2, [pc, #16]	@ (800179c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800178a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800178c:	6113      	str	r3, [r2, #16]
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000ed90 	.word	0xe000ed90

080017a0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e014      	b.n	80017dc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	791b      	ldrb	r3, [r3, #4]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d105      	bne.n	80017c8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff f96c 	bl	8000aa0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2202      	movs	r2, #2
 80017cc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	@ 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <HAL_DAC_ConfigChannel+0x1c>
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e042      	b.n	800188a <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	795b      	ldrb	r3, [r3, #5]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_DAC_ConfigChannel+0x2c>
 800180c:	2302      	movs	r3, #2
 800180e:	e03c      	b.n	800188a <HAL_DAC_ConfigChannel+0xa6>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2201      	movs	r2, #1
 8001814:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2202      	movs	r2, #2
 800181a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	4313      	orrs	r3, r2
 8001844:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f003 0310 	and.w	r3, r3, #16
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6819      	ldr	r1, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	22c0      	movs	r2, #192	@ 0xc0
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43da      	mvns	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	400a      	ands	r2, r1
 800187a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2201      	movs	r2, #1
 8001880:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001888:	7ffb      	ldrb	r3, [r7, #31]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3724      	adds	r7, #36	@ 0x24
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff fb52 	bl	8000f4c <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e099      	b.n	80019e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2202      	movs	r2, #2
 80018b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0201 	bic.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d4:	e00f      	b.n	80018f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018d6:	f7ff fb39 	bl	8000f4c <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d908      	bls.n	80018f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2220      	movs	r2, #32
 80018e8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2203      	movs	r2, #3
 80018ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e078      	b.n	80019e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1e8      	bne.n	80018d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	4b38      	ldr	r3, [pc, #224]	@ (80019f0 <HAL_DMA_Init+0x158>)
 8001910:	4013      	ands	r3, r2
 8001912:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001922:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800192e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800193a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4313      	orrs	r3, r2
 8001946:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194c:	2b04      	cmp	r3, #4
 800194e:	d107      	bne.n	8001960 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001958:	4313      	orrs	r3, r2
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	4313      	orrs	r3, r2
 800195e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f023 0307 	bic.w	r3, r3, #7
 8001976:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	4313      	orrs	r3, r2
 8001980:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001986:	2b04      	cmp	r3, #4
 8001988:	d117      	bne.n	80019ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4313      	orrs	r3, r2
 8001992:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00e      	beq.n	80019ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 fa19 	bl	8001dd4 <DMA_CheckFifoParam>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2240      	movs	r2, #64	@ 0x40
 80019ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80019b6:	2301      	movs	r3, #1
 80019b8:	e016      	b.n	80019e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f9d0 	bl	8001d68 <DMA_CalcBaseAndBitshift>
 80019c8:	4603      	mov	r3, r0
 80019ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d0:	223f      	movs	r2, #63	@ 0x3f
 80019d2:	409a      	lsls	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	e010803f 	.word	0xe010803f

080019f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d004      	beq.n	8001a12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2280      	movs	r2, #128	@ 0x80
 8001a0c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e00c      	b.n	8001a2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2205      	movs	r2, #5
 8001a16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 0201 	bic.w	r2, r2, #1
 8001a28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001a44:	4b8e      	ldr	r3, [pc, #568]	@ (8001c80 <HAL_DMA_IRQHandler+0x248>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a8e      	ldr	r2, [pc, #568]	@ (8001c84 <HAL_DMA_IRQHandler+0x24c>)
 8001a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4e:	0a9b      	lsrs	r3, r3, #10
 8001a50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a62:	2208      	movs	r2, #8
 8001a64:	409a      	lsls	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d01a      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d013      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0204 	bic.w	r2, r2, #4
 8001a8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a90:	2208      	movs	r2, #8
 8001a92:	409a      	lsls	r2, r3
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a9c:	f043 0201 	orr.w	r2, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	409a      	lsls	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d012      	beq.n	8001ada <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00b      	beq.n	8001ada <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	409a      	lsls	r2, r3
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ad2:	f043 0202 	orr.w	r2, r3, #2
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ade:	2204      	movs	r2, #4
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d012      	beq.n	8001b10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00b      	beq.n	8001b10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001afc:	2204      	movs	r2, #4
 8001afe:	409a      	lsls	r2, r3
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b08:	f043 0204 	orr.w	r2, r3, #4
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b14:	2210      	movs	r2, #16
 8001b16:	409a      	lsls	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d043      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d03c      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b32:	2210      	movs	r2, #16
 8001b34:	409a      	lsls	r2, r3
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d018      	beq.n	8001b7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d108      	bne.n	8001b68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d024      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	4798      	blx	r3
 8001b66:	e01f      	b.n	8001ba8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d01b      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	4798      	blx	r3
 8001b78:	e016      	b.n	8001ba8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d107      	bne.n	8001b98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0208 	bic.w	r2, r2, #8
 8001b96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bac:	2220      	movs	r2, #32
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 808f 	beq.w	8001cd8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0310 	and.w	r3, r3, #16
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 8087 	beq.w	8001cd8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bce:	2220      	movs	r2, #32
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b05      	cmp	r3, #5
 8001be0:	d136      	bne.n	8001c50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0216 	bic.w	r2, r2, #22
 8001bf0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	695a      	ldr	r2, [r3, #20]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d103      	bne.n	8001c12 <HAL_DMA_IRQHandler+0x1da>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d007      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0208 	bic.w	r2, r2, #8
 8001c20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c26:	223f      	movs	r2, #63	@ 0x3f
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d07e      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	4798      	blx	r3
        }
        return;
 8001c4e:	e079      	b.n	8001d44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d01d      	beq.n	8001c9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10d      	bne.n	8001c88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d031      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	4798      	blx	r3
 8001c7c:	e02c      	b.n	8001cd8 <HAL_DMA_IRQHandler+0x2a0>
 8001c7e:	bf00      	nop
 8001c80:	20000000 	.word	0x20000000
 8001c84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d023      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	4798      	blx	r3
 8001c98:	e01e      	b.n	8001cd8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10f      	bne.n	8001cc8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0210 	bic.w	r2, r2, #16
 8001cb6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d032      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d022      	beq.n	8001d32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2205      	movs	r2, #5
 8001cf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0201 	bic.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	3301      	adds	r3, #1
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d307      	bcc.n	8001d20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f2      	bne.n	8001d04 <HAL_DMA_IRQHandler+0x2cc>
 8001d1e:	e000      	b.n	8001d22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d005      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	4798      	blx	r3
 8001d42:	e000      	b.n	8001d46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d44:	bf00      	nop
    }
  }
}
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d5a:	b2db      	uxtb	r3, r3
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	3b10      	subs	r3, #16
 8001d78:	4a13      	ldr	r2, [pc, #76]	@ (8001dc8 <DMA_CalcBaseAndBitshift+0x60>)
 8001d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d82:	4a12      	ldr	r2, [pc, #72]	@ (8001dcc <DMA_CalcBaseAndBitshift+0x64>)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4413      	add	r3, r2
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d908      	bls.n	8001da8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <DMA_CalcBaseAndBitshift+0x68>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	1d1a      	adds	r2, r3, #4
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	659a      	str	r2, [r3, #88]	@ 0x58
 8001da6:	e006      	b.n	8001db6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <DMA_CalcBaseAndBitshift+0x68>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	aaaaaaab 	.word	0xaaaaaaab
 8001dcc:	08004fdc 	.word	0x08004fdc
 8001dd0:	fffffc00 	.word	0xfffffc00

08001dd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d11f      	bne.n	8001e2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d856      	bhi.n	8001ea2 <DMA_CheckFifoParam+0xce>
 8001df4:	a201      	add	r2, pc, #4	@ (adr r2, 8001dfc <DMA_CheckFifoParam+0x28>)
 8001df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfa:	bf00      	nop
 8001dfc:	08001e0d 	.word	0x08001e0d
 8001e00:	08001e1f 	.word	0x08001e1f
 8001e04:	08001e0d 	.word	0x08001e0d
 8001e08:	08001ea3 	.word	0x08001ea3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d046      	beq.n	8001ea6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e1c:	e043      	b.n	8001ea6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e22:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e26:	d140      	bne.n	8001eaa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e2c:	e03d      	b.n	8001eaa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e36:	d121      	bne.n	8001e7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d837      	bhi.n	8001eae <DMA_CheckFifoParam+0xda>
 8001e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e44 <DMA_CheckFifoParam+0x70>)
 8001e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e44:	08001e55 	.word	0x08001e55
 8001e48:	08001e5b 	.word	0x08001e5b
 8001e4c:	08001e55 	.word	0x08001e55
 8001e50:	08001e6d 	.word	0x08001e6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
      break;
 8001e58:	e030      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d025      	beq.n	8001eb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e6a:	e022      	b.n	8001eb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e70:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e74:	d11f      	bne.n	8001eb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e7a:	e01c      	b.n	8001eb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d903      	bls.n	8001e8a <DMA_CheckFifoParam+0xb6>
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d003      	beq.n	8001e90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e88:	e018      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8001e8e:	e015      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00e      	beq.n	8001eba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8001ea0:	e00b      	b.n	8001eba <DMA_CheckFifoParam+0xe6>
      break;
 8001ea2:	bf00      	nop
 8001ea4:	e00a      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
      break;
 8001ea6:	bf00      	nop
 8001ea8:	e008      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
      break;
 8001eaa:	bf00      	nop
 8001eac:	e006      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
      break;
 8001eae:	bf00      	nop
 8001eb0:	e004      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
      break;
 8001eb2:	bf00      	nop
 8001eb4:	e002      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
      break;   
 8001eb6:	bf00      	nop
 8001eb8:	e000      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
      break;
 8001eba:	bf00      	nop
    }
  } 
  
  return status; 
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop

08001ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	@ 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	e169      	b.n	80021c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001eec:	2201      	movs	r2, #1
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	f040 8158 	bne.w	80021ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d005      	beq.n	8001f22 <HAL_GPIO_Init+0x56>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d130      	bne.n	8001f84 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f58:	2201      	movs	r2, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	f003 0201 	and.w	r2, r3, #1
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d017      	beq.n	8001fc0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d123      	bne.n	8002014 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	08da      	lsrs	r2, r3, #3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3208      	adds	r2, #8
 8001fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	220f      	movs	r2, #15
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	08da      	lsrs	r2, r3, #3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3208      	adds	r2, #8
 800200e:	69b9      	ldr	r1, [r7, #24]
 8002010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	2203      	movs	r2, #3
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0203 	and.w	r2, r3, #3
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80b2 	beq.w	80021ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002056:	4b60      	ldr	r3, [pc, #384]	@ (80021d8 <HAL_GPIO_Init+0x30c>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205a:	4a5f      	ldr	r2, [pc, #380]	@ (80021d8 <HAL_GPIO_Init+0x30c>)
 800205c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002060:	6453      	str	r3, [r2, #68]	@ 0x44
 8002062:	4b5d      	ldr	r3, [pc, #372]	@ (80021d8 <HAL_GPIO_Init+0x30c>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800206e:	4a5b      	ldr	r2, [pc, #364]	@ (80021dc <HAL_GPIO_Init+0x310>)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	3302      	adds	r3, #2
 8002076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	220f      	movs	r2, #15
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a52      	ldr	r2, [pc, #328]	@ (80021e0 <HAL_GPIO_Init+0x314>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d02b      	beq.n	80020f2 <HAL_GPIO_Init+0x226>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a51      	ldr	r2, [pc, #324]	@ (80021e4 <HAL_GPIO_Init+0x318>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d025      	beq.n	80020ee <HAL_GPIO_Init+0x222>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a50      	ldr	r2, [pc, #320]	@ (80021e8 <HAL_GPIO_Init+0x31c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d01f      	beq.n	80020ea <HAL_GPIO_Init+0x21e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4f      	ldr	r2, [pc, #316]	@ (80021ec <HAL_GPIO_Init+0x320>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d019      	beq.n	80020e6 <HAL_GPIO_Init+0x21a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4e      	ldr	r2, [pc, #312]	@ (80021f0 <HAL_GPIO_Init+0x324>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d013      	beq.n	80020e2 <HAL_GPIO_Init+0x216>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4d      	ldr	r2, [pc, #308]	@ (80021f4 <HAL_GPIO_Init+0x328>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d00d      	beq.n	80020de <HAL_GPIO_Init+0x212>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4c      	ldr	r2, [pc, #304]	@ (80021f8 <HAL_GPIO_Init+0x32c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d007      	beq.n	80020da <HAL_GPIO_Init+0x20e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4b      	ldr	r2, [pc, #300]	@ (80021fc <HAL_GPIO_Init+0x330>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d101      	bne.n	80020d6 <HAL_GPIO_Init+0x20a>
 80020d2:	2307      	movs	r3, #7
 80020d4:	e00e      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020d6:	2308      	movs	r3, #8
 80020d8:	e00c      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020da:	2306      	movs	r3, #6
 80020dc:	e00a      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020de:	2305      	movs	r3, #5
 80020e0:	e008      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020e2:	2304      	movs	r3, #4
 80020e4:	e006      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020e6:	2303      	movs	r3, #3
 80020e8:	e004      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e002      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020f2:	2300      	movs	r3, #0
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	f002 0203 	and.w	r2, r2, #3
 80020fa:	0092      	lsls	r2, r2, #2
 80020fc:	4093      	lsls	r3, r2
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002104:	4935      	ldr	r1, [pc, #212]	@ (80021dc <HAL_GPIO_Init+0x310>)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	089b      	lsrs	r3, r3, #2
 800210a:	3302      	adds	r3, #2
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002112:	4b3b      	ldr	r3, [pc, #236]	@ (8002200 <HAL_GPIO_Init+0x334>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002136:	4a32      	ldr	r2, [pc, #200]	@ (8002200 <HAL_GPIO_Init+0x334>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800213c:	4b30      	ldr	r3, [pc, #192]	@ (8002200 <HAL_GPIO_Init+0x334>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002160:	4a27      	ldr	r2, [pc, #156]	@ (8002200 <HAL_GPIO_Init+0x334>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002166:	4b26      	ldr	r3, [pc, #152]	@ (8002200 <HAL_GPIO_Init+0x334>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800218a:	4a1d      	ldr	r2, [pc, #116]	@ (8002200 <HAL_GPIO_Init+0x334>)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002190:	4b1b      	ldr	r3, [pc, #108]	@ (8002200 <HAL_GPIO_Init+0x334>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021b4:	4a12      	ldr	r2, [pc, #72]	@ (8002200 <HAL_GPIO_Init+0x334>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3301      	adds	r3, #1
 80021be:	61fb      	str	r3, [r7, #28]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	2b0f      	cmp	r3, #15
 80021c4:	f67f ae92 	bls.w	8001eec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	3724      	adds	r7, #36	@ 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40013800 	.word	0x40013800
 80021e0:	40020000 	.word	0x40020000
 80021e4:	40020400 	.word	0x40020400
 80021e8:	40020800 	.word	0x40020800
 80021ec:	40020c00 	.word	0x40020c00
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40021400 	.word	0x40021400
 80021f8:	40021800 	.word	0x40021800
 80021fc:	40021c00 	.word	0x40021c00
 8002200:	40013c00 	.word	0x40013c00

08002204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	807b      	strh	r3, [r7, #2]
 8002210:	4613      	mov	r3, r2
 8002212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002214:	787b      	ldrb	r3, [r7, #1]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800221a:	887a      	ldrh	r2, [r7, #2]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002220:	e003      	b.n	800222a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002222:	887b      	ldrh	r3, [r7, #2]
 8002224:	041a      	lsls	r2, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	619a      	str	r2, [r3, #24]
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e08b      	b.n	8002362 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7fe fc5e 	bl	8000b20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2224      	movs	r2, #36	@ 0x24
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0201 	bic.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002288:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002298:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d107      	bne.n	80022b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	e006      	b.n	80022c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80022be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d108      	bne.n	80022da <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	e007      	b.n	80022ea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4b1d      	ldr	r3, [pc, #116]	@ (800236c <HAL_I2C_Init+0x134>)
 80022f6:	430b      	orrs	r3, r1
 80022f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002308:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691a      	ldr	r2, [r3, #16]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69d9      	ldr	r1, [r3, #28]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1a      	ldr	r2, [r3, #32]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0201 	orr.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2220      	movs	r2, #32
 800234e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	02008000 	.word	0x02008000

08002370 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af02      	add	r7, sp, #8
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	461a      	mov	r2, r3
 800237c:	460b      	mov	r3, r1
 800237e:	817b      	strh	r3, [r7, #10]
 8002380:	4613      	mov	r3, r2
 8002382:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b20      	cmp	r3, #32
 800238e:	f040 80fd 	bne.w	800258c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_I2C_Master_Transmit+0x30>
 800239c:	2302      	movs	r3, #2
 800239e:	e0f6      	b.n	800258e <HAL_I2C_Master_Transmit+0x21e>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023a8:	f7fe fdd0 	bl	8000f4c <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	2319      	movs	r3, #25
 80023b4:	2201      	movs	r2, #1
 80023b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 fe8f 	bl	80030de <I2C_WaitOnFlagUntilTimeout>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e0e1      	b.n	800258e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2221      	movs	r2, #33	@ 0x21
 80023ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2210      	movs	r2, #16
 80023d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	893a      	ldrh	r2, [r7, #8]
 80023ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	2bff      	cmp	r3, #255	@ 0xff
 80023fa:	d906      	bls.n	800240a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	22ff      	movs	r2, #255	@ 0xff
 8002400:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002402:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	e007      	b.n	800241a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002414:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002418:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800241e:	2b00      	cmp	r3, #0
 8002420:	d024      	beq.n	800246c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002426:	781a      	ldrb	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800243c:	b29b      	uxth	r3, r3
 800243e:	3b01      	subs	r3, #1
 8002440:	b29a      	uxth	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002456:	b2db      	uxtb	r3, r3
 8002458:	3301      	adds	r3, #1
 800245a:	b2da      	uxtb	r2, r3
 800245c:	8979      	ldrh	r1, [r7, #10]
 800245e:	4b4e      	ldr	r3, [pc, #312]	@ (8002598 <HAL_I2C_Master_Transmit+0x228>)
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 fffd 	bl	8003464 <I2C_TransferConfig>
 800246a:	e066      	b.n	800253a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002470:	b2da      	uxtb	r2, r3
 8002472:	8979      	ldrh	r1, [r7, #10]
 8002474:	4b48      	ldr	r3, [pc, #288]	@ (8002598 <HAL_I2C_Master_Transmit+0x228>)
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 fff2 	bl	8003464 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002480:	e05b      	b.n	800253a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	6a39      	ldr	r1, [r7, #32]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 fe82 	bl	8003190 <I2C_WaitOnTXISFlagUntilTimeout>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e07b      	b.n	800258e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249a:	781a      	ldrb	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d034      	beq.n	800253a <HAL_I2C_Master_Transmit+0x1ca>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d130      	bne.n	800253a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	2200      	movs	r2, #0
 80024e0:	2180      	movs	r1, #128	@ 0x80
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 fdfb 	bl	80030de <I2C_WaitOnFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e04d      	b.n	800258e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	2bff      	cmp	r3, #255	@ 0xff
 80024fa:	d90e      	bls.n	800251a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	22ff      	movs	r2, #255	@ 0xff
 8002500:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002506:	b2da      	uxtb	r2, r3
 8002508:	8979      	ldrh	r1, [r7, #10]
 800250a:	2300      	movs	r3, #0
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 ffa6 	bl	8003464 <I2C_TransferConfig>
 8002518:	e00f      	b.n	800253a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002528:	b2da      	uxtb	r2, r3
 800252a:	8979      	ldrh	r1, [r7, #10]
 800252c:	2300      	movs	r3, #0
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 ff95 	bl	8003464 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800253e:	b29b      	uxth	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d19e      	bne.n	8002482 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	6a39      	ldr	r1, [r7, #32]
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 fe68 	bl	800321e <I2C_WaitOnSTOPFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e01a      	b.n	800258e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2220      	movs	r2, #32
 800255e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6859      	ldr	r1, [r3, #4]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	4b0c      	ldr	r3, [pc, #48]	@ (800259c <HAL_I2C_Master_Transmit+0x22c>)
 800256c:	400b      	ands	r3, r1
 800256e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	e000      	b.n	800258e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800258c:	2302      	movs	r3, #2
  }
}
 800258e:	4618      	mov	r0, r3
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	80002000 	.word	0x80002000
 800259c:	fe00e800 	.word	0xfe00e800

080025a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	68f9      	ldr	r1, [r7, #12]
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	4798      	blx	r3
  }
}
 80025cc:	bf00      	nop
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00f      	beq.n	8002616 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00a      	beq.n	8002616 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002604:	f043 0201 	orr.w	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002614:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00f      	beq.n	8002640 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00a      	beq.n	8002640 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262e:	f043 0208 	orr.w	r2, r3, #8
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800263e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00f      	beq.n	800266a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00a      	beq.n	800266a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002658:	f043 0202 	orr.w	r2, r3, #2
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002668:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 030b 	and.w	r3, r3, #11
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800267a:	68f9      	ldr	r1, [r7, #12]
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 fbd5 	bl	8002e2c <I2C_ITError>
  }
}
 8002682:	bf00      	nop
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	460b      	mov	r3, r1
 80026bc:	70fb      	strb	r3, [r7, #3]
 80026be:	4613      	mov	r3, r2
 80026c0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <I2C_Slave_ISR_IT+0x24>
 800272a:	2302      	movs	r3, #2
 800272c:	e0e2      	b.n	80028f4 <I2C_Slave_ISR_IT+0x1ea>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b00      	cmp	r3, #0
 800273e:	d009      	beq.n	8002754 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002746:	2b00      	cmp	r3, #0
 8002748:	d004      	beq.n	8002754 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800274a:	6939      	ldr	r1, [r7, #16]
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 f9b5 	bl	8002abc <I2C_ITSlaveCplt>
 8002752:	e0ca      	b.n	80028ea <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f003 0310 	and.w	r3, r3, #16
 800275a:	2b00      	cmp	r3, #0
 800275c:	d04b      	beq.n	80027f6 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002764:	2b00      	cmp	r3, #0
 8002766:	d046      	beq.n	80027f6 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d128      	bne.n	80027c4 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b28      	cmp	r3, #40	@ 0x28
 800277c:	d108      	bne.n	8002790 <I2C_Slave_ISR_IT+0x86>
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002784:	d104      	bne.n	8002790 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002786:	6939      	ldr	r1, [r7, #16]
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 fafb 	bl	8002d84 <I2C_ITListenCplt>
 800278e:	e031      	b.n	80027f4 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b29      	cmp	r3, #41	@ 0x29
 800279a:	d10e      	bne.n	80027ba <I2C_Slave_ISR_IT+0xb0>
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027a2:	d00a      	beq.n	80027ba <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2210      	movs	r2, #16
 80027aa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 fc54 	bl	800305a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f926 	bl	8002a04 <I2C_ITSlaveSeqCplt>
 80027b8:	e01c      	b.n	80027f4 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2210      	movs	r2, #16
 80027c0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80027c2:	e08f      	b.n	80028e4 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2210      	movs	r2, #16
 80027ca:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d0:	f043 0204 	orr.w	r2, r3, #4
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <I2C_Slave_ISR_IT+0xdc>
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027e4:	d17e      	bne.n	80028e4 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ea:	4619      	mov	r1, r3
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fb1d 	bl	8002e2c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80027f2:	e077      	b.n	80028e4 <I2C_Slave_ISR_IT+0x1da>
 80027f4:	e076      	b.n	80028e4 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d02f      	beq.n	8002860 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002806:	2b00      	cmp	r3, #0
 8002808:	d02a      	beq.n	8002860 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d018      	beq.n	8002846 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284a:	b29b      	uxth	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d14b      	bne.n	80028e8 <I2C_Slave_ISR_IT+0x1de>
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002856:	d047      	beq.n	80028e8 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 f8d3 	bl	8002a04 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800285e:	e043      	b.n	80028e8 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d009      	beq.n	800287e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002870:	2b00      	cmp	r3, #0
 8002872:	d004      	beq.n	800287e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002874:	6939      	ldr	r1, [r7, #16]
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f840 	bl	80028fc <I2C_ITAddrCplt>
 800287c:	e035      	b.n	80028ea <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d030      	beq.n	80028ea <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800288e:	2b00      	cmp	r3, #0
 8002890:	d02b      	beq.n	80028ea <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002896:	b29b      	uxth	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d018      	beq.n	80028ce <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a0:	781a      	ldrb	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	851a      	strh	r2, [r3, #40]	@ 0x28
 80028cc:	e00d      	b.n	80028ea <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028d4:	d002      	beq.n	80028dc <I2C_Slave_ISR_IT+0x1d2>
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d106      	bne.n	80028ea <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f891 	bl	8002a04 <I2C_ITSlaveSeqCplt>
 80028e2:	e002      	b.n	80028ea <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80028e4:	bf00      	nop
 80028e6:	e000      	b.n	80028ea <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80028e8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800290c:	b2db      	uxtb	r3, r3
 800290e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002912:	2b28      	cmp	r3, #40	@ 0x28
 8002914:	d16a      	bne.n	80029ec <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	0c1b      	lsrs	r3, r3, #16
 800291e:	b2db      	uxtb	r3, r3
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	0c1b      	lsrs	r3, r3, #16
 800292e:	b29b      	uxth	r3, r3
 8002930:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002934:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	b29b      	uxth	r3, r3
 800293e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002942:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	b29b      	uxth	r3, r3
 800294c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002950:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d138      	bne.n	80029cc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800295a:	897b      	ldrh	r3, [r7, #10]
 800295c:	09db      	lsrs	r3, r3, #7
 800295e:	b29a      	uxth	r2, r3
 8002960:	89bb      	ldrh	r3, [r7, #12]
 8002962:	4053      	eors	r3, r2
 8002964:	b29b      	uxth	r3, r3
 8002966:	f003 0306 	and.w	r3, r3, #6
 800296a:	2b00      	cmp	r3, #0
 800296c:	d11c      	bne.n	80029a8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800296e:	897b      	ldrh	r3, [r7, #10]
 8002970:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002980:	2b02      	cmp	r3, #2
 8002982:	d13b      	bne.n	80029fc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2208      	movs	r2, #8
 8002990:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800299a:	89ba      	ldrh	r2, [r7, #12]
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	4619      	mov	r1, r3
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff fe86 	bl	80026b2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80029a6:	e029      	b.n	80029fc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80029a8:	893b      	ldrh	r3, [r7, #8]
 80029aa:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80029ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 fd89 	bl	80034c8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029be:	89ba      	ldrh	r2, [r7, #12]
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	4619      	mov	r1, r3
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff fe74 	bl	80026b2 <HAL_I2C_AddrCallback>
}
 80029ca:	e017      	b.n	80029fc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80029cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 fd79 	bl	80034c8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029de:	89ba      	ldrh	r2, [r7, #12]
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	4619      	mov	r1, r3
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff fe64 	bl	80026b2 <HAL_I2C_AddrCallback>
}
 80029ea:	e007      	b.n	80029fc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2208      	movs	r2, #8
 80029f2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80029fc:	bf00      	nop
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d008      	beq.n	8002a38 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	e00c      	b.n	8002a52 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d007      	beq.n	8002a52 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a50:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b29      	cmp	r3, #41	@ 0x29
 8002a5c:	d112      	bne.n	8002a84 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2228      	movs	r2, #40	@ 0x28
 8002a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2221      	movs	r2, #33	@ 0x21
 8002a6a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 fd2a 	bl	80034c8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff fe04 	bl	800268a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002a82:	e017      	b.n	8002ab4 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a8e:	d111      	bne.n	8002ab4 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2228      	movs	r2, #40	@ 0x28
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2222      	movs	r2, #34	@ 0x22
 8002a9c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002a9e:	2102      	movs	r1, #2
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fd11 	bl	80034c8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff fdf5 	bl	800269e <HAL_I2C_SlaveRxCpltCallback>
}
 8002ab4:	bf00      	nop
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ade:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ae8:	7afb      	ldrb	r3, [r7, #11]
 8002aea:	2b21      	cmp	r3, #33	@ 0x21
 8002aec:	d002      	beq.n	8002af4 <I2C_ITSlaveCplt+0x38>
 8002aee:	7afb      	ldrb	r3, [r7, #11]
 8002af0:	2b29      	cmp	r3, #41	@ 0x29
 8002af2:	d108      	bne.n	8002b06 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002af4:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fce5 	bl	80034c8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2221      	movs	r2, #33	@ 0x21
 8002b02:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b04:	e019      	b.n	8002b3a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b06:	7afb      	ldrb	r3, [r7, #11]
 8002b08:	2b22      	cmp	r3, #34	@ 0x22
 8002b0a:	d002      	beq.n	8002b12 <I2C_ITSlaveCplt+0x56>
 8002b0c:	7afb      	ldrb	r3, [r7, #11]
 8002b0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b10:	d108      	bne.n	8002b24 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002b12:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fcd6 	bl	80034c8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2222      	movs	r2, #34	@ 0x22
 8002b20:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b22:	e00a      	b.n	8002b3a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002b24:	7afb      	ldrb	r3, [r7, #11]
 8002b26:	2b28      	cmp	r3, #40	@ 0x28
 8002b28:	d107      	bne.n	8002b3a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002b2a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fcca 	bl	80034c8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b48:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4b89      	ldr	r3, [pc, #548]	@ (8002d7c <I2C_ITSlaveCplt+0x2c0>)
 8002b56:	400b      	ands	r3, r1
 8002b58:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fa7d 	bl	800305a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d013      	beq.n	8002b92 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b78:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d01f      	beq.n	8002bc2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b90:	e017      	b.n	8002bc2 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d012      	beq.n	8002bc2 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002baa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d006      	beq.n	8002bc2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d020      	beq.n	8002c0e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f023 0304 	bic.w	r3, r3, #4
 8002bd2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00c      	beq.n	8002c0e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	3b01      	subs	r3, #1
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1c:	f043 0204 	orr.w	r2, r3, #4
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d049      	beq.n	8002cc2 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d044      	beq.n	8002cc2 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d128      	bne.n	8002c94 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b28      	cmp	r3, #40	@ 0x28
 8002c4c:	d108      	bne.n	8002c60 <I2C_ITSlaveCplt+0x1a4>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c54:	d104      	bne.n	8002c60 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002c56:	6979      	ldr	r1, [r7, #20]
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f893 	bl	8002d84 <I2C_ITListenCplt>
 8002c5e:	e030      	b.n	8002cc2 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b29      	cmp	r3, #41	@ 0x29
 8002c6a:	d10e      	bne.n	8002c8a <I2C_ITSlaveCplt+0x1ce>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c72:	d00a      	beq.n	8002c8a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2210      	movs	r2, #16
 8002c7a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f9ec 	bl	800305a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff febe 	bl	8002a04 <I2C_ITSlaveSeqCplt>
 8002c88:	e01b      	b.n	8002cc2 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2210      	movs	r2, #16
 8002c90:	61da      	str	r2, [r3, #28]
 8002c92:	e016      	b.n	8002cc2 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2210      	movs	r2, #16
 8002c9a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca0:	f043 0204 	orr.w	r2, r3, #4
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <I2C_ITSlaveCplt+0x1fa>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cb4:	d105      	bne.n	8002cc2 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cba:	4619      	mov	r1, r3
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f8b5 	bl	8002e2c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d010      	beq.n	8002cfa <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cdc:	4619      	mov	r1, r3
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f8a4 	bl	8002e2c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b28      	cmp	r3, #40	@ 0x28
 8002cee:	d141      	bne.n	8002d74 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002cf0:	6979      	ldr	r1, [r7, #20]
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f846 	bl	8002d84 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002cf8:	e03c      	b.n	8002d74 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d02:	d014      	beq.n	8002d2e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff fe7d 	bl	8002a04 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a1c      	ldr	r2, [pc, #112]	@ (8002d80 <I2C_ITSlaveCplt+0x2c4>)
 8002d0e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff fcd1 	bl	80026ce <HAL_I2C_ListenCpltCallback>
}
 8002d2c:	e022      	b.n	8002d74 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b22      	cmp	r3, #34	@ 0x22
 8002d38:	d10e      	bne.n	8002d58 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff fca4 	bl	800269e <HAL_I2C_SlaveRxCpltCallback>
}
 8002d56:	e00d      	b.n	8002d74 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff fc8b 	bl	800268a <HAL_I2C_SlaveTxCpltCallback>
}
 8002d74:	bf00      	nop
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	fe00e800 	.word	0xfe00e800
 8002d80:	ffff0000 	.word	0xffff0000

08002d84 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a25      	ldr	r2, [pc, #148]	@ (8002e28 <I2C_ITListenCplt+0xa4>)
 8002d92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d022      	beq.n	8002e00 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d012      	beq.n	8002e00 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df8:	f043 0204 	orr.w	r2, r3, #4
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e00:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 fb5f 	bl	80034c8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2210      	movs	r2, #16
 8002e10:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff fc57 	bl	80026ce <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002e20:	bf00      	nop
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	ffff0000 	.word	0xffff0000

08002e2c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e3c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a6d      	ldr	r2, [pc, #436]	@ (8003000 <I2C_ITError+0x1d4>)
 8002e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	2b28      	cmp	r3, #40	@ 0x28
 8002e62:	d005      	beq.n	8002e70 <I2C_ITError+0x44>
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b29      	cmp	r3, #41	@ 0x29
 8002e68:	d002      	beq.n	8002e70 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e6e:	d10b      	bne.n	8002e88 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e70:	2103      	movs	r1, #3
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fb28 	bl	80034c8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2228      	movs	r2, #40	@ 0x28
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a60      	ldr	r2, [pc, #384]	@ (8003004 <I2C_ITError+0x1d8>)
 8002e84:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e86:	e030      	b.n	8002eea <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e88:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 fb1b 	bl	80034c8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f8e1 	bl	800305a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b60      	cmp	r3, #96	@ 0x60
 8002ea2:	d01f      	beq.n	8002ee4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	d114      	bne.n	8002ee4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f003 0310 	and.w	r3, r3, #16
 8002ec4:	2b10      	cmp	r3, #16
 8002ec6:	d109      	bne.n	8002edc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2210      	movs	r2, #16
 8002ece:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed4:	f043 0204 	orr.w	r2, r3, #4
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eee:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d039      	beq.n	8002f6c <I2C_ITError+0x140>
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b11      	cmp	r3, #17
 8002efc:	d002      	beq.n	8002f04 <I2C_ITError+0xd8>
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2b21      	cmp	r3, #33	@ 0x21
 8002f02:	d133      	bne.n	8002f6c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f12:	d107      	bne.n	8002f24 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f22:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fe ff0f 	bl	8001d4c <HAL_DMA_GetState>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d017      	beq.n	8002f64 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f38:	4a33      	ldr	r2, [pc, #204]	@ (8003008 <I2C_ITError+0x1dc>)
 8002f3a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fe fd53 	bl	80019f4 <HAL_DMA_Abort_IT>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d04d      	beq.n	8002ff0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f5e:	4610      	mov	r0, r2
 8002f60:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f62:	e045      	b.n	8002ff0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f851 	bl	800300c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f6a:	e041      	b.n	8002ff0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d039      	beq.n	8002fe8 <I2C_ITError+0x1bc>
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b12      	cmp	r3, #18
 8002f78:	d002      	beq.n	8002f80 <I2C_ITError+0x154>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b22      	cmp	r3, #34	@ 0x22
 8002f7e:	d133      	bne.n	8002fe8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f8e:	d107      	bne.n	8002fa0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f9e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fe fed1 	bl	8001d4c <HAL_DMA_GetState>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d017      	beq.n	8002fe0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb4:	4a14      	ldr	r2, [pc, #80]	@ (8003008 <I2C_ITError+0x1dc>)
 8002fb6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fe fd15 	bl	80019f4 <HAL_DMA_Abort_IT>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d011      	beq.n	8002ff4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fda:	4610      	mov	r0, r2
 8002fdc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fde:	e009      	b.n	8002ff4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f813 	bl	800300c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fe6:	e005      	b.n	8002ff4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f80f 	bl	800300c <I2C_TreatErrorCallback>
  }
}
 8002fee:	e002      	b.n	8002ff6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ff0:	bf00      	nop
 8002ff2:	e000      	b.n	8002ff6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ff4:	bf00      	nop
}
 8002ff6:	bf00      	nop
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	ffff0000 	.word	0xffff0000
 8003004:	0800270b 	.word	0x0800270b
 8003008:	080030a3 	.word	0x080030a3

0800300c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b60      	cmp	r3, #96	@ 0x60
 800301e:	d10e      	bne.n	800303e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff fb5d 	bl	80026f6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800303c:	e009      	b.n	8003052 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff fb48 	bl	80026e2 <HAL_I2C_ErrorCallback>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b02      	cmp	r3, #2
 800306e:	d103      	bne.n	8003078 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2200      	movs	r2, #0
 8003076:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b01      	cmp	r3, #1
 8003084:	d007      	beq.n	8003096 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699a      	ldr	r2, [r3, #24]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 0201 	orr.w	r2, r2, #1
 8003094:	619a      	str	r2, [r3, #24]
  }
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030bc:	2200      	movs	r2, #0
 80030be:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030cc:	2200      	movs	r2, #0
 80030ce:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f7ff ff9b 	bl	800300c <I2C_TreatErrorCallback>
}
 80030d6:	bf00      	nop
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	4613      	mov	r3, r2
 80030ec:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030ee:	e03b      	b.n	8003168 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	6839      	ldr	r1, [r7, #0]
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f8d5 	bl	80032a4 <I2C_IsErrorOccurred>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e041      	b.n	8003188 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310a:	d02d      	beq.n	8003168 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310c:	f7fd ff1e 	bl	8000f4c <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d302      	bcc.n	8003122 <I2C_WaitOnFlagUntilTimeout+0x44>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d122      	bne.n	8003168 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	699a      	ldr	r2, [r3, #24]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	4013      	ands	r3, r2
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	429a      	cmp	r2, r3
 8003130:	bf0c      	ite	eq
 8003132:	2301      	moveq	r3, #1
 8003134:	2300      	movne	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	461a      	mov	r2, r3
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	429a      	cmp	r2, r3
 800313e:	d113      	bne.n	8003168 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003144:	f043 0220 	orr.w	r2, r3, #32
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e00f      	b.n	8003188 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699a      	ldr	r2, [r3, #24]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	4013      	ands	r3, r2
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	429a      	cmp	r2, r3
 8003176:	bf0c      	ite	eq
 8003178:	2301      	moveq	r3, #1
 800317a:	2300      	movne	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	461a      	mov	r2, r3
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	429a      	cmp	r2, r3
 8003184:	d0b4      	beq.n	80030f0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800319c:	e033      	b.n	8003206 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f87e 	bl	80032a4 <I2C_IsErrorOccurred>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e031      	b.n	8003216 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d025      	beq.n	8003206 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ba:	f7fd fec7 	bl	8000f4c <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d302      	bcc.n	80031d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d11a      	bne.n	8003206 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d013      	beq.n	8003206 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e2:	f043 0220 	orr.w	r2, r3, #32
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e007      	b.n	8003216 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b02      	cmp	r3, #2
 8003212:	d1c4      	bne.n	800319e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b084      	sub	sp, #16
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800322a:	e02f      	b.n	800328c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	68b9      	ldr	r1, [r7, #8]
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 f837 	bl	80032a4 <I2C_IsErrorOccurred>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e02d      	b.n	800329c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003240:	f7fd fe84 	bl	8000f4c <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	429a      	cmp	r2, r3
 800324e:	d302      	bcc.n	8003256 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d11a      	bne.n	800328c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	2b20      	cmp	r3, #32
 8003262:	d013      	beq.n	800328c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003268:	f043 0220 	orr.w	r2, r3, #32
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e007      	b.n	800329c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	f003 0320 	and.w	r3, r3, #32
 8003296:	2b20      	cmp	r3, #32
 8003298:	d1c8      	bne.n	800322c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08a      	sub	sp, #40	@ 0x28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80032be:	2300      	movs	r3, #0
 80032c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	f003 0310 	and.w	r3, r3, #16
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d068      	beq.n	80033a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2210      	movs	r2, #16
 80032d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032d8:	e049      	b.n	800336e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e0:	d045      	beq.n	800336e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032e2:	f7fd fe33 	bl	8000f4c <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d302      	bcc.n	80032f8 <I2C_IsErrorOccurred+0x54>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d13a      	bne.n	800336e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003302:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800330a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003316:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800331a:	d121      	bne.n	8003360 <I2C_IsErrorOccurred+0xbc>
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003322:	d01d      	beq.n	8003360 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003324:	7cfb      	ldrb	r3, [r7, #19]
 8003326:	2b20      	cmp	r3, #32
 8003328:	d01a      	beq.n	8003360 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003338:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800333a:	f7fd fe07 	bl	8000f4c <HAL_GetTick>
 800333e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003340:	e00e      	b.n	8003360 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003342:	f7fd fe03 	bl	8000f4c <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b19      	cmp	r3, #25
 800334e:	d907      	bls.n	8003360 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	f043 0320 	orr.w	r3, r3, #32
 8003356:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800335e:	e006      	b.n	800336e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b20      	cmp	r3, #32
 800336c:	d1e9      	bne.n	8003342 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b20      	cmp	r3, #32
 800337a:	d003      	beq.n	8003384 <I2C_IsErrorOccurred+0xe0>
 800337c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0aa      	beq.n	80032da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003384:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003388:	2b00      	cmp	r3, #0
 800338a:	d103      	bne.n	8003394 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2220      	movs	r2, #32
 8003392:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	f043 0304 	orr.w	r3, r3, #4
 800339a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00b      	beq.n	80033cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	f043 0301 	orr.w	r3, r3, #1
 80033ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00b      	beq.n	80033ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	f043 0308 	orr.w	r3, r3, #8
 80033dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00b      	beq.n	8003410 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	f043 0302 	orr.w	r3, r3, #2
 80033fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003408:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003410:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003414:	2b00      	cmp	r3, #0
 8003416:	d01c      	beq.n	8003452 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f7ff fe1e 	bl	800305a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4b0d      	ldr	r3, [pc, #52]	@ (8003460 <I2C_IsErrorOccurred+0x1bc>)
 800342a:	400b      	ands	r3, r1
 800342c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	431a      	orrs	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003452:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003456:	4618      	mov	r0, r3
 8003458:	3728      	adds	r7, #40	@ 0x28
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	fe00e800 	.word	0xfe00e800

08003464 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	607b      	str	r3, [r7, #4]
 800346e:	460b      	mov	r3, r1
 8003470:	817b      	strh	r3, [r7, #10]
 8003472:	4613      	mov	r3, r2
 8003474:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003476:	897b      	ldrh	r3, [r7, #10]
 8003478:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800347c:	7a7b      	ldrb	r3, [r7, #9]
 800347e:	041b      	lsls	r3, r3, #16
 8003480:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003484:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	4313      	orrs	r3, r2
 800348e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003492:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	0d5b      	lsrs	r3, r3, #21
 800349e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80034a2:	4b08      	ldr	r3, [pc, #32]	@ (80034c4 <I2C_TransferConfig+0x60>)
 80034a4:	430b      	orrs	r3, r1
 80034a6:	43db      	mvns	r3, r3
 80034a8:	ea02 0103 	and.w	r1, r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80034b6:	bf00      	nop
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	03ff63ff 	.word	0x03ff63ff

080034c8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80034d8:	887b      	ldrh	r3, [r7, #2]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00f      	beq.n	8003502 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80034e8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80034f6:	2b28      	cmp	r3, #40	@ 0x28
 80034f8:	d003      	beq.n	8003502 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003500:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003502:	887b      	ldrh	r3, [r7, #2]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00f      	beq.n	800352c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003512:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003520:	2b28      	cmp	r3, #40	@ 0x28
 8003522:	d003      	beq.n	800352c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800352a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800352c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003530:	2b00      	cmp	r3, #0
 8003532:	da03      	bge.n	800353c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800353a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800353c:	887b      	ldrh	r3, [r7, #2]
 800353e:	2b10      	cmp	r3, #16
 8003540:	d103      	bne.n	800354a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003548:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800354a:	887b      	ldrh	r3, [r7, #2]
 800354c:	2b20      	cmp	r3, #32
 800354e:	d103      	bne.n	8003558 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f043 0320 	orr.w	r3, r3, #32
 8003556:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003558:	887b      	ldrh	r3, [r7, #2]
 800355a:	2b40      	cmp	r3, #64	@ 0x40
 800355c:	d103      	bne.n	8003566 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003564:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6819      	ldr	r1, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	43da      	mvns	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	400a      	ands	r2, r1
 8003576:	601a      	str	r2, [r3, #0]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b20      	cmp	r3, #32
 8003598:	d138      	bne.n	800360c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e032      	b.n	800360e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2224      	movs	r2, #36	@ 0x24
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6819      	ldr	r1, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	e000      	b.n	800360e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800360c:	2302      	movs	r3, #2
  }
}
 800360e:	4618      	mov	r0, r3
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800361a:	b480      	push	{r7}
 800361c:	b085      	sub	sp, #20
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b20      	cmp	r3, #32
 800362e:	d139      	bne.n	80036a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800363a:	2302      	movs	r3, #2
 800363c:	e033      	b.n	80036a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2224      	movs	r2, #36	@ 0x24
 800364a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0201 	bic.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800366c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	021b      	lsls	r3, r3, #8
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0201 	orr.w	r2, r2, #1
 800368e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	e000      	b.n	80036a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036a4:	2302      	movs	r3, #2
  }
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80036bc:	2300      	movs	r3, #0
 80036be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e291      	b.n	8003bee <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 8087 	beq.w	80037e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036d8:	4b96      	ldr	r3, [pc, #600]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 030c 	and.w	r3, r3, #12
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d00c      	beq.n	80036fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036e4:	4b93      	ldr	r3, [pc, #588]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 030c 	and.w	r3, r3, #12
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d112      	bne.n	8003716 <HAL_RCC_OscConfig+0x62>
 80036f0:	4b90      	ldr	r3, [pc, #576]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036fc:	d10b      	bne.n	8003716 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036fe:	4b8d      	ldr	r3, [pc, #564]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d06c      	beq.n	80037e4 <HAL_RCC_OscConfig+0x130>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d168      	bne.n	80037e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e26b      	b.n	8003bee <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800371e:	d106      	bne.n	800372e <HAL_RCC_OscConfig+0x7a>
 8003720:	4b84      	ldr	r3, [pc, #528]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a83      	ldr	r2, [pc, #524]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 8003726:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	e02e      	b.n	800378c <HAL_RCC_OscConfig+0xd8>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10c      	bne.n	8003750 <HAL_RCC_OscConfig+0x9c>
 8003736:	4b7f      	ldr	r3, [pc, #508]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a7e      	ldr	r2, [pc, #504]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 800373c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	4b7c      	ldr	r3, [pc, #496]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a7b      	ldr	r2, [pc, #492]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 8003748:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	e01d      	b.n	800378c <HAL_RCC_OscConfig+0xd8>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003758:	d10c      	bne.n	8003774 <HAL_RCC_OscConfig+0xc0>
 800375a:	4b76      	ldr	r3, [pc, #472]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a75      	ldr	r2, [pc, #468]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 8003760:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	4b73      	ldr	r3, [pc, #460]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a72      	ldr	r2, [pc, #456]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 800376c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	e00b      	b.n	800378c <HAL_RCC_OscConfig+0xd8>
 8003774:	4b6f      	ldr	r3, [pc, #444]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a6e      	ldr	r2, [pc, #440]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 800377a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	4b6c      	ldr	r3, [pc, #432]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a6b      	ldr	r2, [pc, #428]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 8003786:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800378a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d013      	beq.n	80037bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003794:	f7fd fbda 	bl	8000f4c <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800379c:	f7fd fbd6 	bl	8000f4c <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b64      	cmp	r3, #100	@ 0x64
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e21f      	b.n	8003bee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ae:	4b61      	ldr	r3, [pc, #388]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0xe8>
 80037ba:	e014      	b.n	80037e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037bc:	f7fd fbc6 	bl	8000f4c <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c4:	f7fd fbc2 	bl	8000f4c <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b64      	cmp	r3, #100	@ 0x64
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e20b      	b.n	8003bee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037d6:	4b57      	ldr	r3, [pc, #348]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f0      	bne.n	80037c4 <HAL_RCC_OscConfig+0x110>
 80037e2:	e000      	b.n	80037e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d069      	beq.n	80038c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037f2:	4b50      	ldr	r3, [pc, #320]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00b      	beq.n	8003816 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037fe:	4b4d      	ldr	r3, [pc, #308]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 030c 	and.w	r3, r3, #12
 8003806:	2b08      	cmp	r3, #8
 8003808:	d11c      	bne.n	8003844 <HAL_RCC_OscConfig+0x190>
 800380a:	4b4a      	ldr	r3, [pc, #296]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d116      	bne.n	8003844 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003816:	4b47      	ldr	r3, [pc, #284]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d005      	beq.n	800382e <HAL_RCC_OscConfig+0x17a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d001      	beq.n	800382e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e1df      	b.n	8003bee <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382e:	4b41      	ldr	r3, [pc, #260]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	493d      	ldr	r1, [pc, #244]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 800383e:	4313      	orrs	r3, r2
 8003840:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003842:	e040      	b.n	80038c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d023      	beq.n	8003894 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800384c:	4b39      	ldr	r3, [pc, #228]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a38      	ldr	r2, [pc, #224]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003858:	f7fd fb78 	bl	8000f4c <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003860:	f7fd fb74 	bl	8000f4c <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e1bd      	b.n	8003bee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003872:	4b30      	ldr	r3, [pc, #192]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387e:	4b2d      	ldr	r3, [pc, #180]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4929      	ldr	r1, [pc, #164]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]
 8003892:	e018      	b.n	80038c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003894:	4b27      	ldr	r3, [pc, #156]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a26      	ldr	r2, [pc, #152]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 800389a:	f023 0301 	bic.w	r3, r3, #1
 800389e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7fd fb54 	bl	8000f4c <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a8:	f7fd fb50 	bl	8000f4c <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e199      	b.n	8003bee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f0      	bne.n	80038a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d038      	beq.n	8003944 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d019      	beq.n	800390e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038da:	4b16      	ldr	r3, [pc, #88]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 80038dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038de:	4a15      	ldr	r2, [pc, #84]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e6:	f7fd fb31 	bl	8000f4c <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ee:	f7fd fb2d 	bl	8000f4c <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e176      	b.n	8003bee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003900:	4b0c      	ldr	r3, [pc, #48]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 8003902:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f0      	beq.n	80038ee <HAL_RCC_OscConfig+0x23a>
 800390c:	e01a      	b.n	8003944 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800390e:	4b09      	ldr	r3, [pc, #36]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 8003910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003912:	4a08      	ldr	r2, [pc, #32]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 8003914:	f023 0301 	bic.w	r3, r3, #1
 8003918:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391a:	f7fd fb17 	bl	8000f4c <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003920:	e00a      	b.n	8003938 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003922:	f7fd fb13 	bl	8000f4c <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d903      	bls.n	8003938 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e15c      	b.n	8003bee <HAL_RCC_OscConfig+0x53a>
 8003934:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003938:	4b91      	ldr	r3, [pc, #580]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 800393a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1ee      	bne.n	8003922 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 80a4 	beq.w	8003a9a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003952:	4b8b      	ldr	r3, [pc, #556]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10d      	bne.n	800397a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800395e:	4b88      	ldr	r3, [pc, #544]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003962:	4a87      	ldr	r2, [pc, #540]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003968:	6413      	str	r3, [r2, #64]	@ 0x40
 800396a:	4b85      	ldr	r3, [pc, #532]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003972:	60bb      	str	r3, [r7, #8]
 8003974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003976:	2301      	movs	r3, #1
 8003978:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800397a:	4b82      	ldr	r3, [pc, #520]	@ (8003b84 <HAL_RCC_OscConfig+0x4d0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003982:	2b00      	cmp	r3, #0
 8003984:	d118      	bne.n	80039b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003986:	4b7f      	ldr	r3, [pc, #508]	@ (8003b84 <HAL_RCC_OscConfig+0x4d0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a7e      	ldr	r2, [pc, #504]	@ (8003b84 <HAL_RCC_OscConfig+0x4d0>)
 800398c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003992:	f7fd fadb 	bl	8000f4c <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800399a:	f7fd fad7 	bl	8000f4c <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b64      	cmp	r3, #100	@ 0x64
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e120      	b.n	8003bee <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ac:	4b75      	ldr	r3, [pc, #468]	@ (8003b84 <HAL_RCC_OscConfig+0x4d0>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0f0      	beq.n	800399a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d106      	bne.n	80039ce <HAL_RCC_OscConfig+0x31a>
 80039c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 80039c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80039cc:	e02d      	b.n	8003a2a <HAL_RCC_OscConfig+0x376>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10c      	bne.n	80039f0 <HAL_RCC_OscConfig+0x33c>
 80039d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 80039d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039da:	4a69      	ldr	r2, [pc, #420]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 80039dc:	f023 0301 	bic.w	r3, r3, #1
 80039e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80039e2:	4b67      	ldr	r3, [pc, #412]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 80039e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e6:	4a66      	ldr	r2, [pc, #408]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 80039e8:	f023 0304 	bic.w	r3, r3, #4
 80039ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80039ee:	e01c      	b.n	8003a2a <HAL_RCC_OscConfig+0x376>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b05      	cmp	r3, #5
 80039f6:	d10c      	bne.n	8003a12 <HAL_RCC_OscConfig+0x35e>
 80039f8:	4b61      	ldr	r3, [pc, #388]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 80039fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039fc:	4a60      	ldr	r2, [pc, #384]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 80039fe:	f043 0304 	orr.w	r3, r3, #4
 8003a02:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a04:	4b5e      	ldr	r3, [pc, #376]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a08:	4a5d      	ldr	r2, [pc, #372]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a10:	e00b      	b.n	8003a2a <HAL_RCC_OscConfig+0x376>
 8003a12:	4b5b      	ldr	r3, [pc, #364]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a16:	4a5a      	ldr	r2, [pc, #360]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003a18:	f023 0301 	bic.w	r3, r3, #1
 8003a1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a1e:	4b58      	ldr	r3, [pc, #352]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a22:	4a57      	ldr	r2, [pc, #348]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003a24:	f023 0304 	bic.w	r3, r3, #4
 8003a28:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d015      	beq.n	8003a5e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a32:	f7fd fa8b 	bl	8000f4c <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a38:	e00a      	b.n	8003a50 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a3a:	f7fd fa87 	bl	8000f4c <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e0ce      	b.n	8003bee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a50:	4b4b      	ldr	r3, [pc, #300]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0ee      	beq.n	8003a3a <HAL_RCC_OscConfig+0x386>
 8003a5c:	e014      	b.n	8003a88 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5e:	f7fd fa75 	bl	8000f4c <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a64:	e00a      	b.n	8003a7c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a66:	f7fd fa71 	bl	8000f4c <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e0b8      	b.n	8003bee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a7c:	4b40      	ldr	r3, [pc, #256]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1ee      	bne.n	8003a66 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a88:	7dfb      	ldrb	r3, [r7, #23]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d105      	bne.n	8003a9a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	4a3b      	ldr	r2, [pc, #236]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003a94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a98:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 80a4 	beq.w	8003bec <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003aa4:	4b36      	ldr	r3, [pc, #216]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 030c 	and.w	r3, r3, #12
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d06b      	beq.n	8003b88 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d149      	bne.n	8003b4c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab8:	4b31      	ldr	r3, [pc, #196]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a30      	ldr	r2, [pc, #192]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003abe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7fd fa42 	bl	8000f4c <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003acc:	f7fd fa3e 	bl	8000f4c <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e087      	b.n	8003bee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ade:	4b28      	ldr	r3, [pc, #160]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69da      	ldr	r2, [r3, #28]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af8:	019b      	lsls	r3, r3, #6
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b00:	085b      	lsrs	r3, r3, #1
 8003b02:	3b01      	subs	r3, #1
 8003b04:	041b      	lsls	r3, r3, #16
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0c:	061b      	lsls	r3, r3, #24
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	4a1b      	ldr	r2, [pc, #108]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003b12:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003b16:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b18:	4b19      	ldr	r3, [pc, #100]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a18      	ldr	r2, [pc, #96]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003b1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fd fa12 	bl	8000f4c <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2c:	f7fd fa0e 	bl	8000f4c <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e057      	b.n	8003bee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3e:	4b10      	ldr	r3, [pc, #64]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0x478>
 8003b4a:	e04f      	b.n	8003bec <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0b      	ldr	r2, [pc, #44]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003b52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fd f9f8 	bl	8000f4c <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b60:	f7fd f9f4 	bl	8000f4c <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e03d      	b.n	8003bee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b72:	4b03      	ldr	r3, [pc, #12]	@ (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x4ac>
 8003b7e:	e035      	b.n	8003bec <HAL_RCC_OscConfig+0x538>
 8003b80:	40023800 	.word	0x40023800
 8003b84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003b88:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf8 <HAL_RCC_OscConfig+0x544>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d028      	beq.n	8003be8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d121      	bne.n	8003be8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d11a      	bne.n	8003be8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003bb8:	4013      	ands	r3, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bbe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d111      	bne.n	8003be8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bce:	085b      	lsrs	r3, r3, #1
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d107      	bne.n	8003be8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d001      	beq.n	8003bec <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40023800 	.word	0x40023800

08003bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e0d0      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c14:	4b6a      	ldr	r3, [pc, #424]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 030f 	and.w	r3, r3, #15
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d910      	bls.n	8003c44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c22:	4b67      	ldr	r3, [pc, #412]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f023 020f 	bic.w	r2, r3, #15
 8003c2a:	4965      	ldr	r1, [pc, #404]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c32:	4b63      	ldr	r3, [pc, #396]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e0b8      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d020      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c5c:	4b59      	ldr	r3, [pc, #356]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	4a58      	ldr	r2, [pc, #352]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c74:	4b53      	ldr	r3, [pc, #332]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	4a52      	ldr	r2, [pc, #328]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c7e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c80:	4b50      	ldr	r3, [pc, #320]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	494d      	ldr	r1, [pc, #308]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d040      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d107      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca6:	4b47      	ldr	r3, [pc, #284]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d115      	bne.n	8003cde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e07f      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d107      	bne.n	8003cce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cbe:	4b41      	ldr	r3, [pc, #260]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d109      	bne.n	8003cde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e073      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cce:	4b3d      	ldr	r3, [pc, #244]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e06b      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cde:	4b39      	ldr	r3, [pc, #228]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f023 0203 	bic.w	r2, r3, #3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	4936      	ldr	r1, [pc, #216]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf0:	f7fd f92c 	bl	8000f4c <HAL_GetTick>
 8003cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf6:	e00a      	b.n	8003d0e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf8:	f7fd f928 	bl	8000f4c <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e053      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0e:	4b2d      	ldr	r3, [pc, #180]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 020c 	and.w	r2, r3, #12
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d1eb      	bne.n	8003cf8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d20:	4b27      	ldr	r3, [pc, #156]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 030f 	and.w	r3, r3, #15
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d210      	bcs.n	8003d50 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2e:	4b24      	ldr	r3, [pc, #144]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 020f 	bic.w	r2, r3, #15
 8003d36:	4922      	ldr	r1, [pc, #136]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3e:	4b20      	ldr	r3, [pc, #128]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e032      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d5c:	4b19      	ldr	r3, [pc, #100]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	4916      	ldr	r1, [pc, #88]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d009      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d7a:	4b12      	ldr	r3, [pc, #72]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	490e      	ldr	r1, [pc, #56]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d8e:	f000 f821 	bl	8003dd4 <HAL_RCC_GetSysClockFreq>
 8003d92:	4602      	mov	r2, r0
 8003d94:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	091b      	lsrs	r3, r3, #4
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	490a      	ldr	r1, [pc, #40]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1cc>)
 8003da0:	5ccb      	ldrb	r3, [r1, r3]
 8003da2:	fa22 f303 	lsr.w	r3, r2, r3
 8003da6:	4a09      	ldr	r2, [pc, #36]	@ (8003dcc <HAL_RCC_ClockConfig+0x1d0>)
 8003da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003daa:	4b09      	ldr	r3, [pc, #36]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1d4>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fd f888 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40023c00 	.word	0x40023c00
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	08004fc4 	.word	0x08004fc4
 8003dcc:	20000000 	.word	0x20000000
 8003dd0:	20000004 	.word	0x20000004

08003dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dd8:	b090      	sub	sp, #64	@ 0x40
 8003dda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8003de0:	2300      	movs	r3, #0
 8003de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003de4:	2300      	movs	r3, #0
 8003de6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dec:	4b59      	ldr	r3, [pc, #356]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 030c 	and.w	r3, r3, #12
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d00d      	beq.n	8003e14 <HAL_RCC_GetSysClockFreq+0x40>
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	f200 80a1 	bhi.w	8003f40 <HAL_RCC_GetSysClockFreq+0x16c>
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0x34>
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d003      	beq.n	8003e0e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e06:	e09b      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e08:	4b53      	ldr	r3, [pc, #332]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e0c:	e09b      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e0e:	4b53      	ldr	r3, [pc, #332]	@ (8003f5c <HAL_RCC_GetSysClockFreq+0x188>)
 8003e10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e12:	e098      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e14:	4b4f      	ldr	r3, [pc, #316]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e1c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e1e:	4b4d      	ldr	r3, [pc, #308]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d028      	beq.n	8003e7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e2a:	4b4a      	ldr	r3, [pc, #296]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	099b      	lsrs	r3, r3, #6
 8003e30:	2200      	movs	r2, #0
 8003e32:	623b      	str	r3, [r7, #32]
 8003e34:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	4b47      	ldr	r3, [pc, #284]	@ (8003f5c <HAL_RCC_GetSysClockFreq+0x188>)
 8003e40:	fb03 f201 	mul.w	r2, r3, r1
 8003e44:	2300      	movs	r3, #0
 8003e46:	fb00 f303 	mul.w	r3, r0, r3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	4a43      	ldr	r2, [pc, #268]	@ (8003f5c <HAL_RCC_GetSysClockFreq+0x188>)
 8003e4e:	fba0 1202 	umull	r1, r2, r0, r2
 8003e52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e54:	460a      	mov	r2, r1
 8003e56:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003e58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e5a:	4413      	add	r3, r2
 8003e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e60:	2200      	movs	r2, #0
 8003e62:	61bb      	str	r3, [r7, #24]
 8003e64:	61fa      	str	r2, [r7, #28]
 8003e66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003e6e:	f7fc f9d7 	bl	8000220 <__aeabi_uldivmod>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4613      	mov	r3, r2
 8003e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e7a:	e053      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e7c:	4b35      	ldr	r3, [pc, #212]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	099b      	lsrs	r3, r3, #6
 8003e82:	2200      	movs	r2, #0
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	617a      	str	r2, [r7, #20]
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e8e:	f04f 0b00 	mov.w	fp, #0
 8003e92:	4652      	mov	r2, sl
 8003e94:	465b      	mov	r3, fp
 8003e96:	f04f 0000 	mov.w	r0, #0
 8003e9a:	f04f 0100 	mov.w	r1, #0
 8003e9e:	0159      	lsls	r1, r3, #5
 8003ea0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ea4:	0150      	lsls	r0, r2, #5
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	ebb2 080a 	subs.w	r8, r2, sl
 8003eae:	eb63 090b 	sbc.w	r9, r3, fp
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ebe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ec2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ec6:	ebb2 0408 	subs.w	r4, r2, r8
 8003eca:	eb63 0509 	sbc.w	r5, r3, r9
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	00eb      	lsls	r3, r5, #3
 8003ed8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003edc:	00e2      	lsls	r2, r4, #3
 8003ede:	4614      	mov	r4, r2
 8003ee0:	461d      	mov	r5, r3
 8003ee2:	eb14 030a 	adds.w	r3, r4, sl
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	eb45 030b 	adc.w	r3, r5, fp
 8003eec:	607b      	str	r3, [r7, #4]
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	f04f 0300 	mov.w	r3, #0
 8003ef6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003efa:	4629      	mov	r1, r5
 8003efc:	028b      	lsls	r3, r1, #10
 8003efe:	4621      	mov	r1, r4
 8003f00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f04:	4621      	mov	r1, r4
 8003f06:	028a      	lsls	r2, r1, #10
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f0e:	2200      	movs	r2, #0
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	60fa      	str	r2, [r7, #12]
 8003f14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f18:	f7fc f982 	bl	8000220 <__aeabi_uldivmod>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4613      	mov	r3, r2
 8003f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003f24:	4b0b      	ldr	r3, [pc, #44]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	0c1b      	lsrs	r3, r3, #16
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	3301      	adds	r3, #1
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003f34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f3e:	e002      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f40:	4b05      	ldr	r3, [pc, #20]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f42:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3740      	adds	r7, #64	@ 0x40
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f52:	bf00      	nop
 8003f54:	40023800 	.word	0x40023800
 8003f58:	00f42400 	.word	0x00f42400
 8003f5c:	017d7840 	.word	0x017d7840

08003f60 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f64:	4b03      	ldr	r3, [pc, #12]	@ (8003f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f66:	681b      	ldr	r3, [r3, #0]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	20000000 	.word	0x20000000

08003f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f7c:	f7ff fff0 	bl	8003f60 <HAL_RCC_GetHCLKFreq>
 8003f80:	4602      	mov	r2, r0
 8003f82:	4b05      	ldr	r3, [pc, #20]	@ (8003f98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	0a9b      	lsrs	r3, r3, #10
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	4903      	ldr	r1, [pc, #12]	@ (8003f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f8e:	5ccb      	ldrb	r3, [r1, r3]
 8003f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	08004fd4 	.word	0x08004fd4

08003fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fa4:	f7ff ffdc 	bl	8003f60 <HAL_RCC_GetHCLKFreq>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	4b05      	ldr	r3, [pc, #20]	@ (8003fc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	0b5b      	lsrs	r3, r3, #13
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	4903      	ldr	r1, [pc, #12]	@ (8003fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fb6:	5ccb      	ldrb	r3, [r1, r3]
 8003fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	08004fd4 	.word	0x08004fd4

08003fc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d012      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fec:	4b65      	ldr	r3, [pc, #404]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	4a64      	ldr	r2, [pc, #400]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ff2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003ff6:	6093      	str	r3, [r2, #8]
 8003ff8:	4b62      	ldr	r3, [pc, #392]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004000:	4960      	ldr	r1, [pc, #384]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004002:	4313      	orrs	r3, r2
 8004004:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800400e:	2301      	movs	r3, #1
 8004010:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d017      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800401e:	4b59      	ldr	r3, [pc, #356]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004020:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004024:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800402c:	4955      	ldr	r1, [pc, #340]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004038:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800403c:	d101      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800403e:	2301      	movs	r3, #1
 8004040:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800404a:	2301      	movs	r3, #1
 800404c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d017      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800405a:	4b4a      	ldr	r3, [pc, #296]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800405c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004060:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004068:	4946      	ldr	r1, [pc, #280]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004074:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004078:	d101      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800407a:	2301      	movs	r3, #1
 800407c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8004086:	2301      	movs	r3, #1
 8004088:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0320 	and.w	r3, r3, #32
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 808b 	beq.w	80041ae <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004098:	4b3a      	ldr	r3, [pc, #232]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800409a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409c:	4a39      	ldr	r2, [pc, #228]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800409e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80040a4:	4b37      	ldr	r3, [pc, #220]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80040b0:	4b35      	ldr	r3, [pc, #212]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a34      	ldr	r2, [pc, #208]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80040b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040bc:	f7fc ff46 	bl	8000f4c <HAL_GetTick>
 80040c0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c4:	f7fc ff42 	bl	8000f4c <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b64      	cmp	r3, #100	@ 0x64
 80040d0:	d901      	bls.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e2bc      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0f0      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040e2:	4b28      	ldr	r3, [pc, #160]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d035      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d02e      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004100:	4b20      	ldr	r3, [pc, #128]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004104:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004108:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800410a:	4b1e      	ldr	r3, [pc, #120]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800410e:	4a1d      	ldr	r2, [pc, #116]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004114:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004116:	4b1b      	ldr	r3, [pc, #108]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800411a:	4a1a      	ldr	r2, [pc, #104]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800411c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004120:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004122:	4a18      	ldr	r2, [pc, #96]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004128:	4b16      	ldr	r3, [pc, #88]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800412a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b01      	cmp	r3, #1
 8004132:	d114      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7fc ff0a 	bl	8000f4c <HAL_GetTick>
 8004138:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800413a:	e00a      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800413c:	f7fc ff06 	bl	8000f4c <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d901      	bls.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e27e      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004152:	4b0c      	ldr	r3, [pc, #48]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0ee      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004162:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004166:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800416a:	d111      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800416c:	4b05      	ldr	r3, [pc, #20]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004178:	4b04      	ldr	r3, [pc, #16]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800417a:	400b      	ands	r3, r1
 800417c:	4901      	ldr	r1, [pc, #4]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800417e:	4313      	orrs	r3, r2
 8004180:	608b      	str	r3, [r1, #8]
 8004182:	e00b      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004184:	40023800 	.word	0x40023800
 8004188:	40007000 	.word	0x40007000
 800418c:	0ffffcff 	.word	0x0ffffcff
 8004190:	4ba4      	ldr	r3, [pc, #656]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	4aa3      	ldr	r2, [pc, #652]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004196:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800419a:	6093      	str	r3, [r2, #8]
 800419c:	4ba1      	ldr	r3, [pc, #644]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800419e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a8:	499e      	ldr	r1, [pc, #632]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0310 	and.w	r3, r3, #16
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d010      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041ba:	4b9a      	ldr	r3, [pc, #616]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041c0:	4a98      	ldr	r2, [pc, #608]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80041ca:	4b96      	ldr	r3, [pc, #600]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d4:	4993      	ldr	r1, [pc, #588]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041e8:	4b8e      	ldr	r3, [pc, #568]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f6:	498b      	ldr	r1, [pc, #556]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800420a:	4b86      	ldr	r3, [pc, #536]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800420c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004210:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004218:	4982      	ldr	r1, [pc, #520]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800422c:	4b7d      	ldr	r3, [pc, #500]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800422e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004232:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800423a:	497a      	ldr	r1, [pc, #488]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800424e:	4b75      	ldr	r3, [pc, #468]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004254:	f023 0203 	bic.w	r2, r3, #3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800425c:	4971      	ldr	r1, [pc, #452]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004270:	4b6c      	ldr	r3, [pc, #432]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004276:	f023 020c 	bic.w	r2, r3, #12
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427e:	4969      	ldr	r1, [pc, #420]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004292:	4b64      	ldr	r3, [pc, #400]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004298:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a0:	4960      	ldr	r1, [pc, #384]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042b4:	4b5b      	ldr	r3, [pc, #364]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80042b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042c2:	4958      	ldr	r1, [pc, #352]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042d6:	4b53      	ldr	r3, [pc, #332]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80042d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e4:	494f      	ldr	r1, [pc, #316]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00a      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80042f8:	4b4a      	ldr	r3, [pc, #296]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004306:	4947      	ldr	r1, [pc, #284]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004308:	4313      	orrs	r3, r2
 800430a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800431a:	4b42      	ldr	r3, [pc, #264]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800431c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004320:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004328:	493e      	ldr	r1, [pc, #248]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800433c:	4b39      	ldr	r3, [pc, #228]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004342:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434a:	4936      	ldr	r1, [pc, #216]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d011      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800435e:	4b31      	ldr	r3, [pc, #196]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004364:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800436c:	492d      	ldr	r1, [pc, #180]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004378:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800437c:	d101      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800437e:	2301      	movs	r3, #1
 8004380:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800438e:	4b25      	ldr	r3, [pc, #148]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004394:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800439c:	4921      	ldr	r1, [pc, #132]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043be:	4919      	ldr	r1, [pc, #100]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80043d2:	4b14      	ldr	r3, [pc, #80]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80043d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043e0:	4910      	ldr	r1, [pc, #64]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d006      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x434>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 809d 	beq.w	8004536 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043fc:	4b09      	ldr	r3, [pc, #36]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a08      	ldr	r2, [pc, #32]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004402:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004406:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004408:	f7fc fda0 	bl	8000f4c <HAL_GetTick>
 800440c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800440e:	e00b      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004410:	f7fc fd9c 	bl	8000f4c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b64      	cmp	r3, #100	@ 0x64
 800441c:	d904      	bls.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e116      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004422:	bf00      	nop
 8004424:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004428:	4b8b      	ldr	r3, [pc, #556]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1ed      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	d017      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004444:	2b00      	cmp	r3, #0
 8004446:	d113      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004448:	4b83      	ldr	r3, [pc, #524]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800444a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800444e:	0e1b      	lsrs	r3, r3, #24
 8004450:	f003 030f 	and.w	r3, r3, #15
 8004454:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	019a      	lsls	r2, r3, #6
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	061b      	lsls	r3, r3, #24
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	071b      	lsls	r3, r3, #28
 8004468:	497b      	ldr	r1, [pc, #492]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d004      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004480:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004484:	d00a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800448e:	2b00      	cmp	r3, #0
 8004490:	d024      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004496:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800449a:	d11f      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800449c:	4b6e      	ldr	r3, [pc, #440]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800449e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044a2:	0f1b      	lsrs	r3, r3, #28
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	019a      	lsls	r2, r3, #6
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	061b      	lsls	r3, r3, #24
 80044b6:	431a      	orrs	r2, r3
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	071b      	lsls	r3, r3, #28
 80044bc:	4966      	ldr	r1, [pc, #408]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044c4:	4b64      	ldr	r3, [pc, #400]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80044c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044ca:	f023 021f 	bic.w	r2, r3, #31
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	4960      	ldr	r1, [pc, #384]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00d      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	019a      	lsls	r2, r3, #6
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	061b      	lsls	r3, r3, #24
 80044f4:	431a      	orrs	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	071b      	lsls	r3, r3, #28
 80044fc:	4956      	ldr	r1, [pc, #344]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004504:	4b54      	ldr	r3, [pc, #336]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a53      	ldr	r2, [pc, #332]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800450a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800450e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004510:	f7fc fd1c 	bl	8000f4c <HAL_GetTick>
 8004514:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004516:	e008      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004518:	f7fc fd18 	bl	8000f4c <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b64      	cmp	r3, #100	@ 0x64
 8004524:	d901      	bls.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e092      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800452a:	4b4b      	ldr	r3, [pc, #300]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0f0      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	2b01      	cmp	r3, #1
 800453a:	f040 8088 	bne.w	800464e <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800453e:	4b46      	ldr	r3, [pc, #280]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a45      	ldr	r2, [pc, #276]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004544:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004548:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800454a:	f7fc fcff 	bl	8000f4c <HAL_GetTick>
 800454e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004550:	e008      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004552:	f7fc fcfb 	bl	8000f4c <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b64      	cmp	r3, #100	@ 0x64
 800455e:	d901      	bls.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e075      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004564:	4b3c      	ldr	r3, [pc, #240]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800456c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004570:	d0ef      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800458e:	2b00      	cmp	r3, #0
 8004590:	d024      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004596:	2b00      	cmp	r3, #0
 8004598:	d120      	bne.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800459a:	4b2f      	ldr	r3, [pc, #188]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800459c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a0:	0c1b      	lsrs	r3, r3, #16
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	019a      	lsls	r2, r3, #6
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	041b      	lsls	r3, r3, #16
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	061b      	lsls	r3, r3, #24
 80045ba:	4927      	ldr	r1, [pc, #156]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80045c2:	4b25      	ldr	r3, [pc, #148]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80045c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045c8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	021b      	lsls	r3, r3, #8
 80045d4:	4920      	ldr	r1, [pc, #128]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d018      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x652>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045f0:	d113      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045f2:	4b19      	ldr	r3, [pc, #100]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f8:	0e1b      	lsrs	r3, r3, #24
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	019a      	lsls	r2, r3, #6
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	041b      	lsls	r3, r3, #16
 800460c:	431a      	orrs	r2, r3
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	061b      	lsls	r3, r3, #24
 8004612:	4911      	ldr	r1, [pc, #68]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800461a:	4b0f      	ldr	r3, [pc, #60]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a0e      	ldr	r2, [pc, #56]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004626:	f7fc fc91 	bl	8000f4c <HAL_GetTick>
 800462a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800462c:	e008      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800462e:	f7fc fc8d 	bl	8000f4c <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b64      	cmp	r3, #100	@ 0x64
 800463a:	d901      	bls.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e007      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004640:	4b05      	ldr	r3, [pc, #20]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800464c:	d1ef      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3720      	adds	r7, #32
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40023800 	.word	0x40023800

0800465c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e040      	b.n	80046f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004672:	2b00      	cmp	r3, #0
 8004674:	d106      	bne.n	8004684 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7fc fb22 	bl	8000cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2224      	movs	r2, #36	@ 0x24
 8004688:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0201 	bic.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fa8c 	bl	8004bc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f825 	bl	80046f8 <UART_SetConfig>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e01b      	b.n	80046f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 fb0b 	bl	8004d04 <UART_CheckIdleState>
 80046ee:	4603      	mov	r3, r0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	4ba6      	ldr	r3, [pc, #664]	@ (80049bc <UART_SetConfig+0x2c4>)
 8004724:	4013      	ands	r3, r2
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6812      	ldr	r2, [r2, #0]
 800472a:	6979      	ldr	r1, [r7, #20]
 800472c:	430b      	orrs	r3, r1
 800472e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	4313      	orrs	r3, r2
 8004754:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	430a      	orrs	r2, r1
 8004768:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a94      	ldr	r2, [pc, #592]	@ (80049c0 <UART_SetConfig+0x2c8>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d120      	bne.n	80047b6 <UART_SetConfig+0xbe>
 8004774:	4b93      	ldr	r3, [pc, #588]	@ (80049c4 <UART_SetConfig+0x2cc>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	2b03      	cmp	r3, #3
 8004780:	d816      	bhi.n	80047b0 <UART_SetConfig+0xb8>
 8004782:	a201      	add	r2, pc, #4	@ (adr r2, 8004788 <UART_SetConfig+0x90>)
 8004784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004788:	08004799 	.word	0x08004799
 800478c:	080047a5 	.word	0x080047a5
 8004790:	0800479f 	.word	0x0800479f
 8004794:	080047ab 	.word	0x080047ab
 8004798:	2301      	movs	r3, #1
 800479a:	77fb      	strb	r3, [r7, #31]
 800479c:	e150      	b.n	8004a40 <UART_SetConfig+0x348>
 800479e:	2302      	movs	r3, #2
 80047a0:	77fb      	strb	r3, [r7, #31]
 80047a2:	e14d      	b.n	8004a40 <UART_SetConfig+0x348>
 80047a4:	2304      	movs	r3, #4
 80047a6:	77fb      	strb	r3, [r7, #31]
 80047a8:	e14a      	b.n	8004a40 <UART_SetConfig+0x348>
 80047aa:	2308      	movs	r3, #8
 80047ac:	77fb      	strb	r3, [r7, #31]
 80047ae:	e147      	b.n	8004a40 <UART_SetConfig+0x348>
 80047b0:	2310      	movs	r3, #16
 80047b2:	77fb      	strb	r3, [r7, #31]
 80047b4:	e144      	b.n	8004a40 <UART_SetConfig+0x348>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a83      	ldr	r2, [pc, #524]	@ (80049c8 <UART_SetConfig+0x2d0>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d132      	bne.n	8004826 <UART_SetConfig+0x12e>
 80047c0:	4b80      	ldr	r3, [pc, #512]	@ (80049c4 <UART_SetConfig+0x2cc>)
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c6:	f003 030c 	and.w	r3, r3, #12
 80047ca:	2b0c      	cmp	r3, #12
 80047cc:	d828      	bhi.n	8004820 <UART_SetConfig+0x128>
 80047ce:	a201      	add	r2, pc, #4	@ (adr r2, 80047d4 <UART_SetConfig+0xdc>)
 80047d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d4:	08004809 	.word	0x08004809
 80047d8:	08004821 	.word	0x08004821
 80047dc:	08004821 	.word	0x08004821
 80047e0:	08004821 	.word	0x08004821
 80047e4:	08004815 	.word	0x08004815
 80047e8:	08004821 	.word	0x08004821
 80047ec:	08004821 	.word	0x08004821
 80047f0:	08004821 	.word	0x08004821
 80047f4:	0800480f 	.word	0x0800480f
 80047f8:	08004821 	.word	0x08004821
 80047fc:	08004821 	.word	0x08004821
 8004800:	08004821 	.word	0x08004821
 8004804:	0800481b 	.word	0x0800481b
 8004808:	2300      	movs	r3, #0
 800480a:	77fb      	strb	r3, [r7, #31]
 800480c:	e118      	b.n	8004a40 <UART_SetConfig+0x348>
 800480e:	2302      	movs	r3, #2
 8004810:	77fb      	strb	r3, [r7, #31]
 8004812:	e115      	b.n	8004a40 <UART_SetConfig+0x348>
 8004814:	2304      	movs	r3, #4
 8004816:	77fb      	strb	r3, [r7, #31]
 8004818:	e112      	b.n	8004a40 <UART_SetConfig+0x348>
 800481a:	2308      	movs	r3, #8
 800481c:	77fb      	strb	r3, [r7, #31]
 800481e:	e10f      	b.n	8004a40 <UART_SetConfig+0x348>
 8004820:	2310      	movs	r3, #16
 8004822:	77fb      	strb	r3, [r7, #31]
 8004824:	e10c      	b.n	8004a40 <UART_SetConfig+0x348>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a68      	ldr	r2, [pc, #416]	@ (80049cc <UART_SetConfig+0x2d4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d120      	bne.n	8004872 <UART_SetConfig+0x17a>
 8004830:	4b64      	ldr	r3, [pc, #400]	@ (80049c4 <UART_SetConfig+0x2cc>)
 8004832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004836:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800483a:	2b30      	cmp	r3, #48	@ 0x30
 800483c:	d013      	beq.n	8004866 <UART_SetConfig+0x16e>
 800483e:	2b30      	cmp	r3, #48	@ 0x30
 8004840:	d814      	bhi.n	800486c <UART_SetConfig+0x174>
 8004842:	2b20      	cmp	r3, #32
 8004844:	d009      	beq.n	800485a <UART_SetConfig+0x162>
 8004846:	2b20      	cmp	r3, #32
 8004848:	d810      	bhi.n	800486c <UART_SetConfig+0x174>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <UART_SetConfig+0x15c>
 800484e:	2b10      	cmp	r3, #16
 8004850:	d006      	beq.n	8004860 <UART_SetConfig+0x168>
 8004852:	e00b      	b.n	800486c <UART_SetConfig+0x174>
 8004854:	2300      	movs	r3, #0
 8004856:	77fb      	strb	r3, [r7, #31]
 8004858:	e0f2      	b.n	8004a40 <UART_SetConfig+0x348>
 800485a:	2302      	movs	r3, #2
 800485c:	77fb      	strb	r3, [r7, #31]
 800485e:	e0ef      	b.n	8004a40 <UART_SetConfig+0x348>
 8004860:	2304      	movs	r3, #4
 8004862:	77fb      	strb	r3, [r7, #31]
 8004864:	e0ec      	b.n	8004a40 <UART_SetConfig+0x348>
 8004866:	2308      	movs	r3, #8
 8004868:	77fb      	strb	r3, [r7, #31]
 800486a:	e0e9      	b.n	8004a40 <UART_SetConfig+0x348>
 800486c:	2310      	movs	r3, #16
 800486e:	77fb      	strb	r3, [r7, #31]
 8004870:	e0e6      	b.n	8004a40 <UART_SetConfig+0x348>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a56      	ldr	r2, [pc, #344]	@ (80049d0 <UART_SetConfig+0x2d8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d120      	bne.n	80048be <UART_SetConfig+0x1c6>
 800487c:	4b51      	ldr	r3, [pc, #324]	@ (80049c4 <UART_SetConfig+0x2cc>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004882:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004886:	2bc0      	cmp	r3, #192	@ 0xc0
 8004888:	d013      	beq.n	80048b2 <UART_SetConfig+0x1ba>
 800488a:	2bc0      	cmp	r3, #192	@ 0xc0
 800488c:	d814      	bhi.n	80048b8 <UART_SetConfig+0x1c0>
 800488e:	2b80      	cmp	r3, #128	@ 0x80
 8004890:	d009      	beq.n	80048a6 <UART_SetConfig+0x1ae>
 8004892:	2b80      	cmp	r3, #128	@ 0x80
 8004894:	d810      	bhi.n	80048b8 <UART_SetConfig+0x1c0>
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <UART_SetConfig+0x1a8>
 800489a:	2b40      	cmp	r3, #64	@ 0x40
 800489c:	d006      	beq.n	80048ac <UART_SetConfig+0x1b4>
 800489e:	e00b      	b.n	80048b8 <UART_SetConfig+0x1c0>
 80048a0:	2300      	movs	r3, #0
 80048a2:	77fb      	strb	r3, [r7, #31]
 80048a4:	e0cc      	b.n	8004a40 <UART_SetConfig+0x348>
 80048a6:	2302      	movs	r3, #2
 80048a8:	77fb      	strb	r3, [r7, #31]
 80048aa:	e0c9      	b.n	8004a40 <UART_SetConfig+0x348>
 80048ac:	2304      	movs	r3, #4
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e0c6      	b.n	8004a40 <UART_SetConfig+0x348>
 80048b2:	2308      	movs	r3, #8
 80048b4:	77fb      	strb	r3, [r7, #31]
 80048b6:	e0c3      	b.n	8004a40 <UART_SetConfig+0x348>
 80048b8:	2310      	movs	r3, #16
 80048ba:	77fb      	strb	r3, [r7, #31]
 80048bc:	e0c0      	b.n	8004a40 <UART_SetConfig+0x348>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a44      	ldr	r2, [pc, #272]	@ (80049d4 <UART_SetConfig+0x2dc>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d125      	bne.n	8004914 <UART_SetConfig+0x21c>
 80048c8:	4b3e      	ldr	r3, [pc, #248]	@ (80049c4 <UART_SetConfig+0x2cc>)
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048d6:	d017      	beq.n	8004908 <UART_SetConfig+0x210>
 80048d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048dc:	d817      	bhi.n	800490e <UART_SetConfig+0x216>
 80048de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048e2:	d00b      	beq.n	80048fc <UART_SetConfig+0x204>
 80048e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048e8:	d811      	bhi.n	800490e <UART_SetConfig+0x216>
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <UART_SetConfig+0x1fe>
 80048ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048f2:	d006      	beq.n	8004902 <UART_SetConfig+0x20a>
 80048f4:	e00b      	b.n	800490e <UART_SetConfig+0x216>
 80048f6:	2300      	movs	r3, #0
 80048f8:	77fb      	strb	r3, [r7, #31]
 80048fa:	e0a1      	b.n	8004a40 <UART_SetConfig+0x348>
 80048fc:	2302      	movs	r3, #2
 80048fe:	77fb      	strb	r3, [r7, #31]
 8004900:	e09e      	b.n	8004a40 <UART_SetConfig+0x348>
 8004902:	2304      	movs	r3, #4
 8004904:	77fb      	strb	r3, [r7, #31]
 8004906:	e09b      	b.n	8004a40 <UART_SetConfig+0x348>
 8004908:	2308      	movs	r3, #8
 800490a:	77fb      	strb	r3, [r7, #31]
 800490c:	e098      	b.n	8004a40 <UART_SetConfig+0x348>
 800490e:	2310      	movs	r3, #16
 8004910:	77fb      	strb	r3, [r7, #31]
 8004912:	e095      	b.n	8004a40 <UART_SetConfig+0x348>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a2f      	ldr	r2, [pc, #188]	@ (80049d8 <UART_SetConfig+0x2e0>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d125      	bne.n	800496a <UART_SetConfig+0x272>
 800491e:	4b29      	ldr	r3, [pc, #164]	@ (80049c4 <UART_SetConfig+0x2cc>)
 8004920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004924:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004928:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800492c:	d017      	beq.n	800495e <UART_SetConfig+0x266>
 800492e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004932:	d817      	bhi.n	8004964 <UART_SetConfig+0x26c>
 8004934:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004938:	d00b      	beq.n	8004952 <UART_SetConfig+0x25a>
 800493a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800493e:	d811      	bhi.n	8004964 <UART_SetConfig+0x26c>
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <UART_SetConfig+0x254>
 8004944:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004948:	d006      	beq.n	8004958 <UART_SetConfig+0x260>
 800494a:	e00b      	b.n	8004964 <UART_SetConfig+0x26c>
 800494c:	2301      	movs	r3, #1
 800494e:	77fb      	strb	r3, [r7, #31]
 8004950:	e076      	b.n	8004a40 <UART_SetConfig+0x348>
 8004952:	2302      	movs	r3, #2
 8004954:	77fb      	strb	r3, [r7, #31]
 8004956:	e073      	b.n	8004a40 <UART_SetConfig+0x348>
 8004958:	2304      	movs	r3, #4
 800495a:	77fb      	strb	r3, [r7, #31]
 800495c:	e070      	b.n	8004a40 <UART_SetConfig+0x348>
 800495e:	2308      	movs	r3, #8
 8004960:	77fb      	strb	r3, [r7, #31]
 8004962:	e06d      	b.n	8004a40 <UART_SetConfig+0x348>
 8004964:	2310      	movs	r3, #16
 8004966:	77fb      	strb	r3, [r7, #31]
 8004968:	e06a      	b.n	8004a40 <UART_SetConfig+0x348>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a1b      	ldr	r2, [pc, #108]	@ (80049dc <UART_SetConfig+0x2e4>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d138      	bne.n	80049e6 <UART_SetConfig+0x2ee>
 8004974:	4b13      	ldr	r3, [pc, #76]	@ (80049c4 <UART_SetConfig+0x2cc>)
 8004976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800497a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800497e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004982:	d017      	beq.n	80049b4 <UART_SetConfig+0x2bc>
 8004984:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004988:	d82a      	bhi.n	80049e0 <UART_SetConfig+0x2e8>
 800498a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800498e:	d00b      	beq.n	80049a8 <UART_SetConfig+0x2b0>
 8004990:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004994:	d824      	bhi.n	80049e0 <UART_SetConfig+0x2e8>
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <UART_SetConfig+0x2aa>
 800499a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800499e:	d006      	beq.n	80049ae <UART_SetConfig+0x2b6>
 80049a0:	e01e      	b.n	80049e0 <UART_SetConfig+0x2e8>
 80049a2:	2300      	movs	r3, #0
 80049a4:	77fb      	strb	r3, [r7, #31]
 80049a6:	e04b      	b.n	8004a40 <UART_SetConfig+0x348>
 80049a8:	2302      	movs	r3, #2
 80049aa:	77fb      	strb	r3, [r7, #31]
 80049ac:	e048      	b.n	8004a40 <UART_SetConfig+0x348>
 80049ae:	2304      	movs	r3, #4
 80049b0:	77fb      	strb	r3, [r7, #31]
 80049b2:	e045      	b.n	8004a40 <UART_SetConfig+0x348>
 80049b4:	2308      	movs	r3, #8
 80049b6:	77fb      	strb	r3, [r7, #31]
 80049b8:	e042      	b.n	8004a40 <UART_SetConfig+0x348>
 80049ba:	bf00      	nop
 80049bc:	efff69f3 	.word	0xefff69f3
 80049c0:	40011000 	.word	0x40011000
 80049c4:	40023800 	.word	0x40023800
 80049c8:	40004400 	.word	0x40004400
 80049cc:	40004800 	.word	0x40004800
 80049d0:	40004c00 	.word	0x40004c00
 80049d4:	40005000 	.word	0x40005000
 80049d8:	40011400 	.word	0x40011400
 80049dc:	40007800 	.word	0x40007800
 80049e0:	2310      	movs	r3, #16
 80049e2:	77fb      	strb	r3, [r7, #31]
 80049e4:	e02c      	b.n	8004a40 <UART_SetConfig+0x348>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a72      	ldr	r2, [pc, #456]	@ (8004bb4 <UART_SetConfig+0x4bc>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d125      	bne.n	8004a3c <UART_SetConfig+0x344>
 80049f0:	4b71      	ldr	r3, [pc, #452]	@ (8004bb8 <UART_SetConfig+0x4c0>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80049fa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80049fe:	d017      	beq.n	8004a30 <UART_SetConfig+0x338>
 8004a00:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004a04:	d817      	bhi.n	8004a36 <UART_SetConfig+0x33e>
 8004a06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a0a:	d00b      	beq.n	8004a24 <UART_SetConfig+0x32c>
 8004a0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a10:	d811      	bhi.n	8004a36 <UART_SetConfig+0x33e>
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <UART_SetConfig+0x326>
 8004a16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a1a:	d006      	beq.n	8004a2a <UART_SetConfig+0x332>
 8004a1c:	e00b      	b.n	8004a36 <UART_SetConfig+0x33e>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	77fb      	strb	r3, [r7, #31]
 8004a22:	e00d      	b.n	8004a40 <UART_SetConfig+0x348>
 8004a24:	2302      	movs	r3, #2
 8004a26:	77fb      	strb	r3, [r7, #31]
 8004a28:	e00a      	b.n	8004a40 <UART_SetConfig+0x348>
 8004a2a:	2304      	movs	r3, #4
 8004a2c:	77fb      	strb	r3, [r7, #31]
 8004a2e:	e007      	b.n	8004a40 <UART_SetConfig+0x348>
 8004a30:	2308      	movs	r3, #8
 8004a32:	77fb      	strb	r3, [r7, #31]
 8004a34:	e004      	b.n	8004a40 <UART_SetConfig+0x348>
 8004a36:	2310      	movs	r3, #16
 8004a38:	77fb      	strb	r3, [r7, #31]
 8004a3a:	e001      	b.n	8004a40 <UART_SetConfig+0x348>
 8004a3c:	2310      	movs	r3, #16
 8004a3e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a48:	d15b      	bne.n	8004b02 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004a4a:	7ffb      	ldrb	r3, [r7, #31]
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d828      	bhi.n	8004aa2 <UART_SetConfig+0x3aa>
 8004a50:	a201      	add	r2, pc, #4	@ (adr r2, 8004a58 <UART_SetConfig+0x360>)
 8004a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a56:	bf00      	nop
 8004a58:	08004a7d 	.word	0x08004a7d
 8004a5c:	08004a85 	.word	0x08004a85
 8004a60:	08004a8d 	.word	0x08004a8d
 8004a64:	08004aa3 	.word	0x08004aa3
 8004a68:	08004a93 	.word	0x08004a93
 8004a6c:	08004aa3 	.word	0x08004aa3
 8004a70:	08004aa3 	.word	0x08004aa3
 8004a74:	08004aa3 	.word	0x08004aa3
 8004a78:	08004a9b 	.word	0x08004a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a7c:	f7ff fa7c 	bl	8003f78 <HAL_RCC_GetPCLK1Freq>
 8004a80:	61b8      	str	r0, [r7, #24]
        break;
 8004a82:	e013      	b.n	8004aac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a84:	f7ff fa8c 	bl	8003fa0 <HAL_RCC_GetPCLK2Freq>
 8004a88:	61b8      	str	r0, [r7, #24]
        break;
 8004a8a:	e00f      	b.n	8004aac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a8c:	4b4b      	ldr	r3, [pc, #300]	@ (8004bbc <UART_SetConfig+0x4c4>)
 8004a8e:	61bb      	str	r3, [r7, #24]
        break;
 8004a90:	e00c      	b.n	8004aac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a92:	f7ff f99f 	bl	8003dd4 <HAL_RCC_GetSysClockFreq>
 8004a96:	61b8      	str	r0, [r7, #24]
        break;
 8004a98:	e008      	b.n	8004aac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a9e:	61bb      	str	r3, [r7, #24]
        break;
 8004aa0:	e004      	b.n	8004aac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	77bb      	strb	r3, [r7, #30]
        break;
 8004aaa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d074      	beq.n	8004b9c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	005a      	lsls	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	085b      	lsrs	r3, r3, #1
 8004abc:	441a      	add	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	2b0f      	cmp	r3, #15
 8004acc:	d916      	bls.n	8004afc <UART_SetConfig+0x404>
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ad4:	d212      	bcs.n	8004afc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	f023 030f 	bic.w	r3, r3, #15
 8004ade:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	085b      	lsrs	r3, r3, #1
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	89fb      	ldrh	r3, [r7, #14]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	89fa      	ldrh	r2, [r7, #14]
 8004af8:	60da      	str	r2, [r3, #12]
 8004afa:	e04f      	b.n	8004b9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	77bb      	strb	r3, [r7, #30]
 8004b00:	e04c      	b.n	8004b9c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b02:	7ffb      	ldrb	r3, [r7, #31]
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d828      	bhi.n	8004b5a <UART_SetConfig+0x462>
 8004b08:	a201      	add	r2, pc, #4	@ (adr r2, 8004b10 <UART_SetConfig+0x418>)
 8004b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0e:	bf00      	nop
 8004b10:	08004b35 	.word	0x08004b35
 8004b14:	08004b3d 	.word	0x08004b3d
 8004b18:	08004b45 	.word	0x08004b45
 8004b1c:	08004b5b 	.word	0x08004b5b
 8004b20:	08004b4b 	.word	0x08004b4b
 8004b24:	08004b5b 	.word	0x08004b5b
 8004b28:	08004b5b 	.word	0x08004b5b
 8004b2c:	08004b5b 	.word	0x08004b5b
 8004b30:	08004b53 	.word	0x08004b53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b34:	f7ff fa20 	bl	8003f78 <HAL_RCC_GetPCLK1Freq>
 8004b38:	61b8      	str	r0, [r7, #24]
        break;
 8004b3a:	e013      	b.n	8004b64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b3c:	f7ff fa30 	bl	8003fa0 <HAL_RCC_GetPCLK2Freq>
 8004b40:	61b8      	str	r0, [r7, #24]
        break;
 8004b42:	e00f      	b.n	8004b64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b44:	4b1d      	ldr	r3, [pc, #116]	@ (8004bbc <UART_SetConfig+0x4c4>)
 8004b46:	61bb      	str	r3, [r7, #24]
        break;
 8004b48:	e00c      	b.n	8004b64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b4a:	f7ff f943 	bl	8003dd4 <HAL_RCC_GetSysClockFreq>
 8004b4e:	61b8      	str	r0, [r7, #24]
        break;
 8004b50:	e008      	b.n	8004b64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b56:	61bb      	str	r3, [r7, #24]
        break;
 8004b58:	e004      	b.n	8004b64 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	77bb      	strb	r3, [r7, #30]
        break;
 8004b62:	bf00      	nop
    }

    if (pclk != 0U)
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d018      	beq.n	8004b9c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	085a      	lsrs	r2, r3, #1
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	441a      	add	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	2b0f      	cmp	r3, #15
 8004b82:	d909      	bls.n	8004b98 <UART_SetConfig+0x4a0>
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b8a:	d205      	bcs.n	8004b98 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	60da      	str	r2, [r3, #12]
 8004b96:	e001      	b.n	8004b9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ba8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3720      	adds	r7, #32
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40007c00 	.word	0x40007c00
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	00f42400 	.word	0x00f42400

08004bc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00a      	beq.n	8004bea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00a      	beq.n	8004c2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d01a      	beq.n	8004cd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cbe:	d10a      	bne.n	8004cd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	605a      	str	r2, [r3, #4]
  }
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b08c      	sub	sp, #48	@ 0x30
 8004d08:	af02      	add	r7, sp, #8
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d14:	f7fc f91a 	bl	8000f4c <HAL_GetTick>
 8004d18:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0308 	and.w	r3, r3, #8
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d12e      	bne.n	8004d86 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d30:	2200      	movs	r2, #0
 8004d32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f83b 	bl	8004db2 <UART_WaitOnFlagUntilTimeout>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d021      	beq.n	8004d86 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	e853 3f00 	ldrex	r3, [r3]
 8004d4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d56:	623b      	str	r3, [r7, #32]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	61fb      	str	r3, [r7, #28]
 8004d62:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d64:	69b9      	ldr	r1, [r7, #24]
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	e841 2300 	strex	r3, r2, [r1]
 8004d6c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e6      	bne.n	8004d42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2220      	movs	r2, #32
 8004d78:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e011      	b.n	8004daa <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3728      	adds	r7, #40	@ 0x28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b084      	sub	sp, #16
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	60f8      	str	r0, [r7, #12]
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	603b      	str	r3, [r7, #0]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc2:	e04f      	b.n	8004e64 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dca:	d04b      	beq.n	8004e64 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dcc:	f7fc f8be 	bl	8000f4c <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d302      	bcc.n	8004de2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e04e      	b.n	8004e84 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d037      	beq.n	8004e64 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2b80      	cmp	r3, #128	@ 0x80
 8004df8:	d034      	beq.n	8004e64 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b40      	cmp	r3, #64	@ 0x40
 8004dfe:	d031      	beq.n	8004e64 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	f003 0308 	and.w	r3, r3, #8
 8004e0a:	2b08      	cmp	r3, #8
 8004e0c:	d110      	bne.n	8004e30 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2208      	movs	r2, #8
 8004e14:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 f838 	bl	8004e8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2208      	movs	r2, #8
 8004e20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e029      	b.n	8004e84 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e3e:	d111      	bne.n	8004e64 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e48:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f81e 	bl	8004e8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e00f      	b.n	8004e84 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	69da      	ldr	r2, [r3, #28]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	bf0c      	ite	eq
 8004e74:	2301      	moveq	r3, #1
 8004e76:	2300      	movne	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	79fb      	ldrb	r3, [r7, #7]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d0a0      	beq.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b095      	sub	sp, #84	@ 0x54
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e9c:	e853 3f00 	ldrex	r3, [r3]
 8004ea0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ea8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004eb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004eb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004eba:	e841 2300 	strex	r3, r2, [r1]
 8004ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1e6      	bne.n	8004e94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3308      	adds	r3, #8
 8004ecc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
 8004ed4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	f023 0301 	bic.w	r3, r3, #1
 8004edc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ee6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004eec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004eee:	e841 2300 	strex	r3, r2, [r1]
 8004ef2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1e5      	bne.n	8004ec6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d118      	bne.n	8004f34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	e853 3f00 	ldrex	r3, [r3]
 8004f0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f023 0310 	bic.w	r3, r3, #16
 8004f16:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f20:	61bb      	str	r3, [r7, #24]
 8004f22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f24:	6979      	ldr	r1, [r7, #20]
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	e841 2300 	strex	r3, r2, [r1]
 8004f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e6      	bne.n	8004f02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2220      	movs	r2, #32
 8004f38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f48:	bf00      	nop
 8004f4a:	3754      	adds	r7, #84	@ 0x54
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <memset>:
 8004f54:	4402      	add	r2, r0
 8004f56:	4603      	mov	r3, r0
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d100      	bne.n	8004f5e <memset+0xa>
 8004f5c:	4770      	bx	lr
 8004f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f62:	e7f9      	b.n	8004f58 <memset+0x4>

08004f64 <__libc_init_array>:
 8004f64:	b570      	push	{r4, r5, r6, lr}
 8004f66:	4d0d      	ldr	r5, [pc, #52]	@ (8004f9c <__libc_init_array+0x38>)
 8004f68:	4c0d      	ldr	r4, [pc, #52]	@ (8004fa0 <__libc_init_array+0x3c>)
 8004f6a:	1b64      	subs	r4, r4, r5
 8004f6c:	10a4      	asrs	r4, r4, #2
 8004f6e:	2600      	movs	r6, #0
 8004f70:	42a6      	cmp	r6, r4
 8004f72:	d109      	bne.n	8004f88 <__libc_init_array+0x24>
 8004f74:	4d0b      	ldr	r5, [pc, #44]	@ (8004fa4 <__libc_init_array+0x40>)
 8004f76:	4c0c      	ldr	r4, [pc, #48]	@ (8004fa8 <__libc_init_array+0x44>)
 8004f78:	f000 f818 	bl	8004fac <_init>
 8004f7c:	1b64      	subs	r4, r4, r5
 8004f7e:	10a4      	asrs	r4, r4, #2
 8004f80:	2600      	movs	r6, #0
 8004f82:	42a6      	cmp	r6, r4
 8004f84:	d105      	bne.n	8004f92 <__libc_init_array+0x2e>
 8004f86:	bd70      	pop	{r4, r5, r6, pc}
 8004f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f8c:	4798      	blx	r3
 8004f8e:	3601      	adds	r6, #1
 8004f90:	e7ee      	b.n	8004f70 <__libc_init_array+0xc>
 8004f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f96:	4798      	blx	r3
 8004f98:	3601      	adds	r6, #1
 8004f9a:	e7f2      	b.n	8004f82 <__libc_init_array+0x1e>
 8004f9c:	08004fec 	.word	0x08004fec
 8004fa0:	08004fec 	.word	0x08004fec
 8004fa4:	08004fec 	.word	0x08004fec
 8004fa8:	08004ff0 	.word	0x08004ff0

08004fac <_init>:
 8004fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fae:	bf00      	nop
 8004fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb2:	bc08      	pop	{r3}
 8004fb4:	469e      	mov	lr, r3
 8004fb6:	4770      	bx	lr

08004fb8 <_fini>:
 8004fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fba:	bf00      	nop
 8004fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fbe:	bc08      	pop	{r3}
 8004fc0:	469e      	mov	lr, r3
 8004fc2:	4770      	bx	lr

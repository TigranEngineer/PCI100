
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002df0  080001e0  080001e0  000011e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002fd0  08002fd0  00003fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ffc  08002ffc  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002ffc  08002ffc  00003ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003004  08003004  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003004  08003004  00004004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003008  08003008  00004008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800300c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000010  0800301c  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  0800301c  00005114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c718  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b39  00000000  00000000  00011758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  00013298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c1  00000000  00000000  00013c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021158  00000000  00000000  00014451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d824  00000000  00000000  000355a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d25bf  00000000  00000000  00042dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011538c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028d0  00000000  00000000  001153d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00117ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	08002fb8 	.word	0x08002fb8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08002fb8 	.word	0x08002fb8

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000550:	f000 f97a 	bl	8000848 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f000 fbdd 	bl	8000d12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000558:	f000 f814 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 f8de 	bl	800071c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000560:	f000 f86c 	bl	800063c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000564:	f000 f8aa 	bl	80006bc <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  set_led_config();
 8000568:	f000 faea 	bl	8000b40 <set_led_config>
  while (1)
  {
    blink_led(BLINK_FREQ);
 800056c:	4b04      	ldr	r3, [pc, #16]	@ (8000580 <main+0x34>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4618      	mov	r0, r3
 8000572:	f000 fabd 	bl	8000af0 <blink_led>
    start_cli();
 8000576:	f000 fb9b 	bl	8000cb0 <start_cli>
    blink_led(BLINK_FREQ);
 800057a:	bf00      	nop
 800057c:	e7f6      	b.n	800056c <main+0x20>
 800057e:	bf00      	nop
 8000580:	20000000 	.word	0x20000000

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	@ 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	@ 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f002 fce4 	bl	8002f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	4b22      	ldr	r3, [pc, #136]	@ (8000634 <SystemClock_Config+0xb0>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	4a21      	ldr	r2, [pc, #132]	@ (8000634 <SystemClock_Config+0xb0>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <SystemClock_Config+0xb0>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000638 <SystemClock_Config+0xb4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000638 <SystemClock_Config+0xb4>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b19      	ldr	r3, [pc, #100]	@ (8000638 <SystemClock_Config+0xb4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e4:	2310      	movs	r3, #16
 80005e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e8:	2300      	movs	r3, #0
 80005ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0320 	add.w	r3, r7, #32
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 f865 	bl	80016c0 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80005fc:	f000 f950 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f001 faf4 	bl	8001c08 <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000626:	f000 f93b 	bl	80008a0 <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3750      	adds	r7, #80	@ 0x50
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000640:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000642:	4a1c      	ldr	r2, [pc, #112]	@ (80006b4 <MX_I2C1_Init+0x78>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000646:	4b1a      	ldr	r3, [pc, #104]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000648:	4a1b      	ldr	r2, [pc, #108]	@ (80006b8 <MX_I2C1_Init+0x7c>)
 800064a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800064c:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000652:	4b17      	ldr	r3, [pc, #92]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000654:	2201      	movs	r2, #1
 8000656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000658:	4b15      	ldr	r3, [pc, #84]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800065e:	4b14      	ldr	r3, [pc, #80]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000664:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066a:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000676:	480e      	ldr	r0, [pc, #56]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000678:	f000 feee 	bl	8001458 <HAL_I2C_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000682:	f000 f90d 	bl	80008a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000686:	2100      	movs	r1, #0
 8000688:	4809      	ldr	r0, [pc, #36]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800068a:	f000 ff81 	bl	8001590 <HAL_I2CEx_ConfigAnalogFilter>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000694:	f000 f904 	bl	80008a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000698:	2100      	movs	r1, #0
 800069a:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800069c:	f000 ffc3 	bl	8001626 <HAL_I2CEx_ConfigDigitalFilter>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006a6:	f000 f8fb 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	2000002c 	.word	0x2000002c
 80006b4:	40005400 	.word	0x40005400
 80006b8:	00303d5b 	.word	0x00303d5b

080006bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c0:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <MX_USART1_UART_Init+0x58>)
 80006c2:	4a15      	ldr	r2, [pc, #84]	@ (8000718 <MX_USART1_UART_Init+0x5c>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006c6:	4b13      	ldr	r3, [pc, #76]	@ (8000714 <MX_USART1_UART_Init+0x58>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_USART1_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <MX_USART1_UART_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_USART1_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <MX_USART1_UART_Init+0x58>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <MX_USART1_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_USART1_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <MX_USART1_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_USART1_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	@ (8000714 <MX_USART1_UART_Init+0x58>)
 8000700:	f001 ffb2 	bl	8002668 <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800070a:	f000 f8c9 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000080 	.word	0x20000080
 8000718:	40011000 	.word	0x40011000

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	@ 0x28
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	4b41      	ldr	r3, [pc, #260]	@ (8000838 <MX_GPIO_Init+0x11c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a40      	ldr	r2, [pc, #256]	@ (8000838 <MX_GPIO_Init+0x11c>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b3e      	ldr	r3, [pc, #248]	@ (8000838 <MX_GPIO_Init+0x11c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	4b3b      	ldr	r3, [pc, #236]	@ (8000838 <MX_GPIO_Init+0x11c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a3a      	ldr	r2, [pc, #232]	@ (8000838 <MX_GPIO_Init+0x11c>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b38      	ldr	r3, [pc, #224]	@ (8000838 <MX_GPIO_Init+0x11c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b35      	ldr	r3, [pc, #212]	@ (8000838 <MX_GPIO_Init+0x11c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a34      	ldr	r2, [pc, #208]	@ (8000838 <MX_GPIO_Init+0x11c>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b32      	ldr	r3, [pc, #200]	@ (8000838 <MX_GPIO_Init+0x11c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	4b2f      	ldr	r3, [pc, #188]	@ (8000838 <MX_GPIO_Init+0x11c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a2e      	ldr	r2, [pc, #184]	@ (8000838 <MX_GPIO_Init+0x11c>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b2c      	ldr	r3, [pc, #176]	@ (8000838 <MX_GPIO_Init+0x11c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	210c      	movs	r1, #12
 8000796:	4829      	ldr	r0, [pc, #164]	@ (800083c <MX_GPIO_Init+0x120>)
 8000798:	f000 fe2a 	bl	80013f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_ACT_LED_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 80007a2:	4827      	ldr	r0, [pc, #156]	@ (8000840 <MX_GPIO_Init+0x124>)
 80007a4:	f000 fe24 	bl	80013f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007a8:	230c      	movs	r3, #12
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4619      	mov	r1, r3
 80007be:	481f      	ldr	r0, [pc, #124]	@ (800083c <MX_GPIO_Init+0x120>)
 80007c0:	f000 fc62 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80007c4:	23fe      	movs	r3, #254	@ 0xfe
 80007c6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	481b      	ldr	r0, [pc, #108]	@ (8000844 <MX_GPIO_Init+0x128>)
 80007d8:	f000 fc56 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACT_LED_Pin */
  GPIO_InitStruct.Pin = MCU_ACT_LED_Pin;
 80007dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_ACT_LED_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	4812      	ldr	r0, [pc, #72]	@ (8000840 <MX_GPIO_Init+0x124>)
 80007f6:	f000 fc47 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000800:	2300      	movs	r3, #0
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	480b      	ldr	r0, [pc, #44]	@ (800083c <MX_GPIO_Init+0x120>)
 8000810:	f000 fc3a 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000814:	2310      	movs	r3, #16
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_GPIO_Init+0x124>)
 800082c:	f000 fc2c 	bl	8001088 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000830:	bf00      	nop
 8000832:	3728      	adds	r7, #40	@ 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40020800 	.word	0x40020800
 8000840:	40020400 	.word	0x40020400
 8000844:	40020000 	.word	0x40020000

08000848 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800084e:	463b      	mov	r3, r7
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800085a:	f000 fb9d 	bl	8000f98 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800085e:	2301      	movs	r3, #1
 8000860:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000862:	2300      	movs	r3, #0
 8000864:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800086a:	231f      	movs	r3, #31
 800086c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800086e:	2387      	movs	r3, #135	@ 0x87
 8000870:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000872:	2300      	movs	r3, #0
 8000874:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000876:	2300      	movs	r3, #0
 8000878:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800087a:	2301      	movs	r3, #1
 800087c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800087e:	2301      	movs	r3, #1
 8000880:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800088a:	463b      	mov	r3, r7
 800088c:	4618      	mov	r0, r3
 800088e:	f000 fbbb 	bl	8001008 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000892:	2004      	movs	r0, #4
 8000894:	f000 fb98 	bl	8000fc8 <HAL_MPU_Enable>

}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <Error_Handler+0x8>

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <HAL_MspInit+0x44>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b6:	4a0e      	ldr	r2, [pc, #56]	@ (80008f0 <HAL_MspInit+0x44>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008be:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <HAL_MspInit+0x44>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <HAL_MspInit+0x44>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ce:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <HAL_MspInit+0x44>)
 80008d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <HAL_MspInit+0x44>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800

080008f4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b0aa      	sub	sp, #168	@ 0xa8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	2280      	movs	r2, #128	@ 0x80
 8000912:	2100      	movs	r1, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f002 fb23 	bl	8002f60 <memset>
  if(hi2c->Instance==I2C1)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a21      	ldr	r2, [pc, #132]	@ (80009a4 <HAL_I2C_MspInit+0xb0>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d13b      	bne.n	800099c <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000924:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000928:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800092a:	2300      	movs	r3, #0
 800092c:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4618      	mov	r0, r3
 8000934:	f001 fb4e 	bl	8001fd4 <HAL_RCCEx_PeriphCLKConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800093e:	f7ff ffaf 	bl	80008a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <HAL_I2C_MspInit+0xb4>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a18      	ldr	r2, [pc, #96]	@ (80009a8 <HAL_I2C_MspInit+0xb4>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <HAL_I2C_MspInit+0xb4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800095a:	23c0      	movs	r3, #192	@ 0xc0
 800095c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000960:	2312      	movs	r3, #18
 8000962:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000972:	2304      	movs	r3, #4
 8000974:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800097c:	4619      	mov	r1, r3
 800097e:	480b      	ldr	r0, [pc, #44]	@ (80009ac <HAL_I2C_MspInit+0xb8>)
 8000980:	f000 fb82 	bl	8001088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000984:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <HAL_I2C_MspInit+0xb4>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000988:	4a07      	ldr	r2, [pc, #28]	@ (80009a8 <HAL_I2C_MspInit+0xb4>)
 800098a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800098e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000990:	4b05      	ldr	r3, [pc, #20]	@ (80009a8 <HAL_I2C_MspInit+0xb4>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800099c:	bf00      	nop
 800099e:	37a8      	adds	r7, #168	@ 0xa8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40005400 	.word	0x40005400
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020400 	.word	0x40020400

080009b0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b0aa      	sub	sp, #168	@ 0xa8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	2280      	movs	r2, #128	@ 0x80
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f002 fac5 	bl	8002f60 <memset>
  if(huart->Instance==USART1)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a21      	ldr	r2, [pc, #132]	@ (8000a60 <HAL_UART_MspInit+0xb0>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d13b      	bne.n	8000a58 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009e0:	2340      	movs	r3, #64	@ 0x40
 80009e2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009e4:	2300      	movs	r3, #0
 80009e6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 faf1 	bl	8001fd4 <HAL_RCCEx_PeriphCLKConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009f8:	f7ff ff52 	bl	80008a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009fc:	4b19      	ldr	r3, [pc, #100]	@ (8000a64 <HAL_UART_MspInit+0xb4>)
 80009fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a00:	4a18      	ldr	r2, [pc, #96]	@ (8000a64 <HAL_UART_MspInit+0xb4>)
 8000a02:	f043 0310 	orr.w	r3, r3, #16
 8000a06:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a08:	4b16      	ldr	r3, [pc, #88]	@ (8000a64 <HAL_UART_MspInit+0xb4>)
 8000a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0c:	f003 0310 	and.w	r3, r3, #16
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <HAL_UART_MspInit+0xb4>)
 8000a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a18:	4a12      	ldr	r2, [pc, #72]	@ (8000a64 <HAL_UART_MspInit+0xb4>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a20:	4b10      	ldr	r3, [pc, #64]	@ (8000a64 <HAL_UART_MspInit+0xb4>)
 8000a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a2c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a46:	2307      	movs	r3, #7
 8000a48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000a50:	4619      	mov	r1, r3
 8000a52:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <HAL_UART_MspInit+0xb8>)
 8000a54:	f000 fb18 	bl	8001088 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a58:	bf00      	nop
 8000a5a:	37a8      	adds	r7, #168	@ 0xa8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40011000 	.word	0x40011000
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020000 	.word	0x40020000

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <NMI_Handler+0x4>

08000a74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <MemManage_Handler+0x4>

08000a84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac2:	f000 f963 	bl	8000d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <SystemInit+0x20>)
 8000ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ad6:	4a05      	ldr	r2, [pc, #20]	@ (8000aec <SystemInit+0x20>)
 8000ad8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000adc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <blink_led>:
        HAL_UART_Transmit(&huart1, &rxbuf, 1, 10);
    }
}

void blink_led(const uint32_t frequency)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
    if (LED_MODE == LED_OFF) {
 8000af8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <blink_led+0x44>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d014      	beq.n	8000b2a <blink_led+0x3a>
        return;
    }
    const uint32_t current_tick = HAL_GetTick();
 8000b00:	f000 f958 	bl	8000db4 <HAL_GetTick>
 8000b04:	60f8      	str	r0, [r7, #12]
    if (current_tick >= start + frequency) {
 8000b06:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <blink_led+0x48>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d30b      	bcc.n	8000b2c <blink_led+0x3c>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 8000b14:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b18:	4808      	ldr	r0, [pc, #32]	@ (8000b3c <blink_led+0x4c>)
 8000b1a:	f000 fc82 	bl	8001422 <HAL_GPIO_TogglePin>
        start = HAL_GetTick();
 8000b1e:	f000 f949 	bl	8000db4 <HAL_GetTick>
 8000b22:	4603      	mov	r3, r0
 8000b24:	4a04      	ldr	r2, [pc, #16]	@ (8000b38 <blink_led+0x48>)
 8000b26:	6013      	str	r3, [r2, #0]
 8000b28:	e000      	b.n	8000b2c <blink_led+0x3c>
        return;
 8000b2a:	bf00      	nop
    }
}
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000108 	.word	0x20000108
 8000b38:	2000010c 	.word	0x2000010c
 8000b3c:	40020400 	.word	0x40020400

08000b40 <set_led_config>:

void set_led_config(void) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0

    uint8_t input = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	71fb      	strb	r3, [r7, #7]

    input |= (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	4853      	ldr	r0, [pc, #332]	@ (8000c9c <set_led_config+0x15c>)
 8000b4e:	f000 fc37 	bl	80013c0 <HAL_GPIO_ReadPin>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	bf0c      	ite	eq
 8000b58:	2301      	moveq	r3, #1
 8000b5a:	2300      	movne	r3, #0
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	b25a      	sxtb	r2, r3
 8000b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	b25b      	sxtb	r3, r3
 8000b68:	71fb      	strb	r3, [r7, #7]
    input |= (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)) << 1);
 8000b6a:	2102      	movs	r1, #2
 8000b6c:	484b      	ldr	r0, [pc, #300]	@ (8000c9c <set_led_config+0x15c>)
 8000b6e:	f000 fc27 	bl	80013c0 <HAL_GPIO_ReadPin>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d101      	bne.n	8000b7c <set_led_config+0x3c>
 8000b78:	2302      	movs	r3, #2
 8000b7a:	e000      	b.n	8000b7e <set_led_config+0x3e>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	b25a      	sxtb	r2, r3
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	b25b      	sxtb	r3, r3
 8000b88:	71fb      	strb	r3, [r7, #7]
    input |= (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)) << 2);
 8000b8a:	2104      	movs	r1, #4
 8000b8c:	4843      	ldr	r0, [pc, #268]	@ (8000c9c <set_led_config+0x15c>)
 8000b8e:	f000 fc17 	bl	80013c0 <HAL_GPIO_ReadPin>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d101      	bne.n	8000b9c <set_led_config+0x5c>
 8000b98:	2304      	movs	r3, #4
 8000b9a:	e000      	b.n	8000b9e <set_led_config+0x5e>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	b25a      	sxtb	r2, r3
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b25b      	sxtb	r3, r3
 8000ba8:	71fb      	strb	r3, [r7, #7]
    input |= (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)) << 3);
 8000baa:	2108      	movs	r1, #8
 8000bac:	483b      	ldr	r0, [pc, #236]	@ (8000c9c <set_led_config+0x15c>)
 8000bae:	f000 fc07 	bl	80013c0 <HAL_GPIO_ReadPin>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <set_led_config+0x7c>
 8000bb8:	2308      	movs	r3, #8
 8000bba:	e000      	b.n	8000bbe <set_led_config+0x7e>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	b25a      	sxtb	r2, r3
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	b25b      	sxtb	r3, r3
 8000bc8:	71fb      	strb	r3, [r7, #7]
    input |= (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)) << 4);
 8000bca:	2110      	movs	r1, #16
 8000bcc:	4833      	ldr	r0, [pc, #204]	@ (8000c9c <set_led_config+0x15c>)
 8000bce:	f000 fbf7 	bl	80013c0 <HAL_GPIO_ReadPin>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d101      	bne.n	8000bdc <set_led_config+0x9c>
 8000bd8:	2310      	movs	r3, #16
 8000bda:	e000      	b.n	8000bde <set_led_config+0x9e>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	b25a      	sxtb	r2, r3
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	b25b      	sxtb	r3, r3
 8000be8:	71fb      	strb	r3, [r7, #7]
    input |= (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)) << 5);
 8000bea:	2120      	movs	r1, #32
 8000bec:	482b      	ldr	r0, [pc, #172]	@ (8000c9c <set_led_config+0x15c>)
 8000bee:	f000 fbe7 	bl	80013c0 <HAL_GPIO_ReadPin>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d101      	bne.n	8000bfc <set_led_config+0xbc>
 8000bf8:	2320      	movs	r3, #32
 8000bfa:	e000      	b.n	8000bfe <set_led_config+0xbe>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	b25a      	sxtb	r2, r3
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	b25b      	sxtb	r3, r3
 8000c08:	71fb      	strb	r3, [r7, #7]
    input |= (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) << 6);
 8000c0a:	2140      	movs	r1, #64	@ 0x40
 8000c0c:	4823      	ldr	r0, [pc, #140]	@ (8000c9c <set_led_config+0x15c>)
 8000c0e:	f000 fbd7 	bl	80013c0 <HAL_GPIO_ReadPin>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d101      	bne.n	8000c1c <set_led_config+0xdc>
 8000c18:	2340      	movs	r3, #64	@ 0x40
 8000c1a:	e000      	b.n	8000c1e <set_led_config+0xde>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	b25a      	sxtb	r2, r3
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	b25b      	sxtb	r3, r3
 8000c28:	71fb      	strb	r3, [r7, #7]
    input |= (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)) << 7);
 8000c2a:	2180      	movs	r1, #128	@ 0x80
 8000c2c:	481b      	ldr	r0, [pc, #108]	@ (8000c9c <set_led_config+0x15c>)
 8000c2e:	f000 fbc7 	bl	80013c0 <HAL_GPIO_ReadPin>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d101      	bne.n	8000c3c <set_led_config+0xfc>
 8000c38:	2380      	movs	r3, #128	@ 0x80
 8000c3a:	e000      	b.n	8000c3e <set_led_config+0xfe>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	b25a      	sxtb	r2, r3
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	b25b      	sxtb	r3, r3
 8000c48:	71fb      	strb	r3, [r7, #7]
        BLINK_50,
        BLINK_100,
        BLINK_1000,
    };

    switch(input) 
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d002      	beq.n	8000c56 <set_led_config+0x116>
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d00a      	beq.n	8000c6a <set_led_config+0x12a>
 8000c54:	e013      	b.n	8000c7e <set_led_config+0x13e>
    {
        case 0:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000c56:	2201      	movs	r2, #1
 8000c58:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c5c:	4810      	ldr	r0, [pc, #64]	@ (8000ca0 <set_led_config+0x160>)
 8000c5e:	f000 fbc7 	bl	80013f0 <HAL_GPIO_WritePin>
            LED_MODE = LED_OFF;
 8000c62:	4b10      	ldr	r3, [pc, #64]	@ (8000ca4 <set_led_config+0x164>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	601a      	str	r2, [r3, #0]
            break;
 8000c68:	e014      	b.n	8000c94 <set_led_config+0x154>
        case 1:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c70:	480b      	ldr	r0, [pc, #44]	@ (8000ca0 <set_led_config+0x160>)
 8000c72:	f000 fbbd 	bl	80013f0 <HAL_GPIO_WritePin>
            LED_MODE = LED_OFF;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca4 <set_led_config+0x164>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	601a      	str	r2, [r3, #0]
            break;
 8000c7c:	e00a      	b.n	8000c94 <set_led_config+0x154>
        default:
        	LED_MODE = LED_ON;
 8000c7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <set_led_config+0x164>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
            BLINK_FREQ = fmap[input];
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	4a08      	ldr	r2, [pc, #32]	@ (8000ca8 <set_led_config+0x168>)
 8000c88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <set_led_config+0x16c>)
 8000c90:	601a      	str	r2, [r3, #0]
    }
}
 8000c92:	bf00      	nop
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40020000 	.word	0x40020000
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	20000108 	.word	0x20000108
 8000ca8:	08002fe8 	.word	0x08002fe8
 8000cac:	20000000 	.word	0x20000000

08000cb0 <start_cli>:
    }
    return (*t == '\r') ? res: -1;
}


void start_cli(void) {
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
    
    static uint8_t buf[BUFFER_SIZE] = {0};
    static uint16_t pos = 0;

    if (1) {
    	return;
 8000cb4:	bf00      	nop

        } else {
        	display_prompt_and_flush("command not found:(", buf, &pos);
        }
    }
}
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000cc4:	f7ff ff02 	bl	8000acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	@ (8000d00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cee:	f002 f93f 	bl	8002f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fc2b 	bl	800054c <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cf8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d04:	0800300c 	.word	0x0800300c
  ldr r2, =_sbss
 8000d08:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d0c:	20000114 	.word	0x20000114

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>

08000d12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d16:	2003      	movs	r0, #3
 8000d18:	f000 f90a 	bl	8000f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1c:	200f      	movs	r0, #15
 8000d1e:	f000 f805 	bl	8000d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d22:	f7ff fdc3 	bl	80008ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d34:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <HAL_InitTick+0x54>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <HAL_InitTick+0x58>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f917 	bl	8000f7e <HAL_SYSTICK_Config>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00e      	b.n	8000d78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b0f      	cmp	r3, #15
 8000d5e:	d80a      	bhi.n	8000d76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d60:	2200      	movs	r2, #0
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f000 f8ed 	bl	8000f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d6c:	4a06      	ldr	r2, [pc, #24]	@ (8000d88 <HAL_InitTick+0x5c>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e000      	b.n	8000d78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000004 	.word	0x20000004
 8000d84:	2000000c 	.word	0x2000000c
 8000d88:	20000008 	.word	0x20000008

08000d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <HAL_IncTick+0x20>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <HAL_IncTick+0x24>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a04      	ldr	r2, [pc, #16]	@ (8000db0 <HAL_IncTick+0x24>)
 8000d9e:	6013      	str	r3, [r2, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	2000000c 	.word	0x2000000c
 8000db0:	20000110 	.word	0x20000110

08000db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return uwTick;
 8000db8:	4b03      	ldr	r3, [pc, #12]	@ (8000dc8 <HAL_GetTick+0x14>)
 8000dba:	681b      	ldr	r3, [r3, #0]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000110 	.word	0x20000110

08000dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <__NVIC_SetPriorityGrouping+0x40>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000de8:	4013      	ands	r3, r2
 8000dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000df6:	4313      	orrs	r3, r2
 8000df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfa:	4a04      	ldr	r2, [pc, #16]	@ (8000e0c <__NVIC_SetPriorityGrouping+0x40>)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	60d3      	str	r3, [r2, #12]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00
 8000e10:	05fa0000 	.word	0x05fa0000

08000e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e18:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <__NVIC_GetPriorityGrouping+0x18>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	f003 0307 	and.w	r3, r3, #7
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	db0a      	blt.n	8000e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	490c      	ldr	r1, [pc, #48]	@ (8000e7c <__NVIC_SetPriority+0x4c>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	0112      	lsls	r2, r2, #4
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	440b      	add	r3, r1
 8000e54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e58:	e00a      	b.n	8000e70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4908      	ldr	r1, [pc, #32]	@ (8000e80 <__NVIC_SetPriority+0x50>)
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	3b04      	subs	r3, #4
 8000e68:	0112      	lsls	r2, r2, #4
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	761a      	strb	r2, [r3, #24]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000e100 	.word	0xe000e100
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	@ 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f1c3 0307 	rsb	r3, r3, #7
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	bf28      	it	cs
 8000ea2:	2304      	movcs	r3, #4
 8000ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	2b06      	cmp	r3, #6
 8000eac:	d902      	bls.n	8000eb4 <NVIC_EncodePriority+0x30>
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3b03      	subs	r3, #3
 8000eb2:	e000      	b.n	8000eb6 <NVIC_EncodePriority+0x32>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed6:	43d9      	mvns	r1, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	4313      	orrs	r3, r2
         );
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3724      	adds	r7, #36	@ 0x24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
	...

08000eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000efc:	d301      	bcc.n	8000f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efe:	2301      	movs	r3, #1
 8000f00:	e00f      	b.n	8000f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f02:	4a0a      	ldr	r2, [pc, #40]	@ (8000f2c <SysTick_Config+0x40>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f10:	f7ff ff8e 	bl	8000e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f14:	4b05      	ldr	r3, [pc, #20]	@ (8000f2c <SysTick_Config+0x40>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f1a:	4b04      	ldr	r3, [pc, #16]	@ (8000f2c <SysTick_Config+0x40>)
 8000f1c:	2207      	movs	r2, #7
 8000f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	e000e010 	.word	0xe000e010

08000f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff ff47 	bl	8000dcc <__NVIC_SetPriorityGrouping>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b086      	sub	sp, #24
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f58:	f7ff ff5c 	bl	8000e14 <__NVIC_GetPriorityGrouping>
 8000f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	68b9      	ldr	r1, [r7, #8]
 8000f62:	6978      	ldr	r0, [r7, #20]
 8000f64:	f7ff ff8e 	bl	8000e84 <NVIC_EncodePriority>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6e:	4611      	mov	r1, r2
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff5d 	bl	8000e30 <__NVIC_SetPriority>
}
 8000f76:	bf00      	nop
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffb0 	bl	8000eec <SysTick_Config>
 8000f8c:	4603      	mov	r3, r0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000f9c:	f3bf 8f5f 	dmb	sy
}
 8000fa0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <HAL_MPU_Disable+0x28>)
 8000fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa6:	4a06      	ldr	r2, [pc, #24]	@ (8000fc0 <HAL_MPU_Disable+0x28>)
 8000fa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fac:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000fae:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <HAL_MPU_Disable+0x2c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00
 8000fc4:	e000ed90 	.word	0xe000ed90

08000fc8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001000 <HAL_MPU_Enable+0x38>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000fda:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <HAL_MPU_Enable+0x3c>)
 8000fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fde:	4a09      	ldr	r2, [pc, #36]	@ (8001004 <HAL_MPU_Enable+0x3c>)
 8000fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fe4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe6:	f3bf 8f4f 	dsb	sy
}
 8000fea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fec:	f3bf 8f6f 	isb	sy
}
 8000ff0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed90 	.word	0xe000ed90
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	785a      	ldrb	r2, [r3, #1]
 8001014:	4b1b      	ldr	r3, [pc, #108]	@ (8001084 <HAL_MPU_ConfigRegion+0x7c>)
 8001016:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001018:	4b1a      	ldr	r3, [pc, #104]	@ (8001084 <HAL_MPU_ConfigRegion+0x7c>)
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	4a19      	ldr	r2, [pc, #100]	@ (8001084 <HAL_MPU_ConfigRegion+0x7c>)
 800101e:	f023 0301 	bic.w	r3, r3, #1
 8001022:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001024:	4a17      	ldr	r2, [pc, #92]	@ (8001084 <HAL_MPU_ConfigRegion+0x7c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	7b1b      	ldrb	r3, [r3, #12]
 8001030:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	7adb      	ldrb	r3, [r3, #11]
 8001036:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001038:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	7a9b      	ldrb	r3, [r3, #10]
 800103e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001040:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	7b5b      	ldrb	r3, [r3, #13]
 8001046:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001048:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	7b9b      	ldrb	r3, [r3, #14]
 800104e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001050:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	7bdb      	ldrb	r3, [r3, #15]
 8001056:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001058:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7a5b      	ldrb	r3, [r3, #9]
 800105e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001060:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	7a1b      	ldrb	r3, [r3, #8]
 8001066:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001068:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	7812      	ldrb	r2, [r2, #0]
 800106e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001070:	4a04      	ldr	r2, [pc, #16]	@ (8001084 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001072:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001074:	6113      	str	r3, [r2, #16]
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed90 	.word	0xe000ed90

08001088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	@ 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
 80010a6:	e169      	b.n	800137c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80010a8:	2201      	movs	r2, #1
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	f040 8158 	bne.w	8001376 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d005      	beq.n	80010de <HAL_GPIO_Init+0x56>
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d130      	bne.n	8001140 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	2203      	movs	r2, #3
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	68da      	ldr	r2, [r3, #12]
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001114:	2201      	movs	r2, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	091b      	lsrs	r3, r3, #4
 800112a:	f003 0201 	and.w	r2, r3, #1
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b03      	cmp	r3, #3
 800114a:	d017      	beq.n	800117c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d123      	bne.n	80011d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	08da      	lsrs	r2, r3, #3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3208      	adds	r2, #8
 8001190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	220f      	movs	r2, #15
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	691a      	ldr	r2, [r3, #16]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	08da      	lsrs	r2, r3, #3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3208      	adds	r2, #8
 80011ca:	69b9      	ldr	r1, [r7, #24]
 80011cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0203 	and.w	r2, r3, #3
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 80b2 	beq.w	8001376 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	4b60      	ldr	r3, [pc, #384]	@ (8001394 <HAL_GPIO_Init+0x30c>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001216:	4a5f      	ldr	r2, [pc, #380]	@ (8001394 <HAL_GPIO_Init+0x30c>)
 8001218:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800121c:	6453      	str	r3, [r2, #68]	@ 0x44
 800121e:	4b5d      	ldr	r3, [pc, #372]	@ (8001394 <HAL_GPIO_Init+0x30c>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800122a:	4a5b      	ldr	r2, [pc, #364]	@ (8001398 <HAL_GPIO_Init+0x310>)
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	3302      	adds	r3, #2
 8001232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	220f      	movs	r2, #15
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a52      	ldr	r2, [pc, #328]	@ (800139c <HAL_GPIO_Init+0x314>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d02b      	beq.n	80012ae <HAL_GPIO_Init+0x226>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a51      	ldr	r2, [pc, #324]	@ (80013a0 <HAL_GPIO_Init+0x318>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d025      	beq.n	80012aa <HAL_GPIO_Init+0x222>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a50      	ldr	r2, [pc, #320]	@ (80013a4 <HAL_GPIO_Init+0x31c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d01f      	beq.n	80012a6 <HAL_GPIO_Init+0x21e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4f      	ldr	r2, [pc, #316]	@ (80013a8 <HAL_GPIO_Init+0x320>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d019      	beq.n	80012a2 <HAL_GPIO_Init+0x21a>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4e      	ldr	r2, [pc, #312]	@ (80013ac <HAL_GPIO_Init+0x324>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d013      	beq.n	800129e <HAL_GPIO_Init+0x216>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4d      	ldr	r2, [pc, #308]	@ (80013b0 <HAL_GPIO_Init+0x328>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d00d      	beq.n	800129a <HAL_GPIO_Init+0x212>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4c      	ldr	r2, [pc, #304]	@ (80013b4 <HAL_GPIO_Init+0x32c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d007      	beq.n	8001296 <HAL_GPIO_Init+0x20e>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4b      	ldr	r2, [pc, #300]	@ (80013b8 <HAL_GPIO_Init+0x330>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d101      	bne.n	8001292 <HAL_GPIO_Init+0x20a>
 800128e:	2307      	movs	r3, #7
 8001290:	e00e      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 8001292:	2308      	movs	r3, #8
 8001294:	e00c      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 8001296:	2306      	movs	r3, #6
 8001298:	e00a      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 800129a:	2305      	movs	r3, #5
 800129c:	e008      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 800129e:	2304      	movs	r3, #4
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 80012a2:	2303      	movs	r3, #3
 80012a4:	e004      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e002      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 80012ae:	2300      	movs	r3, #0
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	f002 0203 	and.w	r2, r2, #3
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	4093      	lsls	r3, r2
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012c0:	4935      	ldr	r1, [pc, #212]	@ (8001398 <HAL_GPIO_Init+0x310>)
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	3302      	adds	r3, #2
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ce:	4b3b      	ldr	r3, [pc, #236]	@ (80013bc <HAL_GPIO_Init+0x334>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012f2:	4a32      	ldr	r2, [pc, #200]	@ (80013bc <HAL_GPIO_Init+0x334>)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f8:	4b30      	ldr	r3, [pc, #192]	@ (80013bc <HAL_GPIO_Init+0x334>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800131c:	4a27      	ldr	r2, [pc, #156]	@ (80013bc <HAL_GPIO_Init+0x334>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001322:	4b26      	ldr	r3, [pc, #152]	@ (80013bc <HAL_GPIO_Init+0x334>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001346:	4a1d      	ldr	r2, [pc, #116]	@ (80013bc <HAL_GPIO_Init+0x334>)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800134c:	4b1b      	ldr	r3, [pc, #108]	@ (80013bc <HAL_GPIO_Init+0x334>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001370:	4a12      	ldr	r2, [pc, #72]	@ (80013bc <HAL_GPIO_Init+0x334>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3301      	adds	r3, #1
 800137a:	61fb      	str	r3, [r7, #28]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	2b0f      	cmp	r3, #15
 8001380:	f67f ae92 	bls.w	80010a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3724      	adds	r7, #36	@ 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40013800 	.word	0x40013800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40020400 	.word	0x40020400
 80013a4:	40020800 	.word	0x40020800
 80013a8:	40020c00 	.word	0x40020c00
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40021400 	.word	0x40021400
 80013b4:	40021800 	.word	0x40021800
 80013b8:	40021c00 	.word	0x40021c00
 80013bc:	40013c00 	.word	0x40013c00

080013c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	887b      	ldrh	r3, [r7, #2]
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013d8:	2301      	movs	r3, #1
 80013da:	73fb      	strb	r3, [r7, #15]
 80013dc:	e001      	b.n	80013e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	807b      	strh	r3, [r7, #2]
 80013fc:	4613      	mov	r3, r2
 80013fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001400:	787b      	ldrb	r3, [r7, #1]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001406:	887a      	ldrh	r2, [r7, #2]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800140c:	e003      	b.n	8001416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800140e:	887b      	ldrh	r3, [r7, #2]
 8001410:	041a      	lsls	r2, r3, #16
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	619a      	str	r2, [r3, #24]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001422:	b480      	push	{r7}
 8001424:	b085      	sub	sp, #20
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	460b      	mov	r3, r1
 800142c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001434:	887a      	ldrh	r2, [r7, #2]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4013      	ands	r3, r2
 800143a:	041a      	lsls	r2, r3, #16
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	43d9      	mvns	r1, r3
 8001440:	887b      	ldrh	r3, [r7, #2]
 8001442:	400b      	ands	r3, r1
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	619a      	str	r2, [r3, #24]
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e08b      	b.n	8001582 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d106      	bne.n	8001484 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff fa38 	bl	80008f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2224      	movs	r2, #36	@ 0x24
 8001488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0201 	bic.w	r2, r2, #1
 800149a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d107      	bne.n	80014d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	e006      	b.n	80014e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80014de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d108      	bne.n	80014fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	e007      	b.n	800150a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001508:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6859      	ldr	r1, [r3, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b1d      	ldr	r3, [pc, #116]	@ (800158c <HAL_I2C_Init+0x134>)
 8001516:	430b      	orrs	r3, r1
 8001518:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001528:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691a      	ldr	r2, [r3, #16]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	430a      	orrs	r2, r1
 8001542:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69d9      	ldr	r1, [r3, #28]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1a      	ldr	r2, [r3, #32]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0201 	orr.w	r2, r2, #1
 8001562:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2220      	movs	r2, #32
 800156e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	02008000 	.word	0x02008000

08001590 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b20      	cmp	r3, #32
 80015a4:	d138      	bne.n	8001618 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e032      	b.n	800161a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2224      	movs	r2, #36	@ 0x24
 80015c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0201 	bic.w	r2, r2, #1
 80015d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80015e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6819      	ldr	r1, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0201 	orr.w	r2, r2, #1
 8001602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2220      	movs	r2, #32
 8001608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	e000      	b.n	800161a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001618:	2302      	movs	r3, #2
  }
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001626:	b480      	push	{r7}
 8001628:	b085      	sub	sp, #20
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b20      	cmp	r3, #32
 800163a:	d139      	bne.n	80016b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001642:	2b01      	cmp	r3, #1
 8001644:	d101      	bne.n	800164a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001646:	2302      	movs	r3, #2
 8001648:	e033      	b.n	80016b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2224      	movs	r2, #36	@ 0x24
 8001656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0201 	bic.w	r2, r2, #1
 8001668:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001678:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	4313      	orrs	r3, r2
 8001682:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0201 	orr.w	r2, r2, #1
 800169a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2220      	movs	r2, #32
 80016a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	e000      	b.n	80016b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80016b0:	2302      	movs	r3, #2
  }
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80016c8:	2300      	movs	r3, #0
 80016ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e291      	b.n	8001bfa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 8087 	beq.w	80017f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016e4:	4b96      	ldr	r3, [pc, #600]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d00c      	beq.n	800170a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016f0:	4b93      	ldr	r3, [pc, #588]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 030c 	and.w	r3, r3, #12
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d112      	bne.n	8001722 <HAL_RCC_OscConfig+0x62>
 80016fc:	4b90      	ldr	r3, [pc, #576]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001704:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001708:	d10b      	bne.n	8001722 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170a:	4b8d      	ldr	r3, [pc, #564]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d06c      	beq.n	80017f0 <HAL_RCC_OscConfig+0x130>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d168      	bne.n	80017f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e26b      	b.n	8001bfa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800172a:	d106      	bne.n	800173a <HAL_RCC_OscConfig+0x7a>
 800172c:	4b84      	ldr	r3, [pc, #528]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a83      	ldr	r2, [pc, #524]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 8001732:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	e02e      	b.n	8001798 <HAL_RCC_OscConfig+0xd8>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0x9c>
 8001742:	4b7f      	ldr	r3, [pc, #508]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a7e      	ldr	r2, [pc, #504]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 8001748:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b7c      	ldr	r3, [pc, #496]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a7b      	ldr	r2, [pc, #492]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 8001754:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e01d      	b.n	8001798 <HAL_RCC_OscConfig+0xd8>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001764:	d10c      	bne.n	8001780 <HAL_RCC_OscConfig+0xc0>
 8001766:	4b76      	ldr	r3, [pc, #472]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a75      	ldr	r2, [pc, #468]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 800176c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	4b73      	ldr	r3, [pc, #460]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a72      	ldr	r2, [pc, #456]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 8001778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	e00b      	b.n	8001798 <HAL_RCC_OscConfig+0xd8>
 8001780:	4b6f      	ldr	r3, [pc, #444]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a6e      	ldr	r2, [pc, #440]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 8001786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b6c      	ldr	r3, [pc, #432]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a6b      	ldr	r2, [pc, #428]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 8001792:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d013      	beq.n	80017c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a0:	f7ff fb08 	bl	8000db4 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a8:	f7ff fb04 	bl	8000db4 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b64      	cmp	r3, #100	@ 0x64
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e21f      	b.n	8001bfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ba:	4b61      	ldr	r3, [pc, #388]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0xe8>
 80017c6:	e014      	b.n	80017f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff faf4 	bl	8000db4 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d0:	f7ff faf0 	bl	8000db4 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	@ 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e20b      	b.n	8001bfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e2:	4b57      	ldr	r3, [pc, #348]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x110>
 80017ee:	e000      	b.n	80017f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d069      	beq.n	80018d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017fe:	4b50      	ldr	r3, [pc, #320]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 030c 	and.w	r3, r3, #12
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00b      	beq.n	8001822 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800180a:	4b4d      	ldr	r3, [pc, #308]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 030c 	and.w	r3, r3, #12
 8001812:	2b08      	cmp	r3, #8
 8001814:	d11c      	bne.n	8001850 <HAL_RCC_OscConfig+0x190>
 8001816:	4b4a      	ldr	r3, [pc, #296]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d116      	bne.n	8001850 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001822:	4b47      	ldr	r3, [pc, #284]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d005      	beq.n	800183a <HAL_RCC_OscConfig+0x17a>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d001      	beq.n	800183a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e1df      	b.n	8001bfa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183a:	4b41      	ldr	r3, [pc, #260]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	493d      	ldr	r1, [pc, #244]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 800184a:	4313      	orrs	r3, r2
 800184c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184e:	e040      	b.n	80018d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d023      	beq.n	80018a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001858:	4b39      	ldr	r3, [pc, #228]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a38      	ldr	r2, [pc, #224]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001864:	f7ff faa6 	bl	8000db4 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800186c:	f7ff faa2 	bl	8000db4 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e1bd      	b.n	8001bfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187e:	4b30      	ldr	r3, [pc, #192]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188a:	4b2d      	ldr	r3, [pc, #180]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4929      	ldr	r1, [pc, #164]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]
 800189e:	e018      	b.n	80018d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a0:	4b27      	ldr	r3, [pc, #156]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a26      	ldr	r2, [pc, #152]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 80018a6:	f023 0301 	bic.w	r3, r3, #1
 80018aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff fa82 	bl	8000db4 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b4:	f7ff fa7e 	bl	8000db4 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e199      	b.n	8001bfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d038      	beq.n	8001950 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d019      	beq.n	800191a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018e6:	4b16      	ldr	r3, [pc, #88]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 80018e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018ea:	4a15      	ldr	r2, [pc, #84]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f2:	f7ff fa5f 	bl	8000db4 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fa:	f7ff fa5b 	bl	8000db4 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e176      	b.n	8001bfa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190c:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 800190e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x23a>
 8001918:	e01a      	b.n	8001950 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800191a:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 800191c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800191e:	4a08      	ldr	r2, [pc, #32]	@ (8001940 <HAL_RCC_OscConfig+0x280>)
 8001920:	f023 0301 	bic.w	r3, r3, #1
 8001924:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001926:	f7ff fa45 	bl	8000db4 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800192c:	e00a      	b.n	8001944 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192e:	f7ff fa41 	bl	8000db4 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d903      	bls.n	8001944 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e15c      	b.n	8001bfa <HAL_RCC_OscConfig+0x53a>
 8001940:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001944:	4b91      	ldr	r3, [pc, #580]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001946:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1ee      	bne.n	800192e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80a4 	beq.w	8001aa6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800195e:	4b8b      	ldr	r3, [pc, #556]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10d      	bne.n	8001986 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	4b88      	ldr	r3, [pc, #544]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196e:	4a87      	ldr	r2, [pc, #540]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001974:	6413      	str	r3, [r2, #64]	@ 0x40
 8001976:	4b85      	ldr	r3, [pc, #532]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001982:	2301      	movs	r3, #1
 8001984:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001986:	4b82      	ldr	r3, [pc, #520]	@ (8001b90 <HAL_RCC_OscConfig+0x4d0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800198e:	2b00      	cmp	r3, #0
 8001990:	d118      	bne.n	80019c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001992:	4b7f      	ldr	r3, [pc, #508]	@ (8001b90 <HAL_RCC_OscConfig+0x4d0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a7e      	ldr	r2, [pc, #504]	@ (8001b90 <HAL_RCC_OscConfig+0x4d0>)
 8001998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800199c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800199e:	f7ff fa09 	bl	8000db4 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a6:	f7ff fa05 	bl	8000db4 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b64      	cmp	r3, #100	@ 0x64
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e120      	b.n	8001bfa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b8:	4b75      	ldr	r3, [pc, #468]	@ (8001b90 <HAL_RCC_OscConfig+0x4d0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d106      	bne.n	80019da <HAL_RCC_OscConfig+0x31a>
 80019cc:	4b6f      	ldr	r3, [pc, #444]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 80019ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d0:	4a6e      	ldr	r2, [pc, #440]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80019d8:	e02d      	b.n	8001a36 <HAL_RCC_OscConfig+0x376>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10c      	bne.n	80019fc <HAL_RCC_OscConfig+0x33c>
 80019e2:	4b6a      	ldr	r3, [pc, #424]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 80019e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019e6:	4a69      	ldr	r2, [pc, #420]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 80019e8:	f023 0301 	bic.w	r3, r3, #1
 80019ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80019ee:	4b67      	ldr	r3, [pc, #412]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 80019f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019f2:	4a66      	ldr	r2, [pc, #408]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 80019f4:	f023 0304 	bic.w	r3, r3, #4
 80019f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80019fa:	e01c      	b.n	8001a36 <HAL_RCC_OscConfig+0x376>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b05      	cmp	r3, #5
 8001a02:	d10c      	bne.n	8001a1e <HAL_RCC_OscConfig+0x35e>
 8001a04:	4b61      	ldr	r3, [pc, #388]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a08:	4a60      	ldr	r2, [pc, #384]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001a0a:	f043 0304 	orr.w	r3, r3, #4
 8001a0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a10:	4b5e      	ldr	r3, [pc, #376]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a14:	4a5d      	ldr	r2, [pc, #372]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a1c:	e00b      	b.n	8001a36 <HAL_RCC_OscConfig+0x376>
 8001a1e:	4b5b      	ldr	r3, [pc, #364]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a22:	4a5a      	ldr	r2, [pc, #360]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001a24:	f023 0301 	bic.w	r3, r3, #1
 8001a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a2a:	4b58      	ldr	r3, [pc, #352]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a2e:	4a57      	ldr	r2, [pc, #348]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001a30:	f023 0304 	bic.w	r3, r3, #4
 8001a34:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d015      	beq.n	8001a6a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3e:	f7ff f9b9 	bl	8000db4 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a44:	e00a      	b.n	8001a5c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a46:	f7ff f9b5 	bl	8000db4 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e0ce      	b.n	8001bfa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a5c:	4b4b      	ldr	r3, [pc, #300]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0ee      	beq.n	8001a46 <HAL_RCC_OscConfig+0x386>
 8001a68:	e014      	b.n	8001a94 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6a:	f7ff f9a3 	bl	8000db4 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a70:	e00a      	b.n	8001a88 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a72:	f7ff f99f 	bl	8000db4 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e0b8      	b.n	8001bfa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a88:	4b40      	ldr	r3, [pc, #256]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1ee      	bne.n	8001a72 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a94:	7dfb      	ldrb	r3, [r7, #23]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d105      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a9a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	4a3b      	ldr	r2, [pc, #236]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001aa0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aa4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 80a4 	beq.w	8001bf8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab0:	4b36      	ldr	r3, [pc, #216]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d06b      	beq.n	8001b94 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d149      	bne.n	8001b58 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac4:	4b31      	ldr	r3, [pc, #196]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a30      	ldr	r2, [pc, #192]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001aca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f970 	bl	8000db4 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff f96c 	bl	8000db4 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e087      	b.n	8001bfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aea:	4b28      	ldr	r3, [pc, #160]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69da      	ldr	r2, [r3, #28]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b04:	019b      	lsls	r3, r3, #6
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0c:	085b      	lsrs	r3, r3, #1
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	041b      	lsls	r3, r3, #16
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b18:	061b      	lsls	r3, r3, #24
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	4a1b      	ldr	r2, [pc, #108]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001b1e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001b22:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b24:	4b19      	ldr	r3, [pc, #100]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a18      	ldr	r2, [pc, #96]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001b2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b30:	f7ff f940 	bl	8000db4 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b38:	f7ff f93c 	bl	8000db4 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e057      	b.n	8001bfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4a:	4b10      	ldr	r3, [pc, #64]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0x478>
 8001b56:	e04f      	b.n	8001bf8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b58:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001b5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff f926 	bl	8000db4 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7ff f922 	bl	8000db4 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e03d      	b.n	8001bfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7e:	4b03      	ldr	r3, [pc, #12]	@ (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x4ac>
 8001b8a:	e035      	b.n	8001bf8 <HAL_RCC_OscConfig+0x538>
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001b94:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <HAL_RCC_OscConfig+0x544>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d028      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d121      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d11a      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d111      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bda:	085b      	lsrs	r3, r3, #1
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d107      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800

08001c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0d0      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c20:	4b6a      	ldr	r3, [pc, #424]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d910      	bls.n	8001c50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b67      	ldr	r3, [pc, #412]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 020f 	bic.w	r2, r3, #15
 8001c36:	4965      	ldr	r1, [pc, #404]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b63      	ldr	r3, [pc, #396]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0b8      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c68:	4b59      	ldr	r3, [pc, #356]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4a58      	ldr	r2, [pc, #352]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c80:	4b53      	ldr	r3, [pc, #332]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	4a52      	ldr	r2, [pc, #328]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c8c:	4b50      	ldr	r3, [pc, #320]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	494d      	ldr	r1, [pc, #308]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d040      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	4b47      	ldr	r3, [pc, #284]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d115      	bne.n	8001cea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e07f      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cca:	4b41      	ldr	r3, [pc, #260]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d109      	bne.n	8001cea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e073      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cda:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e06b      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cea:	4b39      	ldr	r3, [pc, #228]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f023 0203 	bic.w	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4936      	ldr	r1, [pc, #216]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cfc:	f7ff f85a 	bl	8000db4 <HAL_GetTick>
 8001d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	e00a      	b.n	8001d1a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d04:	f7ff f856 	bl	8000db4 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e053      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 020c 	and.w	r2, r3, #12
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d1eb      	bne.n	8001d04 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d2c:	4b27      	ldr	r3, [pc, #156]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d210      	bcs.n	8001d5c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3a:	4b24      	ldr	r3, [pc, #144]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 020f 	bic.w	r2, r3, #15
 8001d42:	4922      	ldr	r1, [pc, #136]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b20      	ldr	r3, [pc, #128]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e032      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d68:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4916      	ldr	r1, [pc, #88]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d009      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d86:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	490e      	ldr	r1, [pc, #56]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d9a:	f000 f821 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	490a      	ldr	r1, [pc, #40]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1cc>)
 8001dac:	5ccb      	ldrb	r3, [r1, r3]
 8001dae:	fa22 f303 	lsr.w	r3, r2, r3
 8001db2:	4a09      	ldr	r2, [pc, #36]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1d0>)
 8001db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001db6:	4b09      	ldr	r3, [pc, #36]	@ (8001ddc <HAL_RCC_ClockConfig+0x1d4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe ffb6 	bl	8000d2c <HAL_InitTick>

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40023c00 	.word	0x40023c00
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	08002fd0 	.word	0x08002fd0
 8001dd8:	20000004 	.word	0x20000004
 8001ddc:	20000008 	.word	0x20000008

08001de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de4:	b090      	sub	sp, #64	@ 0x40
 8001de6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dec:	2300      	movs	r3, #0
 8001dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001df0:	2300      	movs	r3, #0
 8001df2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001df8:	4b59      	ldr	r3, [pc, #356]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 030c 	and.w	r3, r3, #12
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d00d      	beq.n	8001e20 <HAL_RCC_GetSysClockFreq+0x40>
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	f200 80a1 	bhi.w	8001f4c <HAL_RCC_GetSysClockFreq+0x16c>
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0x34>
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d003      	beq.n	8001e1a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e12:	e09b      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e14:	4b53      	ldr	r3, [pc, #332]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e16:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e18:	e09b      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e1a:	4b53      	ldr	r3, [pc, #332]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e1e:	e098      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e20:	4b4f      	ldr	r3, [pc, #316]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e28:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e2a:	4b4d      	ldr	r3, [pc, #308]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d028      	beq.n	8001e88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e36:	4b4a      	ldr	r3, [pc, #296]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	099b      	lsrs	r3, r3, #6
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	623b      	str	r3, [r7, #32]
 8001e40:	627a      	str	r2, [r7, #36]	@ 0x24
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4b47      	ldr	r3, [pc, #284]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e4c:	fb03 f201 	mul.w	r2, r3, r1
 8001e50:	2300      	movs	r3, #0
 8001e52:	fb00 f303 	mul.w	r3, r0, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	4a43      	ldr	r2, [pc, #268]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e5a:	fba0 1202 	umull	r1, r2, r0, r2
 8001e5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e60:	460a      	mov	r2, r1
 8001e62:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001e64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e66:	4413      	add	r3, r2
 8001e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	61bb      	str	r3, [r7, #24]
 8001e70:	61fa      	str	r2, [r7, #28]
 8001e72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001e7a:	f7fe f9d1 	bl	8000220 <__aeabi_uldivmod>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4613      	mov	r3, r2
 8001e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e86:	e053      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e88:	4b35      	ldr	r3, [pc, #212]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	099b      	lsrs	r3, r3, #6
 8001e8e:	2200      	movs	r2, #0
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	617a      	str	r2, [r7, #20]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e9a:	f04f 0b00 	mov.w	fp, #0
 8001e9e:	4652      	mov	r2, sl
 8001ea0:	465b      	mov	r3, fp
 8001ea2:	f04f 0000 	mov.w	r0, #0
 8001ea6:	f04f 0100 	mov.w	r1, #0
 8001eaa:	0159      	lsls	r1, r3, #5
 8001eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eb0:	0150      	lsls	r0, r2, #5
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	ebb2 080a 	subs.w	r8, r2, sl
 8001eba:	eb63 090b 	sbc.w	r9, r3, fp
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001eca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ece:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ed2:	ebb2 0408 	subs.w	r4, r2, r8
 8001ed6:	eb63 0509 	sbc.w	r5, r3, r9
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	00eb      	lsls	r3, r5, #3
 8001ee4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ee8:	00e2      	lsls	r2, r4, #3
 8001eea:	4614      	mov	r4, r2
 8001eec:	461d      	mov	r5, r3
 8001eee:	eb14 030a 	adds.w	r3, r4, sl
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	eb45 030b 	adc.w	r3, r5, fp
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	f04f 0300 	mov.w	r3, #0
 8001f02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f06:	4629      	mov	r1, r5
 8001f08:	028b      	lsls	r3, r1, #10
 8001f0a:	4621      	mov	r1, r4
 8001f0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f10:	4621      	mov	r1, r4
 8001f12:	028a      	lsls	r2, r1, #10
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	60fa      	str	r2, [r7, #12]
 8001f20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f24:	f7fe f97c 	bl	8000220 <__aeabi_uldivmod>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001f30:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	0c1b      	lsrs	r3, r3, #16
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001f40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f48:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f4a:	e002      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f4c:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3740      	adds	r7, #64	@ 0x40
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800
 8001f64:	00f42400 	.word	0x00f42400
 8001f68:	017d7840 	.word	0x017d7840

08001f6c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f70:	4b03      	ldr	r3, [pc, #12]	@ (8001f80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000004 	.word	0x20000004

08001f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f88:	f7ff fff0 	bl	8001f6c <HAL_RCC_GetHCLKFreq>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	4b05      	ldr	r3, [pc, #20]	@ (8001fa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	0a9b      	lsrs	r3, r3, #10
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	4903      	ldr	r1, [pc, #12]	@ (8001fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f9a:	5ccb      	ldrb	r3, [r1, r3]
 8001f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	08002fe0 	.word	0x08002fe0

08001fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fb0:	f7ff ffdc 	bl	8001f6c <HAL_RCC_GetHCLKFreq>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	0b5b      	lsrs	r3, r3, #13
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	4903      	ldr	r1, [pc, #12]	@ (8001fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fc2:	5ccb      	ldrb	r3, [r1, r3]
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	08002fe0 	.word	0x08002fe0

08001fd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d012      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ff8:	4b65      	ldr	r3, [pc, #404]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	4a64      	ldr	r2, [pc, #400]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ffe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002002:	6093      	str	r3, [r2, #8]
 8002004:	4b62      	ldr	r3, [pc, #392]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200c:	4960      	ldr	r1, [pc, #384]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800200e:	4313      	orrs	r3, r2
 8002010:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800201a:	2301      	movs	r3, #1
 800201c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d017      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800202a:	4b59      	ldr	r3, [pc, #356]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800202c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002030:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002038:	4955      	ldr	r1, [pc, #340]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800203a:	4313      	orrs	r3, r2
 800203c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002044:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002048:	d101      	bne.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800204a:	2301      	movs	r3, #1
 800204c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8002056:	2301      	movs	r3, #1
 8002058:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d017      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002066:	4b4a      	ldr	r3, [pc, #296]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002068:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800206c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002074:	4946      	ldr	r1, [pc, #280]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002080:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002084:	d101      	bne.n	800208a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8002086:	2301      	movs	r3, #1
 8002088:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8002092:	2301      	movs	r3, #1
 8002094:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0320 	and.w	r3, r3, #32
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 808b 	beq.w	80021ba <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80020a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a8:	4a39      	ldr	r2, [pc, #228]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80020b0:	4b37      	ldr	r3, [pc, #220]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020bc:	4b35      	ldr	r3, [pc, #212]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a34      	ldr	r2, [pc, #208]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020c8:	f7fe fe74 	bl	8000db4 <HAL_GetTick>
 80020cc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d0:	f7fe fe70 	bl	8000db4 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	@ 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e2bc      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020ee:	4b28      	ldr	r3, [pc, #160]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d035      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	429a      	cmp	r2, r3
 800210a:	d02e      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800210c:	4b20      	ldr	r3, [pc, #128]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800210e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002110:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002114:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002116:	4b1e      	ldr	r3, [pc, #120]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211a:	4a1d      	ldr	r2, [pc, #116]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800211c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002120:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002122:	4b1b      	ldr	r3, [pc, #108]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002126:	4a1a      	ldr	r2, [pc, #104]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002128:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800212c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800212e:	4a18      	ldr	r2, [pc, #96]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002134:	4b16      	ldr	r3, [pc, #88]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b01      	cmp	r3, #1
 800213e:	d114      	bne.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7fe fe38 	bl	8000db4 <HAL_GetTick>
 8002144:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002146:	e00a      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002148:	f7fe fe34 	bl	8000db4 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002156:	4293      	cmp	r3, r2
 8002158:	d901      	bls.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e27e      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215e:	4b0c      	ldr	r3, [pc, #48]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0ee      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002172:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002176:	d111      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8002178:	4b05      	ldr	r3, [pc, #20]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002184:	4b04      	ldr	r3, [pc, #16]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002186:	400b      	ands	r3, r1
 8002188:	4901      	ldr	r1, [pc, #4]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800218a:	4313      	orrs	r3, r2
 800218c:	608b      	str	r3, [r1, #8]
 800218e:	e00b      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002190:	40023800 	.word	0x40023800
 8002194:	40007000 	.word	0x40007000
 8002198:	0ffffcff 	.word	0x0ffffcff
 800219c:	4ba4      	ldr	r3, [pc, #656]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	4aa3      	ldr	r2, [pc, #652]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021a2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80021a6:	6093      	str	r3, [r2, #8]
 80021a8:	4ba1      	ldr	r3, [pc, #644]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b4:	499e      	ldr	r1, [pc, #632]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d010      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80021c6:	4b9a      	ldr	r3, [pc, #616]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021cc:	4a98      	ldr	r2, [pc, #608]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021d6:	4b96      	ldr	r3, [pc, #600]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e0:	4993      	ldr	r1, [pc, #588]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021f4:	4b8e      	ldr	r3, [pc, #568]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021fa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002202:	498b      	ldr	r1, [pc, #556]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002216:	4b86      	ldr	r3, [pc, #536]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800221c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002224:	4982      	ldr	r1, [pc, #520]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002226:	4313      	orrs	r3, r2
 8002228:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00a      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002238:	4b7d      	ldr	r3, [pc, #500]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800223a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800223e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002246:	497a      	ldr	r1, [pc, #488]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800225a:	4b75      	ldr	r3, [pc, #468]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800225c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002260:	f023 0203 	bic.w	r2, r3, #3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002268:	4971      	ldr	r1, [pc, #452]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00a      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800227c:	4b6c      	ldr	r3, [pc, #432]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800227e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002282:	f023 020c 	bic.w	r2, r3, #12
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	4969      	ldr	r1, [pc, #420]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00a      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800229e:	4b64      	ldr	r3, [pc, #400]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80022a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ac:	4960      	ldr	r1, [pc, #384]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022c0:	4b5b      	ldr	r3, [pc, #364]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ce:	4958      	ldr	r1, [pc, #352]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00a      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022e2:	4b53      	ldr	r3, [pc, #332]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80022e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f0:	494f      	ldr	r1, [pc, #316]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00a      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002304:	4b4a      	ldr	r3, [pc, #296]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800230a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002312:	4947      	ldr	r1, [pc, #284]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002326:	4b42      	ldr	r3, [pc, #264]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800232c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002334:	493e      	ldr	r1, [pc, #248]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002348:	4b39      	ldr	r3, [pc, #228]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800234e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002356:	4936      	ldr	r1, [pc, #216]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d011      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800236a:	4b31      	ldr	r3, [pc, #196]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800236c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002370:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002378:	492d      	ldr	r1, [pc, #180]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002384:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002388:	d101      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800238a:	2301      	movs	r3, #1
 800238c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00a      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800239a:	4b25      	ldr	r3, [pc, #148]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800239c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023a8:	4921      	ldr	r1, [pc, #132]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00a      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023ca:	4919      	ldr	r1, [pc, #100]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00a      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80023de:	4b14      	ldr	r3, [pc, #80]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023ec:	4910      	ldr	r1, [pc, #64]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d006      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 809d 	beq.w	8002542 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002408:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a08      	ldr	r2, [pc, #32]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800240e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002412:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002414:	f7fe fcce 	bl	8000db4 <HAL_GetTick>
 8002418:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800241a:	e00b      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800241c:	f7fe fcca 	bl	8000db4 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	@ 0x64
 8002428:	d904      	bls.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e116      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x688>
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002434:	4b8b      	ldr	r3, [pc, #556]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1ed      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d017      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002450:	2b00      	cmp	r3, #0
 8002452:	d113      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002454:	4b83      	ldr	r3, [pc, #524]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002456:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800245a:	0e1b      	lsrs	r3, r3, #24
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	019a      	lsls	r2, r3, #6
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	061b      	lsls	r3, r3, #24
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	071b      	lsls	r3, r3, #28
 8002474:	497b      	ldr	r1, [pc, #492]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002476:	4313      	orrs	r3, r2
 8002478:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d004      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800248c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002490:	d00a      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800249a:	2b00      	cmp	r3, #0
 800249c:	d024      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024a6:	d11f      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024a8:	4b6e      	ldr	r3, [pc, #440]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80024aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024ae:	0f1b      	lsrs	r3, r3, #28
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	019a      	lsls	r2, r3, #6
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	061b      	lsls	r3, r3, #24
 80024c2:	431a      	orrs	r2, r3
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	071b      	lsls	r3, r3, #28
 80024c8:	4966      	ldr	r1, [pc, #408]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80024d0:	4b64      	ldr	r3, [pc, #400]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80024d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024d6:	f023 021f 	bic.w	r2, r3, #31
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	3b01      	subs	r3, #1
 80024e0:	4960      	ldr	r1, [pc, #384]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00d      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	019a      	lsls	r2, r3, #6
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	061b      	lsls	r3, r3, #24
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	071b      	lsls	r3, r3, #28
 8002508:	4956      	ldr	r1, [pc, #344]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800250a:	4313      	orrs	r3, r2
 800250c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002510:	4b54      	ldr	r3, [pc, #336]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a53      	ldr	r2, [pc, #332]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002516:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800251a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800251c:	f7fe fc4a 	bl	8000db4 <HAL_GetTick>
 8002520:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002524:	f7fe fc46 	bl	8000db4 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	@ 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e092      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002536:	4b4b      	ldr	r3, [pc, #300]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	2b01      	cmp	r3, #1
 8002546:	f040 8088 	bne.w	800265a <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800254a:	4b46      	ldr	r3, [pc, #280]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a45      	ldr	r2, [pc, #276]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002550:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002556:	f7fe fc2d 	bl	8000db4 <HAL_GetTick>
 800255a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800255e:	f7fe fc29 	bl	8000db4 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b64      	cmp	r3, #100	@ 0x64
 800256a:	d901      	bls.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e075      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002570:	4b3c      	ldr	r3, [pc, #240]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002578:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800257c:	d0ef      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800259a:	2b00      	cmp	r3, #0
 800259c:	d024      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d120      	bne.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80025a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ac:	0c1b      	lsrs	r3, r3, #16
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	019a      	lsls	r2, r3, #6
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	041b      	lsls	r3, r3, #16
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	061b      	lsls	r3, r3, #24
 80025c6:	4927      	ldr	r1, [pc, #156]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80025ce:	4b25      	ldr	r3, [pc, #148]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80025d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025d4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	3b01      	subs	r3, #1
 80025de:	021b      	lsls	r3, r3, #8
 80025e0:	4920      	ldr	r1, [pc, #128]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d018      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x652>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025fc:	d113      	bne.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025fe:	4b19      	ldr	r3, [pc, #100]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002604:	0e1b      	lsrs	r3, r3, #24
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	019a      	lsls	r2, r3, #6
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	041b      	lsls	r3, r3, #16
 8002618:	431a      	orrs	r2, r3
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	061b      	lsls	r3, r3, #24
 800261e:	4911      	ldr	r1, [pc, #68]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002626:	4b0f      	ldr	r3, [pc, #60]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a0e      	ldr	r2, [pc, #56]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800262c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002632:	f7fe fbbf 	bl	8000db4 <HAL_GetTick>
 8002636:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002638:	e008      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800263a:	f7fe fbbb 	bl	8000db4 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b64      	cmp	r3, #100	@ 0x64
 8002646:	d901      	bls.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e007      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800264c:	4b05      	ldr	r3, [pc, #20]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002654:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002658:	d1ef      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3720      	adds	r7, #32
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40023800 	.word	0x40023800

08002668 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e040      	b.n	80026fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fe f990 	bl	80009b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2224      	movs	r2, #36	@ 0x24
 8002694:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0201 	bic.w	r2, r2, #1
 80026a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d002      	beq.n	80026b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fa8c 	bl	8002bcc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f825 	bl	8002704 <UART_SetConfig>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e01b      	b.n	80026fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 fb0b 	bl	8002d10 <UART_CheckIdleState>
 80026fa:	4603      	mov	r3, r0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	4313      	orrs	r3, r2
 8002726:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	4ba6      	ldr	r3, [pc, #664]	@ (80029c8 <UART_SetConfig+0x2c4>)
 8002730:	4013      	ands	r3, r2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	6979      	ldr	r1, [r7, #20]
 8002738:	430b      	orrs	r3, r1
 800273a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	4313      	orrs	r3, r2
 8002760:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	430a      	orrs	r2, r1
 8002774:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a94      	ldr	r2, [pc, #592]	@ (80029cc <UART_SetConfig+0x2c8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d120      	bne.n	80027c2 <UART_SetConfig+0xbe>
 8002780:	4b93      	ldr	r3, [pc, #588]	@ (80029d0 <UART_SetConfig+0x2cc>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b03      	cmp	r3, #3
 800278c:	d816      	bhi.n	80027bc <UART_SetConfig+0xb8>
 800278e:	a201      	add	r2, pc, #4	@ (adr r2, 8002794 <UART_SetConfig+0x90>)
 8002790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002794:	080027a5 	.word	0x080027a5
 8002798:	080027b1 	.word	0x080027b1
 800279c:	080027ab 	.word	0x080027ab
 80027a0:	080027b7 	.word	0x080027b7
 80027a4:	2301      	movs	r3, #1
 80027a6:	77fb      	strb	r3, [r7, #31]
 80027a8:	e150      	b.n	8002a4c <UART_SetConfig+0x348>
 80027aa:	2302      	movs	r3, #2
 80027ac:	77fb      	strb	r3, [r7, #31]
 80027ae:	e14d      	b.n	8002a4c <UART_SetConfig+0x348>
 80027b0:	2304      	movs	r3, #4
 80027b2:	77fb      	strb	r3, [r7, #31]
 80027b4:	e14a      	b.n	8002a4c <UART_SetConfig+0x348>
 80027b6:	2308      	movs	r3, #8
 80027b8:	77fb      	strb	r3, [r7, #31]
 80027ba:	e147      	b.n	8002a4c <UART_SetConfig+0x348>
 80027bc:	2310      	movs	r3, #16
 80027be:	77fb      	strb	r3, [r7, #31]
 80027c0:	e144      	b.n	8002a4c <UART_SetConfig+0x348>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a83      	ldr	r2, [pc, #524]	@ (80029d4 <UART_SetConfig+0x2d0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d132      	bne.n	8002832 <UART_SetConfig+0x12e>
 80027cc:	4b80      	ldr	r3, [pc, #512]	@ (80029d0 <UART_SetConfig+0x2cc>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b0c      	cmp	r3, #12
 80027d8:	d828      	bhi.n	800282c <UART_SetConfig+0x128>
 80027da:	a201      	add	r2, pc, #4	@ (adr r2, 80027e0 <UART_SetConfig+0xdc>)
 80027dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e0:	08002815 	.word	0x08002815
 80027e4:	0800282d 	.word	0x0800282d
 80027e8:	0800282d 	.word	0x0800282d
 80027ec:	0800282d 	.word	0x0800282d
 80027f0:	08002821 	.word	0x08002821
 80027f4:	0800282d 	.word	0x0800282d
 80027f8:	0800282d 	.word	0x0800282d
 80027fc:	0800282d 	.word	0x0800282d
 8002800:	0800281b 	.word	0x0800281b
 8002804:	0800282d 	.word	0x0800282d
 8002808:	0800282d 	.word	0x0800282d
 800280c:	0800282d 	.word	0x0800282d
 8002810:	08002827 	.word	0x08002827
 8002814:	2300      	movs	r3, #0
 8002816:	77fb      	strb	r3, [r7, #31]
 8002818:	e118      	b.n	8002a4c <UART_SetConfig+0x348>
 800281a:	2302      	movs	r3, #2
 800281c:	77fb      	strb	r3, [r7, #31]
 800281e:	e115      	b.n	8002a4c <UART_SetConfig+0x348>
 8002820:	2304      	movs	r3, #4
 8002822:	77fb      	strb	r3, [r7, #31]
 8002824:	e112      	b.n	8002a4c <UART_SetConfig+0x348>
 8002826:	2308      	movs	r3, #8
 8002828:	77fb      	strb	r3, [r7, #31]
 800282a:	e10f      	b.n	8002a4c <UART_SetConfig+0x348>
 800282c:	2310      	movs	r3, #16
 800282e:	77fb      	strb	r3, [r7, #31]
 8002830:	e10c      	b.n	8002a4c <UART_SetConfig+0x348>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a68      	ldr	r2, [pc, #416]	@ (80029d8 <UART_SetConfig+0x2d4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d120      	bne.n	800287e <UART_SetConfig+0x17a>
 800283c:	4b64      	ldr	r3, [pc, #400]	@ (80029d0 <UART_SetConfig+0x2cc>)
 800283e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002842:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002846:	2b30      	cmp	r3, #48	@ 0x30
 8002848:	d013      	beq.n	8002872 <UART_SetConfig+0x16e>
 800284a:	2b30      	cmp	r3, #48	@ 0x30
 800284c:	d814      	bhi.n	8002878 <UART_SetConfig+0x174>
 800284e:	2b20      	cmp	r3, #32
 8002850:	d009      	beq.n	8002866 <UART_SetConfig+0x162>
 8002852:	2b20      	cmp	r3, #32
 8002854:	d810      	bhi.n	8002878 <UART_SetConfig+0x174>
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <UART_SetConfig+0x15c>
 800285a:	2b10      	cmp	r3, #16
 800285c:	d006      	beq.n	800286c <UART_SetConfig+0x168>
 800285e:	e00b      	b.n	8002878 <UART_SetConfig+0x174>
 8002860:	2300      	movs	r3, #0
 8002862:	77fb      	strb	r3, [r7, #31]
 8002864:	e0f2      	b.n	8002a4c <UART_SetConfig+0x348>
 8002866:	2302      	movs	r3, #2
 8002868:	77fb      	strb	r3, [r7, #31]
 800286a:	e0ef      	b.n	8002a4c <UART_SetConfig+0x348>
 800286c:	2304      	movs	r3, #4
 800286e:	77fb      	strb	r3, [r7, #31]
 8002870:	e0ec      	b.n	8002a4c <UART_SetConfig+0x348>
 8002872:	2308      	movs	r3, #8
 8002874:	77fb      	strb	r3, [r7, #31]
 8002876:	e0e9      	b.n	8002a4c <UART_SetConfig+0x348>
 8002878:	2310      	movs	r3, #16
 800287a:	77fb      	strb	r3, [r7, #31]
 800287c:	e0e6      	b.n	8002a4c <UART_SetConfig+0x348>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a56      	ldr	r2, [pc, #344]	@ (80029dc <UART_SetConfig+0x2d8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d120      	bne.n	80028ca <UART_SetConfig+0x1c6>
 8002888:	4b51      	ldr	r3, [pc, #324]	@ (80029d0 <UART_SetConfig+0x2cc>)
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002892:	2bc0      	cmp	r3, #192	@ 0xc0
 8002894:	d013      	beq.n	80028be <UART_SetConfig+0x1ba>
 8002896:	2bc0      	cmp	r3, #192	@ 0xc0
 8002898:	d814      	bhi.n	80028c4 <UART_SetConfig+0x1c0>
 800289a:	2b80      	cmp	r3, #128	@ 0x80
 800289c:	d009      	beq.n	80028b2 <UART_SetConfig+0x1ae>
 800289e:	2b80      	cmp	r3, #128	@ 0x80
 80028a0:	d810      	bhi.n	80028c4 <UART_SetConfig+0x1c0>
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <UART_SetConfig+0x1a8>
 80028a6:	2b40      	cmp	r3, #64	@ 0x40
 80028a8:	d006      	beq.n	80028b8 <UART_SetConfig+0x1b4>
 80028aa:	e00b      	b.n	80028c4 <UART_SetConfig+0x1c0>
 80028ac:	2300      	movs	r3, #0
 80028ae:	77fb      	strb	r3, [r7, #31]
 80028b0:	e0cc      	b.n	8002a4c <UART_SetConfig+0x348>
 80028b2:	2302      	movs	r3, #2
 80028b4:	77fb      	strb	r3, [r7, #31]
 80028b6:	e0c9      	b.n	8002a4c <UART_SetConfig+0x348>
 80028b8:	2304      	movs	r3, #4
 80028ba:	77fb      	strb	r3, [r7, #31]
 80028bc:	e0c6      	b.n	8002a4c <UART_SetConfig+0x348>
 80028be:	2308      	movs	r3, #8
 80028c0:	77fb      	strb	r3, [r7, #31]
 80028c2:	e0c3      	b.n	8002a4c <UART_SetConfig+0x348>
 80028c4:	2310      	movs	r3, #16
 80028c6:	77fb      	strb	r3, [r7, #31]
 80028c8:	e0c0      	b.n	8002a4c <UART_SetConfig+0x348>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a44      	ldr	r2, [pc, #272]	@ (80029e0 <UART_SetConfig+0x2dc>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d125      	bne.n	8002920 <UART_SetConfig+0x21c>
 80028d4:	4b3e      	ldr	r3, [pc, #248]	@ (80029d0 <UART_SetConfig+0x2cc>)
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80028e2:	d017      	beq.n	8002914 <UART_SetConfig+0x210>
 80028e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80028e8:	d817      	bhi.n	800291a <UART_SetConfig+0x216>
 80028ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028ee:	d00b      	beq.n	8002908 <UART_SetConfig+0x204>
 80028f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028f4:	d811      	bhi.n	800291a <UART_SetConfig+0x216>
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <UART_SetConfig+0x1fe>
 80028fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028fe:	d006      	beq.n	800290e <UART_SetConfig+0x20a>
 8002900:	e00b      	b.n	800291a <UART_SetConfig+0x216>
 8002902:	2300      	movs	r3, #0
 8002904:	77fb      	strb	r3, [r7, #31]
 8002906:	e0a1      	b.n	8002a4c <UART_SetConfig+0x348>
 8002908:	2302      	movs	r3, #2
 800290a:	77fb      	strb	r3, [r7, #31]
 800290c:	e09e      	b.n	8002a4c <UART_SetConfig+0x348>
 800290e:	2304      	movs	r3, #4
 8002910:	77fb      	strb	r3, [r7, #31]
 8002912:	e09b      	b.n	8002a4c <UART_SetConfig+0x348>
 8002914:	2308      	movs	r3, #8
 8002916:	77fb      	strb	r3, [r7, #31]
 8002918:	e098      	b.n	8002a4c <UART_SetConfig+0x348>
 800291a:	2310      	movs	r3, #16
 800291c:	77fb      	strb	r3, [r7, #31]
 800291e:	e095      	b.n	8002a4c <UART_SetConfig+0x348>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a2f      	ldr	r2, [pc, #188]	@ (80029e4 <UART_SetConfig+0x2e0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d125      	bne.n	8002976 <UART_SetConfig+0x272>
 800292a:	4b29      	ldr	r3, [pc, #164]	@ (80029d0 <UART_SetConfig+0x2cc>)
 800292c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002930:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002934:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002938:	d017      	beq.n	800296a <UART_SetConfig+0x266>
 800293a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800293e:	d817      	bhi.n	8002970 <UART_SetConfig+0x26c>
 8002940:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002944:	d00b      	beq.n	800295e <UART_SetConfig+0x25a>
 8002946:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800294a:	d811      	bhi.n	8002970 <UART_SetConfig+0x26c>
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <UART_SetConfig+0x254>
 8002950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002954:	d006      	beq.n	8002964 <UART_SetConfig+0x260>
 8002956:	e00b      	b.n	8002970 <UART_SetConfig+0x26c>
 8002958:	2301      	movs	r3, #1
 800295a:	77fb      	strb	r3, [r7, #31]
 800295c:	e076      	b.n	8002a4c <UART_SetConfig+0x348>
 800295e:	2302      	movs	r3, #2
 8002960:	77fb      	strb	r3, [r7, #31]
 8002962:	e073      	b.n	8002a4c <UART_SetConfig+0x348>
 8002964:	2304      	movs	r3, #4
 8002966:	77fb      	strb	r3, [r7, #31]
 8002968:	e070      	b.n	8002a4c <UART_SetConfig+0x348>
 800296a:	2308      	movs	r3, #8
 800296c:	77fb      	strb	r3, [r7, #31]
 800296e:	e06d      	b.n	8002a4c <UART_SetConfig+0x348>
 8002970:	2310      	movs	r3, #16
 8002972:	77fb      	strb	r3, [r7, #31]
 8002974:	e06a      	b.n	8002a4c <UART_SetConfig+0x348>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a1b      	ldr	r2, [pc, #108]	@ (80029e8 <UART_SetConfig+0x2e4>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d138      	bne.n	80029f2 <UART_SetConfig+0x2ee>
 8002980:	4b13      	ldr	r3, [pc, #76]	@ (80029d0 <UART_SetConfig+0x2cc>)
 8002982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002986:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800298a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800298e:	d017      	beq.n	80029c0 <UART_SetConfig+0x2bc>
 8002990:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002994:	d82a      	bhi.n	80029ec <UART_SetConfig+0x2e8>
 8002996:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800299a:	d00b      	beq.n	80029b4 <UART_SetConfig+0x2b0>
 800299c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029a0:	d824      	bhi.n	80029ec <UART_SetConfig+0x2e8>
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <UART_SetConfig+0x2aa>
 80029a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029aa:	d006      	beq.n	80029ba <UART_SetConfig+0x2b6>
 80029ac:	e01e      	b.n	80029ec <UART_SetConfig+0x2e8>
 80029ae:	2300      	movs	r3, #0
 80029b0:	77fb      	strb	r3, [r7, #31]
 80029b2:	e04b      	b.n	8002a4c <UART_SetConfig+0x348>
 80029b4:	2302      	movs	r3, #2
 80029b6:	77fb      	strb	r3, [r7, #31]
 80029b8:	e048      	b.n	8002a4c <UART_SetConfig+0x348>
 80029ba:	2304      	movs	r3, #4
 80029bc:	77fb      	strb	r3, [r7, #31]
 80029be:	e045      	b.n	8002a4c <UART_SetConfig+0x348>
 80029c0:	2308      	movs	r3, #8
 80029c2:	77fb      	strb	r3, [r7, #31]
 80029c4:	e042      	b.n	8002a4c <UART_SetConfig+0x348>
 80029c6:	bf00      	nop
 80029c8:	efff69f3 	.word	0xefff69f3
 80029cc:	40011000 	.word	0x40011000
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40004400 	.word	0x40004400
 80029d8:	40004800 	.word	0x40004800
 80029dc:	40004c00 	.word	0x40004c00
 80029e0:	40005000 	.word	0x40005000
 80029e4:	40011400 	.word	0x40011400
 80029e8:	40007800 	.word	0x40007800
 80029ec:	2310      	movs	r3, #16
 80029ee:	77fb      	strb	r3, [r7, #31]
 80029f0:	e02c      	b.n	8002a4c <UART_SetConfig+0x348>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a72      	ldr	r2, [pc, #456]	@ (8002bc0 <UART_SetConfig+0x4bc>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d125      	bne.n	8002a48 <UART_SetConfig+0x344>
 80029fc:	4b71      	ldr	r3, [pc, #452]	@ (8002bc4 <UART_SetConfig+0x4c0>)
 80029fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a02:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002a06:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002a0a:	d017      	beq.n	8002a3c <UART_SetConfig+0x338>
 8002a0c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002a10:	d817      	bhi.n	8002a42 <UART_SetConfig+0x33e>
 8002a12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a16:	d00b      	beq.n	8002a30 <UART_SetConfig+0x32c>
 8002a18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a1c:	d811      	bhi.n	8002a42 <UART_SetConfig+0x33e>
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <UART_SetConfig+0x326>
 8002a22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a26:	d006      	beq.n	8002a36 <UART_SetConfig+0x332>
 8002a28:	e00b      	b.n	8002a42 <UART_SetConfig+0x33e>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	77fb      	strb	r3, [r7, #31]
 8002a2e:	e00d      	b.n	8002a4c <UART_SetConfig+0x348>
 8002a30:	2302      	movs	r3, #2
 8002a32:	77fb      	strb	r3, [r7, #31]
 8002a34:	e00a      	b.n	8002a4c <UART_SetConfig+0x348>
 8002a36:	2304      	movs	r3, #4
 8002a38:	77fb      	strb	r3, [r7, #31]
 8002a3a:	e007      	b.n	8002a4c <UART_SetConfig+0x348>
 8002a3c:	2308      	movs	r3, #8
 8002a3e:	77fb      	strb	r3, [r7, #31]
 8002a40:	e004      	b.n	8002a4c <UART_SetConfig+0x348>
 8002a42:	2310      	movs	r3, #16
 8002a44:	77fb      	strb	r3, [r7, #31]
 8002a46:	e001      	b.n	8002a4c <UART_SetConfig+0x348>
 8002a48:	2310      	movs	r3, #16
 8002a4a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a54:	d15b      	bne.n	8002b0e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002a56:	7ffb      	ldrb	r3, [r7, #31]
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d828      	bhi.n	8002aae <UART_SetConfig+0x3aa>
 8002a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a64 <UART_SetConfig+0x360>)
 8002a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a62:	bf00      	nop
 8002a64:	08002a89 	.word	0x08002a89
 8002a68:	08002a91 	.word	0x08002a91
 8002a6c:	08002a99 	.word	0x08002a99
 8002a70:	08002aaf 	.word	0x08002aaf
 8002a74:	08002a9f 	.word	0x08002a9f
 8002a78:	08002aaf 	.word	0x08002aaf
 8002a7c:	08002aaf 	.word	0x08002aaf
 8002a80:	08002aaf 	.word	0x08002aaf
 8002a84:	08002aa7 	.word	0x08002aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a88:	f7ff fa7c 	bl	8001f84 <HAL_RCC_GetPCLK1Freq>
 8002a8c:	61b8      	str	r0, [r7, #24]
        break;
 8002a8e:	e013      	b.n	8002ab8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a90:	f7ff fa8c 	bl	8001fac <HAL_RCC_GetPCLK2Freq>
 8002a94:	61b8      	str	r0, [r7, #24]
        break;
 8002a96:	e00f      	b.n	8002ab8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a98:	4b4b      	ldr	r3, [pc, #300]	@ (8002bc8 <UART_SetConfig+0x4c4>)
 8002a9a:	61bb      	str	r3, [r7, #24]
        break;
 8002a9c:	e00c      	b.n	8002ab8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a9e:	f7ff f99f 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8002aa2:	61b8      	str	r0, [r7, #24]
        break;
 8002aa4:	e008      	b.n	8002ab8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002aaa:	61bb      	str	r3, [r7, #24]
        break;
 8002aac:	e004      	b.n	8002ab8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	77bb      	strb	r3, [r7, #30]
        break;
 8002ab6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d074      	beq.n	8002ba8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	005a      	lsls	r2, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	085b      	lsrs	r3, r3, #1
 8002ac8:	441a      	add	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	2b0f      	cmp	r3, #15
 8002ad8:	d916      	bls.n	8002b08 <UART_SetConfig+0x404>
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ae0:	d212      	bcs.n	8002b08 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	f023 030f 	bic.w	r3, r3, #15
 8002aea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	085b      	lsrs	r3, r3, #1
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	89fb      	ldrh	r3, [r7, #14]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	89fa      	ldrh	r2, [r7, #14]
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	e04f      	b.n	8002ba8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	77bb      	strb	r3, [r7, #30]
 8002b0c:	e04c      	b.n	8002ba8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b0e:	7ffb      	ldrb	r3, [r7, #31]
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d828      	bhi.n	8002b66 <UART_SetConfig+0x462>
 8002b14:	a201      	add	r2, pc, #4	@ (adr r2, 8002b1c <UART_SetConfig+0x418>)
 8002b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1a:	bf00      	nop
 8002b1c:	08002b41 	.word	0x08002b41
 8002b20:	08002b49 	.word	0x08002b49
 8002b24:	08002b51 	.word	0x08002b51
 8002b28:	08002b67 	.word	0x08002b67
 8002b2c:	08002b57 	.word	0x08002b57
 8002b30:	08002b67 	.word	0x08002b67
 8002b34:	08002b67 	.word	0x08002b67
 8002b38:	08002b67 	.word	0x08002b67
 8002b3c:	08002b5f 	.word	0x08002b5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b40:	f7ff fa20 	bl	8001f84 <HAL_RCC_GetPCLK1Freq>
 8002b44:	61b8      	str	r0, [r7, #24]
        break;
 8002b46:	e013      	b.n	8002b70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b48:	f7ff fa30 	bl	8001fac <HAL_RCC_GetPCLK2Freq>
 8002b4c:	61b8      	str	r0, [r7, #24]
        break;
 8002b4e:	e00f      	b.n	8002b70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b50:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc8 <UART_SetConfig+0x4c4>)
 8002b52:	61bb      	str	r3, [r7, #24]
        break;
 8002b54:	e00c      	b.n	8002b70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b56:	f7ff f943 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8002b5a:	61b8      	str	r0, [r7, #24]
        break;
 8002b5c:	e008      	b.n	8002b70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b62:	61bb      	str	r3, [r7, #24]
        break;
 8002b64:	e004      	b.n	8002b70 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	77bb      	strb	r3, [r7, #30]
        break;
 8002b6e:	bf00      	nop
    }

    if (pclk != 0U)
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d018      	beq.n	8002ba8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	085a      	lsrs	r2, r3, #1
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	441a      	add	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	2b0f      	cmp	r3, #15
 8002b8e:	d909      	bls.n	8002ba4 <UART_SetConfig+0x4a0>
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b96:	d205      	bcs.n	8002ba4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	e001      	b.n	8002ba8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002bb4:	7fbb      	ldrb	r3, [r7, #30]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3720      	adds	r7, #32
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40007c00 	.word	0x40007c00
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	00f42400 	.word	0x00f42400

08002bcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01a      	beq.n	8002ce2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cca:	d10a      	bne.n	8002ce2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]
  }
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08c      	sub	sp, #48	@ 0x30
 8002d14:	af02      	add	r7, sp, #8
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d20:	f7fe f848 	bl	8000db4 <HAL_GetTick>
 8002d24:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d12e      	bne.n	8002d92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f83b 	bl	8002dbe <UART_WaitOnFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d021      	beq.n	8002d92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	e853 3f00 	ldrex	r3, [r3]
 8002d5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d62:	623b      	str	r3, [r7, #32]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	61fb      	str	r3, [r7, #28]
 8002d6e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d70:	69b9      	ldr	r1, [r7, #24]
 8002d72:	69fa      	ldr	r2, [r7, #28]
 8002d74:	e841 2300 	strex	r3, r2, [r1]
 8002d78:	617b      	str	r3, [r7, #20]
   return(result);
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1e6      	bne.n	8002d4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e011      	b.n	8002db6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2220      	movs	r2, #32
 8002d96:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3728      	adds	r7, #40	@ 0x28
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	603b      	str	r3, [r7, #0]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dce:	e04f      	b.n	8002e70 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd6:	d04b      	beq.n	8002e70 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd8:	f7fd ffec 	bl	8000db4 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d302      	bcc.n	8002dee <UART_WaitOnFlagUntilTimeout+0x30>
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e04e      	b.n	8002e90 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d037      	beq.n	8002e70 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b80      	cmp	r3, #128	@ 0x80
 8002e04:	d034      	beq.n	8002e70 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b40      	cmp	r3, #64	@ 0x40
 8002e0a:	d031      	beq.n	8002e70 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d110      	bne.n	8002e3c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2208      	movs	r2, #8
 8002e20:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f838 	bl	8002e98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2208      	movs	r2, #8
 8002e2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e029      	b.n	8002e90 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e4a:	d111      	bne.n	8002e70 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e54:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f81e 	bl	8002e98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e00f      	b.n	8002e90 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	69da      	ldr	r2, [r3, #28]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	bf0c      	ite	eq
 8002e80:	2301      	moveq	r3, #1
 8002e82:	2300      	movne	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	461a      	mov	r2, r3
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d0a0      	beq.n	8002dd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b095      	sub	sp, #84	@ 0x54
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea8:	e853 3f00 	ldrex	r3, [r3]
 8002eac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002eb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ebe:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ec0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ec4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ec6:	e841 2300 	strex	r3, r2, [r1]
 8002eca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1e6      	bne.n	8002ea0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	3308      	adds	r3, #8
 8002ed8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	e853 3f00 	ldrex	r3, [r3]
 8002ee0:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	3308      	adds	r3, #8
 8002ef0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ef2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ef8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002efa:	e841 2300 	strex	r3, r2, [r1]
 8002efe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1e5      	bne.n	8002ed2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d118      	bne.n	8002f40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	e853 3f00 	ldrex	r3, [r3]
 8002f1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f023 0310 	bic.w	r3, r3, #16
 8002f22:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f30:	6979      	ldr	r1, [r7, #20]
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	e841 2300 	strex	r3, r2, [r1]
 8002f38:	613b      	str	r3, [r7, #16]
   return(result);
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1e6      	bne.n	8002f0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002f54:	bf00      	nop
 8002f56:	3754      	adds	r7, #84	@ 0x54
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <memset>:
 8002f60:	4402      	add	r2, r0
 8002f62:	4603      	mov	r3, r0
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d100      	bne.n	8002f6a <memset+0xa>
 8002f68:	4770      	bx	lr
 8002f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f6e:	e7f9      	b.n	8002f64 <memset+0x4>

08002f70 <__libc_init_array>:
 8002f70:	b570      	push	{r4, r5, r6, lr}
 8002f72:	4d0d      	ldr	r5, [pc, #52]	@ (8002fa8 <__libc_init_array+0x38>)
 8002f74:	4c0d      	ldr	r4, [pc, #52]	@ (8002fac <__libc_init_array+0x3c>)
 8002f76:	1b64      	subs	r4, r4, r5
 8002f78:	10a4      	asrs	r4, r4, #2
 8002f7a:	2600      	movs	r6, #0
 8002f7c:	42a6      	cmp	r6, r4
 8002f7e:	d109      	bne.n	8002f94 <__libc_init_array+0x24>
 8002f80:	4d0b      	ldr	r5, [pc, #44]	@ (8002fb0 <__libc_init_array+0x40>)
 8002f82:	4c0c      	ldr	r4, [pc, #48]	@ (8002fb4 <__libc_init_array+0x44>)
 8002f84:	f000 f818 	bl	8002fb8 <_init>
 8002f88:	1b64      	subs	r4, r4, r5
 8002f8a:	10a4      	asrs	r4, r4, #2
 8002f8c:	2600      	movs	r6, #0
 8002f8e:	42a6      	cmp	r6, r4
 8002f90:	d105      	bne.n	8002f9e <__libc_init_array+0x2e>
 8002f92:	bd70      	pop	{r4, r5, r6, pc}
 8002f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f98:	4798      	blx	r3
 8002f9a:	3601      	adds	r6, #1
 8002f9c:	e7ee      	b.n	8002f7c <__libc_init_array+0xc>
 8002f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa2:	4798      	blx	r3
 8002fa4:	3601      	adds	r6, #1
 8002fa6:	e7f2      	b.n	8002f8e <__libc_init_array+0x1e>
 8002fa8:	08003004 	.word	0x08003004
 8002fac:	08003004 	.word	0x08003004
 8002fb0:	08003004 	.word	0x08003004
 8002fb4:	08003008 	.word	0x08003008

08002fb8 <_init>:
 8002fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fba:	bf00      	nop
 8002fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fbe:	bc08      	pop	{r3}
 8002fc0:	469e      	mov	lr, r3
 8002fc2:	4770      	bx	lr

08002fc4 <_fini>:
 8002fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc6:	bf00      	nop
 8002fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fca:	bc08      	pop	{r3}
 8002fcc:	469e      	mov	lr, r3
 8002fce:	4770      	bx	lr
